!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!E[e]||!_[e])return;for(var n in _[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(m[n]=t[n]);0==--v&&0===y&&C()}(e,n),t&&t(e,n)};var n,r=!0,i="94ae864fd3a9f35d9576",o=1e4,a={},l=[],s=[];function u(e){var t=k[e];if(!t)return O;var r=function(r){return t.hot.active?(k[r]?-1===k[r].parents.indexOf(e)&&k[r].parents.push(e):(l=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),l=[]),O(r)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return O[e]},set:function(t){O[e]=t}}};for(var o in O)Object.prototype.hasOwnProperty.call(O,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(e){return"ready"===d&&p("prepare"),y++,O.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===d&&(b[e]||x(e),0===y&&0===v&&C())}},r.t=function(e,t){return 1&t&&(e=r(e)),O.t(e,-2&t)},r}function c(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:w,apply:S,status:function(e){if(!e)return d;f.push(e)},addStatusHandler:function(e){f.push(e)},removeStatusHandler:function(e){var t=f.indexOf(e);t>=0&&f.splice(t,1)},data:a[e]};return n=void 0,t}var f=[],d="idle";function p(e){d=e;for(var t=0;t<f.length;t++)f[t].call(null,e)}var h,m,g,v=0,y=0,b={},_={},E={};function T(e){return+e+""===e?+e:e}function w(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(t=o,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=O.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return p("idle"),null;_={},b={},E=e.c,g=e.h,p("prepare");var t=new Promise(function(e,t){h={resolve:e,reject:t}});m={};return x(0),"prepare"===d&&0===y&&0===v&&C(),t});var t}function x(e){E[e]?(_[e]=!0,v++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=O.p+""+e+"."+i+".hot-update.js",document.head.appendChild(t)}(e)):b[e]=!0}function C(){p("ready");var e=h;if(h=null,e)if(r)Promise.resolve().then(function(){return S(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in m)Object.prototype.hasOwnProperty.call(m,n)&&t.push(T(n));e.resolve(t)}}function S(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var n,r,o,s,u;function c(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var i=r.pop(),o=i.id,a=i.chain;if((s=k[o])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var l=0;l<s.parents.length;l++){var u=s.parents[l],c=k[u];if(c){if(c.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([u]),moduleId:o,parentId:u};-1===t.indexOf(u)&&(c.hot._acceptedDependencies[o]?(n[u]||(n[u]=[]),f(n[u],[o])):(delete n[u],t.push(u),r.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var h={},v=[],y={},b=function(){console.warn("[HMR] unexpected require("+w.moduleId+") to disposed module")};for(var _ in m)if(Object.prototype.hasOwnProperty.call(m,_)){var w;u=T(_);var x=!1,C=!1,S=!1,N="";switch((w=m[_]?c(u):{type:"disposed",moduleId:_}).chain&&(N="\nUpdate propagation: "+w.chain.join(" -> ")),w.type){case"self-declined":t.onDeclined&&t.onDeclined(w),t.ignoreDeclined||(x=new Error("Aborted because of self decline: "+w.moduleId+N));break;case"declined":t.onDeclined&&t.onDeclined(w),t.ignoreDeclined||(x=new Error("Aborted because of declined dependency: "+w.moduleId+" in "+w.parentId+N));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(w),t.ignoreUnaccepted||(x=new Error("Aborted because "+u+" is not accepted"+N));break;case"accepted":t.onAccepted&&t.onAccepted(w),C=!0;break;case"disposed":t.onDisposed&&t.onDisposed(w),S=!0;break;default:throw new Error("Unexception type "+w.type)}if(x)return p("abort"),Promise.reject(x);if(C)for(u in y[u]=m[u],f(v,w.outdatedModules),w.outdatedDependencies)Object.prototype.hasOwnProperty.call(w.outdatedDependencies,u)&&(h[u]||(h[u]=[]),f(h[u],w.outdatedDependencies[u]));S&&(f(v,[w.moduleId]),y[u]=b)}var A,D=[];for(r=0;r<v.length;r++)u=v[r],k[u]&&k[u].hot._selfAccepted&&D.push({module:u,errorHandler:k[u].hot._selfAccepted});p("dispose"),Object.keys(E).forEach(function(e){!1===E[e]&&function(e){delete installedChunks[e]}(e)});for(var I,P,L=v.slice();L.length>0;)if(u=L.pop(),s=k[u]){var R={},j=s.hot._disposeHandlers;for(o=0;o<j.length;o++)(n=j[o])(R);for(a[u]=R,s.hot.active=!1,delete k[u],delete h[u],o=0;o<s.children.length;o++){var H=k[s.children[o]];H&&((A=H.parents.indexOf(u))>=0&&H.parents.splice(A,1))}}for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(s=k[u]))for(P=h[u],o=0;o<P.length;o++)I=P[o],(A=s.children.indexOf(I))>=0&&s.children.splice(A,1);for(u in p("apply"),i=g,y)Object.prototype.hasOwnProperty.call(y,u)&&(e[u]=y[u]);var M=null;for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(s=k[u])){P=h[u];var F=[];for(r=0;r<P.length;r++)if(I=P[r],n=s.hot._acceptedDependencies[I]){if(-1!==F.indexOf(n))continue;F.push(n)}for(r=0;r<F.length;r++){n=F[r];try{n(P)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:P[r],error:e}),t.ignoreErrored||M||(M=e)}}}for(r=0;r<D.length;r++){var U=D[r];u=U.module,l=[u];try{O(u)}catch(e){if("function"==typeof U.errorHandler)try{U.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||M||(M=n),M||(M=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||M||(M=e)}}return M?(p("fail"),Promise.reject(M)):(p("idle"),new Promise(function(e){e(v)}))}var k={};function O(t){if(k[t])return k[t].exports;var n=k[t]={i:t,l:!1,exports:{},hot:c(t),parents:(s=l,l=[],s),children:[]};return e[t].call(n.exports,n,n.exports,u(t)),n.l=!0,n.exports}O.m=e,O.c=k,O.d=function(e,t,n){O.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},O.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},O.t=function(e,t){if(1&t&&(e=O(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(O.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)O.d(n,r,function(t){return e[t]}.bind(null,r));return n},O.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return O.d(t,"a",t),t},O.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},O.p="/",O.h=function(){return i},u(5)(O.s=5)}([function(e,t,n){"use strict";e.exports=n(6)},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,i){"use strict";var o=[],a=n.document,l=Object.getPrototypeOf,s=o.slice,u=o.concat,c=o.push,f=o.indexOf,d={},p=d.toString,h=d.hasOwnProperty,m=h.toString,g=m.call(Object),v={};function y(e,t){var n=(t=t||a).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}var b=function(e,t){return new b.fn.init(e,t)},_=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,E=/^-ms-/,T=/-([a-z])/g,w=function(e,t){return t.toUpperCase()};function x(e){var t=!!e&&"length"in e&&e.length,n=b.type(e);return"function"!==n&&!b.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}b.fn=b.prototype={jquery:"3.2.1",constructor:b,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return b.each(this,e)},map:function(e){return this.pushStack(b.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},b.extend=b.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},l=1,s=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[l]||{},l++),"object"==typeof a||b.isFunction(a)||(a={}),l===s&&(a=this,l--);l<s;l++)if(null!=(e=arguments[l]))for(t in e)n=a[t],a!==(r=e[t])&&(u&&r&&(b.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&b.isPlainObject(n)?n:{},a[t]=b.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},b.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===b.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=b.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e))&&(!(t=l(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&m.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e},globalEval:function(e){y(e)},camelCase:function(e){return e.replace(E,"ms-").replace(T,w)},each:function(e,t){var n,r=0;if(x(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(_,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(x(Object(e))?b.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(x(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return u.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),b.isFunction(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||b.guid++,i},now:Date.now,support:v}),"function"==typeof Symbol&&(b.fn[Symbol.iterator]=o[Symbol.iterator]),b.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){d["[object "+t+"]"]=t.toLowerCase()});var C=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,r,i,o,a,l,s,u,c,f,d,p,h,m,g,v,y,b,_="sizzle"+1*new Date,E=e.document,T=0,w=0,x=ae(),C=ae(),S=ae(),k=function(e,t){return e===t&&(f=!0),0},O={}.hasOwnProperty,N=[],A=N.pop,D=N.push,I=N.push,P=N.slice,L=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",M="\\["+j+"*("+H+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+j+"*\\]",F=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",U=new RegExp(j+"+","g"),W=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),V=new RegExp("^"+j+"*,"+j+"*"),B=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),z=new RegExp("="+j+"*([^\\]'\"]*?)"+j+"*\\]","g"),q=new RegExp(F),G=new RegExp("^"+H+"$"),$={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+j+"?|("+j+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){d()},ie=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{I.apply(N=P.call(E.childNodes),E.childNodes),N[E.childNodes.length].nodeType}catch(e){I={apply:N.length?function(e,t){D.apply(e,P.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function oe(e,t,r,i){var o,l,u,c,f,h,v,y=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&((t?t.ownerDocument||t:E)!==p&&d(t),t=t||p,m)){if(11!==T&&(f=X.exec(e)))if(o=f[1]){if(9===T){if(!(u=t.getElementById(o)))return r;if(u.id===o)return r.push(u),r}else if(y&&(u=y.getElementById(o))&&b(t,u)&&u.id===o)return r.push(u),r}else{if(f[2])return I.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!g||!g.test(e))){if(1!==T)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=_),l=(h=a(e)).length;l--;)h[l]="#"+c+" "+ve(h[l]);v=h.join(","),y=J.test(e)&&me(t.parentNode)||t}if(v)try{return I.apply(r,y.querySelectorAll(v)),r}catch(e){}finally{c===_&&t.removeAttribute("id")}}}return s(e.replace(W,"$1"),t,r,i)}function ae(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function le(e){return e[_]=!0,e}function se(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return le(function(t){return t=+t,le(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},d=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:E;return a!==p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,m=!o(p),E!==p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=se(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=se(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Y.test(p.getElementsByClassName),n.getById=se(function(e){return h.appendChild(e).id=_,!p.getElementsByName||!p.getElementsByName(_).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=Y.test(p.querySelectorAll))&&(se(function(e){h.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+j+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+j+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+_+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||g.push(".#.+[+~]")}),se(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+j+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=Y.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&se(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",F)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Y.test(h.compareDocumentPosition),b=t||Y.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},k=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===p||e.ownerDocument===E&&b(E,e)?-1:t===p||t.ownerDocument===E&&b(E,t)?1:c?L(c,e)-L(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],l=[t];if(!i||!o)return e===p?-1:t===p?1:i?-1:o?1:c?L(c,e)-L(c,t):0;if(i===o)return ce(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[r]===l[r];)r++;return r?ce(a[r],l[r]):a[r]===E?-1:l[r]===E?1:0},p):p},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&d(e),t=t.replace(z,"='$1']"),n.matchesSelector&&m&&!S[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,p,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==p&&d(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==p&&d(e);var i=r.attrHandle[t.toLowerCase()],o=i&&O.call(r.attrHandle,t.toLowerCase())?i(e,t,!m):void 0;return void 0!==o?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(k),f){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return c=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:le,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&q.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|"+j+")"+e+"("+j+"|$)"))&&x(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(U," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,s){var u,c,f,d,p,h,m=o!==a?"nextSibling":"previousSibling",g=t.parentNode,v=l&&t.nodeName.toLowerCase(),y=!s&&!l,b=!1;if(g){if(o){for(;m;){for(d=t;d=d[m];)if(l?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(b=(p=(u=(c=(f=(d=g)[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===T&&u[1])&&u[2],d=p&&g.childNodes[p];d=++p&&d&&d[m]||(b=p=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){c[e]=[T,p,b];break}}else if(y&&(b=p=(u=(c=(f=(d=t)[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===T&&u[1]),!1===b)for(;(d=++p&&d&&d[m]||(b=p=0)||h.pop())&&((l?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(y&&((c=(f=d[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[T,b]),d!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[_]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=L(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:le(function(e){var t=[],n=[],r=l(e.replace(W,"$1"));return r[_]?le(function(e,t,n,i){for(var o,a=r(e,null,i,[]),l=e.length;l--;)(o=a[l])&&(e[l]=!(t[l]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:le(function(e){return function(t){return oe(e,t).length>0}}),contains:le(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:le(function(e){return G.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=de(t);function ge(){}function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,l=w++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,s){var u,c,f,d=[T,l];if(s){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(c=(f=t[_]||(t[_]={}))[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=c[o])&&u[0]===T&&u[1]===l)return d[2]=u[2];if(c[o]=d,d[2]=e(t,n,s))return!0}return!1}}function be(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function _e(e,t,n,r,i){for(var o,a=[],l=0,s=e.length,u=null!=t;l<s;l++)(o=e[l])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(l)));return a}function Ee(e,t,n,r,i,o){return r&&!r[_]&&(r=Ee(r)),i&&!i[_]&&(i=Ee(i,o)),le(function(o,a,l,s){var u,c,f,d=[],p=[],h=a.length,m=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}(t||"*",l.nodeType?[l]:l,[]),g=!e||!o&&t?m:_e(m,d,e,l,s),v=n?i||(o?e:h||r)?[]:a:g;if(n&&n(g,v,l,s),r)for(u=_e(v,p),r(u,[],l,s),c=u.length;c--;)(f=u[c])&&(v[p[c]]=!(g[p[c]]=f));if(o){if(i||e){if(i){for(u=[],c=v.length;c--;)(f=v[c])&&u.push(g[c]=f);i(null,v=[],u,s)}for(c=v.length;c--;)(f=v[c])&&(u=i?L(o,f):d[c])>-1&&(o[u]=!(a[u]=f))}}else v=_e(v===a?v.splice(h,v.length):v),i?i(null,a,v,s):I.apply(a,v)})}function Te(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],l=a||r.relative[" "],s=a?1:0,c=ye(function(e){return e===t},l,!0),f=ye(function(e){return L(t,e)>-1},l,!0),d=[function(e,n,r){var i=!a&&(r||n!==u)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,i}];s<o;s++)if(n=r.relative[e[s].type])d=[ye(be(d),n)];else{if((n=r.filter[e[s].type].apply(null,e[s].matches))[_]){for(i=++s;i<o&&!r.relative[e[i].type];i++);return Ee(s>1&&be(d),s>1&&ve(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(W,"$1"),n,s<i&&Te(e.slice(s,i)),i<o&&Te(e=e.slice(i)),i<o&&ve(e))}d.push(n)}return be(d)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,a=oe.tokenize=function(e,t){var n,i,o,a,l,s,u,c=C[e+" "];if(c)return t?0:c.slice(0);for(l=e,s=[],u=r.preFilter;l;){for(a in n&&!(i=V.exec(l))||(i&&(l=l.slice(i[0].length)||l),s.push(o=[])),n=!1,(i=B.exec(l))&&(n=i.shift(),o.push({value:n,type:i[0].replace(W," ")}),l=l.slice(n.length)),r.filter)!(i=$[a].exec(l))||u[a]&&!(i=u[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),l=l.slice(n.length));if(!n)break}return t?l.length:l?oe.error(e):C(e,s).slice(0)},l=oe.compile=function(e,t){var n,i=[],o=[],l=S[e+" "];if(!l){for(t||(t=a(e)),n=t.length;n--;)(l=Te(t[n]))[_]?i.push(l):o.push(l);(l=S(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,l,s,c){var f,h,g,v=0,y="0",b=o&&[],_=[],E=u,w=o||i&&r.find.TAG("*",c),x=T+=null==E?1:Math.random()||.1,C=w.length;for(c&&(u=a===p||a||c);y!==C&&null!=(f=w[y]);y++){if(i&&f){for(h=0,a||f.ownerDocument===p||(d(f),l=!m);g=e[h++];)if(g(f,a||p,l)){s.push(f);break}c&&(T=x)}n&&((f=!g&&f)&&v--,o&&b.push(f))}if(v+=y,n&&y!==v){for(h=0;g=t[h++];)g(b,_,a,l);if(o){if(v>0)for(;y--;)b[y]||_[y]||(_[y]=A.call(s));_=_e(_)}I.apply(s,_),c&&!o&&_.length>0&&v+t.length>1&&oe.uniqueSort(s)}return c&&(T=x,u=E),b};return n?le(o):o}(o,i))).selector=e}return l},s=oe.select=function(e,t,n,i){var o,s,u,c,f,d="function"==typeof e&&e,p=!i&&a(e=d.selector||e);if(n=n||[],1===p.length){if((s=p[0]=p[0].slice(0)).length>2&&"ID"===(u=s[0]).type&&9===t.nodeType&&m&&r.relative[s[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(Z,ee),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(s.shift().value.length)}for(o=$.needsContext.test(e)?0:s.length;o--&&(u=s[o],!r.relative[c=u.type]);)if((f=r.find[c])&&(i=f(u.matches[0].replace(Z,ee),J.test(s[0].type)&&me(t.parentNode)||t))){if(s.splice(o,1),!(e=i.length&&ve(s)))return I.apply(n,i),n;break}}return(d||l(e,p))(i,t,!m,n,!t||J.test(e)&&me(t.parentNode)||t),n},n.sortStable=_.split("").sort(k).join("")===_,n.detectDuplicates=!!f,d(),n.sortDetached=se(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),se(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&se(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),se(function(e){return null==e.getAttribute("disabled")})||ue(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(n);b.find=C,b.expr=C.selectors,b.expr[":"]=b.expr.pseudos,b.uniqueSort=b.unique=C.uniqueSort,b.text=C.getText,b.isXMLDoc=C.isXML,b.contains=C.contains,b.escapeSelector=C.escape;var S=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&b(e).is(n))break;r.push(e)}return r},k=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},O=b.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,D=/^.[^:#\[\.,]*$/;function I(e,t,n){return b.isFunction(t)?b.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?b.grep(e,function(e){return e===t!==n}):"string"!=typeof t?b.grep(e,function(e){return f.call(t,e)>-1!==n}):D.test(t)?b.filter(t,e,n):(t=b.filter(t,e),b.grep(e,function(e){return f.call(t,e)>-1!==n&&1===e.nodeType}))}b.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?b.find.matchesSelector(r,e)?[r]:[]:b.find.matches(e,b.grep(t,function(e){return 1===e.nodeType}))},b.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(b(e).filter(function(){for(t=0;t<r;t++)if(b.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)b.find(e,i[t],n);return r>1?b.uniqueSort(n):n},filter:function(e){return this.pushStack(I(this,e||[],!1))},not:function(e){return this.pushStack(I(this,e||[],!0))},is:function(e){return!!I(this,"string"==typeof e&&O.test(e)?b(e):e||[],!1).length}});var P,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(b.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||P,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof b?t[0]:t,b.merge(this,b.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),A.test(r[1])&&b.isPlainObject(t))for(r in t)b.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=a.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b.isFunction(e)?void 0!==n.ready?n.ready(e):e(b):b.makeArray(e,this)}).prototype=b.fn,P=b(a);var R=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}b.fn.extend({has:function(e){var t=b(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(b.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&b(e);if(!O.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&b.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?b.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?f.call(b(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(b.uniqueSort(b.merge(this.get(),b(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return N(e,"iframe")?e.contentDocument:(N(e,"template")&&(e=e.content||e),b.merge([],e.childNodes))}},function(e,t){b.fn[e]=function(n,r){var i=b.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=b.filter(r,i)),this.length>1&&(j[e]||b.uniqueSort(i),R.test(e)&&i.reverse()),this.pushStack(i)}});var M=/[^\x20\t\r\n\f]+/g;function F(e){return e}function U(e){throw e}function W(e,t,n,r){var i;try{e&&b.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&b.isFunction(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}b.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return b.each(e.match(M)||[],function(e,n){t[n]=!0}),t}(e):b.extend({},e);var t,n,r,i,o=[],a=[],l=-1,s=function(){for(i=i||e.once,r=t=!0;a.length;l=-1)for(n=a.shift();++l<o.length;)!1===o[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(l=o.length-1,a.push(n)),function t(n){b.each(n,function(n,r){b.isFunction(r)?e.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==b.type(r)&&t(r)})}(arguments),n&&!t&&s()),this},remove:function(){return b.each(arguments,function(e,t){for(var n;(n=b.inArray(t,o,n))>-1;)o.splice(n,1),n<=l&&l--}),this},has:function(e){return e?b.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||s()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},b.extend({Deferred:function(e){var t=[["notify","progress",b.Callbacks("memory"),b.Callbacks("memory"),2],["resolve","done",b.Callbacks("once memory"),b.Callbacks("once memory"),0,"resolved"],["reject","fail",b.Callbacks("once memory"),b.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return b.Deferred(function(n){b.each(t,function(t,r){var i=b.isFunction(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&b.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,r,i){var o=0;function a(e,t,r,i){return function(){var l=this,s=arguments,u=function(){var n,u;if(!(e<o)){if((n=r.apply(l,s))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,b.isFunction(u)?i?u.call(n,a(o,t,F,i),a(o,t,U,i)):(o++,u.call(n,a(o,t,F,i),a(o,t,U,i),a(o,t,F,t.notifyWith))):(r!==F&&(l=void 0,s=[n]),(i||t.resolveWith)(l,s))}},c=i?u:function(){try{u()}catch(n){b.Deferred.exceptionHook&&b.Deferred.exceptionHook(n,c.stackTrace),e+1>=o&&(r!==U&&(l=void 0,s=[n]),t.rejectWith(l,s))}};e?c():(b.Deferred.getStackHook&&(c.stackTrace=b.Deferred.getStackHook()),n.setTimeout(c))}}return b.Deferred(function(n){t[0][3].add(a(0,n,b.isFunction(i)?i:F,n.notifyWith)),t[1][3].add(a(0,n,b.isFunction(e)?e:F)),t[2][3].add(a(0,n,b.isFunction(r)?r:U))}).promise()},promise:function(e){return null!=e?b.extend(e,i):i}},o={};return b.each(t,function(e,n){var a=n[2],l=n[5];i[n[1]]=a.add,l&&a.add(function(){r=l},t[3-e][2].disable,t[0][2].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=s.call(arguments),o=b.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(W(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||b.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)W(i[n],a(n),o.reject);return o.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;b.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&V.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},b.readyException=function(e){n.setTimeout(function(){throw e})};var B=b.Deferred();function z(){a.removeEventListener("DOMContentLoaded",z),n.removeEventListener("load",z),b.ready()}b.fn.ready=function(e){return B.then(e).catch(function(e){b.readyException(e)}),this},b.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--b.readyWait:b.isReady)||(b.isReady=!0,!0!==e&&--b.readyWait>0||B.resolveWith(a,[b]))}}),b.ready.then=B.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(b.ready):(a.addEventListener("DOMContentLoaded",z),n.addEventListener("load",z));var q=function(e,t,n,r,i,o,a){var l=0,s=e.length,u=null==n;if("object"===b.type(n))for(l in i=!0,n)q(e,t,l,n[l],!0,o,a);else if(void 0!==r&&(i=!0,b.isFunction(r)||(a=!0),u&&(a?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(b(e),n)})),t))for(;l<s;l++)t(e[l],n,a?r:r.call(e[l],l,t(e[l],n)));return i?e:u?t.call(e):s?t(e[0],n):o},G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function $(){this.expando=b.expando+$.uid++}$.uid=1,$.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[b.camelCase(t)]=n;else for(r in t)i[b.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][b.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(b.camelCase):(t=b.camelCase(t))in r?[t]:t.match(M)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||b.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!b.isEmptyObject(t)}};var K=new $,Q=new $,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,X=/[A-Z]/g;function J(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(X,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Y.test(e)?JSON.parse(e):e)}(n)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}b.extend({hasData:function(e){return Q.hasData(e)||K.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),b.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Q.get(o),1===o.nodeType&&!K.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=b.camelCase(r.slice(5)),J(o,r,i[r]));K.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Q.set(this,e)}):q(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=Q.get(o,e))?n:void 0!==(n=J(o,e))?n:void 0;this.each(function(){Q.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Q.remove(this,e)})}}),b.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=K.get(e,t),n&&(!r||Array.isArray(n)?r=K.access(e,t,b.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=b.queue(e,t),r=n.length,i=n.shift(),o=b._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){b.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:b.Callbacks("once memory").add(function(){K.remove(e,[t+"queue",n])})})}}),b.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?b.queue(this[0],e):void 0===t?this:this.each(function(){var n=b.queue(this,e,t);b._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&b.dequeue(this,e)})},dequeue:function(e){return this.each(function(){b.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=b.Deferred(),o=this,a=this.length,l=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=K.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(l));return l(),i.promise(t)}});var Z=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ee=new RegExp("^(?:([+-])=|)("+Z+")([a-z%]*)$","i"),te=["Top","Right","Bottom","Left"],ne=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&b.contains(e.ownerDocument,e)&&"none"===b.css(e,"display")},re=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function ie(e,t,n,r){var i,o=1,a=20,l=r?function(){return r.cur()}:function(){return b.css(e,t,"")},s=l(),u=n&&n[3]||(b.cssNumber[t]?"":"px"),c=(b.cssNumber[t]||"px"!==u&&+s)&&ee.exec(b.css(e,t));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+s||1;do{c/=o=o||".5",b.style(e,t,c+u)}while(o!==(o=l()/s)&&1!==o&&--a)}return n&&(c=+c||+s||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var oe={};function ae(e){var t,n=e.ownerDocument,r=e.nodeName,i=oe[r];return i||(t=n.body.appendChild(n.createElement(r)),i=b.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),oe[r]=i,i)}function le(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=K.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ne(r)&&(i[o]=ae(r))):"none"!==n&&(i[o]="none",K.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}b.fn.extend({show:function(){return le(this,!0)},hide:function(){return le(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ne(this)?b(this).show():b(this).hide()})}});var se=/^(?:checkbox|radio)$/i,ue=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ce=/^$|\/(?:java|ecma)script/i,fe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function de(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?b.merge([e],n):n}function pe(e,t){for(var n=0,r=e.length;n<r;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}fe.optgroup=fe.option,fe.tbody=fe.tfoot=fe.colgroup=fe.caption=fe.thead,fe.th=fe.td;var he,me,ge=/<|&#?\w+;/;function ve(e,t,n,r,i){for(var o,a,l,s,u,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===b.type(o))b.merge(d,o.nodeType?[o]:o);else if(ge.test(o)){for(a=a||f.appendChild(t.createElement("div")),l=(ue.exec(o)||["",""])[1].toLowerCase(),s=fe[l]||fe._default,a.innerHTML=s[1]+b.htmlPrefilter(o)+s[2],c=s[0];c--;)a=a.lastChild;b.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(o));for(f.textContent="",p=0;o=d[p++];)if(r&&b.inArray(o,r)>-1)i&&i.push(o);else if(u=b.contains(o.ownerDocument,o),a=de(f.appendChild(o),"script"),u&&pe(a),n)for(c=0;o=a[c++];)ce.test(o.type||"")&&n.push(o);return f}he=a.createDocumentFragment().appendChild(a.createElement("div")),(me=a.createElement("input")).setAttribute("type","radio"),me.setAttribute("checked","checked"),me.setAttribute("name","t"),he.appendChild(me),v.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue;var ye=a.documentElement,be=/^key/,_e=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function we(){return!1}function xe(){try{return a.activeElement}catch(e){}}function Ce(e,t,n,r,i,o){var a,l;if("object"==typeof t){for(l in"string"!=typeof n&&(r=r||n,n=void 0),t)Ce(e,l,n,r,t[l],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=we;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return b().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=b.guid++)),e.each(function(){b.event.add(this,t,i,r,n)})}b.event={global:{},add:function(e,t,n,r,i){var o,a,l,s,u,c,f,d,p,h,m,g=K.get(e);if(g)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&b.find.matchesSelector(ye,i),n.guid||(n.guid=b.guid++),(s=g.events)||(s=g.events={}),(a=g.handle)||(a=g.handle=function(t){return void 0!==b&&b.event.triggered!==t.type?b.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(M)||[""]).length;u--;)p=m=(l=Ee.exec(t[u])||[])[1],h=(l[2]||"").split(".").sort(),p&&(f=b.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=b.event.special[p]||{},c=b.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&b.expr.match.needsContext.test(i),namespace:h.join(".")},o),(d=s[p])||((d=s[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),b.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,a,l,s,u,c,f,d,p,h,m,g=K.hasData(e)&&K.get(e);if(g&&(s=g.events)){for(u=(t=(t||"").match(M)||[""]).length;u--;)if(p=m=(l=Ee.exec(t[u])||[])[1],h=(l[2]||"").split(".").sort(),p){for(f=b.event.special[p]||{},d=s[p=(r?f.delegateType:f.bindType)||p]||[],l=l[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)c=d[o],!i&&m!==c.origType||n&&n.guid!==c.guid||l&&!l.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||b.removeEvent(e,p,g.handle),delete s[p])}else for(p in s)b.event.remove(e,p+t[u],n,r,!0);b.isEmptyObject(s)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,l=b.event.fix(e),s=new Array(arguments.length),u=(K.get(this,"events")||{})[l.type]||[],c=b.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=b.event.handlers.call(this,l,u),t=0;(i=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(r=((b.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,i,o,a,l=[],s=t.delegateCount,u=e.target;if(s&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<s;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?b(i,this).index(u)>-1:b.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&l.push({elem:u,handlers:o})}return u=this,s<t.length&&l.push({elem:u,handlers:t.slice(s)}),l},addProp:function(e,t){Object.defineProperty(b.Event.prototype,e,{enumerable:!0,configurable:!0,get:b.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[b.expando]?e:new b.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==xe()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===xe()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(e){return N(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},b.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},b.Event=function(e,t){if(!(this instanceof b.Event))return new b.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:we,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&b.extend(this,t),this.timeStamp=e&&e.timeStamp||b.now(),this[b.expando]=!0},b.Event.prototype={constructor:b.Event,isDefaultPrevented:we,isPropagationStopped:we,isImmediatePropagationStopped:we,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},b.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&be.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&_e.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},b.event.addProp),b.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||b.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),b.fn.extend({on:function(e,t,n,r){return Ce(this,e,t,n,r)},one:function(e,t,n,r){return Ce(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,b(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=we),this.each(function(){b.event.remove(this,e,n,t)})}});var Se=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ke=/<script|<style|<link/i,Oe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^true\/(.*)/,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function De(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")&&b(">tbody",e)[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){var t=Ne.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function Le(e,t){var n,r,i,o,a,l,s,u;if(1===t.nodeType){if(K.hasData(e)&&(o=K.access(e),a=K.set(t,o),u=o.events))for(i in delete a.handle,a.events={},u)for(n=0,r=u[i].length;n<r;n++)b.event.add(t,i,u[i][n]);Q.hasData(e)&&(l=Q.access(e),s=b.extend({},l),Q.set(t,s))}}function Re(e,t,n,r){t=u.apply([],t);var i,o,a,l,s,c,f=0,d=e.length,p=d-1,h=t[0],m=b.isFunction(h);if(m||d>1&&"string"==typeof h&&!v.checkClone&&Oe.test(h))return e.each(function(i){var o=e.eq(i);m&&(t[0]=h.call(this,i,o.html())),Re(o,t,n,r)});if(d&&(o=(i=ve(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(l=(a=b.map(de(i,"script"),Ie)).length;f<d;f++)s=i,f!==p&&(s=b.clone(s,!0,!0),l&&b.merge(a,de(s,"script"))),n.call(e[f],s,f);if(l)for(c=a[a.length-1].ownerDocument,b.map(a,Pe),f=0;f<l;f++)s=a[f],ce.test(s.type||"")&&!K.access(s,"globalEval")&&b.contains(c,s)&&(s.src?b._evalUrl&&b._evalUrl(s.src):y(s.textContent.replace(Ae,""),c))}return e}function je(e,t,n){for(var r,i=t?b.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||b.cleanData(de(r)),r.parentNode&&(n&&b.contains(r.ownerDocument,r)&&pe(de(r,"script")),r.parentNode.removeChild(r));return e}b.extend({htmlPrefilter:function(e){return e.replace(Se,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,l,s,u,c=e.cloneNode(!0),f=b.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(a=de(c),r=0,i=(o=de(e)).length;r<i;r++)l=o[r],s=a[r],u=void 0,"input"===(u=s.nodeName.toLowerCase())&&se.test(l.type)?s.checked=l.checked:"input"!==u&&"textarea"!==u||(s.defaultValue=l.defaultValue);if(t)if(n)for(o=o||de(e),a=a||de(c),r=0,i=o.length;r<i;r++)Le(o[r],a[r]);else Le(e,c);return(a=de(c,"script")).length>0&&pe(a,!f&&de(e,"script")),c},cleanData:function(e){for(var t,n,r,i=b.event.special,o=0;void 0!==(n=e[o]);o++)if(G(n)){if(t=n[K.expando]){if(t.events)for(r in t.events)i[r]?b.event.remove(n,r):b.removeEvent(n,r,t.handle);n[K.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),b.fn.extend({detach:function(e){return je(this,e,!0)},remove:function(e){return je(this,e)},text:function(e){return q(this,function(e){return void 0===e?b.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||De(this,e).appendChild(e)})},prepend:function(){return Re(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=De(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(b.cleanData(de(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return b.clone(this,e,t)})},html:function(e){return q(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ke.test(e)&&!fe[(ue.exec(e)||["",""])[1].toLowerCase()]){e=b.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(b.cleanData(de(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,function(t){var n=this.parentNode;b.inArray(this,e)<0&&(b.cleanData(de(this)),n&&n.replaceChild(t,this))},e)}}),b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){b.fn[e]=function(e){for(var n,r=[],i=b(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),b(i[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}});var He=/^margin/,Me=new RegExp("^("+Z+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)};function Ue(e,t,n){var r,i,o,a,l=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||b.contains(e.ownerDocument,e)||(a=b.style(e,t)),!v.pixelMarginRight()&&Me.test(a)&&He.test(t)&&(r=l.width,i=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=i,l.maxWidth=o)),void 0!==a?a+"":a}function We(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",ye.appendChild(l);var e=n.getComputedStyle(s);t="1%"!==e.top,o="2px"===e.marginLeft,r="4px"===e.width,s.style.marginRight="50%",i="4px"===e.marginRight,ye.removeChild(l),s=null}}var t,r,i,o,l=a.createElement("div"),s=a.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===s.style.backgroundClip,l.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",l.appendChild(s),b.extend(v,{pixelPosition:function(){return e(),t},boxSizingReliable:function(){return e(),r},pixelMarginRight:function(){return e(),i},reliableMarginLeft:function(){return e(),o}}))}();var Ve=/^(none|table(?!-c[ea]).+)/,Be=/^--/,ze={position:"absolute",visibility:"hidden",display:"block"},qe={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],$e=a.createElement("div").style;function Ke(e){var t=b.cssProps[e];return t||(t=b.cssProps[e]=function(e){if(e in $e)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in $e)return e}(e)||e),t}function Qe(e,t,n){var r=ee.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ye(e,t,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=b.css(e,n+te[o],!0,i)),r?("content"===n&&(a-=b.css(e,"padding"+te[o],!0,i)),"margin"!==n&&(a-=b.css(e,"border"+te[o]+"Width",!0,i))):(a+=b.css(e,"padding"+te[o],!0,i),"padding"!==n&&(a+=b.css(e,"border"+te[o]+"Width",!0,i)));return a}function Xe(e,t,n){var r,i=Fe(e),o=Ue(e,t,i),a="border-box"===b.css(e,"boxSizing",!1,i);return Me.test(o)?o:(r=a&&(v.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+Ye(e,t,n||(a?"border":"content"),r,i)+"px")}function Je(e,t,n,r,i){return new Je.prototype.init(e,t,n,r,i)}b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ue(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,l=b.camelCase(t),s=Be.test(t),u=e.style;if(s||(t=Ke(l)),a=b.cssHooks[t]||b.cssHooks[l],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];"string"===(o=typeof n)&&(i=ee.exec(n))&&i[1]&&(n=ie(e,t,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(b.cssNumber[l]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(s?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,a,l=b.camelCase(t);return Be.test(t)||(t=Ke(l)),(a=b.cssHooks[t]||b.cssHooks[l])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ue(e,t,r)),"normal"===i&&t in qe&&(i=qe[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),b.each(["height","width"],function(e,t){b.cssHooks[t]={get:function(e,n,r){if(n)return!Ve.test(b.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Xe(e,t,r):re(e,ze,function(){return Xe(e,t,r)})},set:function(e,n,r){var i,o=r&&Fe(e),a=r&&Ye(e,t,r,"border-box"===b.css(e,"boxSizing",!1,o),o);return a&&(i=ee.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=b.css(e,t)),Qe(0,n,a)}}}),b.cssHooks.marginLeft=We(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ue(e,"marginLeft"))||e.getBoundingClientRect().left-re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),b.each({margin:"",padding:"",border:"Width"},function(e,t){b.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+te[r]+t]=o[r]||o[r-2]||o[0];return i}},He.test(e)||(b.cssHooks[e+t].set=Qe)}),b.fn.extend({css:function(e,t){return q(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Fe(e),i=t.length;a<i;a++)o[t[a]]=b.css(e,t[a],!1,r);return o}return void 0!==n?b.style(e,t,n):b.css(e,t)},e,t,arguments.length>1)}}),b.Tween=Je,Je.prototype={constructor:Je,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||b.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(b.cssNumber[n]?"":"px")},cur:function(){var e=Je.propHooks[this.prop];return e&&e.get?e.get(this):Je.propHooks._default.get(this)},run:function(e){var t,n=Je.propHooks[this.prop];return this.options.duration?this.pos=t=b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Je.propHooks._default.set(this),this}},Je.prototype.init.prototype=Je.prototype,Je.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=b.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[b.cssProps[e.prop]]&&!b.cssHooks[e.prop]?e.elem[e.prop]=e.now:b.style(e.elem,e.prop,e.now+e.unit)}}},Je.propHooks.scrollTop=Je.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},b.fx=Je.prototype.init,b.fx.step={};var Ze,et,tt=/^(?:toggle|show|hide)$/,nt=/queueHooks$/;function rt(){et&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(rt):n.setTimeout(rt,b.fx.interval),b.fx.tick())}function it(){return n.setTimeout(function(){Ze=void 0}),Ze=b.now()}function ot(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=te[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function at(e,t,n){for(var r,i=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function lt(e,t,n){var r,i,o=0,a=lt.prefilters.length,l=b.Deferred().always(function(){delete s.elem}),s=function(){if(i)return!1;for(var t=Ze||it(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(r);return l.notifyWith(e,[u,r,n]),r<1&&a?n:(a||l.notifyWith(e,[u,1,0]),l.resolveWith(e,[u]),!1)},u=l.promise({elem:e,props:b.extend({},t),opts:b.extend(!0,{specialEasing:{},easing:b.easing._default},n),originalProperties:t,originalOptions:n,startTime:Ze||it(),duration:n.duration,tweens:[],createTween:function(t,n){var r=b.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(l.notifyWith(e,[u,1,0]),l.resolveWith(e,[u,t])):l.rejectWith(e,[u,t]),this}}),c=u.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=b.camelCase(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=b.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,u.opts.specialEasing);o<a;o++)if(r=lt.prefilters[o].call(u,e,c,u.opts))return b.isFunction(r.stop)&&(b._queueHooks(u.elem,u.opts.queue).stop=b.proxy(r.stop,r)),r;return b.map(c,at,u),b.isFunction(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),b.fx.timer(b.extend(s,{elem:e,anim:u,queue:u.opts.queue})),u}b.Animation=b.extend(lt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ie(n.elem,e,ee.exec(t),n),n}]},tweener:function(e,t){b.isFunction(e)?(t=e,e=["*"]):e=e.match(M);for(var n,r=0,i=e.length;r<i;r++)n=e[r],lt.tweeners[n]=lt.tweeners[n]||[],lt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,l,s,u,c,f="width"in t||"height"in t,d=this,p={},h=e.style,m=e.nodeType&&ne(e),g=K.get(e,"fxshow");for(r in n.queue||(null==(a=b._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,b.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],tt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;m=!0}p[r]=g&&g[r]||b.style(e,r)}if((s=!b.isEmptyObject(t))||!b.isEmptyObject(p))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=g&&g.display)&&(u=K.get(e,"display")),"none"===(c=b.css(e,"display"))&&(u?c=u:(le([e],!0),u=e.style.display||u,c=b.css(e,"display"),le([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===b.css(e,"float")&&(s||(d.done(function(){h.display=u}),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),s=!1,p)s||(g?"hidden"in g&&(m=g.hidden):g=K.access(e,"fxshow",{display:u}),o&&(g.hidden=!m),m&&le([e],!0),d.done(function(){for(r in m||le([e]),K.remove(e,"fxshow"),p)b.style(e,r,p[r])})),s=at(m?g[r]:0,r,d),r in g||(g[r]=s.start,m&&(s.end=s.start,s.start=0))}],prefilter:function(e,t){t?lt.prefilters.unshift(e):lt.prefilters.push(e)}}),b.speed=function(e,t,n){var r=e&&"object"==typeof e?b.extend({},e):{complete:n||!n&&t||b.isFunction(e)&&e,duration:e,easing:n&&t||t&&!b.isFunction(t)&&t};return b.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in b.fx.speeds?r.duration=b.fx.speeds[r.duration]:r.duration=b.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){b.isFunction(r.old)&&r.old.call(this),r.queue&&b.dequeue(this,r.queue)},r},b.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ne).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=b.isEmptyObject(e),o=b.speed(t,n,r),a=function(){var t=lt(this,b.extend({},e),o);(i||K.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=b.timers,a=K.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&nt.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||b.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=K.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=b.timers,a=r?r.length:0;for(n.finish=!0,b.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),b.each(["toggle","show","hide"],function(e,t){var n=b.fn[t];b.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ot(t,!0),e,r,i)}}),b.each({slideDown:ot("show"),slideUp:ot("hide"),slideToggle:ot("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){b.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),b.timers=[],b.fx.tick=function(){var e,t=0,n=b.timers;for(Ze=b.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||b.fx.stop(),Ze=void 0},b.fx.timer=function(e){b.timers.push(e),b.fx.start()},b.fx.interval=13,b.fx.start=function(){et||(et=!0,rt())},b.fx.stop=function(){et=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fn.delay=function(e,t){return e=b.fx&&b.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var st,ut=b.expr.attrHandle;b.fn.extend({attr:function(e,t){return q(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){b.removeAttr(this,e)})}}),b.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?b.prop(e,t,n):(1===o&&b.isXMLDoc(e)||(i=b.attrHooks[t.toLowerCase()]||(b.expr.match.bool.test(t)?st:void 0)),void 0!==n?null===n?void b.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=b.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(M);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),st={set:function(e,t,n){return!1===t?b.removeAttr(e,n):e.setAttribute(n,n),n}},b.each(b.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ut[t]||b.find.attr;ut[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=ut[a],ut[a]=i,i=null!=n(e,t,r)?a:null,ut[a]=o),i}});var ct=/^(?:input|select|textarea|button)$/i,ft=/^(?:a|area)$/i;function dt(e){return(e.match(M)||[]).join(" ")}function pt(e){return e.getAttribute&&e.getAttribute("class")||""}b.fn.extend({prop:function(e,t){return q(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[b.propFix[e]||e]})}}),b.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&b.isXMLDoc(e)||(t=b.propFix[t]||t,i=b.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=b.find.attr(e,"tabindex");return t?parseInt(t,10):ct.test(e.nodeName)||ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(b.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),b.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){b.propFix[this.toLowerCase()]=this}),b.fn.extend({addClass:function(e){var t,n,r,i,o,a,l,s=0;if(b.isFunction(e))return this.each(function(t){b(this).addClass(e.call(this,t,pt(this)))});if("string"==typeof e&&e)for(t=e.match(M)||[];n=this[s++];)if(i=pt(n),r=1===n.nodeType&&" "+dt(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(l=dt(r))&&n.setAttribute("class",l)}return this},removeClass:function(e){var t,n,r,i,o,a,l,s=0;if(b.isFunction(e))return this.each(function(t){b(this).removeClass(e.call(this,t,pt(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(M)||[];n=this[s++];)if(i=pt(n),r=1===n.nodeType&&" "+dt(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(l=dt(r))&&n.setAttribute("class",l)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):b.isFunction(e)?this.each(function(n){b(this).toggleClass(e.call(this,n,pt(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=b(this),o=e.match(M)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=pt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+dt(pt(n))+" ").indexOf(t)>-1)return!0;return!1}});var ht=/\r/g;b.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=b.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,b(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=b.map(i,function(e){return null==e?"":e+""})),(t=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=b.valHooks[i.type]||b.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(ht,""):null==n?"":n:void 0}}),b.extend({valHooks:{option:{get:function(e){var t=b.find.attr(e,"value");return null!=t?t:dt(b.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,l=a?null:[],s=a?o+1:i.length;for(r=o<0?s:a?o:0;r<s;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=b(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,r,i=e.options,o=b.makeArray(t),a=i.length;a--;)((r=i[a]).selected=b.inArray(b.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),b.each(["radio","checkbox"],function(){b.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=b.inArray(b(e).val(),t)>-1}},v.checkOn||(b.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var mt=/^(?:focusinfocus|focusoutblur)$/;b.extend(b.event,{trigger:function(e,t,r,i){var o,l,s,u,c,f,d,p=[r||a],m=h.call(e,"type")?e.type:e,g=h.call(e,"namespace")?e.namespace.split("."):[];if(l=s=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!mt.test(m+b.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[b.expando]?e:new b.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:b.makeArray(t,[e]),d=b.event.special[m]||{},i||!d.trigger||!1!==d.trigger.apply(r,t))){if(!i&&!d.noBubble&&!b.isWindow(r)){for(u=d.delegateType||m,mt.test(u+m)||(l=l.parentNode);l;l=l.parentNode)p.push(l),s=l;s===(r.ownerDocument||a)&&p.push(s.defaultView||s.parentWindow||n)}for(o=0;(l=p[o++])&&!e.isPropagationStopped();)e.type=o>1?u:d.bindType||m,(f=(K.get(l,"events")||{})[e.type]&&K.get(l,"handle"))&&f.apply(l,t),(f=c&&l[c])&&f.apply&&G(l)&&(e.result=f.apply(l,t),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(p.pop(),t)||!G(r)||c&&b.isFunction(r[m])&&!b.isWindow(r)&&((s=r[c])&&(r[c]=null),b.event.triggered=m,r[m](),b.event.triggered=void 0,s&&(r[c]=s)),e.result}},simulate:function(e,t,n){var r=b.extend(new b.Event,n,{type:e,isSimulated:!0});b.event.trigger(r,null,t)}}),b.fn.extend({trigger:function(e,t){return this.each(function(){b.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return b.event.trigger(e,t,n,!0)}}),b.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){b.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),b.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),v.focusin="onfocusin"in n,v.focusin||b.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){b.event.simulate(t,e.target,b.event.fix(e))};b.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=K.access(r,t);i||r.addEventListener(e,n,!0),K.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=K.access(r,t)-1;i?K.access(r,t,i):(r.removeEventListener(e,n,!0),K.remove(r,t))}}});var gt=n.location,vt=b.now(),yt=/\?/;b.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||b.error("Invalid XML: "+e),t};var bt=/\[\]$/,_t=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,Tt=/^(?:input|select|textarea|keygen)/i;function wt(e,t,n,r){var i;if(Array.isArray(t))b.each(t,function(t,i){n||bt.test(e)?r(e,i):wt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==b.type(t))r(e,t);else for(i in t)wt(e+"["+i+"]",t[i],n,r)}b.param=function(e,t){var n,r=[],i=function(e,t){var n=b.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,function(){i(this.name,this.value)});else for(n in e)wt(n,e[n],t,i);return r.join("&")},b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=b.prop(this,"elements");return e?b.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!b(this).is(":disabled")&&Tt.test(this.nodeName)&&!Et.test(e)&&(this.checked||!se.test(e))}).map(function(e,t){var n=b(this).val();return null==n?null:Array.isArray(n)?b.map(n,function(e){return{name:t.name,value:e.replace(_t,"\r\n")}}):{name:t.name,value:n.replace(_t,"\r\n")}}).get()}});var xt=/%20/g,Ct=/#.*$/,St=/([?&])_=[^&]*/,kt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ot=/^(?:GET|HEAD)$/,Nt=/^\/\//,At={},Dt={},It="*/".concat("*"),Pt=a.createElement("a");function Lt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(M)||[];if(b.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Rt(e,t,n,r){var i={},o=e===Dt;function a(l){var s;return i[l]=!0,b.each(e[l]||[],function(e,l){var u=l(t,n,r);return"string"!=typeof u||o||i[u]?o?!(s=u):void 0:(t.dataTypes.unshift(u),a(u),!1)}),s}return a(t.dataTypes[0])||!i["*"]&&a("*")}function jt(e,t){var n,r,i=b.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&b.extend(!0,e,r),e}Pt.href=gt.href,b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:gt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(gt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":It,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?jt(jt(e,b.ajaxSettings),t):jt(b.ajaxSettings,e)},ajaxPrefilter:Lt(At),ajaxTransport:Lt(Dt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,l,s,u,c,f,d,p,h=b.ajaxSetup({},t),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?b(m):b.event,v=b.Deferred(),y=b.Callbacks("once memory"),_=h.statusCode||{},E={},T={},w="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(c){if(!l)for(l={};t=kt.exec(o);)l[t[1].toLowerCase()]=t[2];t=l[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,E[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)x.always(e[x.status]);else for(t in e)_[t]=[_[t],e[t]];return this},abort:function(e){var t=e||w;return r&&r.abort(t),C(0,t),this}};if(v.promise(x),h.url=((e||h.url||gt.href)+"").replace(Nt,gt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(M)||[""],null==h.crossDomain){u=a.createElement("a");try{u.href=h.url,u.href=u.href,h.crossDomain=Pt.protocol+"//"+Pt.host!=u.protocol+"//"+u.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=b.param(h.data,h.traditional)),Rt(At,h,t,x),c)return x;for(d in(f=b.event&&h.global)&&0==b.active++&&b.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Ot.test(h.type),i=h.url.replace(Ct,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(xt,"+")):(p=h.url.slice(i.length),h.data&&(i+=(yt.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(St,"$1"),p=(yt.test(i)?"&":"?")+"_="+vt+++p),h.url=i+p),h.ifModified&&(b.lastModified[i]&&x.setRequestHeader("If-Modified-Since",b.lastModified[i]),b.etag[i]&&x.setRequestHeader("If-None-Match",b.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&x.setRequestHeader("Content-Type",h.contentType),x.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+It+"; q=0.01":""):h.accepts["*"]),h.headers)x.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(m,x,h)||c))return x.abort();if(w="abort",y.add(h.complete),x.done(h.success),x.fail(h.error),r=Rt(Dt,h,t,x)){if(x.readyState=1,f&&g.trigger("ajaxSend",[x,h]),c)return x;h.async&&h.timeout>0&&(s=n.setTimeout(function(){x.abort("timeout")},h.timeout));try{c=!1,r.send(E,C)}catch(e){if(c)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,a,l){var u,d,p,E,T,w=t;c||(c=!0,s&&n.clearTimeout(s),r=void 0,o=l||"",x.readyState=e>0?4:0,u=e>=200&&e<300||304===e,a&&(E=function(e,t,n){for(var r,i,o,a,l=e.contents,s=e.dataTypes;"*"===s[0];)s.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in l)if(l[i]&&l[i].test(r)){s.unshift(i);break}if(s[0]in n)o=s[0];else{for(i in n){if(!s[0]||e.converters[i+" "+s[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==s[0]&&s.unshift(o),n[o]}(h,x,a)),E=function(e,t,n,r){var i,o,a,l,s,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!s&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),s=o,o=c.shift())if("*"===o)o=s;else if("*"!==s&&s!==o){if(!(a=u[s+" "+o]||u["* "+o]))for(i in u)if((l=i.split(" "))[1]===o&&(a=u[s+" "+l[0]]||u["* "+l[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=l[0],c.unshift(l[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+s+" to "+o}}}return{state:"success",data:t}}(h,E,x,u),u?(h.ifModified&&((T=x.getResponseHeader("Last-Modified"))&&(b.lastModified[i]=T),(T=x.getResponseHeader("etag"))&&(b.etag[i]=T)),204===e||"HEAD"===h.type?w="nocontent":304===e?w="notmodified":(w=E.state,d=E.data,u=!(p=E.error))):(p=w,!e&&w||(w="error",e<0&&(e=0))),x.status=e,x.statusText=(t||w)+"",u?v.resolveWith(m,[d,w,x]):v.rejectWith(m,[x,w,p]),x.statusCode(_),_=void 0,f&&g.trigger(u?"ajaxSuccess":"ajaxError",[x,h,u?d:p]),y.fireWith(m,[x,w]),f&&(g.trigger("ajaxComplete",[x,h]),--b.active||b.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,n){return b.get(e,t,n,"json")},getScript:function(e,t){return b.get(e,void 0,t,"script")}}),b.each(["get","post"],function(e,t){b[t]=function(e,n,r,i){return b.isFunction(n)&&(i=i||r,r=n,n=void 0),b.ajax(b.extend({url:e,type:t,dataType:i,data:n,success:r},b.isPlainObject(e)&&e))}}),b._evalUrl=function(e){return b.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},b.fn.extend({wrapAll:function(e){var t;return this[0]&&(b.isFunction(e)&&(e=e.call(this[0])),t=b(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return b.isFunction(e)?this.each(function(t){b(this).wrapInner(e.call(this,t))}):this.each(function(){var t=b(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b.isFunction(e);return this.each(function(n){b(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){b(this).replaceWith(this.childNodes)}),this}}),b.expr.pseudos.hidden=function(e){return!b.expr.pseudos.visible(e)},b.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},b.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ht={0:200,1223:204},Mt=b.ajaxSettings.xhr();v.cors=!!Mt&&"withCredentials"in Mt,v.ajax=Mt=!!Mt,b.ajaxTransport(function(e){var t,r;if(v.cors||Mt&&!e.crossDomain)return{send:function(i,o){var a,l=e.xhr();if(l.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)l[a]=e.xhrFields[a];for(a in e.mimeType&&l.overrideMimeType&&l.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)l.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=r=l.onload=l.onerror=l.onabort=l.onreadystatechange=null,"abort"===e?l.abort():"error"===e?"number"!=typeof l.status?o(0,"error"):o(l.status,l.statusText):o(Ht[l.status]||l.status,l.statusText,"text"!==(l.responseType||"text")||"string"!=typeof l.responseText?{binary:l.response}:{text:l.responseText},l.getAllResponseHeaders()))}},l.onload=t(),r=l.onerror=t("error"),void 0!==l.onabort?l.onabort=r:l.onreadystatechange=function(){4===l.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{l.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),b.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),b.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),b.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,i){t=b("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var Ft,Ut=[],Wt=/(=)\?(?=&|$)|\?\?/;b.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ut.pop()||b.expando+"_"+vt++;return this[e]=!0,e}}),b.ajaxPrefilter("json jsonp",function(e,t,r){var i,o,a,l=!1!==e.jsonp&&(Wt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(e.data)&&"data");if(l||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=b.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,l?e[l]=e[l].replace(Wt,"$1"+i):!1!==e.jsonp&&(e.url+=(yt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||b.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?b(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Ut.push(i)),a&&b.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),v.createHTMLDocument=((Ft=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ft.childNodes.length),b.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(r)):t=a),o=!n&&[],(i=A.exec(e))?[t.createElement(i[1])]:(i=ve([e],t,o),o&&o.length&&b(o).remove(),b.merge([],i.childNodes)));var r,i,o},b.fn.load=function(e,t,n){var r,i,o,a=this,l=e.indexOf(" ");return l>-1&&(r=dt(e.slice(l)),e=e.slice(0,l)),b.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&b.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?b("<div>").append(b.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},b.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){b.fn[t]=function(e){return this.on(t,e)}}),b.expr.pseudos.animated=function(e){return b.grep(b.timers,function(t){return e===t.elem}).length},b.offset={setOffset:function(e,t,n){var r,i,o,a,l,s,u=b.css(e,"position"),c=b(e),f={};"static"===u&&(e.style.position="relative"),l=c.offset(),o=b.css(e,"top"),s=b.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+s).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(s)||0),b.isFunction(t)&&(t=t.call(e,n,b.extend({},l))),null!=t.top&&(f.top=t.top-l.top+a),null!=t.left&&(f.left=t.left-l.left+i),"using"in t?t.using.call(e,f):c.css(f)}},b.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){b.offset.setOffset(this,e,t)});var t,n,r,i,o=this[0];return o?o.getClientRects().length?(r=o.getBoundingClientRect(),n=(t=o.ownerDocument).documentElement,i=t.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===b.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),N(e[0],"html")||(r=e.offset()),r={top:r.top+b.css(e[0],"borderTopWidth",!0),left:r.left+b.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-b.css(n,"marginTop",!0),left:t.left-r.left-b.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===b.css(e,"position");)e=e.offsetParent;return e||ye})}}),b.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;b.fn[e]=function(r){return q(this,function(e,r,i){var o;if(b.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),b.each(["top","left"],function(e,t){b.cssHooks[t]=We(v.pixelPosition,function(e,n){if(n)return n=Ue(e,t),Me.test(n)?b(e).position()[t]+"px":n})}),b.each({Height:"height",Width:"width"},function(e,t){b.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){b.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),l=n||(!0===i||!0===o?"margin":"border");return q(this,function(t,n,i){var o;return b.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?b.css(t,n,l):b.style(t,n,i,l)},t,a?i:void 0,a)}})}),b.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),b.holdReady=function(e){e?b.readyWait++:b.ready(!0)},b.isArray=Array.isArray,b.parseJSON=JSON.parse,b.nodeName=N,void 0===(r=function(){return b}.apply(t,[]))||(e.exports=r);var Vt=n.jQuery,Bt=n.$;return b.noConflict=function(e){return n.$===b&&(n.$=Bt),e&&n.jQuery===b&&(n.jQuery=Vt),b},i||(n.jQuery=n.$=b),b})},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var u in n=Object(arguments[s]))i.call(n,u)&&(l[u]=n[u]);if(r){a=r(n);for(var c=0;c<a.length;c++)o.call(n,a[c])&&(l[a[c]]=n[a[c]])}}return l}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(7)},function(e,t,n){e.exports=n(12)},function(e,t,n){"use strict";
/** @license React v16.8.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(2),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,l=i?Symbol.for("react.fragment"):60107,s=i?Symbol.for("react.strict_mode"):60108,u=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.concurrent_mode"):60111,p=i?Symbol.for("react.forward_ref"):60112,h=i?Symbol.for("react.suspense"):60113,m=i?Symbol.for("react.memo"):60115,g=i?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,i,o,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,i,o,a,l],u=0;(e=Error(t.replace(/%s/g,function(){return s[u++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_={};function E(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}function T(){}function w(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}E.prototype.isReactComponent={},E.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},E.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},T.prototype=E.prototype;var x=w.prototype=new T;x.constructor=w,r(x,E.prototype),x.isPureReactComponent=!0;var C={current:null},S={current:null},k=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function N(e,t,n){var r=void 0,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!O.hasOwnProperty(r)&&(i[r]=t[r]);var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:S.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var D=/\/+/g,I=[];function P(e,t,n,r){if(I.length){var i=I.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function L(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>I.length&&I.push(e)}function R(e,t,n){return null==e?0:function e(t,n,r,i){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var s=!1;if(null===t)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case o:case a:s=!0}}if(s)return r(i,t,""===n?"."+j(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var c=n+j(l=t[u],u);s+=e(l,c,r,i)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),u=0;!(l=t.next()).done;)s+=e(l=l.value,c=n+j(l,u++),r,i);else"object"===l&&y("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return s}(e,"",t,n)}function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function H(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,function(e){return e}):null!=e&&(A(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(D,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(D,"$&/")+"/"),R(e,M,t=P(t,o,r,i)),L(t)}function U(){var e=C.current;return null===e&&y("307"),e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,H,t=P(null,null,t,n)),L(t)},count:function(e){return R(e,function(){return null},null)},toArray:function(e){var t=[];return F(e,t,null,function(e){return e}),t},only:function(e){return A(e)||y("143"),e}},createRef:function(){return{current:null}},Component:E,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:g,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return U().useCallback(e,t)},useContext:function(e,t){return U().useContext(e,t)},useEffect:function(e,t){return U().useEffect(e,t)},useImperativeHandle:function(e,t,n){return U().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return U().useLayoutEffect(e,t)},useMemo:function(e,t){return U().useMemo(e,t)},useReducer:function(e,t,n){return U().useReducer(e,t,n)},useRef:function(e){return U().useRef(e)},useState:function(e){return U().useState(e)},Fragment:l,StrictMode:s,Suspense:h,createElement:N,cloneElement:function(e,t,n){null==e&&y("267",e);var i=void 0,a=r({},e.props),l=e.key,s=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,u=S.current),void 0!==t.key&&(l=""+t.key);var c=void 0;for(i in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)k.call(t,i)&&!O.hasOwnProperty(i)&&(a[i]=void 0===t[i]&&void 0!==c?c[i]:t[i])}if(1===(i=arguments.length-2))a.children=n;else if(1<i){c=Array(i);for(var f=0;f<i;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:l,ref:s,props:a,_owner:u}},createFactory:function(e){var t=N.bind(null,e);return t.type=e,t},isValidElement:A,version:"16.8.2",unstable_ConcurrentMode:d,unstable_Profiler:u,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:C,ReactCurrentOwner:S,assign:r}},V={default:W},B=V&&W||V;e.exports=B.default||B},function(e,t,n){"use strict";
/** @license React v16.8.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(2),o=n(8);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,i,o,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,i,o,a,l],u=0;(e=Error(t.replace(/%s/g,function(){return s[u++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var l=!1,s=null,u=!1,c=null,f={onError:function(e){l=!0,s=e}};function d(e,t,n,r,i,o,a,u,c){l=!1,s=null,function(e,t,n,r,i,o,a,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}.apply(f,arguments)}var p=null,h={};function m(){if(p)for(var e in h){var t=h[e],n=p.indexOf(e);if(-1<n||a("96",e),!v[n])for(var r in t.extractEvents||a("97",e),v[n]=t,n=t.eventTypes){var i=void 0,o=n[r],l=t,s=r;y.hasOwnProperty(s)&&a("99",s),y[s]=o;var u=o.phasedRegistrationNames;if(u){for(i in u)u.hasOwnProperty(i)&&g(u[i],l,s);i=!0}else o.registrationName?(g(o.registrationName,l,s),i=!0):i=!1;i||a("98",r,e)}}}function g(e,t,n){b[e]&&a("100",e),b[e]=t,_[e]=t.eventTypes[n].dependencies}var v=[],y={},b={},_={},E=null,T=null,w=null;function x(e,t,n){var r=e.type||"unknown-event";e.currentTarget=w(n),function(e,t,n,r,i,o,f,p,h){if(d.apply(this,arguments),l){if(l){var m=s;l=!1,s=null}else a("198"),m=void 0;u||(u=!0,c=m)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function S(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var k=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)x(e,t[r],n[r]);else t&&x(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var N={injectEventPluginOrder:function(e){p&&a("101"),p=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&m()}};function A(e,t){var n=e.stateNode;if(!n)return null;var r=E(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function D(e){if(null!==e&&(k=C(k,e)),e=k,k=null,e&&(S(e,O),k&&a("95"),u))throw e=c,u=!1,c=null,e}var I=Math.random().toString(36).slice(2),P="__reactInternalInstance$"+I,L="__reactEventHandlers$"+I;function R(e){if(e[P])return e[P];for(;!e[P];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[P]).tag||6===e.tag?e:null}function j(e){return!(e=e[P])||5!==e.tag&&6!==e.tag?null:e}function H(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function M(e){return e[L]||null}function F(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function U(e,t,n){(t=A(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=F(t);for(t=n.length;0<t--;)U(n[t],"captured",e);for(t=0;t<n.length;t++)U(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=A(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function B(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function z(e){S(e,W)}var q=!("undefined"==typeof window||!window.document||!window.document.createElement);function G(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var $={animationend:G("Animation","AnimationEnd"),animationiteration:G("Animation","AnimationIteration"),animationstart:G("Animation","AnimationStart"),transitionend:G("Transition","TransitionEnd")},K={},Q={};function Y(e){if(K[e])return K[e];if(!$[e])return e;var t,n=$[e];for(t in n)if(n.hasOwnProperty(t)&&t in Q)return K[e]=n[t];return e}q&&(Q=document.createElement("div").style,"AnimationEvent"in window||(delete $.animationend.animation,delete $.animationiteration.animation,delete $.animationstart.animation),"TransitionEvent"in window||delete $.transitionend.transition);var X=Y("animationend"),J=Y("animationiteration"),Z=Y("animationstart"),ee=Y("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,ie=null;function oe(){if(ie)return ie;var e,t,n=re,r=n.length,i="value"in ne?ne.value:ne.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return ie=i.slice(e,1<t?1-t:void 0)}function ae(){return!0}function le(){return!1}function se(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:le,this.isPropagationStopped=le,this}function ue(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function ce(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ue,e.release=ce}i(se.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),se.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},se.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(se);var de=se.extend({data:null}),pe=se.extend({data:null}),he=[9,13,27,32],me=q&&"CompositionEvent"in window,ge=null;q&&"documentMode"in document&&(ge=document.documentMode);var ve=q&&"TextEvent"in window&&!ge,ye=q&&(!me||ge&&8<ge&&11>=ge),be=String.fromCharCode(32),_e={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Ee=!1;function Te(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function we(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var xe=!1;var Ce={eventTypes:_e,extractEvents:function(e,t,n,r){var i=void 0,o=void 0;if(me)e:{switch(e){case"compositionstart":i=_e.compositionStart;break e;case"compositionend":i=_e.compositionEnd;break e;case"compositionupdate":i=_e.compositionUpdate;break e}i=void 0}else xe?Te(e,n)&&(i=_e.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=_e.compositionStart);return i?(ye&&"ko"!==n.locale&&(xe||i!==_e.compositionStart?i===_e.compositionEnd&&xe&&(o=oe()):(re="value"in(ne=r)?ne.value:ne.textContent,xe=!0)),i=de.getPooled(i,t,n,r),o?i.data=o:null!==(o=we(n))&&(i.data=o),z(i),o=i):o=null,(e=ve?function(e,t){switch(e){case"compositionend":return we(t);case"keypress":return 32!==t.which?null:(Ee=!0,be);case"textInput":return(e=t.data)===be&&Ee?null:e;default:return null}}(e,n):function(e,t){if(xe)return"compositionend"===e||!me&&Te(e,t)?(e=oe(),ie=re=ne=null,xe=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ye&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(_e.beforeInput,t,n,r)).data=e,z(t)):t=null,null===o?t:null===t?o:[o,t]}},Se=null,ke=null,Oe=null;function Ne(e){if(e=T(e)){"function"!=typeof Se&&a("280");var t=E(e.stateNode);Se(e.stateNode,e.type,t)}}function Ae(e){ke?Oe?Oe.push(e):Oe=[e]:ke=e}function De(){if(ke){var e=ke,t=Oe;if(Oe=ke=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}function Ie(e,t){return e(t)}function Pe(e,t,n){return e(t,n)}function Le(){}var Re=!1;function je(e,t){if(Re)return e(t);Re=!0;try{return Ie(e,t)}finally{Re=!1,(null!==ke||null!==Oe)&&(Le(),De())}}var He={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Me(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!He[e.type]:"textarea"===t}function Fe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ue(e){if(!q)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var ze=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;ze.hasOwnProperty("ReactCurrentDispatcher")||(ze.ReactCurrentDispatcher={current:null});var qe=/^(.*)[\\\/]/,Ge="function"==typeof Symbol&&Symbol.for,$e=Ge?Symbol.for("react.element"):60103,Ke=Ge?Symbol.for("react.portal"):60106,Qe=Ge?Symbol.for("react.fragment"):60107,Ye=Ge?Symbol.for("react.strict_mode"):60108,Xe=Ge?Symbol.for("react.profiler"):60114,Je=Ge?Symbol.for("react.provider"):60109,Ze=Ge?Symbol.for("react.context"):60110,et=Ge?Symbol.for("react.concurrent_mode"):60111,tt=Ge?Symbol.for("react.forward_ref"):60112,nt=Ge?Symbol.for("react.suspense"):60113,rt=Ge?Symbol.for("react.memo"):60115,it=Ge?Symbol.for("react.lazy"):60116,ot="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=ot&&e[ot]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Qe:return"Fragment";case Ke:return"Portal";case Xe:return"Profiler";case Ye:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return lt(e.type);case it:if(e=1===e._status?e._result:null)return lt(e)}return null}function st(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=lt(e.type);n=null,r&&(n=lt(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(qe,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var ut=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},dt={};function pt(e,t,n,r,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new pt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new pt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new pt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new pt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var i=ht.hasOwnProperty(t)?ht[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!ct.call(dt,e)||!ct.call(ft,e)&&(ut.test(e)?dt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function yt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _t(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=yt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Et(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function Tt(e,t){Et(e,t);var n=yt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?xt(e,t.type,n):t.hasOwnProperty("defaultValue")&&xt(e,t.type,yt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function wt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function xt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,gt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){ht[e]=new pt(e,1,!1,e.toLowerCase(),null)});var Ct={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function St(e,t,n){return(e=se.getPooled(Ct.change,e,t,n)).type="change",Ae(n),z(e),e}var kt=null,Ot=null;function Nt(e){D(e)}function At(e){if(Be(H(e)))return e}function Dt(e,t){if("change"===e)return t}var It=!1;function Pt(){kt&&(kt.detachEvent("onpropertychange",Lt),Ot=kt=null)}function Lt(e){"value"===e.propertyName&&At(Ot)&&je(Nt,e=St(Ot,e,Fe(e)))}function Rt(e,t,n){"focus"===e?(Pt(),Ot=n,(kt=t).attachEvent("onpropertychange",Lt)):"blur"===e&&Pt()}function jt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return At(Ot)}function Ht(e,t){if("click"===e)return At(t)}function Mt(e,t){if("input"===e||"change"===e)return At(t)}q&&(It=Ue("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:Ct,_isInputEventSupported:It,extractEvents:function(e,t,n,r){var i=t?H(t):window,o=void 0,a=void 0,l=i.nodeName&&i.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===i.type?o=Dt:Me(i)?It?o=Mt:(o=jt,a=Rt):(l=i.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(o=Ht),o&&(o=o(e,t)))return St(o,n,r);a&&a(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&xt(i,"number",i.value)}},Ut=se.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Vt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Bt(){return Vt}var zt=0,qt=0,Gt=!1,$t=!1,Kt=Ut.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=zt;return zt=e.screenX,Gt?"mousemove"===e.type?e.screenX-t:0:(Gt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=qt;return qt=e.screenY,$t?"mousemove"===e.type?e.screenY-t:0:($t=!0,0)}}),Qt=Kt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xt={eventTypes:Yt,extractEvents:function(e,t,n,r){var i="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(i&&(n.relatedTarget||n.fromElement)||!o&&!i)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,o?(o=t,t=(t=n.relatedTarget||n.toElement)?R(t):null):o=null,o===t)return null;var a=void 0,l=void 0,s=void 0,u=void 0;"mouseout"===e||"mouseover"===e?(a=Kt,l=Yt.mouseLeave,s=Yt.mouseEnter,u="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Qt,l=Yt.pointerLeave,s=Yt.pointerEnter,u="pointer");var c=null==o?i:H(o);if(i=null==t?i:H(t),(e=a.getPooled(l,o,n,r)).type=u+"leave",e.target=c,e.relatedTarget=i,(n=a.getPooled(s,t,n,r)).type=u+"enter",n.target=i,n.relatedTarget=c,r=t,o&&r)e:{for(i=r,u=0,a=t=o;a;a=F(a))u++;for(a=0,s=i;s;s=F(s))a++;for(;0<u-a;)t=F(t),u--;for(;0<a-u;)i=F(i),a--;for(;u--;){if(t===i||t===i.alternate)break e;t=F(t),i=F(i)}t=null}else t=null;for(i=t,t=[];o&&o!==i&&(null===(u=o.alternate)||u!==i);)t.push(o),o=F(o);for(o=[];r&&r!==i&&(null===(u=r.alternate)||u!==i);)o.push(r),r=F(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=o.length;0<r--;)V(o[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var i=n.return,o=i?i.alternate:null;if(!i||!o)break;if(i.child===o.child){for(var l=i.child;l;){if(l===n)return nn(i),e;if(l===r)return nn(i),t;l=l.sibling}a("188")}if(n.return!==r.return)n=i,r=o;else{l=!1;for(var s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}if(!l){for(s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}l||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=se.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=se.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=Ut.extend({relatedTarget:null});function sn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var un={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=Ut.extend({key:function(e){if(e.key){var t=un[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=sn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?sn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?sn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=Kt.extend({dataTransfer:null}),pn=Ut.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),hn=se.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Kt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),gn=[["abort","abort"],[X,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],vn={},yn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},vn[e]=t,yn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),gn.forEach(function(e){bn(e,!1)});var _n={eventTypes:vn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=yn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var i=yn[e];if(!i)return null;switch(e){case"keypress":if(0===sn(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Kt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case X:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=Ut;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Qt;break;default:e=se}return z(t=e.getPooled(i,t,n,r)),t}},En=_n.isInteractiveTopLevelEventType,Tn=[];function wn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=R(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=Fe(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,a=null,l=0;l<v.length;l++){var s=v[l];s&&(s=s.extractEvents(r,t,o,i))&&(a=C(a,s))}D(a)}}var xn=!0;function Cn(e,t){if(!t)return null;var n=(En(e)?kn:On).bind(null,e);t.addEventListener(e,n,!1)}function Sn(e,t){if(!t)return null;var n=(En(e)?kn:On).bind(null,e);t.addEventListener(e,n,!0)}function kn(e,t){Pe(On,e,t)}function On(e,t){if(xn){var n=Fe(t);if(null===(n=R(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),Tn.length){var r=Tn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{je(wn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Tn.length&&Tn.push(e)}}}var Nn={},An=0,Dn="_reactListenersID"+(""+Math.random()).slice(2);function In(e){return Object.prototype.hasOwnProperty.call(e,Dn)||(e[Dn]=An++,Nn[e[Dn]]={}),Nn[e[Dn]]}function Pn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Ln(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Rn(e,t){var n,r=Ln(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Ln(r)}}function jn(){for(var e=window,t=Pn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Pn(e.document)}return t}function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Mn(e){var t=jn(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Hn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=void 0===r.end?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=Rn(n,o);var a=Rn(n,r);i&&a&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Fn=q&&"documentMode"in document&&11>=document.documentMode,Un={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,Vn=null,Bn=null,zn=!1;function qn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return zn||null==Wn||Wn!==Pn(n)?null:("selectionStart"in(n=Wn)&&Hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Bn&&en(Bn,n)?null:(Bn=n,(e=se.getPooled(Un.select,Vn,e,t)).type="select",e.target=Wn,z(e),e))}var Gn={eventTypes:Un,extractEvents:function(e,t,n,r){var i,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!o)){e:{o=In(o),i=_.onSelect;for(var a=0;a<i.length;a++){var l=i[a];if(!o.hasOwnProperty(l)||!o[l]){o=!1;break e}}o=!0}i=!o}if(i)return null;switch(o=t?H(t):window,e){case"focus":(Me(o)||"true"===o.contentEditable)&&(Wn=o,Vn=t,Bn=null);break;case"blur":Bn=Vn=Wn=null;break;case"mousedown":zn=!0;break;case"contextmenu":case"mouseup":case"dragend":return zn=!1,qn(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return qn(n,r)}return null}};function $n(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+yt(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Qn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Yn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:yt(n)}}function Xn(e,t){var n=yt(t.value),r=yt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),E=M,T=j,w=H,N.injectEventPluginsByName({SimpleEventPlugin:_n,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:Ft,SelectEventPlugin:Gn,BeforeInputEventPlugin:Ce});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr,rr=void 0,ir=(nr=function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((rr=rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,t)})}:nr);function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ar={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},lr=["Webkit","ms","Moz","O"];function sr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ar.hasOwnProperty(e)&&ar[e]?(""+t).trim():t+"px"}function ur(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=sr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(ar).forEach(function(e){lr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ar[t]=ar[e]})});var cr=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function fr(e,t){t&&(cr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function dr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=In(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=_[t];for(var r=0;r<t.length;r++){var i=t[r];if(!n.hasOwnProperty(i)||!n[i]){switch(i){case"scroll":Sn("scroll",e);break;case"focus":case"blur":Sn("focus",e),Sn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":Ue(i)&&Sn(i,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(i)&&Cn(i,e)}n[i]=!0}}}function hr(){}var mr=null,gr=null;function vr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var br="function"==typeof setTimeout?setTimeout:void 0,_r="function"==typeof clearTimeout?clearTimeout:void 0,Er=o.unstable_scheduleCallback,Tr=o.unstable_cancelCallback;function wr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function xr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Cr=[],Sr=-1;function kr(e){0>Sr||(e.current=Cr[Sr],Cr[Sr]=null,Sr--)}function Or(e,t){Cr[++Sr]=e.current,e.current=t}var Nr={},Ar={current:Nr},Dr={current:!1},Ir=Nr;function Pr(e,t){var n=e.type.contextTypes;if(!n)return Nr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Lr(e){return null!=(e=e.childContextTypes)}function Rr(e){kr(Dr),kr(Ar)}function jr(e){kr(Dr),kr(Ar)}function Hr(e,t,n){Ar.current!==Nr&&a("168"),Or(Ar,t),Or(Dr,n)}function Mr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())o in e||a("108",lt(t)||"Unknown",o);return i({},n,r)}function Fr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Nr,Ir=Ar.current,Or(Ar,t),Or(Dr,Dr.current),!0}function Ur(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Mr(e,t,Ir),r.__reactInternalMemoizedMergedChildContext=t,kr(Dr),kr(Ar),Or(Ar,t)):kr(Dr),Or(Dr,n)}var Wr=null,Vr=null;function Br(e){return function(t){try{return e(t)}catch(e){}}}function zr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function qr(e,t,n,r){return new zr(e,t,n,r)}function Gr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function $r(e,t){var n=e.alternate;return null===n?((n=qr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Kr(e,t,n,r,i,o){var l=2;if(r=e,"function"==typeof e)Gr(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case Qe:return Qr(n.children,i,o,t);case et:return Yr(n,3|i,o,t);case Ye:return Yr(n,2|i,o,t);case Xe:return(e=qr(12,n,t,4|i)).elementType=Xe,e.type=Xe,e.expirationTime=o,e;case nt:return(e=qr(13,n,t,i)).elementType=nt,e.type=nt,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:l=10;break e;case Ze:l=9;break e;case tt:l=11;break e;case rt:l=14;break e;case it:l=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=qr(l,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Qr(e,t,n,r){return(e=qr(7,e,r,t)).expirationTime=n,e}function Yr(e,t,n,r){return e=qr(8,e,r,t),t=0==(1&t)?Ye:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Xr(e,t,n){return(e=qr(6,e,null,t)).expirationTime=n,e}function Jr(e,t,n){return(t=qr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),ni(t,e)}function ei(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),ni(t,e)}function ti(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function ni(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,i=t.earliestPendingTime,o=t.latestPingedTime;0===(i=0!==i?i:o)&&(0===e||r<e)&&(i=r),0!==(e=i)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=i,t.expirationTime=e}function ri(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ii=(new r.Component).refs;function oi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var ai={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Tl(),i=Yo(r=Qa(r,e));i.payload=t,null!=n&&(i.callback=n),Ba(),Jo(e,i),Ja(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Tl(),i=Yo(r=Qa(r,e));i.tag=zo,i.payload=t,null!=n&&(i.callback=n),Ba(),Jo(e,i),Ja(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Tl(),r=Yo(n=Qa(n,e));r.tag=qo,null!=t&&(r.callback=t),Ba(),Jo(e,r),Ja(e,n)}};function li(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(i,o))}function si(e,t,n){var r=!1,i=Nr,o=t.contextType;return"object"==typeof o&&null!==o?o=Vo(o):(i=Lr(t)?Ir:Ar.current,o=(r=null!=(r=t.contextTypes))?Pr(e,i):Nr),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ai,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function ui(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ai.enqueueReplaceState(t,t.state,null)}function ci(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=ii;var o=t.contextType;"object"==typeof o&&null!==o?i.context=Vo(o):(o=Lr(t)?Ir:Ar.current,i.context=Pr(e,o)),null!==(o=e.updateQueue)&&(na(e,o,n,i,r),i.state=e.memoizedState),"function"==typeof(o=t.getDerivedStateFromProps)&&(oi(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&ai.enqueueReplaceState(i,i.state,null),null!==(o=e.updateQueue)&&(na(e,o,n,i,r),i.state=e.memoizedState)),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var fi=Array.isArray;function di(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",e);var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===ii&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function pi(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function hi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=$r(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Xr(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=di(e,t,n),r.return=e,r):((r=Kr(n.type,n.key,n.props,null,e.mode,r)).ref=di(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jr(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Qr(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case $e:return(n=Kr(t.type,t.key,t.props,null,e.mode,n)).ref=di(e,null,t),n.return=e,n;case Ke:return(t=Jr(t,e.mode,n)).return=e,t}if(fi(t)||at(t))return(t=Qr(t,e.mode,n,null)).return=e,t;pi(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case $e:return n.key===i?n.type===Qe?f(e,t,n.props.children,r,i):u(e,t,n,r):null;case Ke:return n.key===i?c(e,t,n,r):null}if(fi(n)||at(n))return null!==i?null:f(e,t,n,r,null);pi(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case $e:return e=e.get(null===r.key?n:r.key)||null,r.type===Qe?f(t,e,r.props.children,i,r.key):u(t,e,r,i);case Ke:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(fi(r)||at(r))return f(t,e=e.get(n)||null,r,i,null);pi(t,r)}return null}function m(i,a,l,s){for(var u=null,c=null,f=a,m=a=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=p(i,f,l[m],s);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(i,f),a=o(v,a,m),null===c?u=v:c.sibling=v,c=v,f=g}if(m===l.length)return n(i,f),u;if(null===f){for(;m<l.length;m++)(f=d(i,l[m],s))&&(a=o(f,a,m),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(i,f);m<l.length;m++)(g=h(f,i,m,l[m],s))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),a=o(g,a,m),null===c?u=g:c.sibling=g,c=g);return e&&f.forEach(function(e){return t(i,e)}),u}function g(i,l,s,u){var c=at(s);"function"!=typeof c&&a("150"),null==(s=c.call(s))&&a("151");for(var f=c=null,m=l,g=l=0,v=null,y=s.next();null!==m&&!y.done;g++,y=s.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(i,m,y.value,u);if(null===b){m||(m=v);break}e&&m&&null===b.alternate&&t(i,m),l=o(b,l,g),null===f?c=b:f.sibling=b,f=b,m=v}if(y.done)return n(i,m),c;if(null===m){for(;!y.done;g++,y=s.next())null!==(y=d(i,y.value,u))&&(l=o(y,l,g),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(i,m);!y.done;g++,y=s.next())null!==(y=h(m,i,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),l=o(y,l,g),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach(function(e){return t(i,e)}),c}return function(e,r,o,s){var u="object"==typeof o&&null!==o&&o.type===Qe&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case $e:e:{for(c=o.key,u=r;null!==u;){if(u.key===c){if(7===u.tag?o.type===Qe:u.elementType===o.type){n(e,u.sibling),(r=i(u,o.type===Qe?o.props.children:o.props)).ref=di(e,u,o),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}o.type===Qe?((r=Qr(o.props.children,e.mode,s,o.key)).return=e,e=r):((s=Kr(o.type,o.key,o.props,null,e.mode,s)).ref=di(e,r,o),s.return=e,e=s)}return l(e);case Ke:e:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jr(o,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Xr(o,e.mode,s)).return=e,e=r),l(e);if(fi(o))return m(e,r,o,s);if(at(o))return g(e,r,o,s);if(c&&pi(e,o),void 0===o&&!u)switch(e.tag){case 1:case 0:a("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var mi=hi(!0),gi=hi(!1),vi={},yi={current:vi},bi={current:vi},_i={current:vi};function Ei(e){return e===vi&&a("174"),e}function Ti(e,t){Or(_i,t),Or(bi,e),Or(yi,vi);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}kr(yi),Or(yi,t)}function wi(e){kr(yi),kr(bi),kr(_i)}function xi(e){Ei(_i.current);var t=Ei(yi.current),n=tr(t,e.type);t!==n&&(Or(bi,e),Or(yi,n))}function Ci(e){bi.current===e&&(kr(yi),kr(bi))}var Si=0,ki=2,Oi=4,Ni=8,Ai=16,Di=32,Ii=64,Pi=128,Li=ze.ReactCurrentDispatcher,Ri=0,ji=null,Hi=null,Mi=null,Fi=null,Ui=null,Wi=null,Vi=0,Bi=null,zi=0,qi=!1,Gi=null,$i=0;function Ki(){a("307")}function Qi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Yi(e,t,n,r,i,o){if(Ri=o,ji=t,Mi=null!==e?e.memoizedState:null,Li.current=null===Mi?uo:co,t=n(r,i),qi){do{qi=!1,$i+=1,Mi=null!==e?e.memoizedState:null,Wi=Fi,Bi=Ui=Hi=null,Li.current=co,t=n(r,i)}while(qi);Gi=null,$i=0}return Li.current=so,(e=ji).memoizedState=Fi,e.expirationTime=Vi,e.updateQueue=Bi,e.effectTag|=zi,e=null!==Hi&&null!==Hi.next,Ri=0,Wi=Ui=Fi=Mi=Hi=ji=null,Vi=0,Bi=null,zi=0,e&&a("300"),t}function Xi(){Li.current=so,Ri=0,Wi=Ui=Fi=Mi=Hi=ji=null,Vi=0,Bi=null,zi=0,qi=!1,Gi=null,$i=0}function Ji(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Ui?Fi=Ui=e:Ui=Ui.next=e,Ui}function Zi(){if(null!==Wi)Wi=(Ui=Wi).next,Mi=null!==(Hi=Mi)?Hi.next:null;else{null===Mi&&a("310");var e={memoizedState:(Hi=Mi).memoizedState,baseState:Hi.baseState,queue:Hi.queue,baseUpdate:Hi.baseUpdate,next:null};Ui=null===Ui?Fi=e:Ui.next=e,Mi=Hi.next}return Ui}function eo(e,t){return"function"==typeof t?t(e):t}function to(e){var t=Zi(),n=t.queue;if(null===n&&a("311"),0<$i){var r=n.dispatch;if(null!==Gi){var i=Gi.get(n);if(void 0!==i){Gi.delete(n);var o=t.memoizedState;do{o=e(o,i.action),i=i.next}while(null!==i);return Jt(o,t.memoizedState)||(To=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),[o,r]}}return[t.memoizedState,r]}r=n.last;var l=t.baseUpdate;if(o=t.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var s=i=null,u=r,c=!1;do{var f=u.expirationTime;f<Ri?(c||(c=!0,s=l,i=o),f>Vi&&(Vi=f)):o=u.eagerReducer===e?u.eagerState:e(o,u.action),l=u,u=u.next}while(null!==u&&u!==r);c||(s=l,i=o),Jt(o,t.memoizedState)||(To=!0),t.memoizedState=o,t.baseUpdate=s,t.baseState=i,n.eagerReducer=e,n.eagerState=o}return[t.memoizedState,n.dispatch]}function no(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Bi?(Bi={lastEffect:null}).lastEffect=e.next=e:null===(t=Bi.lastEffect)?Bi.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Bi.lastEffect=e),e}function ro(e,t,n,r){var i=Ji();zi|=e,i.memoizedState=no(t,n,void 0,void 0===r?null:r)}function io(e,t,n,r){var i=Zi();r=void 0===r?null:r;var o=void 0;if(null!==Hi){var a=Hi.memoizedState;if(o=a.destroy,null!==r&&Qi(r,a.deps))return void no(Si,n,o,r)}zi|=e,i.memoizedState=no(t,n,o,r)}function oo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ao(){}function lo(e,t,n){25>$i||a("301");var r=e.alternate;if(e===ji||null!==r&&r===ji)if(qi=!0,e={expirationTime:Ri,action:n,eagerReducer:null,eagerState:null,next:null},null===Gi&&(Gi=new Map),void 0===(n=Gi.get(t)))Gi.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Ba();var i=Tl(),o={expirationTime:i=Qa(i,e),action:n,eagerReducer:null,eagerState:null,next:null},l=t.last;if(null===l)o.next=o;else{var s=l.next;null!==s&&(o.next=s),l.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.eagerReducer))try{var u=t.eagerState,c=r(u,n);if(o.eagerReducer=r,o.eagerState=c,Jt(c,u))return}catch(e){}Ja(e,i)}}var so={readContext:Vo,useCallback:Ki,useContext:Ki,useEffect:Ki,useImperativeHandle:Ki,useLayoutEffect:Ki,useMemo:Ki,useReducer:Ki,useRef:Ki,useState:Ki,useDebugValue:Ki},uo={readContext:Vo,useCallback:function(e,t){return Ji().memoizedState=[e,void 0===t?null:t],e},useContext:Vo,useEffect:function(e,t){return ro(516,Pi|Ii,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ro(4,Oi|Di,oo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ro(4,Oi|Di,e,t)},useMemo:function(e,t){var n=Ji();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ji();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,eagerReducer:e,eagerState:t}).dispatch=lo.bind(null,ji,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ji().memoizedState=e},useState:function(e){var t=Ji();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,eagerReducer:eo,eagerState:e}).dispatch=lo.bind(null,ji,e),[t.memoizedState,e]},useDebugValue:ao},co={readContext:Vo,useCallback:function(e,t){var n=Zi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Vo,useEffect:function(e,t){return io(516,Pi|Ii,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,io(4,Oi|Di,oo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return io(4,Oi|Di,e,t)},useMemo:function(e,t){var n=Zi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:to,useRef:function(){return Zi().memoizedState},useState:function(e){return to(eo)},useDebugValue:ao},fo=null,po=null,ho=!1;function mo(e,t){var n=qr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function go(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function vo(e){if(ho){var t=po;if(t){var n=t;if(!go(e,t)){if(!(t=wr(n))||!go(e,t))return e.effectTag|=2,ho=!1,void(fo=e);mo(fo,n)}fo=e,po=xr(t)}else e.effectTag|=2,ho=!1,fo=e}}function yo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;fo=e}function bo(e){if(e!==fo)return!1;if(!ho)return yo(e),ho=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yr(t,e.memoizedProps))for(t=po;t;)mo(e,t),t=wr(t);return yo(e),po=fo?wr(e.stateNode):null,!0}function _o(){po=fo=null,ho=!1}var Eo=ze.ReactCurrentOwner,To=!1;function wo(e,t,n,r){t.child=null===e?gi(t,null,n,r):mi(t,e.child,n,r)}function xo(e,t,n,r,i){n=n.render;var o=t.ref;return Wo(t,i),r=Yi(e,t,n,r,o,i),null===e||To?(t.effectTag|=1,wo(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Po(e,t,i))}function Co(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Gr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Kr(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,So(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(i,r)&&e.ref===t.ref)?Po(e,t,o):(t.effectTag|=1,(e=$r(a,r)).ref=t.ref,e.return=t,t.child=e)}function So(e,t,n,r,i,o){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(To=!1,i<o)?Po(e,t,o):Oo(e,t,n,r,o)}function ko(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Oo(e,t,n,r,i){var o=Lr(n)?Ir:Ar.current;return o=Pr(t,o),Wo(t,i),n=Yi(e,t,n,r,o,i),null===e||To?(t.effectTag|=1,wo(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Po(e,t,i))}function No(e,t,n,r,i){if(Lr(n)){var o=!0;Fr(t)}else o=!1;if(Wo(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),si(t,n,r),ci(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var s=a.context,u=n.contextType;"object"==typeof u&&null!==u?u=Vo(u):u=Pr(t,u=Lr(n)?Ir:Ar.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&ui(t,a,r,u),$o=!1;var d=t.memoizedState;s=a.state=d;var p=t.updateQueue;null!==p&&(na(t,p,r,a,i),s=t.memoizedState),l!==r||d!==s||Dr.current||$o?("function"==typeof c&&(oi(t,n,c,r),s=t.memoizedState),(l=$o||li(t,n,l,r,d,s,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=u,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,l=t.memoizedProps,a.props=t.type===t.elementType?l:ri(t.type,l),s=a.context,"object"==typeof(u=n.contextType)&&null!==u?u=Vo(u):u=Pr(t,u=Lr(n)?Ir:Ar.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&ui(t,a,r,u),$o=!1,s=t.memoizedState,d=a.state=s,null!==(p=t.updateQueue)&&(na(t,p,r,a,i),d=t.memoizedState),l!==r||s!==d||Dr.current||$o?("function"==typeof c&&(oi(t,n,c,r),d=t.memoizedState),(c=$o||li(t,n,l,r,s,d,u))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,u)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Ao(e,t,n,r,o,i)}function Ao(e,t,n,r,i,o){ko(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&Ur(t,n,!1),Po(e,t,o);r=t.stateNode,Eo.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=mi(t,e.child,null,o),t.child=mi(t,null,l,o)):wo(e,t,l,o),t.memoizedState=r.state,i&&Ur(t,n,!0),t.child}function Do(e){var t=e.stateNode;t.pendingContext?Hr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Hr(0,t.context,!1),Ti(e,t.containerInfo)}function Io(e,t,n){var r=t.mode,i=t.pendingProps,o=t.memoizedState;if(0==(64&t.effectTag)){o=null;var a=!1}else o={timedOutAt:null!==o?o.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var l=i.fallback;e=Qr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Qr(l,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=gi(t,null,i.children,n);else null!==e.memoizedState?(l=(r=e.child).sibling,a?(n=i.fallback,i=$r(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(i.child=a)),r=i.sibling=$r(l,n,l.expirationTime),n=i,i.childExpirationTime=0,n.return=r.return=t):n=r=mi(t,r.child,i.children,n)):(l=e.child,a?(a=i.fallback,(i=Qr(null,r,0,null)).child=l,0==(1&t.mode)&&(i.child=null!==t.memoizedState?t.child.child:t.child),(r=i.sibling=Qr(a,r,n,null)).effectTag|=2,n=i,i.childExpirationTime=0,n.return=r.return=t):r=n=mi(t,l,i.children,n)),t.stateNode=e.stateNode;return t.memoizedState=o,t.child=n,r}function Po(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=$r(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$r(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Lo(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Dr.current)To=!0;else if(r<n){switch(To=!1,t.tag){case 3:Do(t),_o();break;case 5:xi(t);break;case 1:Lr(t.type)&&Fr(t);break;case 4:Ti(t,t.stateNode.containerInfo);break;case 10:Fo(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Io(e,t,n):null!==(t=Po(e,t,n))?t.sibling:null}return Po(e,t,n)}}else To=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var i=Pr(t,Ar.current);if(Wo(t,n),i=Yi(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,Xi(),Lr(r)){var o=!0;Fr(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&oi(t,r,l,e),i.updater=ai,t.stateNode=i,i._reactInternalFiber=t,ci(t,r,e,n),t=Ao(null,t,r,!0,o,n)}else t.tag=0,wo(null,t,i,n),t=t.child;return t;case 16:switch(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),o=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(i),t.type=e,i=t.tag=function(e){if("function"==typeof e)return Gr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),o=ri(e,o),l=void 0,i){case 0:l=Oo(null,t,e,o,n);break;case 1:l=No(null,t,e,o,n);break;case 11:l=xo(null,t,e,o,n);break;case 14:l=Co(null,t,e,ri(e.type,o),r,n);break;default:a("306",e,"")}return l;case 0:return r=t.type,i=t.pendingProps,Oo(e,t,r,i=t.elementType===r?i:ri(r,i),n);case 1:return r=t.type,i=t.pendingProps,No(e,t,r,i=t.elementType===r?i:ri(r,i),n);case 3:return Do(t),null===(r=t.updateQueue)&&a("282"),i=null!==(i=t.memoizedState)?i.element:null,na(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===i?(_o(),t=Po(e,t,n)):(i=t.stateNode,(i=(null===e||null===e.child)&&i.hydrate)&&(po=xr(t.stateNode.containerInfo),fo=t,i=ho=!0),i?(t.effectTag|=2,t.child=gi(t,null,r,n)):(wo(e,t,r,n),_o()),t=t.child),t;case 5:return xi(t),null===e&&vo(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,l=i.children,yr(r,i)?l=null:null!==o&&yr(r,o)&&(t.effectTag|=16),ko(e,t),1!==n&&1&t.mode&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(wo(e,t,l,n),t=t.child),t;case 6:return null===e&&vo(t),null;case 13:return Io(e,t,n);case 4:return Ti(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=mi(t,null,r,n):wo(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,xo(e,t,r,i=t.elementType===r?i:ri(r,i),n);case 7:return wo(e,t,t.pendingProps,n),t.child;case 8:case 12:return wo(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,l=t.memoizedProps,Fo(t,o=i.value),null!==l){var s=l.value;if(0===(o=Jt(s,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,o):1073741823))){if(l.children===i.children&&!Dr.current){t=Po(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.contextDependencies;if(null!==u){l=s.child;for(var c=u.first;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===s.tag&&((c=Yo(n)).tag=qo,Jo(s,c)),s.expirationTime<n&&(s.expirationTime=n),null!==(c=s.alternate)&&c.expirationTime<n&&(c.expirationTime=n),c=n;for(var f=s.return;null!==f;){var d=f.alternate;if(f.childExpirationTime<c)f.childExpirationTime=c,null!==d&&d.childExpirationTime<c&&(d.childExpirationTime=c);else{if(!(null!==d&&d.childExpirationTime<c))break;d.childExpirationTime=c}f=f.return}u.expirationTime<n&&(u.expirationTime=n);break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}}wo(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,Wo(t,n),r=r(i=Vo(i,o.unstable_observedBits)),t.effectTag|=1,wo(e,t,r,n),t.child;case 14:return o=ri(i=t.type,t.pendingProps),Co(e,t,i,o=ri(i.type,o),r,n);case 15:return So(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:ri(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Lr(r)?(e=!0,Fr(t)):e=!1,Wo(t,n),si(t,r,i),ci(t,r,i,n),Ao(null,t,r,!0,e,n)}a("156")}var Ro={current:null},jo=null,Ho=null,Mo=null;function Fo(e,t){var n=e.type._context;Or(Ro,n._currentValue),n._currentValue=t}function Uo(e){var t=Ro.current;kr(Ro),e.type._context._currentValue=t}function Wo(e,t){jo=e,Mo=Ho=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(To=!0),e.contextDependencies=null}function Vo(e,t){return Mo!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Mo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ho?(null===jo&&a("308"),Ho=t,jo.contextDependencies={first:t,expirationTime:0}):Ho=Ho.next=t),e._currentValue}var Bo=0,zo=1,qo=2,Go=3,$o=!1;function Ko(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Qo(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Yo(e){return{expirationTime:e,tag:Bo,payload:null,callback:null,next:null,nextEffect:null}}function Xo(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Jo(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,i=null;null===r&&(r=e.updateQueue=Ko(e.memoizedState))}else r=e.updateQueue,i=n.updateQueue,null===r?null===i?(r=e.updateQueue=Ko(e.memoizedState),i=n.updateQueue=Ko(n.memoizedState)):r=e.updateQueue=Qo(i):null===i&&(i=n.updateQueue=Qo(r));null===i||r===i?Xo(r,t):null===r.lastUpdate||null===i.lastUpdate?(Xo(r,t),Xo(i,t)):(Xo(r,t),i.lastUpdate=t)}function Zo(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Ko(e.memoizedState):ea(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ea(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Qo(t)),t}function ta(e,t,n,r,o,a){switch(n.tag){case zo:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case Go:e.effectTag=-2049&e.effectTag|64;case Bo:if(null==(o="function"==typeof(e=n.payload)?e.call(a,r,o):e))break;return i({},r,o);case qo:$o=!0}return r}function na(e,t,n,r,i){$o=!1;for(var o=(t=ea(e,t)).baseState,a=null,l=0,s=t.firstUpdate,u=o;null!==s;){var c=s.expirationTime;c<i?(null===a&&(a=s,o=u),l<c&&(l=c)):(u=ta(e,0,s,u,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=s:(t.lastEffect.nextEffect=s,t.lastEffect=s))),s=s.next}for(c=null,s=t.firstCapturedUpdate;null!==s;){var f=s.expirationTime;f<i?(null===c&&(c=s,null===a&&(o=u)),l<f&&(l=f)):(u=ta(e,0,s,u,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=s:(t.lastCapturedEffect.nextEffect=s,t.lastCapturedEffect=s))),s=s.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(o=u),t.baseState=o,t.firstUpdate=a,t.firstCapturedUpdate=c,e.expirationTime=l,e.memoizedState=u}function ra(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ia(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ia(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ia(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function oa(e,t){return{value:e,source:t,stack:st(t)}}function aa(e){e.effectTag|=4}var la=void 0,sa=void 0,ua=void 0,ca=void 0;la=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},sa=function(){},ua=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var l=t.stateNode;switch(Ei(yi.current),e=null,n){case"input":a=bt(l,a),r=bt(l,r),e=[];break;case"option":a=$n(l,a),r=$n(l,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=Qn(l,a),r=Qn(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=hr)}fr(n,r),l=n=void 0;var s=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var u=a[n];for(l in u)u.hasOwnProperty(l)&&(s||(s={}),s[l]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(u=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&c!==u&&(null!=c||null!=u))if("style"===n)if(u){for(l in u)!u.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(s||(s={}),s[l]="");for(l in c)c.hasOwnProperty(l)&&u[l]!==c[l]&&(s||(s={}),s[l]=c[l])}else s||(e||(e=[]),e.push(n,s)),s=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(e=e||[]).push(n,""+c)):"children"===n?u===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=c&&pr(o,n),e||u===c||(e=[])):(e=e||[]).push(n,c))}s&&(e=e||[]).push("style",s),o=e,(t.updateQueue=o)&&aa(t)}},ca=function(e,t,n,r){n!==r&&aa(t)};var fa="function"==typeof WeakSet?WeakSet:Set;function da(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=st(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function pa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ka(e,t)}else t.current=null}function ha(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==Si){var i=r.destroy;r.destroy=void 0,void 0!==i&&i()}(r.tag&t)!==Si&&(i=r.create,r.destroy=i()),r=r.next}while(r!==n)}}function ma(e){switch("function"==typeof Vr&&Vr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var i=e;try{r()}catch(e){Ka(i,e)}}n=n.next}while(n!==t)}break;case 1:if(pa(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Ka(e,t)}break;case 5:pa(e);break;case 4:ya(e)}}function ga(e){return 5===e.tag||3===e.tag||4===e.tag}function va(e){e:{for(var t=e.return;null!==t;){if(ga(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ga(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){if(5===i.tag||6===i.tag)if(n)if(r){var o=t,l=i.stateNode,s=n;8===o.nodeType?o.parentNode.insertBefore(l,s):o.insertBefore(l,s)}else t.insertBefore(i.stateNode,n);else r?(l=t,s=i.stateNode,8===l.nodeType?(o=l.parentNode).insertBefore(s,l):(o=l).appendChild(s),null!=(l=l._reactRootContainer)||null!==o.onclick||(o.onclick=hr)):t.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function ya(e){for(var t=e,n=!1,r=void 0,i=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,i=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,i=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var o=t,l=o;;)if(ma(l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===o)break;for(;null===l.sibling;){if(null===l.return||l.return===o)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}i?(o=r,l=t.stateNode,8===o.nodeType?o.parentNode.removeChild(l):o.removeChild(l)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,i=!0,t.child.return=t,t=t.child;continue}}else if(ma(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function ba(e,t){switch(t.tag){case 0:case 11:case 14:case 15:ha(Oi,Ni,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var i=t.type,o=t.updateQueue;t.updateQueue=null,null!==o&&function(e,t,n,r,i){e[L]=i,"input"===n&&"radio"===i.type&&null!=i.name&&Et(e,i),dr(n,r),r=dr(n,i);for(var o=0;o<t.length;o+=2){var a=t[o],l=t[o+1];"style"===a?ur(e,l):"dangerouslySetInnerHTML"===a?ir(e,l):"children"===a?or(e,l):vt(e,a,l,r)}switch(n){case"input":Tt(e,i);break;case"textarea":Xn(e,i);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!i.multiple,null!=(n=i.value)?Kn(e,!!i.multiple,n,!1):t!==!!i.multiple&&(null!=i.defaultValue?Kn(e,!!i.multiple,i.defaultValue,!0):Kn(e,!!i.multiple,i.multiple?[]:"",!1))}}(n,o,i,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=Tl())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=sr("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var l=t.stateNode;null===l&&(l=t.stateNode=new fa),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Qa(t=Tl(),e),null!==(e=Xa(e,t))&&(Zr(e,t),0!==(t=e.expirationTime)&&wl(e,t))}.bind(null,t,e);l.has(e)||(l.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var _a="function"==typeof WeakMap?WeakMap:Map;function Ea(e,t,n){(n=Yo(n)).tag=Go,n.payload={element:null};var r=t.value;return n.callback=function(){Il(r),da(e,t)},n}function Ta(e,t,n){(n=Yo(n)).tag=Go;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ma?Ma=new Set([this]):Ma.add(this));var n=t.value,i=t.stack;da(e,t),this.componentDidCatch(n,{componentStack:null!==i?i:""})}),n}function wa(e){switch(e.tag){case 1:Lr(e.type)&&Rr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return wi(),jr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return Ci(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return wi(),null;case 10:return Uo(e),null;default:return null}}var xa=ze.ReactCurrentDispatcher,Ca=ze.ReactCurrentOwner,Sa=1073741822,ka=!1,Oa=null,Na=null,Aa=0,Da=-1,Ia=!1,Pa=null,La=!1,Ra=null,ja=null,Ha=null,Ma=null;function Fa(){if(null!==Oa)for(var e=Oa.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Rr();break;case 3:wi(),jr();break;case 5:Ci(t);break;case 4:wi();break;case 10:Uo(t)}e=e.return}Na=null,Aa=0,Da=-1,Ia=!1,Oa=null}function Ua(){for(;null!==Pa;){var e=Pa.effectTag;if(16&e&&or(Pa.stateNode,""),128&e){var t=Pa.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:va(Pa),Pa.effectTag&=-3;break;case 6:va(Pa),Pa.effectTag&=-3,ba(Pa.alternate,Pa);break;case 4:ba(Pa.alternate,Pa);break;case 8:ya(e=Pa),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Pa=Pa.nextEffect}}function Wa(){for(;null!==Pa;){if(256&Pa.effectTag)e:{var e=Pa.alternate,t=Pa;switch(t.tag){case 0:case 11:case 15:ha(ki,Si,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ri(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Pa=Pa.nextEffect}}function Va(e,t){for(;null!==Pa;){var n=Pa.effectTag;if(36&n){var r=Pa.alternate,i=Pa,o=t;switch(i.tag){case 0:case 11:case 15:ha(Ai,Di,i);break;case 1:var l=i.stateNode;if(4&i.effectTag)if(null===r)l.componentDidMount();else{var s=i.elementType===i.type?r.memoizedProps:ri(i.type,r.memoizedProps);l.componentDidUpdate(s,r.memoizedState,l.__reactInternalSnapshotBeforeUpdate)}null!==(r=i.updateQueue)&&ra(0,r,l);break;case 3:if(null!==(r=i.updateQueue)){if(l=null,null!==i.child)switch(i.child.tag){case 5:l=i.child.stateNode;break;case 1:l=i.child.stateNode}ra(0,r,l)}break;case 5:o=i.stateNode,null===r&&4&i.effectTag&&vr(i.type,i.memoizedProps)&&o.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}128&n&&(null!==(i=Pa.ref)&&(o=Pa.stateNode,"function"==typeof i?i(o):i.current=o)),512&n&&(Ra=e),Pa=Pa.nextEffect}}function Ba(){null!==ja&&Tr(ja),null!==Ha&&Ha()}function za(e,t){La=ka=!0,e.current===t&&a("177");var n=e.pendingCommitExpirationTime;0===n&&a("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,i=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Zr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Zr(e,t)):t>n&&Zr(e,t)}ni(0,e)}(e,i>r?i:r),Ca.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,mr=xn,gr=function(){var e=jn();if(Hn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,i=n.focusNode;n=n.focusOffset;try{t.nodeType,i.nodeType}catch(e){t=null;break e}var o=0,a=-1,l=-1,s=0,u=0,c=e,f=null;t:for(;;){for(var d;c!==t||0!==r&&3!==c.nodeType||(a=o+r),c!==i||0!==n&&3!==c.nodeType||(l=o+n),3===c.nodeType&&(o+=c.nodeValue.length),null!==(d=c.firstChild);)f=c,c=d;for(;;){if(c===e)break t;if(f===t&&++s===r&&(a=o),f===i&&++u===n&&(l=o),null!==(d=c.nextSibling))break;f=(c=f).parentNode}c=d}t=-1===a||-1===l?null:{start:a,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),xn=!1,Pa=r;null!==Pa;){i=!1;var l=void 0;try{Wa()}catch(e){i=!0,l=e}i&&(null===Pa&&a("178"),Ka(Pa,l),null!==Pa&&(Pa=Pa.nextEffect))}for(Pa=r;null!==Pa;){i=!1,l=void 0;try{Ua()}catch(e){i=!0,l=e}i&&(null===Pa&&a("178"),Ka(Pa,l),null!==Pa&&(Pa=Pa.nextEffect))}for(Mn(gr),gr=null,xn=!!mr,mr=null,e.current=t,Pa=r;null!==Pa;){i=!1,l=void 0;try{Va(e,n)}catch(e){i=!0,l=e}i&&(null===Pa&&a("178"),Ka(Pa,l),null!==Pa&&(Pa=Pa.nextEffect))}if(null!==r&&null!==Ra){var s=function(e,t){Ha=ja=Ra=null;var n=il;il=!0;do{if(512&t.effectTag){var r=!1,i=void 0;try{var o=t;ha(Pi,Si,o),ha(Si,Ii,o)}catch(e){r=!0,i=e}r&&Ka(t,i)}t=t.nextEffect}while(null!==t);il=n,0!==(n=e.expirationTime)&&wl(e,n),cl||il||Ol(1073741823,!1)}.bind(null,e,r);ja=o.unstable_runWithPriority(o.unstable_NormalPriority,function(){return Er(s)}),Ha=s}ka=La=!1,"function"==typeof Wr&&Wr(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(Ma=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function qa(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Oa=e;e:{var o=t,l=Aa,s=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Lr(t.type)&&Rr();break;case 3:wi(),jr(),(s=t.stateNode).pendingContext&&(s.context=s.pendingContext,s.pendingContext=null),null!==o&&null!==o.child||(bo(t),t.effectTag&=-3),sa(t);break;case 5:Ci(t);var u=Ei(_i.current);if(l=t.type,null!==o&&null!=t.stateNode)ua(o,t,l,s,u),o.ref!==t.ref&&(t.effectTag|=128);else if(s){var c=Ei(yi.current);if(bo(t)){o=(s=t).stateNode;var f=s.type,d=s.memoizedProps,p=u;switch(o[P]=s,o[L]=d,l=void 0,u=f){case"iframe":case"object":Cn("load",o);break;case"video":case"audio":for(f=0;f<te.length;f++)Cn(te[f],o);break;case"source":Cn("error",o);break;case"img":case"image":case"link":Cn("error",o),Cn("load",o);break;case"form":Cn("reset",o),Cn("submit",o);break;case"details":Cn("toggle",o);break;case"input":_t(o,d),Cn("invalid",o),pr(p,"onChange");break;case"select":o._wrapperState={wasMultiple:!!d.multiple},Cn("invalid",o),pr(p,"onChange");break;case"textarea":Yn(o,d),Cn("invalid",o),pr(p,"onChange")}for(l in fr(u,d),f=null,d)d.hasOwnProperty(l)&&(c=d[l],"children"===l?"string"==typeof c?o.textContent!==c&&(f=["children",c]):"number"==typeof c&&o.textContent!==""+c&&(f=["children",""+c]):b.hasOwnProperty(l)&&null!=c&&pr(p,l));switch(u){case"input":Ve(o),wt(o,d,!0);break;case"textarea":Ve(o),Jn(o);break;case"select":case"option":break;default:"function"==typeof d.onClick&&(o.onclick=hr)}l=f,s.updateQueue=l,(s=null!==l)&&aa(t)}else{d=t,o=l,p=s,f=9===u.nodeType?u:u.ownerDocument,c===Zn.html&&(c=er(o)),c===Zn.html?"script"===o?((o=f.createElement("div")).innerHTML="<script><\/script>",f=o.removeChild(o.firstChild)):"string"==typeof p.is?f=f.createElement(o,{is:p.is}):(f=f.createElement(o),"select"===o&&p.multiple&&(f.multiple=!0)):f=f.createElementNS(c,o),(o=f)[P]=d,o[L]=s,la(o,t,!1,!1),p=o;var h=u,m=dr(f=l,d=s);switch(f){case"iframe":case"object":Cn("load",p),u=d;break;case"video":case"audio":for(u=0;u<te.length;u++)Cn(te[u],p);u=d;break;case"source":Cn("error",p),u=d;break;case"img":case"image":case"link":Cn("error",p),Cn("load",p),u=d;break;case"form":Cn("reset",p),Cn("submit",p),u=d;break;case"details":Cn("toggle",p),u=d;break;case"input":_t(p,d),u=bt(p,d),Cn("invalid",p),pr(h,"onChange");break;case"option":u=$n(p,d);break;case"select":p._wrapperState={wasMultiple:!!d.multiple},u=i({},d,{value:void 0}),Cn("invalid",p),pr(h,"onChange");break;case"textarea":Yn(p,d),u=Qn(p,d),Cn("invalid",p),pr(h,"onChange");break;default:u=d}fr(f,u),c=void 0;var g=f,v=p,y=u;for(c in y)if(y.hasOwnProperty(c)){var _=y[c];"style"===c?ur(v,_):"dangerouslySetInnerHTML"===c?null!=(_=_?_.__html:void 0)&&ir(v,_):"children"===c?"string"==typeof _?("textarea"!==g||""!==_)&&or(v,_):"number"==typeof _&&or(v,""+_):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(b.hasOwnProperty(c)?null!=_&&pr(h,c):null!=_&&vt(v,c,_,m))}switch(f){case"input":Ve(p),wt(p,d,!1);break;case"textarea":Ve(p),Jn(p);break;case"option":null!=d.value&&p.setAttribute("value",""+yt(d.value));break;case"select":(u=p).multiple=!!d.multiple,null!=(p=d.value)?Kn(u,!!d.multiple,p,!1):null!=d.defaultValue&&Kn(u,!!d.multiple,d.defaultValue,!0);break;default:"function"==typeof u.onClick&&(p.onclick=hr)}(s=vr(l,s))&&aa(t),t.stateNode=o}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:o&&null!=t.stateNode?ca(o,t,o.memoizedProps,s):("string"!=typeof s&&(null===t.stateNode&&a("166")),o=Ei(_i.current),Ei(yi.current),bo(t)?(l=(s=t).stateNode,o=s.memoizedProps,l[P]=s,(s=l.nodeValue!==o)&&aa(t)):(l=t,(s=(9===o.nodeType?o:o.ownerDocument).createTextNode(s))[P]=t,l.stateNode=s));break;case 11:break;case 13:if(s=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=l,Oa=t;break e}s=null!==s,l=null!==o&&null!==o.memoizedState,null!==o&&!s&&l&&(null!==(o=o.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=o,o.nextEffect=u):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),(s||l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:wi(),sa(t);break;case 10:Uo(t);break;case 9:case 14:break;case 17:Lr(t.type)&&Rr();break;case 18:break;default:a("156")}Oa=null}if(t=e,1===Aa||1!==t.childExpirationTime){for(s=0,l=t.child;null!==l;)(o=l.expirationTime)>s&&(s=o),(u=l.childExpirationTime)>s&&(s=u),l=l.sibling;t.childExpirationTime=s}if(null!==Oa)return Oa;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=wa(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Ga(e){var t=Lo(e.alternate,e,Aa);return e.memoizedProps=e.pendingProps,null===t&&(t=qa(e)),Ca.current=null,t}function $a(e,t){ka&&a("243"),Ba(),ka=!0;var n=xa.current;xa.current=so;var r=e.nextExpirationTimeToWorkOn;r===Aa&&e===Na&&null!==Oa||(Fa(),Aa=r,Oa=$r((Na=e).current,null),e.pendingCommitExpirationTime=0);for(var i=!1;;){try{if(t)for(;null!==Oa&&!Sl();)Oa=Ga(Oa);else for(;null!==Oa;)Oa=Ga(Oa)}catch(t){if(Mo=Ho=jo=null,Xi(),null===Oa)i=!0,Il(t);else{null===Oa&&a("271");var o=Oa,l=o.return;if(null!==l){e:{var s=e,u=l,c=o,f=t;if(l=Aa,c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var d=f;f=u;var p=-1,h=-1;do{if(13===f.tag){var m=f.alternate;if(null!==m&&null!==(m=m.memoizedState)){h=10*(1073741822-m.timedOutAt);break}"number"==typeof(m=f.pendingProps.maxDuration)&&(0>=m?p=0:(-1===p||m<p)&&(p=m))}f=f.return}while(null!==f);f=u;do{if((m=13===f.tag)&&(m=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),m){if(null===(u=f.updateQueue)?((u=new Set).add(d),f.updateQueue=u):u.add(d),0==(1&f.mode)){f.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((l=Yo(1073741823)).tag=qo,Jo(c,l))),c.expirationTime=1073741823;break e}u=l;var g=(c=s).pingCache;null===g?(g=c.pingCache=new _a,m=new Set,g.set(d,m)):void 0===(m=g.get(d))&&(m=new Set,g.set(d,m)),m.has(u)||(m.add(u),c=Ya.bind(null,c,d,u),d.then(c,c)),-1===p?s=1073741823:(-1===h&&(h=10*(1073741822-ti(s,l))-5e3),s=h+p),0<=s&&Da<s&&(Da=s),f.effectTag|=2048,f.expirationTime=l;break e}f=f.return}while(null!==f);f=Error((lt(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+st(c))}Ia=!0,f=oa(f,c),s=u;do{switch(s.tag){case 3:s.effectTag|=2048,s.expirationTime=l,Zo(s,l=Ea(s,f,l));break e;case 1:if(p=f,h=s.type,c=s.stateNode,0==(64&s.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==c&&"function"==typeof c.componentDidCatch&&(null===Ma||!Ma.has(c)))){s.effectTag|=2048,s.expirationTime=l,Zo(s,l=Ta(s,p,l));break e}}s=s.return}while(null!==s)}Oa=qa(o);continue}i=!0,Il(t)}}break}if(ka=!1,xa.current=n,Mo=Ho=jo=null,Xi(),i)Na=null,e.finishedWork=null;else if(null!==Oa)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&a("281"),Na=null,Ia){if(i=e.latestPendingTime,o=e.latestSuspendedTime,l=e.latestPingedTime,0!==i&&i<r||0!==o&&o<r||0!==l&&l<r)return ei(e,r),void El(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void El(e,n,r,t,-1)}t&&-1!==Da?(ei(e,r),(t=10*(1073741822-ti(e,r)))<Da&&(Da=t),t=10*(1073741822-Tl()),t=Da-t,El(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Ka(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ma||!Ma.has(r)))return Jo(n,e=Ta(n,e=oa(t,e),1073741823)),void Ja(n,1073741823);break;case 3:return Jo(n,e=Ea(n,e=oa(t,e),1073741823)),void Ja(n,1073741823)}n=n.return}3===e.tag&&(Jo(e,n=Ea(e,n=oa(t,e),1073741823)),Ja(e,1073741823))}function Qa(e,t){var n=o.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(ka&&!La)r=Aa;else{switch(n){case o.unstable_ImmediatePriority:r=1073741823;break;case o.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case o.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case o.unstable_LowPriority:case o.unstable_IdlePriority:r=1;break;default:a("313")}null!==Na&&r===Aa&&--r}return n===o.unstable_UserBlockingPriority&&(0===ll||r<ll)&&(ll=r),r}function Ya(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Na&&Aa===n?Na=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),ni(n,e),0!==(n=e.expirationTime)&&wl(e,n)))}function Xa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return i}function Ja(e,t){null!==(e=Xa(e,t))&&(!ka&&0!==Aa&&t>Aa&&Fa(),Zr(e,t),ka&&!La&&Na===e||wl(e,e.expirationTime),vl>gl&&(vl=0,a("185")))}function Za(e,t,n,r,i){return o.unstable_runWithPriority(o.unstable_ImmediatePriority,function(){return e(t,n,r,i)})}var el=null,tl=null,nl=0,rl=void 0,il=!1,ol=null,al=0,ll=0,sl=!1,ul=null,cl=!1,fl=!1,dl=null,pl=o.unstable_now(),hl=1073741822-(pl/10|0),ml=hl,gl=50,vl=0,yl=null;function bl(){hl=1073741822-((o.unstable_now()-pl)/10|0)}function _l(e,t){if(0!==nl){if(t<nl)return;null!==rl&&o.unstable_cancelCallback(rl)}nl=t,e=o.unstable_now()-pl,rl=o.unstable_scheduleCallback(kl,{timeout:10*(1073741822-t)-e})}function El(e,t,n,r,i){e.expirationTime=r,0!==i||Sl()?0<i&&(e.timeoutHandle=br(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,bl(),ml=hl,Nl(e,n)}.bind(null,e,t,n),i)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function Tl(){return il?ml:(xl(),0!==al&&1!==al||(bl(),ml=hl),ml)}function wl(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===tl?(el=tl=e,e.nextScheduledRoot=e):(tl=tl.nextScheduledRoot=e).nextScheduledRoot=el):t>e.expirationTime&&(e.expirationTime=t),il||(cl?fl&&(ol=e,al=1073741823,Al(e,1073741823,!1)):1073741823===t?Ol(1073741823,!1):_l(e,t))}function xl(){var e=0,t=null;if(null!==tl)for(var n=tl,r=el;null!==r;){var i=r.expirationTime;if(0===i){if((null===n||null===tl)&&a("244"),r===r.nextScheduledRoot){el=tl=r.nextScheduledRoot=null;break}if(r===el)el=i=r.nextScheduledRoot,tl.nextScheduledRoot=i,r.nextScheduledRoot=null;else{if(r===tl){(tl=n).nextScheduledRoot=el,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(i>e&&(e=i,t=r),r===tl)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}ol=t,al=e}var Cl=!1;function Sl(){return!!Cl||!!o.unstable_shouldYield()&&(Cl=!0)}function kl(){try{if(!Sl()&&null!==el){bl();var e=el;do{var t=e.expirationTime;0!==t&&hl<=t&&(e.nextExpirationTimeToWorkOn=hl),e=e.nextScheduledRoot}while(e!==el)}Ol(0,!0)}finally{Cl=!1}}function Ol(e,t){if(xl(),t)for(bl(),ml=hl;null!==ol&&0!==al&&e<=al&&!(Cl&&hl>al);)Al(ol,al,hl>al),xl(),bl(),ml=hl;else for(;null!==ol&&0!==al&&e<=al;)Al(ol,al,!1),xl();if(t&&(nl=0,rl=null),0!==al&&_l(ol,al),vl=0,yl=null,null!==dl)for(e=dl,dl=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){sl||(sl=!0,ul=e)}}if(sl)throw e=ul,ul=null,sl=!1,e}function Nl(e,t){il&&a("253"),ol=e,al=t,Al(e,t,!1),Ol(1073741823,!1)}function Al(e,t,n){if(il&&a("245"),il=!0,n){var r=e.finishedWork;null!==r?Dl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,_r(r)),$a(e,n),null!==(r=e.finishedWork)&&(Sl()?e.finishedWork=r:Dl(e,r,t)))}else null!==(r=e.finishedWork)?Dl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,_r(r)),$a(e,n),null!==(r=e.finishedWork)&&Dl(e,r,t));il=!1}function Dl(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===dl?dl=[r]:dl.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===yl?vl++:(yl=e,vl=0),o.unstable_runWithPriority(o.unstable_ImmediatePriority,function(){za(e,t)})}function Il(e){null===ol&&a("246"),ol.expirationTime=0,sl||(sl=!0,ul=e)}function Pl(e,t){var n=cl;cl=!0;try{return e(t)}finally{(cl=n)||il||Ol(1073741823,!1)}}function Ll(e,t){if(cl&&!fl){fl=!0;try{return e(t)}finally{fl=!1}}return e(t)}function Rl(e,t,n){cl||il||0===ll||(Ol(ll,!1),ll=0);var r=cl;cl=!0;try{return o.unstable_runWithPriority(o.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(cl=r)||il||Ol(1073741823,!1)}}function jl(e,t,n,r,i){var o=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Lr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);a("171"),l=void 0}if(1===n.tag){var s=n.type;if(Lr(s)){n=Mr(n,s,l);break e}}n=l}else n=Nr;return null===t.context?t.context=n:t.pendingContext=n,t=i,(i=Yo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(i.callback=t),Ba(),Jo(o,i),Ja(o,r),r}function Hl(e,t,n,r){var i=t.current;return jl(e,t,n,i=Qa(Tl(),i),r)}function Ml(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fl(e){var t=1073741822-25*(1+((1073741822-Tl()+500)/25|0));t>=Sa&&(t=Sa-1),this._expirationTime=Sa=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Ul(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Wl(e,t,n){e={current:t=qr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Vl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Bl(e,t,n,r,i){var o=n._reactRootContainer;if(o){if("function"==typeof i){var a=i;i=function(){var e=Ml(o._internalRoot);a.call(e)}}null!=e?o.legacy_renderSubtreeIntoContainer(e,t,i):o.render(t,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Wl(e,!1,t)}(n,r),"function"==typeof i){var l=i;i=function(){var e=Ml(o._internalRoot);l.call(e)}}Ll(function(){null!=e?o.legacy_renderSubtreeIntoContainer(e,t,i):o.render(t,i)})}return Ml(o._internalRoot)}function zl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Vl(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ke,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Se=function(e,t,n){switch(t){case"input":if(Tt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=M(r);i||a("90"),Be(r),Tt(r,i)}}}break;case"textarea":Xn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},Fl.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Ul;return jl(e,t,null,n,r._onCommit),r},Fl.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Fl.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,i=t;i!==this;)r=i,i=i._next;null===r&&a("251"),r._next=i._next,this._next=t,e.firstBatch=this}this._defer=!1,Nl(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Fl.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Ul.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Ul.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},Wl.prototype.render=function(e,t){var n=this._internalRoot,r=new Ul;return null!==(t=void 0===t?null:t)&&r.then(t),Hl(e,n,null,r._onCommit),r},Wl.prototype.unmount=function(e){var t=this._internalRoot,n=new Ul;return null!==(e=void 0===e?null:e)&&n.then(e),Hl(null,t,null,n._onCommit),n},Wl.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,i=new Ul;return null!==(n=void 0===n?null:n)&&i.then(n),Hl(t,r,e,i._onCommit),i},Wl.prototype.createBatch=function(){var e=new Fl(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ie=Pl,Pe=Rl,Le=function(){il||0===ll||(Ol(ll,!1),ll=0)};var ql={createPortal:zl,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Vl(t)||a("200"),Bl(null,e,t,!0,n)},render:function(e,t,n){return Vl(t)||a("200"),Bl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Vl(n)||a("200"),(null==e||void 0===e._reactInternalFiber)&&a("38"),Bl(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Vl(e)||a("40"),!!e._reactRootContainer&&(Ll(function(){Bl(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return zl.apply(void 0,arguments)},unstable_batchedUpdates:Pl,unstable_interactiveUpdates:Rl,flushSync:function(e,t){il&&a("187");var n=cl;cl=!0;try{return Za(e,t)}finally{cl=n,Ol(1073741823,!1)}},unstable_createRoot:function(e,t){return Vl(e)||a("299","unstable_createRoot"),new Wl(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=cl;cl=!0;try{Za(e)}finally{(cl=t)||il||Ol(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[j,H,M,N.injectEventPluginsByName,y,z,function(e){S(e,B)},Ae,De,On,D]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Wr=Br(function(e){return t.onCommitFiberRoot(n,e)}),Vr=Br(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(i({},e,{overrideProps:null,currentDispatcherRef:ze.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:R,bundleType:0,version:"16.8.2",rendererPackageName:"react-dom"});var Gl={default:ql},$l=Gl&&ql||Gl;e.exports=$l.default||$l},function(e,t,n){"use strict";e.exports=n(9)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,i=3,o=-1,a=-1,l=!1,s=!1;function u(){if(!l){var e=n.expirationTime;s?w():s=!0,T(d,e)}}function c(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var o=i,l=a;i=e,a=t;try{var s=r()}finally{i=o,a=l}if("function"==typeof s)if(s={callback:s,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=s.next=s.previous=s;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=s,u()),(t=r.previous).next=r.previous=s,s.next=r,s.previous=t}}function f(){if(-1===o&&null!==n&&1===n.priorityLevel){l=!0;try{do{c()}while(null!==n&&1===n.priorityLevel)}finally{l=!1,null!==n?u():s=!1}}}function d(e){l=!0;var i=r;r=e;try{if(e)for(;null!==n;){var o=t.unstable_now();if(!(n.expirationTime<=o))break;do{c()}while(null!==n&&n.expirationTime<=o)}else if(null!==n)do{c()}while(null!==n&&!x())}finally{l=!1,r=i,null!==n?u():s=!1,f()}}var p,h,m=Date,g="function"==typeof setTimeout?setTimeout:void 0,v="function"==typeof clearTimeout?clearTimeout:void 0,y="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function _(e){p=y(function(t){v(h),e(t)}),h=g(function(){b(p),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var E=performance;t.unstable_now=function(){return E.now()}}else t.unstable_now=function(){return m.now()};var T,w,x,C=null;if("undefined"!=typeof window?C=window:void 0!==e&&(C=e),C&&C._schedMock){var S=C._schedMock;T=S[0],w=S[1],x=S[2],t.unstable_now=S[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var k=null,O=function(e){if(null!==k)try{k(e)}finally{k=null}};T=function(e){null!==k?setTimeout(T,0,e):(k=e,setTimeout(O,0,!1))},w=function(){k=null},x=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof y&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var N=null,A=!1,D=-1,I=!1,P=!1,L=0,R=33,j=33;x=function(){return L<=t.unstable_now()};var H=new MessageChannel,M=H.port2;H.port1.onmessage=function(){A=!1;var e=N,n=D;N=null,D=-1;var r=t.unstable_now(),i=!1;if(0>=L-r){if(!(-1!==n&&n<=r))return I||(I=!0,_(F)),N=e,void(D=n);i=!0}if(null!==e){P=!0;try{e(i)}finally{P=!1}}};var F=function(e){if(null!==N){_(F);var t=e-L+j;t<j&&R<j?(8>t&&(t=8),j=t<R?R:t):R=t,L=e+j,A||(A=!0,M.postMessage(void 0))}else I=!1};T=function(e,t){N=e,D=t,P||0>t?M.postMessage(void 0):I||(I=!0,_(F))},w=function(){N=null,A=!1,D=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=i,a=o;i=e,o=t.unstable_now();try{return n()}finally{i=r,o=a,f()}},t.unstable_next=function(e){switch(i){case 1:case 2:case 3:var n=3;break;default:n=i}var r=i,a=o;i=n,o=t.unstable_now();try{return e()}finally{i=r,o=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==o?o:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(i){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:i,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,u();else{a=null;var l=n;do{if(l.expirationTime>r){a=l;break}l=l.next}while(l!==n);null===a?a=n:a===n&&(n=e,u()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=i;return function(){var r=i,a=o;i=n,o=t.unstable_now();try{return e.apply(this,arguments)}finally{i=r,o=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return i},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||x())},t.unstable_continueExecution=function(){null!==n&&u()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(3))},function(e,t,n){
/*!
  * Bootstrap v4.0.0 (https://getbootstrap.com)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}t=t&&t.hasOwnProperty("default")?t.default:t,n=n&&n.hasOwnProperty("default")?n.default:n;var a=function(e){var t=!1;function n(t){var n=this,i=!1;return e(this).one(r.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||r.triggerTransitionEnd(n)},t),this}var r={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(t){var n=t.getAttribute("data-target");n&&"#"!==n||(n=t.getAttribute("href")||""),"#"===n.charAt(0)&&(n=function(t){return t="function"==typeof e.escapeSelector?e.escapeSelector(t).substr(1):t.replace(/(:|\.|\[|\]|,|=|@)/g,"\\$1")}(n));try{var r=e(document).find(n);return r.length>0?n:null}catch(e){return null}},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(n){e(n).trigger(t.end)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],a=t[i],l=a&&r.isElement(a)?"element":(s=a,{}.toString.call(s).match(/\s([a-zA-Z]+)/)[1].toLowerCase());if(!new RegExp(o).test(l))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+l+'" but expected type "'+o+'".')}var s}};return t=("undefined"==typeof window||!window.QUnit)&&{end:"transitionend"},e.fn.emulateTransitionEnd=n,r.supportsTransitionEnd()&&(e.event.special[r.TRANSITION_END]={bindType:t.end,delegateType:t.end,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}),r}(t),l=function(e){var t=e.fn.alert,n={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},r={ALERT:"alert",FADE:"fade",SHOW:"show"},o=function(){function t(e){this._element=e}var o=t.prototype;return o.close=function(e){e=e||this._element;var t=this._getRootElement(e),n=this._triggerCloseEvent(t);n.isDefaultPrevented()||this._removeElement(t)},o.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},o._getRootElement=function(t){var n=a.getSelectorFromElement(t),i=!1;return n&&(i=e(n)[0]),i||(i=e(t).closest("."+r.ALERT)[0]),i},o._triggerCloseEvent=function(t){var r=e.Event(n.CLOSE);return e(t).trigger(r),r},o._removeElement=function(t){var n=this;e(t).removeClass(r.SHOW),a.supportsTransitionEnd()&&e(t).hasClass(r.FADE)?e(t).one(a.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(150):this._destroyElement(t)},o._destroyElement=function(t){e(t).detach().trigger(n.CLOSED).remove()},t._jQueryInterface=function(n){return this.each(function(){var r=e(this),i=r.data("bs.alert");i||(i=new t(this),r.data("bs.alert",i)),"close"===n&&i[n](this)})},t._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},i(t,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),t}();return e(document).on(n.CLICK_DATA_API,'[data-dismiss="alert"]',o._handleDismiss(new o)),e.fn.alert=o._jQueryInterface,e.fn.alert.Constructor=o,e.fn.alert.noConflict=function(){return e.fn.alert=t,o._jQueryInterface},o}(t),s=function(e){var t="button",n=e.fn[t],r={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},o={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},a={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},l=function(){function t(e){this._element=e}var n=t.prototype;return n.toggle=function(){var t=!0,n=!0,i=e(this._element).closest(o.DATA_TOGGLE)[0];if(i){var a=e(this._element).find(o.INPUT)[0];if(a){if("radio"===a.type)if(a.checked&&e(this._element).hasClass(r.ACTIVE))t=!1;else{var l=e(i).find(o.ACTIVE)[0];l&&e(l).removeClass(r.ACTIVE)}if(t){if(a.hasAttribute("disabled")||i.hasAttribute("disabled")||a.classList.contains("disabled")||i.classList.contains("disabled"))return;a.checked=!e(this._element).hasClass(r.ACTIVE),e(a).trigger("change")}a.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!e(this._element).hasClass(r.ACTIVE)),t&&e(this._element).toggleClass(r.ACTIVE)},n.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(n){return this.each(function(){var r=e(this).data("bs.button");r||(r=new t(this),e(this).data("bs.button",r)),"toggle"===n&&r[n]()})},i(t,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),t}();return e(document).on(a.CLICK_DATA_API,o.DATA_TOGGLE_CARROT,function(t){t.preventDefault();var n=t.target;e(n).hasClass(r.BUTTON)||(n=e(n).closest(o.BUTTON)),l._jQueryInterface.call(e(n),"toggle")}).on(a.FOCUS_BLUR_DATA_API,o.DATA_TOGGLE_CARROT,function(t){var n=e(t.target).closest(o.BUTTON)[0];e(n).toggleClass(r.FOCUS,/^focus(in)?$/.test(t.type))}),e.fn[t]=l._jQueryInterface,e.fn[t].Constructor=l,e.fn[t].noConflict=function(){return e.fn[t]=n,l._jQueryInterface},l}(t),u=function(e){var t="carousel",n="bs.carousel",r="."+n,l=e.fn[t],s={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},u={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},c={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},f={SLIDE:"slide"+r,SLID:"slid"+r,KEYDOWN:"keydown"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r,TOUCHEND:"touchend"+r,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},d={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},p={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},h=function(){function l(t,n){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(n),this._element=e(t)[0],this._indicatorsElement=e(this._element).find(p.INDICATORS)[0],this._addEventListeners()}var h=l.prototype;return h.next=function(){this._isSliding||this._slide(c.NEXT)},h.nextWhenVisible=function(){!document.hidden&&e(this._element).is(":visible")&&"hidden"!==e(this._element).css("visibility")&&this.next()},h.prev=function(){this._isSliding||this._slide(c.PREV)},h.pause=function(t){t||(this._isPaused=!0),e(this._element).find(p.NEXT_PREV)[0]&&a.supportsTransitionEnd()&&(a.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},h.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},h.to=function(t){var n=this;this._activeElement=e(this._element).find(p.ACTIVE_ITEM)[0];var r=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(f.SLID,function(){return n.to(t)});else{if(r===t)return this.pause(),void this.cycle();var i=t>r?c.NEXT:c.PREV;this._slide(i,this._items[t])}},h.dispose=function(){e(this._element).off(r),e.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},h._getConfig=function(e){return e=o({},s,e),a.typeCheckConfig(t,e,u),e},h._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(f.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(e(this._element).on(f.MOUSEENTER,function(e){return t.pause(e)}).on(f.MOUSELEAVE,function(e){return t.cycle(e)}),"ontouchstart"in document.documentElement&&e(this._element).on(f.TOUCHEND,function(){t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},500+t._config.interval)}))},h._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},h._getItemIndex=function(t){return this._items=e.makeArray(e(t).parent().find(p.ITEM)),this._items.indexOf(t)},h._getItemByDirection=function(e,t){var n=e===c.NEXT,r=e===c.PREV,i=this._getItemIndex(t),o=this._items.length-1,a=r&&0===i||n&&i===o;if(a&&!this._config.wrap)return t;var l=e===c.PREV?-1:1,s=(i+l)%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},h._triggerSlideEvent=function(t,n){var r=this._getItemIndex(t),i=this._getItemIndex(e(this._element).find(p.ACTIVE_ITEM)[0]),o=e.Event(f.SLIDE,{relatedTarget:t,direction:n,from:i,to:r});return e(this._element).trigger(o),o},h._setActiveIndicatorElement=function(t){if(this._indicatorsElement){e(this._indicatorsElement).find(p.ACTIVE).removeClass(d.ACTIVE);var n=this._indicatorsElement.children[this._getItemIndex(t)];n&&e(n).addClass(d.ACTIVE)}},h._slide=function(t,n){var r,i,o,l=this,s=e(this._element).find(p.ACTIVE_ITEM)[0],u=this._getItemIndex(s),h=n||s&&this._getItemByDirection(t,s),m=this._getItemIndex(h),g=Boolean(this._interval);if(t===c.NEXT?(r=d.LEFT,i=d.NEXT,o=c.LEFT):(r=d.RIGHT,i=d.PREV,o=c.RIGHT),h&&e(h).hasClass(d.ACTIVE))this._isSliding=!1;else{var v=this._triggerSlideEvent(h,o);if(!v.isDefaultPrevented()&&s&&h){this._isSliding=!0,g&&this.pause(),this._setActiveIndicatorElement(h);var y=e.Event(f.SLID,{relatedTarget:h,direction:o,from:u,to:m});a.supportsTransitionEnd()&&e(this._element).hasClass(d.SLIDE)?(e(h).addClass(i),a.reflow(h),e(s).addClass(r),e(h).addClass(r),e(s).one(a.TRANSITION_END,function(){e(h).removeClass(r+" "+i).addClass(d.ACTIVE),e(s).removeClass(d.ACTIVE+" "+i+" "+r),l._isSliding=!1,setTimeout(function(){return e(l._element).trigger(y)},0)}).emulateTransitionEnd(600)):(e(s).removeClass(d.ACTIVE),e(h).addClass(d.ACTIVE),this._isSliding=!1,e(this._element).trigger(y)),g&&this.cycle()}}},l._jQueryInterface=function(t){return this.each(function(){var r=e(this).data(n),i=o({},s,e(this).data());"object"==typeof t&&(i=o({},i,t));var a="string"==typeof t?t:i.slide;if(r||(r=new l(this,i),e(this).data(n,r)),"number"==typeof t)r.to(t);else if("string"==typeof a){if(void 0===r[a])throw new TypeError('No method named "'+a+'"');r[a]()}else i.interval&&(r.pause(),r.cycle())})},l._dataApiClickHandler=function(t){var r=a.getSelectorFromElement(this);if(r){var i=e(r)[0];if(i&&e(i).hasClass(d.CAROUSEL)){var s=o({},e(i).data(),e(this).data()),u=this.getAttribute("data-slide-to");u&&(s.interval=!1),l._jQueryInterface.call(e(i),s),u&&e(i).data(n).to(u),t.preventDefault()}}},i(l,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return s}}]),l}();return e(document).on(f.CLICK_DATA_API,p.DATA_SLIDE,h._dataApiClickHandler),e(window).on(f.LOAD_DATA_API,function(){e(p.DATA_RIDE).each(function(){var t=e(this);h._jQueryInterface.call(t,t.data())})}),e.fn[t]=h._jQueryInterface,e.fn[t].Constructor=h,e.fn[t].noConflict=function(){return e.fn[t]=l,h._jQueryInterface},h}(t),c=function(e){var t="collapse",n="bs.collapse",r=e.fn[t],l={toggle:!0,parent:""},s={toggle:"boolean",parent:"(string|element)"},u={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},c={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},f={WIDTH:"width",HEIGHT:"height"},d={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},p=function(){function r(t,n){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(n),this._triggerArray=e.makeArray(e('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var r=e(d.DATA_TOGGLE),i=0;i<r.length;i++){var o=r[i],l=a.getSelectorFromElement(o);null!==l&&e(l).filter(t).length>0&&(this._selector=l,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var p=r.prototype;return p.toggle=function(){e(this._element).hasClass(c.SHOW)?this.hide():this.show()},p.show=function(){var t,i,o=this;if(!(this._isTransitioning||e(this._element).hasClass(c.SHOW)||(this._parent&&0===(t=e.makeArray(e(this._parent).find(d.ACTIVES).filter('[data-parent="'+this._config.parent+'"]'))).length&&(t=null),t&&(i=e(t).not(this._selector).data(n))&&i._isTransitioning))){var l=e.Event(u.SHOW);if(e(this._element).trigger(l),!l.isDefaultPrevented()){t&&(r._jQueryInterface.call(e(t).not(this._selector),"hide"),i||e(t).data(n,null));var s=this._getDimension();e(this._element).removeClass(c.COLLAPSE).addClass(c.COLLAPSING),this._element.style[s]=0,this._triggerArray.length>0&&e(this._triggerArray).removeClass(c.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var f=function(){e(o._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).addClass(c.SHOW),o._element.style[s]="",o.setTransitioning(!1),e(o._element).trigger(u.SHOWN)};if(a.supportsTransitionEnd()){var p=s[0].toUpperCase()+s.slice(1),h="scroll"+p;e(this._element).one(a.TRANSITION_END,f).emulateTransitionEnd(600),this._element.style[s]=this._element[h]+"px"}else f()}}},p.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(c.SHOW)){var n=e.Event(u.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var r=this._getDimension();if(this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",a.reflow(this._element),e(this._element).addClass(c.COLLAPSING).removeClass(c.COLLAPSE).removeClass(c.SHOW),this._triggerArray.length>0)for(var i=0;i<this._triggerArray.length;i++){var o=this._triggerArray[i],l=a.getSelectorFromElement(o);if(null!==l){var s=e(l);s.hasClass(c.SHOW)||e(o).addClass(c.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0);var f=function(){t.setTransitioning(!1),e(t._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).trigger(u.HIDDEN)};this._element.style[r]="",a.supportsTransitionEnd()?e(this._element).one(a.TRANSITION_END,f).emulateTransitionEnd(600):f()}}},p.setTransitioning=function(e){this._isTransitioning=e},p.dispose=function(){e.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},p._getConfig=function(e){return(e=o({},l,e)).toggle=Boolean(e.toggle),a.typeCheckConfig(t,e,s),e},p._getDimension=function(){var t=e(this._element).hasClass(f.WIDTH);return t?f.WIDTH:f.HEIGHT},p._getParent=function(){var t=this,n=null;a.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=e(this._config.parent)[0];var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return e(n).find(i).each(function(e,n){t._addAriaAndCollapsedClass(r._getTargetFromElement(n),[n])}),n},p._addAriaAndCollapsedClass=function(t,n){if(t){var r=e(t).hasClass(c.SHOW);n.length>0&&e(n).toggleClass(c.COLLAPSED,!r).attr("aria-expanded",r)}},r._getTargetFromElement=function(t){var n=a.getSelectorFromElement(t);return n?e(n)[0]:null},r._jQueryInterface=function(t){return this.each(function(){var i=e(this),a=i.data(n),s=o({},l,i.data(),"object"==typeof t&&t);if(!a&&s.toggle&&/show|hide/.test(t)&&(s.toggle=!1),a||(a=new r(this,s),i.data(n,a)),"string"==typeof t){if(void 0===a[t])throw new TypeError('No method named "'+t+'"');a[t]()}})},i(r,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return l}}]),r}();return e(document).on(u.CLICK_DATA_API,d.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var r=e(this),i=a.getSelectorFromElement(this);e(i).each(function(){var t=e(this),i=t.data(n),o=i?"toggle":r.data();p._jQueryInterface.call(t,o)})}),e.fn[t]=p._jQueryInterface,e.fn[t].Constructor=p,e.fn[t].noConflict=function(){return e.fn[t]=r,p._jQueryInterface},p}(t),f=function(e){var t="dropdown",r="bs.dropdown",l="."+r,s=e.fn[t],u=new RegExp("38|40|27"),c={HIDE:"hide"+l,HIDDEN:"hidden"+l,SHOW:"show"+l,SHOWN:"shown"+l,CLICK:"click"+l,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},f={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},d={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled)"},p={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},h={offset:0,flip:!0,boundary:"scrollParent"},m={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)"},g=function(){function s(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var g=s.prototype;return g.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(f.DISABLED)){var t=s._getParentFromElement(this._element),r=e(this._menu).hasClass(f.SHOW);if(s._clearMenus(),!r){var i={relatedTarget:this._element},o=e.Event(c.SHOW,i);if(e(t).trigger(o),!o.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var a=this._element;e(t).hasClass(f.DROPUP)&&(e(this._menu).hasClass(f.MENULEFT)||e(this._menu).hasClass(f.MENURIGHT))&&(a=t),"scrollParent"!==this._config.boundary&&e(t).addClass(f.POSITION_STATIC),this._popper=new n(a,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(t).closest(d.NAVBAR_NAV).length&&e("body").children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(f.SHOW),e(t).toggleClass(f.SHOW).trigger(e.Event(c.SHOWN,i))}}}},g.dispose=function(){e.removeData(this._element,r),e(this._element).off(l),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},g.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},g._addEventListeners=function(){var t=this;e(this._element).on(c.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},g._getConfig=function(n){return n=o({},this.constructor.Default,e(this._element).data(),n),a.typeCheckConfig(t,n,this.constructor.DefaultType),n},g._getMenuElement=function(){if(!this._menu){var t=s._getParentFromElement(this._element);this._menu=e(t).find(d.MENU)[0]}return this._menu},g._getPlacement=function(){var t=e(this._element).parent(),n=p.BOTTOM;return t.hasClass(f.DROPUP)?(n=p.TOP,e(this._menu).hasClass(f.MENURIGHT)&&(n=p.TOPEND)):t.hasClass(f.DROPRIGHT)?n=p.RIGHT:t.hasClass(f.DROPLEFT)?n=p.LEFT:e(this._menu).hasClass(f.MENURIGHT)&&(n=p.BOTTOMEND),n},g._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},g._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=o({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return n},s._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(r),i="object"==typeof t?t:null;if(n||(n=new s(this,i),e(this).data(r,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},s._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var n=e.makeArray(e(d.DATA_TOGGLE)),i=0;i<n.length;i++){var o=s._getParentFromElement(n[i]),a=e(n[i]).data(r),l={relatedTarget:n[i]};if(a){var u=a._menu;if(e(o).hasClass(f.SHOW)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&e.contains(o,t.target))){var p=e.Event(c.HIDE,l);e(o).trigger(p),p.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e("body").children().off("mouseover",null,e.noop),n[i].setAttribute("aria-expanded","false"),e(u).removeClass(f.SHOW),e(o).removeClass(f.SHOW).trigger(e.Event(c.HIDDEN,l)))}}}},s._getParentFromElement=function(t){var n,r=a.getSelectorFromElement(t);return r&&(n=e(r)[0]),n||t.parentNode},s._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||e(t.target).closest(d.MENU).length)):u.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!e(this).hasClass(f.DISABLED))){var n=s._getParentFromElement(this),r=e(n).hasClass(f.SHOW);if((r||27===t.which&&32===t.which)&&(!r||27!==t.which&&32!==t.which)){var i=e(n).find(d.VISIBLE_ITEMS).get();if(0!==i.length){var o=i.indexOf(t.target);38===t.which&&o>0&&o--,40===t.which&&o<i.length-1&&o++,o<0&&(o=0),i[o].focus()}}else{if(27===t.which){var a=e(n).find(d.DATA_TOGGLE)[0];e(a).trigger("focus")}e(this).trigger("click")}}},i(s,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return h}},{key:"DefaultType",get:function(){return m}}]),s}();return e(document).on(c.KEYDOWN_DATA_API,d.DATA_TOGGLE,g._dataApiKeydownHandler).on(c.KEYDOWN_DATA_API,d.MENU,g._dataApiKeydownHandler).on(c.CLICK_DATA_API+" "+c.KEYUP_DATA_API,g._clearMenus).on(c.CLICK_DATA_API,d.DATA_TOGGLE,function(t){t.preventDefault(),t.stopPropagation(),g._jQueryInterface.call(e(this),"toggle")}).on(c.CLICK_DATA_API,d.FORM_CHILD,function(e){e.stopPropagation()}),e.fn[t]=g._jQueryInterface,e.fn[t].Constructor=g,e.fn[t].noConflict=function(){return e.fn[t]=s,g._jQueryInterface},g}(t),d=function(e){var t="modal",n=".bs.modal",r=e.fn.modal,l={backdrop:!0,keyboard:!0,focus:!0,show:!0},s={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},u={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},c={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},f={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},d=function(){function r(t,n){this._config=this._getConfig(n),this._element=t,this._dialog=e(t).find(f.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}var d=r.prototype;return d.toggle=function(e){return this._isShown?this.hide():this.show(e)},d.show=function(t){var n=this;if(!this._isTransitioning&&!this._isShown){a.supportsTransitionEnd()&&e(this._element).hasClass(c.FADE)&&(this._isTransitioning=!0);var r=e.Event(u.SHOW,{relatedTarget:t});e(this._element).trigger(r),this._isShown||r.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),e(document.body).addClass(c.OPEN),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(u.CLICK_DISMISS,f.DATA_DISMISS,function(e){return n.hide(e)}),e(this._dialog).on(u.MOUSEDOWN_DISMISS,function(){e(n._element).one(u.MOUSEUP_DISMISS,function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(t)}))}},d.hide=function(t){var n=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var r=e.Event(u.HIDE);if(e(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var i=a.supportsTransitionEnd()&&e(this._element).hasClass(c.FADE);i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),e(document).off(u.FOCUSIN),e(this._element).removeClass(c.SHOW),e(this._element).off(u.CLICK_DISMISS),e(this._dialog).off(u.MOUSEDOWN_DISMISS),i?e(this._element).one(a.TRANSITION_END,function(e){return n._hideModal(e)}).emulateTransitionEnd(300):this._hideModal()}}},d.dispose=function(){e.removeData(this._element,"bs.modal"),e(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},d.handleUpdate=function(){this._adjustDialog()},d._getConfig=function(e){return e=o({},l,e),a.typeCheckConfig(t,e,s),e},d._showElement=function(t){var n=this,r=a.supportsTransitionEnd()&&e(this._element).hasClass(c.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,r&&a.reflow(this._element),e(this._element).addClass(c.SHOW),this._config.focus&&this._enforceFocus();var i=e.Event(u.SHOWN,{relatedTarget:t}),o=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(i)};r?e(this._dialog).one(a.TRANSITION_END,o).emulateTransitionEnd(300):o()},d._enforceFocus=function(){var t=this;e(document).off(u.FOCUSIN).on(u.FOCUSIN,function(n){document!==n.target&&t._element!==n.target&&0===e(t._element).has(n.target).length&&t._element.focus()})},d._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(u.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||e(this._element).off(u.KEYDOWN_DISMISS)},d._setResizeEvent=function(){var t=this;this._isShown?e(window).on(u.RESIZE,function(e){return t.handleUpdate(e)}):e(window).off(u.RESIZE)},d._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){e(document.body).removeClass(c.OPEN),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(u.HIDDEN)})},d._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},d._showBackdrop=function(t){var n=this,r=e(this._element).hasClass(c.FADE)?c.FADE:"";if(this._isShown&&this._config.backdrop){var i=a.supportsTransitionEnd()&&r;if(this._backdrop=document.createElement("div"),this._backdrop.className=c.BACKDROP,r&&e(this._backdrop).addClass(r),e(this._backdrop).appendTo(document.body),e(this._element).on(u.CLICK_DISMISS,function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),i&&a.reflow(this._backdrop),e(this._backdrop).addClass(c.SHOW),!t)return;if(!i)return void t();e(this._backdrop).one(a.TRANSITION_END,t).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(c.SHOW);var o=function(){n._removeBackdrop(),t&&t()};a.supportsTransitionEnd()&&e(this._element).hasClass(c.FADE)?e(this._backdrop).one(a.TRANSITION_END,o).emulateTransitionEnd(150):o()}else t&&t()},d._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},d._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},d._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},d._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){e(f.FIXED_CONTENT).each(function(n,r){var i=e(r)[0].style.paddingRight,o=e(r).css("padding-right");e(r).data("padding-right",i).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")}),e(f.STICKY_CONTENT).each(function(n,r){var i=e(r)[0].style.marginRight,o=e(r).css("margin-right");e(r).data("margin-right",i).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")}),e(f.NAVBAR_TOGGLER).each(function(n,r){var i=e(r)[0].style.marginRight,o=e(r).css("margin-right");e(r).data("margin-right",i).css("margin-right",parseFloat(o)+t._scrollbarWidth+"px")});var n=document.body.style.paddingRight,r=e("body").css("padding-right");e("body").data("padding-right",n).css("padding-right",parseFloat(r)+this._scrollbarWidth+"px")}},d._resetScrollbar=function(){e(f.FIXED_CONTENT).each(function(t,n){var r=e(n).data("padding-right");void 0!==r&&e(n).css("padding-right",r).removeData("padding-right")}),e(f.STICKY_CONTENT+", "+f.NAVBAR_TOGGLER).each(function(t,n){var r=e(n).data("margin-right");void 0!==r&&e(n).css("margin-right",r).removeData("margin-right")});var t=e("body").data("padding-right");void 0!==t&&e("body").css("padding-right",t).removeData("padding-right")},d._getScrollbarWidth=function(){var e=document.createElement("div");e.className=c.SCROLLBAR_MEASURER,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},r._jQueryInterface=function(t,n){return this.each(function(){var i=e(this).data("bs.modal"),a=o({},r.Default,e(this).data(),"object"==typeof t&&t);if(i||(i=new r(this,a),e(this).data("bs.modal",i)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t](n)}else a.show&&i.show(n)})},i(r,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return l}}]),r}();return e(document).on(u.CLICK_DATA_API,f.DATA_TOGGLE,function(t){var n,r=this,i=a.getSelectorFromElement(this);i&&(n=e(i)[0]);var l=e(n).data("bs.modal")?"toggle":o({},e(n).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var s=e(n).one(u.SHOW,function(t){t.isDefaultPrevented()||s.one(u.HIDDEN,function(){e(r).is(":visible")&&r.focus()})});d._jQueryInterface.call(e(n),l,this)}),e.fn.modal=d._jQueryInterface,e.fn.modal.Constructor=d,e.fn.modal.noConflict=function(){return e.fn.modal=r,d._jQueryInterface},d}(t),p=function(e){var t="tooltip",r=".bs.tooltip",l=e.fn[t],s=new RegExp("(^|\\s)bs-tooltip\\S+","g"),u={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},c={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},f={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},d={SHOW:"show",OUT:"out"},p={HIDE:"hide"+r,HIDDEN:"hidden"+r,SHOW:"show"+r,SHOWN:"shown"+r,INSERTED:"inserted"+r,CLICK:"click"+r,FOCUSIN:"focusin"+r,FOCUSOUT:"focusout"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r},h={FADE:"fade",SHOW:"show"},m={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},g={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},v=function(){function l(e,t){if(void 0===n)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var v=l.prototype;return v.enable=function(){this._isEnabled=!0},v.disable=function(){this._isEnabled=!1},v.toggleEnabled=function(){this._isEnabled=!this._isEnabled},v.toggle=function(t){if(this._isEnabled)if(t){var n=this.constructor.DATA_KEY,r=e(t.currentTarget).data(n);r||(r=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(e(this.getTipElement()).hasClass(h.SHOW))return void this._leave(null,this);this._enter(null,this)}},v.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},v.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var r=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(r);var i=e.contains(this.element.ownerDocument.documentElement,this.element);if(r.isDefaultPrevented()||!i)return;var o=this.getTipElement(),s=a.getUID(this.constructor.NAME);o.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&e(o).addClass(h.FADE);var u="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,c=this._getAttachment(u);this.addAttachmentClass(c);var f=!1===this.config.container?document.body:e(this.config.container);e(o).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(o).appendTo(f),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,o,{placement:c,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:m.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){t._handlePopperPlacementChange(e)}}),e(o).addClass(h.SHOW),"ontouchstart"in document.documentElement&&e("body").children().on("mouseover",null,e.noop);var p=function(){t.config.animation&&t._fixTransition();var n=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),n===d.OUT&&t._leave(null,t)};a.supportsTransitionEnd()&&e(this.tip).hasClass(h.FADE)?e(this.tip).one(a.TRANSITION_END,p).emulateTransitionEnd(l._TRANSITION_DURATION):p()}},v.hide=function(t){var n=this,r=this.getTipElement(),i=e.Event(this.constructor.Event.HIDE),o=function(){n._hoverState!==d.SHOW&&r.parentNode&&r.parentNode.removeChild(r),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),e(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()};e(this.element).trigger(i),i.isDefaultPrevented()||(e(r).removeClass(h.SHOW),"ontouchstart"in document.documentElement&&e("body").children().off("mouseover",null,e.noop),this._activeTrigger[g.CLICK]=!1,this._activeTrigger[g.FOCUS]=!1,this._activeTrigger[g.HOVER]=!1,a.supportsTransitionEnd()&&e(this.tip).hasClass(h.FADE)?e(r).one(a.TRANSITION_END,o).emulateTransitionEnd(150):o(),this._hoverState="")},v.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},v.isWithContent=function(){return Boolean(this.getTitle())},v.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},v.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},v.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(m.TOOLTIP_INNER),this.getTitle()),t.removeClass(h.FADE+" "+h.SHOW)},v.setElementContent=function(t,n){var r=this.config.html;"object"==typeof n&&(n.nodeType||n.jquery)?r?e(n).parent().is(t)||t.empty().append(n):t.text(e(n).text()):t[r?"html":"text"](n)},v.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},v._getAttachment=function(e){return c[e.toUpperCase()]},v._setListeners=function(){var t=this,n=this.config.trigger.split(" ");n.forEach(function(n){if("click"===n)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if(n!==g.MANUAL){var r=n===g.HOVER?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=n===g.HOVER?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(r,t.config.selector,function(e){return t._enter(e)}).on(i,t.config.selector,function(e){return t._leave(e)})}e(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=o({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},v._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},v._enter=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusin"===t.type?g.FOCUS:g.HOVER]=!0),e(n.getTipElement()).hasClass(h.SHOW)||n._hoverState===d.SHOW?n._hoverState=d.SHOW:(clearTimeout(n._timeout),n._hoverState=d.SHOW,n.config.delay&&n.config.delay.show?n._timeout=setTimeout(function(){n._hoverState===d.SHOW&&n.show()},n.config.delay.show):n.show())},v._leave=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusout"===t.type?g.FOCUS:g.HOVER]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=d.OUT,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout(function(){n._hoverState===d.OUT&&n.hide()},n.config.delay.hide):n.hide())},v._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},v._getConfig=function(n){return"number"==typeof(n=o({},this.constructor.Default,e(this.element).data(),n)).delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),a.typeCheckConfig(t,n,this.constructor.DefaultType),n},v._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},v._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(s);null!==n&&n.length>0&&t.removeClass(n.join(""))},v._handlePopperPlacementChange=function(e){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},v._fixTransition=function(){var t=this.getTipElement(),n=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(h.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},l._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.tooltip"),r="object"==typeof t&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new l(this,r),e(this).data("bs.tooltip",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},i(l,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return f}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return r}},{key:"DefaultType",get:function(){return u}}]),l}();return e.fn[t]=v._jQueryInterface,e.fn[t].Constructor=v,e.fn[t].noConflict=function(){return e.fn[t]=l,v._jQueryInterface},v}(t),h=function(e){var t="popover",n=".bs.popover",r=e.fn[t],a=new RegExp("(^|\\s)bs-popover\\S+","g"),l=o({},p.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),s=o({},p.DefaultType,{content:"(string|element|function)"}),u={FADE:"fade",SHOW:"show"},c={TITLE:".popover-header",CONTENT:".popover-body"},f={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},d=function(r){var o,d;function p(){return r.apply(this,arguments)||this}d=r,(o=p).prototype=Object.create(d.prototype),o.prototype.constructor=o,o.__proto__=d;var h=p.prototype;return h.isWithContent=function(){return this.getTitle()||this._getContent()},h.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-popover-"+t)},h.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},h.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(c.TITLE),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(t.find(c.CONTENT),n),t.removeClass(u.FADE+" "+u.SHOW)},h._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},h._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(a);null!==n&&n.length>0&&t.removeClass(n.join(""))},p._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.popover"),r="object"==typeof t?t:null;if((n||!/destroy|hide/.test(t))&&(n||(n=new p(this,r),e(this).data("bs.popover",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},i(p,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return l}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return f}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return s}}]),p}(p);return e.fn[t]=d._jQueryInterface,e.fn[t].Constructor=d,e.fn[t].noConflict=function(){return e.fn[t]=r,d._jQueryInterface},d}(t),m=function(e){var t="scrollspy",n=e.fn[t],r={offset:10,method:"auto",target:""},l={offset:"number",method:"string",target:"(string|element)"},s={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},u={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},c={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},f={OFFSET:"offset",POSITION:"position"},d=function(){function n(t,n){var r=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(n),this._selector=this._config.target+" "+c.NAV_LINKS+","+this._config.target+" "+c.LIST_ITEMS+","+this._config.target+" "+c.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(s.SCROLL,function(e){return r._process(e)}),this.refresh(),this._process()}var d=n.prototype;return d.refresh=function(){var t=this,n=this._scrollElement===this._scrollElement.window?f.OFFSET:f.POSITION,r="auto"===this._config.method?n:this._config.method,i=r===f.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var o=e.makeArray(e(this._selector));o.map(function(t){var n,o=a.getSelectorFromElement(t);if(o&&(n=e(o)[0]),n){var l=n.getBoundingClientRect();if(l.width||l.height)return[e(n)[r]().top+i,o]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},d.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},d._getConfig=function(n){if("string"!=typeof(n=o({},r,n)).target){var i=e(n.target).attr("id");i||(i=a.getUID(t),e(n.target).attr("id",i)),n.target="#"+i}return a.typeCheckConfig(t,n,l),n},d._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},d._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},d._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},d._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;){var o=this._activeTarget!==this._targets[i]&&e>=this._offsets[i]&&(void 0===this._offsets[i+1]||e<this._offsets[i+1]);o&&this._activate(this._targets[i])}}},d._activate=function(t){this._activeTarget=t,this._clear();var n=this._selector.split(",");n=n.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var r=e(n.join(","));r.hasClass(u.DROPDOWN_ITEM)?(r.closest(c.DROPDOWN).find(c.DROPDOWN_TOGGLE).addClass(u.ACTIVE),r.addClass(u.ACTIVE)):(r.addClass(u.ACTIVE),r.parents(c.NAV_LIST_GROUP).prev(c.NAV_LINKS+", "+c.LIST_ITEMS).addClass(u.ACTIVE),r.parents(c.NAV_LIST_GROUP).prev(c.NAV_ITEMS).children(c.NAV_LINKS).addClass(u.ACTIVE)),e(this._scrollElement).trigger(s.ACTIVATE,{relatedTarget:t})},d._clear=function(){e(this._selector).filter(c.ACTIVE).removeClass(u.ACTIVE)},n._jQueryInterface=function(t){return this.each(function(){var r=e(this).data("bs.scrollspy"),i="object"==typeof t&&t;if(r||(r=new n(this,i),e(this).data("bs.scrollspy",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}})},i(n,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return r}}]),n}();return e(window).on(s.LOAD_DATA_API,function(){for(var t=e.makeArray(e(c.DATA_SPY)),n=t.length;n--;){var r=e(t[n]);d._jQueryInterface.call(r,r.data())}}),e.fn[t]=d._jQueryInterface,e.fn[t].Constructor=d,e.fn[t].noConflict=function(){return e.fn[t]=n,d._jQueryInterface},d}(t),g=function(e){var t=e.fn.tab,n={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},r={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},o={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",ACTIVE_UL:"> li > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},l=function(){function t(e){this._element=e}var l=t.prototype;return l.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(r.ACTIVE)||e(this._element).hasClass(r.DISABLED))){var i,l,s=e(this._element).closest(o.NAV_LIST_GROUP)[0],u=a.getSelectorFromElement(this._element);if(s){var c="UL"===s.nodeName?o.ACTIVE_UL:o.ACTIVE;l=(l=e.makeArray(e(s).find(c)))[l.length-1]}var f=e.Event(n.HIDE,{relatedTarget:this._element}),d=e.Event(n.SHOW,{relatedTarget:l});if(l&&e(l).trigger(f),e(this._element).trigger(d),!d.isDefaultPrevented()&&!f.isDefaultPrevented()){u&&(i=e(u)[0]),this._activate(this._element,s);var p=function(){var r=e.Event(n.HIDDEN,{relatedTarget:t._element}),i=e.Event(n.SHOWN,{relatedTarget:l});e(l).trigger(r),e(t._element).trigger(i)};i?this._activate(i,i.parentNode,p):p()}}},l.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},l._activate=function(t,n,i){var l=this,s=("UL"===n.nodeName?e(n).find(o.ACTIVE_UL):e(n).children(o.ACTIVE))[0],u=i&&a.supportsTransitionEnd()&&s&&e(s).hasClass(r.FADE),c=function(){return l._transitionComplete(t,s,i)};s&&u?e(s).one(a.TRANSITION_END,c).emulateTransitionEnd(150):c()},l._transitionComplete=function(t,n,i){if(n){e(n).removeClass(r.SHOW+" "+r.ACTIVE);var l=e(n.parentNode).find(o.DROPDOWN_ACTIVE_CHILD)[0];l&&e(l).removeClass(r.ACTIVE),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(e(t).addClass(r.ACTIVE),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),a.reflow(t),e(t).addClass(r.SHOW),t.parentNode&&e(t.parentNode).hasClass(r.DROPDOWN_MENU)){var s=e(t).closest(o.DROPDOWN)[0];s&&e(s).find(o.DROPDOWN_TOGGLE).addClass(r.ACTIVE),t.setAttribute("aria-expanded",!0)}i&&i()},t._jQueryInterface=function(n){return this.each(function(){var r=e(this),i=r.data("bs.tab");if(i||(i=new t(this),r.data("bs.tab",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}})},i(t,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),t}();return e(document).on(n.CLICK_DATA_API,o.DATA_TOGGLE,function(t){t.preventDefault(),l._jQueryInterface.call(e(this),"show")}),e.fn.tab=l._jQueryInterface,e.fn.tab.Constructor=l,e.fn.tab.noConflict=function(){return e.fn.tab=t,l._jQueryInterface},l}(t);(function(e){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")})(t),e.Util=a,e.Alert=l,e.Button=s,e.Carousel=u,e.Collapse=c,e.Dropdown=f,e.Modal=d,e.Popover=h,e.Scrollspy=m,e.Tab=g,e.Tooltip=p,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(1),n(11))},function(e,t,n){"use strict";n.r(t),function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.12.9
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,o=0;o<r.length;o+=1)if(n&&navigator.userAgent.indexOf(r[o])>=0){i=1;break}var a=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},i))}};function l(e){return e&&"[object Function]"==={}.toString.call(e)}function s(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function u(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=s(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll)/.test(n+i+r)?e:c(u(e))}function f(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===s(t,"position")?f(t):t:e?e.ownerDocument.documentElement:document.documentElement}function d(e){return null!==e.parentNode?d(e.parentNode):e}function p(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,l,s=o.commonAncestorContainer;if(e!==s&&t!==s||r.contains(i))return"BODY"===(l=(a=s).nodeName)||"HTML"!==l&&f(a.firstElementChild)!==a?f(s):s;var u=d(e);return u.host?p(u.host,t):p(e,d(t).host)}function h(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function m(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}var g=void 0,v=function(){return void 0===g&&(g=-1!==navigator.appVersion.indexOf("MSIE 10")),g};function y(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],v()?n["offset"+e]+r["margin"+("Height"===e?"Top":"Left")]+r["margin"+("Height"===e?"Bottom":"Right")]:0)}function b(){var e=document.body,t=document.documentElement,n=v()&&getComputedStyle(t);return{height:y("Height",e,t,n),width:y("Width",e,t,n)}}var _=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},E=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),T=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},w=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function x(e){return w({},e,{right:e.left+e.width,bottom:e.top+e.height})}function C(e){var t={};if(v())try{t=e.getBoundingClientRect();var n=h(e,"top"),r=h(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}catch(e){}else t=e.getBoundingClientRect();var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?b():{},a=o.width||e.clientWidth||i.right-i.left,l=o.height||e.clientHeight||i.bottom-i.top,u=e.offsetWidth-a,c=e.offsetHeight-l;if(u||c){var f=s(e);u-=m(f,"x"),c-=m(f,"y"),i.width-=u,i.height-=c}return x(i)}function S(e,t){var n=v(),r="HTML"===t.nodeName,i=C(e),o=C(t),a=c(e),l=s(t),u=parseFloat(l.borderTopWidth,10),f=parseFloat(l.borderLeftWidth,10),d=x({top:i.top-o.top-u,left:i.left-o.left-f,width:i.width,height:i.height});if(d.marginTop=0,d.marginLeft=0,!n&&r){var p=parseFloat(l.marginTop,10),m=parseFloat(l.marginLeft,10);d.top-=u-p,d.bottom-=u-p,d.left-=f-m,d.right-=f-m,d.marginTop=p,d.marginLeft=m}return(n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(d=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=h(t,"top"),i=h(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}(d,t)),d}function k(e,t,n,r){var i={top:0,left:0},o=p(e,t);if("viewport"===r)i=function(e){var t=e.ownerDocument.documentElement,n=S(e,t),r=Math.max(t.clientWidth,window.innerWidth||0),i=Math.max(t.clientHeight,window.innerHeight||0),o=h(t),a=h(t,"left");return x({top:o-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:r,height:i})}(o);else{var a=void 0;"scrollParent"===r?"BODY"===(a=c(u(t))).nodeName&&(a=e.ownerDocument.documentElement):a="window"===r?e.ownerDocument.documentElement:r;var l=S(a,o);if("HTML"!==a.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===s(t,"position")||e(u(t)))}(o))i=l;else{var f=b(),d=f.height,m=f.width;i.top+=l.top-l.marginTop,i.bottom=d+l.top,i.left+=l.left-l.marginLeft,i.right=m+l.left}}return i.left+=n,i.top+=n,i.right-=n,i.bottom-=n,i}function O(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=k(n,r,o,i),l={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},s=Object.keys(l).map(function(e){return w({key:e},l[e],{area:(t=l[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),u=s.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=u.length>0?u[0].key:s[0].key,f=e.split("-")[1];return c+(f?"-"+f:"")}function N(e,t,n){return S(n,p(t,n))}function A(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),r=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function D(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function I(e,t,n){n=n.split("-")[0];var r=A(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",l=o?"left":"top",s=o?"height":"width",u=o?"width":"height";return i[a]=t[a]+t[s]/2-r[s]/2,i[l]=n===l?t[l]-r[u]:t[D(l)],i}function P(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function L(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=P(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&l(n)&&(t.offsets.popper=x(t.offsets.popper),t.offsets.reference=x(t.offsets.reference),t=n(t,e))}),t}function R(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function j(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length-1;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function H(e){var t=e.ownerDocument;return t?t.defaultView:window}function M(e,t,n,r){n.updateBound=r,H(e).addEventListener("resize",n.updateBound,{passive:!0});var i=c(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,a=o?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),o||e(c(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function F(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,H(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function U(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function W(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&U(t[n])&&(r="px"),e.style[n]=t[n]+r})}function V(e,t,n){var r=P(e,function(e){return e.name===t}),i=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!i){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var B=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],z=B.slice(3);function q(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=z.indexOf(e),r=z.slice(n+1).concat(z.slice(0,n));return t?r.reverse():r}var G={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function $(e,t,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),l=a.indexOf(P(a,function(e){return-1!==e.search(/,|\s/)}));a[l]&&-1===a[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var s=/\s*,\s*|\s+/,u=-1!==l?[a.slice(0,l).concat([a[l].split(s)[0]]),[a[l].split(s)[1]].concat(a.slice(l+1))]:[a];return(u=u.map(function(e,r){var i=(1===r?!o:o)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var l=void 0;switch(a){case"%p":l=n;break;case"%":case"%r":default:l=r}return x(l)[t]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(e,i,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){U(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))})}),i}var K={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,a=i.popper,l=-1!==["bottom","top"].indexOf(n),s=l?"left":"top",u=l?"width":"height",c={start:T({},s,o[s]),end:T({},s,o[s]+o[u]-a[u])};e.offsets.popper=w({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,o=i.popper,a=i.reference,l=r.split("-")[0],s=void 0;return s=U(+n)?[+n,0]:$(n,o,a,l),"left"===l?(o.top+=s[0],o.left-=s[1]):"right"===l?(o.top+=s[0],o.left+=s[1]):"top"===l?(o.left+=s[0],o.top-=s[1]):"bottom"===l&&(o.left+=s[0],o.top+=s[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||f(e.instance.popper);e.instance.reference===n&&(n=f(n));var r=k(e.instance.popper,e.instance.reference,t.padding,n);t.boundaries=r;var i=t.priority,o=e.offsets.popper,a={primary:function(e){var n=o[e];return o[e]<r[e]&&!t.escapeWithReference&&(n=Math.max(o[e],r[e])),T({},e,n)},secondary:function(e){var n="right"===e?"left":"top",i=o[n];return o[e]>r[e]&&!t.escapeWithReference&&(i=Math.min(o[n],r[e]-("right"===e?o.width:o.height))),T({},n,i)}};return i.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";o=w({},o,a[t](e))}),e.offsets.popper=o,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),l=a?"right":"bottom",s=a?"left":"top",u=a?"width":"height";return n[l]<o(r[s])&&(e.offsets.popper[s]=o(r[s])-n[u]),n[s]>o(r[l])&&(e.offsets.popper[s]=o(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!V(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,a=o.popper,l=o.reference,u=-1!==["left","right"].indexOf(i),c=u?"height":"width",f=u?"Top":"Left",d=f.toLowerCase(),p=u?"left":"top",h=u?"bottom":"right",m=A(r)[c];l[h]-m<a[d]&&(e.offsets.popper[d]-=a[d]-(l[h]-m)),l[d]+m>a[h]&&(e.offsets.popper[d]+=l[d]+m-a[h]),e.offsets.popper=x(e.offsets.popper);var g=l[d]+l[c]/2-m/2,v=s(e.instance.popper),y=parseFloat(v["margin"+f],10),b=parseFloat(v["border"+f+"Width"],10),_=g-e.offsets.popper[d]-y-b;return _=Math.max(Math.min(a[c]-m,_),0),e.arrowElement=r,e.offsets.arrow=(T(n={},d,Math.round(_)),T(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(R(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=k(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),r=e.placement.split("-")[0],i=D(r),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case G.FLIP:a=[r,i];break;case G.CLOCKWISE:a=q(r);break;case G.COUNTERCLOCKWISE:a=q(r,!0);break;default:a=t.behavior}return a.forEach(function(l,s){if(r!==l||a.length===s+1)return e;r=e.placement.split("-")[0],i=D(r);var u=e.offsets.popper,c=e.offsets.reference,f=Math.floor,d="left"===r&&f(u.right)>f(c.left)||"right"===r&&f(u.left)<f(c.right)||"top"===r&&f(u.bottom)>f(c.top)||"bottom"===r&&f(u.top)<f(c.bottom),p=f(u.left)<f(n.left),h=f(u.right)>f(n.right),m=f(u.top)<f(n.top),g=f(u.bottom)>f(n.bottom),v="left"===r&&p||"right"===r&&h||"top"===r&&m||"bottom"===r&&g,y=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&h||!y&&"start"===o&&m||!y&&"end"===o&&g);(d||v||b)&&(e.flipped=!0,(d||v)&&(r=a[s+1]),b&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=r+(o?"-"+o:""),e.offsets.popper=w({},e.offsets.popper,I(e.instance.popper,e.offsets.reference,e.placement)),e=L(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(l?i[a?"width":"height"]:0),e.placement=D(t),e.offsets.popper=x(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!V(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=P(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=P(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,l=C(f(e.instance.popper)),s={position:i.position},u={left:Math.floor(i.left),top:Math.floor(i.top),bottom:Math.floor(i.bottom),right:Math.floor(i.right)},c="bottom"===n?"top":"bottom",d="right"===r?"left":"right",p=j("transform"),h=void 0,m=void 0;if(m="bottom"===c?-l.height+u.bottom:u.top,h="right"===d?-l.width+u.right:u.left,a&&p)s[p]="translate3d("+h+"px, "+m+"px, 0)",s[c]=0,s[d]=0,s.willChange="transform";else{var g="bottom"===c?-1:1,v="right"===d?-1:1;s[c]=m*g,s[d]=h*v,s.willChange=c+", "+d}var y={"x-placement":e.placement};return e.attributes=w({},y,e.attributes),e.styles=w({},s,e.styles),e.arrowStyles=w({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return W(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&W(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var o=N(0,t,e),a=O(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),W(t,{position:"absolute"}),n},gpuAcceleration:void 0}}},Q=function(){function e(t,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};_(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=a(this.update.bind(this)),this.options=w({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(w({},e.Defaults.modifiers,i.modifiers)).forEach(function(t){r.options.modifiers[t]=w({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return w({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&l(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return E(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=N(this.state,this.popper,this.reference),e.placement=O(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=I(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=L(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,R(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[j("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=M(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return F.call(this)}}]),e}();Q.Utils=("undefined"!=typeof window?window:e).PopperUtils,Q.placements=B,Q.Defaults=K,t.default=Q}.call(this,n(3))},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(4),a=n.n(o);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(){var e,n,r,i,o,a,s;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var f=arguments.length,d=new Array(f),p=0;p<f;p++)d[p]=arguments[p];return r=this,i=(e=u(t)).call.apply(e,[this].concat(d)),n=!i||"object"!==l(i)&&"function"!=typeof i?c(r):i,o=c(n),s=function(e){var t=n.props,r=t.data,i=t.update,o=e.target.value.toLowerCase();i({data:r.filter(function(e){return e.name.toLowerCase().includes(o)}),active:0,term:o})},(a="dataSearch")in o?Object.defineProperty(o,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):o[a]=s,n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,i.a.Component),n=t,(r=[{key:"render",value:function(){var e=this.props.term;return i.a.createElement("div",{className:"search-name"},i.a.createElement("input",{className:"form-control",type:"text","aria-label":"Search",value:e,placeholder:"Search in here...",onChange:this.dataSearch}))}}])&&s(n.prototype,r),o&&s(n,o),t}(),p=function(e){var t=e.data,n=e.activeUser;if(!t||!t[n])return i.a.createElement("h3",null,"Nothing was found...");var r=t[n];return i.a.createElement("div",{className:"thumbnail position-fixed mt-5"},i.a.createElement("img",{className:"card-img-top",src:"images/".concat(r.image,".svg"),alt:r.image}),i.a.createElement("div",{className:"thumbnail-caption"},i.a.createElement("table",{className:"user-info table table-responsive"},i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("td",null,"Name: "),i.a.createElement("td",null,r.name)),i.a.createElement("tr",null,i.a.createElement("td",null,"Age:"),i.a.createElement("td",null,r.age)),i.a.createElement("tr",null,i.a.createElement("td",null,"Favourite animal:"),i.a.createElement("td",null,r.image)),i.a.createElement("tr",null,i.a.createElement("td",null,"Phone: "),i.a.createElement("td",null,r.phone)))),i.a.createElement("div",null,i.a.createElement("span",{className:""},i.a.createElement("b",null,"Phraze:")),i.a.createElement("br",null),i.a.createElement("blockquote",{className:"text-center mt-4"},i.a.createElement("i",{className:"fa fa-quote-left mr-2 align-top","aria-hidden":"true"}),r.phrase,i.a.createElement("hr",null)))))},h=function(e){var t=e.user,n=e.update,r=e.index,o=e.data,a=t.image,l=t.name,s=t.age,u=t.phone;return i.a.createElement("tr",{onClick:function(){return n({active:r})}},i.a.createElement("td",{className:"image-value"},i.a.createElement("img",{src:"images/".concat(a,".svg"),alt:a,className:"user-image"})),i.a.createElement("td",{className:"name-value"},i.a.createElement("h4",null,l)),i.a.createElement("td",{className:"age-value"},s),i.a.createElement("td",{className:"phone-value"},"8 ",u),i.a.createElement("td",null,i.a.createElement("button",{value:l,className:"btn btn-warning",onClick:function(e){return function(e){e.preventDefault();var t=e.target.value,i=o.find(function(e){return e.Name==t}),a=o;a.splice(r,1),deleteUser("".concat(baseUrl,"/api/users/").concat(r+1),i).then(function(e){null==e&&null==e||n({data:a})}).catch(function(e){return console.error("Error:",e)}).then(function(e){return console.log("Success:",e)})}(e)}},"Delete")))};function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var _=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),v(this,y(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(t,i.a.Component),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.data,n=e.update;if(!t)return i.a.createElement("div",null,"Loading...");var r=t.map(function(e,r){return i.a.createElement(h,{user:e,index:r,data:t,key:"user - ".concat(r),update:n})});return i.a.createElement("table",{className:"user-list table table-striped mr-2"},i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null,"Image"),i.a.createElement("th",null,"Name"),i.a.createElement("th",null,"Age"),i.a.createElement("th",null,"Phone"),i.a.createElement("th",null))),i.a.createElement("tbody",null,r))}}])&&g(n.prototype,r),o&&g(n,o),t}(),E=function(e){var t=e.update,n=e.data,r=(e.initilData,e.isSorted),o=function(e){var i=r[e]?1:-1,o=n.slice().sort(function(t,n){return t[e]===n[e]?0:t[e]>n[e]?i:-1*i});if("name"===e){var a=Object.assign({},{name:!r.name,age:r.age});t({activeUser:0,data:o,isSorted:a})}if("age"===e){var l=Object.assign({},{name:r.name,age:!r.age});t({activeUser:0,data:o,isSorted:l})}};return i.a.createElement("div",{className:"container-fluid"},i.a.createElement("div",{className:"row pl-3 mt-4 sorted-buttons"},i.a.createElement("button",{className:"btn btn-default text-uppercase mb-2 sort-button-name",onClick:function(){o("name")}},i.a.createElement("i",{className:r.name?"fa fa-sort-alpha-desc":"fa fa-sort-alpha-asc"}),"Sort Names"),i.a.createElement("button",{className:"btn btn-default mr-2 text-uppercase sort-button-age",onClick:function(){o("age")}},i.a.createElement("i",{className:r.age?"fa fa-sort-numeric-desc":"fa fa-sort-numeric-asc"}),"Sort Ages")))},T=n(1),w=n.n(T);function x(e){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function C(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var A=function(e){function t(e){var n,r,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,(n=!(i=k(t).call(this,e))||"object"!==x(i)&&"function"!=typeof i?O(r):i).state={name:"",age:0,image:"",phone:"",phrase:""},n.handleSubmit=n.handleSubmit.bind(O(n)),n.onHandleChangeName=n.onHandleChangeName.bind(O(n)),n.onHandleChangeAge=n.onHandleChangeAge.bind(O(n)),n.onHandleChangeImage=n.onHandleChangeImage.bind(O(n)),n.onHandleChangePhone=n.onHandleChangePhone.bind(O(n)),n.onHandleChangePhrase=n.onHandleChangePhrase.bind(O(n)),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(t,i.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){w()(this.modal).modal("show"),w()(this.modal).on("hidden.bs.modal",this.props.onClick)}},{key:"saveUser",value:function(e,t){var n=this.props,r=n.update,i=n.data;(function(e,t){return fetch(e,{method:"POST",headers:{Accept:"application/json","content-type":"application/json"},body:JSON.stringify(t),cache:"cache",mode:"cors",redirect:"follow",referrer:"client"}).then(function(e){return e.json()}).catch(function(e){return new Error("Something has gone wrong, the data has not being added")})})(e,t).then(function(e){r({data:[].concat(C(i),[e])})}).catch(function(e){return console.error("Error:",e)}).then(function(e){return console.log("Success:",e)})}},{key:"handleSubmit",value:function(e){e.preventDefault();var t={name:this.state.name,age:this.state.age,phone:this.state.phone,phrase:this.state.phrase,image:this.state.image};this.saveUser("".concat(baseUrl,"/api/users"),t),w()(this.modal).modal("hide")}},{key:"onHandleChangeName",value:function(e){e.preventDefault();var t=e.target.value;this.setState({name:t})}},{key:"onHandleChangeAge",value:function(e){e.preventDefault();var t=e.target.value;this.setState({age:t})}},{key:"onHandleChangeImage",value:function(e){e.preventDefault();var t=e.target.value;this.setState({image:t})}},{key:"onHandleChangePhone",value:function(e){e.preventDefault();var t=e.target.value;this.setState({phone:t})}},{key:"onHandleChangePhrase",value:function(e){e.preventDefault();var t=e.target.value;this.setState({phrase:t})}},{key:"render",value:function(){var e=this;return i.a.createElement("div",{className:"modal fade user-add-form",ref:function(t){return e.modal=t},id:"Modal",tabIndex:"-1",role:"dialog","aria-labelledby":"exampleModalLabel","aria-hidden":"true"},i.a.createElement("div",{className:"modal-dialog",role:"document"},i.a.createElement("div",{className:"modal-content"},i.a.createElement("div",{className:"modal-header"},i.a.createElement("h4",{className:"modal-title form-title"},"User information"),i.a.createElement("button",{type:"button",className:"close ml-0","data-dismiss":"modal","aria-label":"Close"},i.a.createElement("span",{"aria-hidden":"true"},"×"))),i.a.createElement("div",{className:"modal-body"},i.a.createElement("form",{onSubmit:this.handleSubmit,id:"formModal"},i.a.createElement("div",{className:"form-group"},i.a.createElement("label",{htmlFor:"recipient-name",className:"col-form-label"},"Name:"),i.a.createElement("input",{value:this.state.name,onChange:this.onHandleChangeName,name:"Name",type:"text",className:"form-control",id:"recipient-name"})),i.a.createElement("div",{className:"form-group"},i.a.createElement("label",{htmlFor:"recipient-age",className:"col-form-label"},"Age:"),i.a.createElement("input",{value:this.state.age,onChange:this.onHandleChangeAge,name:"Age",type:"text",className:"form-control",id:"recipient-age"})),i.a.createElement("div",{className:"form-group"},i.a.createElement("label",{htmlFor:"recipient-animal",className:"col-form-label"},"Favourite animal:"),i.a.createElement("input",{value:this.state.image,onChange:this.onHandleChangeImage,name:"Image",type:"text",className:"form-control",id:"recipient-animal"})),i.a.createElement("div",{className:"form-group"},i.a.createElement("label",{htmlFor:"recipient-phone",className:"col-form-label"},"Phone:"),i.a.createElement("input",{value:this.state.phone,onChange:this.onHandleChangePhone,name:"Phone",type:"text",className:"form-control",id:"recipient-phone"})),i.a.createElement("div",{className:"form-group"},i.a.createElement("label",{htmlFor:"message-phrase",className:"col-form-label"},"Phrase:"),i.a.createElement("textarea",{value:this.state.phrase,onChange:this.onHandleChangePhrase,name:"Phrase",className:"form-control",id:"message-phrase"}))),i.a.createElement("div",{className:"modal-footer"},i.a.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal",onClick:this.closeAddForm},"Close"),i.a.createElement("button",{className:"btn btn-primary",onClick:this.handleSubmit},"Submit"))))))}}])&&S(n.prototype,r),o&&S(n,o),t}();function D(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["Reauest failed: ",""]);return D=function(){return e},e}function I(e){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(e){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function R(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var H=function(e){function t(e){var n,r,i,o,a,l;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,i=L(t).call(this,e),n=!i||"object"!==I(i)&&"function"!=typeof i?R(r):i,o=R(n),l=function(e){n.setState(e)},(a="updateData")in o?Object.defineProperty(o,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):o[a]=l,n.state={data:null,activeUser:0,term:"",isSorted:{name:!0,age:!0},showAddUser:!1},n.showAddForm=n.showAddForm.bind(R(n)),n.closeAddForm=n.closeAddForm.bind(R(n)),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}(t,i.a.Component),n=t,(r=[{key:"loadData",value:function(){var e,t=this,n=this.props.data;(e=n,new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET",e,!0),r.addEventListener("load",function(){r.status>=200&&r.status<400?t(r.responseText):n((new Error)(D(),r.statusText))}),r.addEventListener("error",function(){n(new Error("Network error"))}),r.send()})).then(function(e){t.initialData=JSON.parse(e),t.setState({data:t.initialData})}).catch(function(e){console.log(e)})}},{key:"componentDidMount",value:function(){this.loadData()}},{key:"showAddForm",value:function(){this.setState({showAddUser:!this.state.showAddUser})}},{key:"closeAddForm",value:function(){this.setState({showAddUser:!this.state.showAddUser})}},{key:"render",value:function(){var e=this.state,t=e.activeUser,n=e.term,r=e.data,o=e.isSorted,a=e.showAddUser;return i.a.createElement("div",{className:"app container-fluid"},i.a.createElement("div",{className:"row mt-4"},i.a.createElement("div",{className:"col-12"},i.a.createElement(d,{term:n,data:this.initialData,update:this.updateData}))),i.a.createElement("div",{className:"row mt-2 mb-2"},i.a.createElement(E,{update:this.updateData,data:r,isSorted:o,initialData:this.initialData,activeUser:t}),i.a.createElement("button",{type:"button",className:"btn btn-default ml-3 text-uppercase add-new-user global-buttons",onClick:this.showAddForm},"Add new user")),i.a.createElement("div",{className:"row user-list-data"},i.a.createElement("div",{className:"col-12 col-sm-8 col-md-9 col-lg-10 user-list"},i.a.createElement(_,{data:r,update:this.updateData})),i.a.createElement("div",{className:"col-sm-4 col-md-3 col-lg-2 active-user"},i.a.createElement(p,{activeUser:t,data:r})),a?i.a.createElement(A,{update:this.updateData,showAddUser:a,onClick:this.closeAddForm,data:r}):null))}}])&&P(n.prototype,r),o&&P(n,o),t}();n(10);a.a.render(i.a.createElement(H,{data:"data.json"}),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvZGlzdC9qcy9ib290c3RyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoQmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FjdGl2ZVVzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXNlckRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXNlckxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdG9vbEJhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hZGRVc2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL3NhdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL2xvYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbInBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrIiwid2luZG93IiwiY2h1bmtJZCIsIm1vcmVNb2R1bGVzIiwiaG90QXZhaWxhYmxlRmlsZXNNYXAiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsIm1vZHVsZUlkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaG90VXBkYXRlIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RBZGRVcGRhdGVDaHVuayIsImhvdEN1cnJlbnRDaGlsZE1vZHVsZSIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RDdXJyZW50SGFzaCIsImhvdFJlcXVlc3RUaW1lb3V0IiwiaG90Q3VycmVudE1vZHVsZURhdGEiLCJob3RDdXJyZW50UGFyZW50cyIsImhvdEN1cnJlbnRQYXJlbnRzVGVtcCIsImhvdENyZWF0ZVJlcXVpcmUiLCJtZSIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZm4iLCJyZXF1ZXN0IiwiaG90IiwiYWN0aXZlIiwicGFyZW50cyIsImluZGV4T2YiLCJwdXNoIiwiY2hpbGRyZW4iLCJjb25zb2xlIiwid2FybiIsIk9iamVjdEZhY3RvcnkiLCJuYW1lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlIiwiaG90U3RhdHVzIiwiaG90U2V0U3RhdHVzIiwidGhlbiIsImZpbmlzaENodW5rTG9hZGluZyIsImVyciIsImhvdFdhaXRpbmdGaWxlc01hcCIsImhvdEVuc3VyZVVwZGF0ZUNodW5rIiwidCIsIm1vZGUiLCJob3RDcmVhdGVNb2R1bGUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfbWFpbiIsImFjY2VwdCIsImRlcCIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiaSIsImxlbmd0aCIsImRlY2xpbmUiLCJkaXNwb3NlIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImlkeCIsInNwbGljZSIsImNoZWNrIiwiaG90Q2hlY2siLCJhcHBseSIsImhvdEFwcGx5Iiwic3RhdHVzIiwibCIsImhvdFN0YXR1c0hhbmRsZXJzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJkYXRhIiwibmV3U3RhdHVzIiwiaG90RGVmZXJyZWQiLCJob3RVcGRhdGVOZXdIYXNoIiwidG9Nb2R1bGVJZCIsImlkIiwiRXJyb3IiLCJyZXF1ZXN0VGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsInAiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiYyIsImgiLCJwcm9taXNlIiwic2NyaXB0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsInNyYyIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsInJlc3VsdCIsIm91dGRhdGVkTW9kdWxlcyIsIm9wdGlvbnMiLCJjYiIsImoiLCJtb2R1bGUiLCJnZXRBZmZlY3RlZFN0dWZmIiwidXBkYXRlTW9kdWxlSWQiLCJvdXRkYXRlZERlcGVuZGVuY2llcyIsInF1ZXVlIiwic2xpY2UiLCJtYXAiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBvcCIsInR5cGUiLCJwYXJlbnRJZCIsInBhcmVudCIsImNvbmNhdCIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJtb2R1bGVzIiwiZXJyb3IiLCJjYWxsYmFja3MiLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yaWdpbmFsRXJyb3IiLCJleHBvcnRzIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImdsb2JhbCIsImZhY3RvcnkiLCJ3IiwidGhpcyIsIm5vR2xvYmFsIiwiYXJyIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInRleHQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJpbml0IiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiaXNBcnJheUxpa2UiLCJvYmoiLCJpc1dpbmRvdyIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImVsZW0iLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImVuZCIsInNvcnQiLCJleHRlbmQiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsInRhcmdldCIsImRlZXAiLCJpc0Z1bmN0aW9uIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJtc2ciLCJub29wIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJncmVwIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsInByb3h5IiwidG1wIiwiYXJncyIsIm5vdyIsIkRhdGUiLCJpdGVyYXRvciIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsInNvcnRPcmRlciIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiXyIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImRpc2FibGVkQW5jZXN0b3IiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsIm5vZGVUeXBlIiwiZWxzIiwic2VlZCIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3QiLCJub2RlTmFtZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInRvU2VsZWN0b3IiLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJkb2N1bWVudEVsZW1lbnQiLCJub2RlIiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwiaW5uZXJIVE1MIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwidmFsIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwiPiIsIiAiLCIrIiwifiIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwic2V0RmlsdGVycyIsIm1hdGNoZWQiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsInRva2VuIiwiY29tcGlsZWQiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJpc1NpbXBsZSIsIndpbm5vdyIsInF1YWxpZmllciIsInNlbGYiLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsInRhcmdldHMiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwibm9WYWx1ZSIsIm1ldGhvZCIsImZhaWwiLCJDYWxsYmFja3MiLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlXYWl0Iiwid2FpdCIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsInN3YXAiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiaGlkZSIsInRvZ2dsZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsIndyYXBNYXAiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZGl2Iiwicmh0bWwiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50Iiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwidHJpZ2dlciIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJzY3JpcHRUeXBlTWFza2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsImh0bWwiLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybWFyZ2luIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImNvbnRhaW5lciIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsIm1hcmdpbkxlZnQiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsIm1hcmdpblJpZ2h0IiwicGl4ZWxNYXJnaW5SaWdodFZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsImJveFNpemluZ1JlbGlhYmxlIiwicmVsaWFibGVNYXJnaW5MZWZ0IiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmxvYXQiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCIqIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJwYXJzZUludCIsImZvciIsImNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImZvY3VzaW4iLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0IiwicmVzcG9uc2VUeXBlIiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJhc3NpZ24iLCJ0ZXN0MSIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsInRlc3QzIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0b09iamVjdCIsImciLCJGdW5jdGlvbiIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiayIsInEiLCJ1IiwieCIsInkiLCJ6IiwiYWEiLCJiYSIsIkEiLCJCIiwiZiIsImZyYW1lc1RvUG9wIiwiY2EiLCJDIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkQiLCJFIiwicmVmcyIsInVwZGF0ZXIiLCJGIiwiRyIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiSCIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSSIsIkoiLCJLIiwiTCIsInJlZiIsIl9fc2VsZiIsIl9fc291cmNlIiwiTSIsImRlZmF1bHRQcm9wcyIsIiQkdHlwZW9mIiwiX293bmVyIiwiTiIsIk8iLCJQIiwiUSIsImtleVByZWZpeCIsIlIiLCJVIiwiUyIsIlQiLCI9IiwiOiIsImVhIiwiZmEiLCJWIiwiZGEiLCJXIiwiWCIsIkNoaWxkcmVuIiwib25seSIsImNyZWF0ZVJlZiIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiZm9yd2FyZFJlZiIsInJlbmRlciIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwibWVtbyIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidmVyc2lvbiIsInVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRPd25lciIsIlkiLCJkZWZhdWx0IiwiWiIsImhhIiwiaWEiLCJvbkVycm9yIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInFhIiwicmVnaXN0cmF0aW9uTmFtZSIsInJhIiwic2EiLCJkZXBlbmRlbmNpZXMiLCJ0YSIsInVhIiwidmEiLCJ3YSIsImthIiwieGEiLCJ5YSIsInphIiwiQWEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQmEiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJyZXR1cm4iLCJNYSIsImRpc3BhdGNoQ29uZmlnIiwiTmEiLCJfdGFyZ2V0SW5zdCIsIk9hIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlVhIiwiVmEiLCJXYSIsInRyYW5zaXRpb24iLCJYYSIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJkYiIsImViIiwiZmIiLCJnYiIsIkludGVyZmFjZSIsImliIiwiZXZlbnRQb29sIiwiamIiLCJkZXN0cnVjdG9yIiwiaGIiLCJnZXRQb29sZWQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNUcnVzdGVkIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsImRvY3VtZW50TW9kZSIsInBiIiwicWIiLCJyYiIsInNiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInRiIiwidWIiLCJ2YiIsIndiIiwiemIiLCJsb2NhbGUiLCJ4YiIsInliIiwiQWIiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsIndlZWsiLCJNYiIsIk5iIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiT2IiLCJQYiIsIlJiIiwiX3ZhbHVlVHJhY2tlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJRYiIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImRpc3BsYXlOYW1lIiwiamMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImtjIiwibGMiLCJtYyIsIm5jIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInJjIiwic2MiLCJ0YyIsInBjIiwicWMiLCJvYyIsInNldEF0dHJpYnV0ZU5TIiwidWMiLCJ2YyIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwid2MiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsImNoYW5nZSIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJkZXRhY2hFdmVudCIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJRYyIsIlJjIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlNjIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlRjIiwiVWMiLCJWYyIsIldjIiwiWGMiLCJZYyIsImZyb21FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiWmMiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsImlzUHJpbWFyeSIsIiRjIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJhZCIsImFsdGVybmF0ZSIsImJkIiwiY2QiLCJkZCIsImVkIiwiZWZmZWN0VGFnIiwiZmQiLCJoZCIsImdkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsImpkIiwiY2xpcGJvYXJkRGF0YSIsImtkIiwibGQiLCJtZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJuZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJvZCIsInJlcGVhdCIsInBkIiwiZGF0YVRyYW5zZmVyIiwicWQiLCJyZCIsInNkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ1ZCIsInZkIiwid2QiLCJpc0ludGVyYWN0aXZlIiwieGQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJ5ZCIsInpkIiwiQWQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkJkIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIktkIiwiTGQiLCJOZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiT2QiLCJjb250ZW50RWRpdGFibGUiLCJRZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJNZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImVsZW1lbnQiLCJSZCIsIlNkIiwiVGQiLCJVZCIsIlZkIiwiV2QiLCJYZCIsIllkIiwib25TZWxlY3QiLCIkZCIsIlpkIiwiYWUiLCJkZWZhdWx0U2VsZWN0ZWQiLCJiZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2UiLCJkZSIsImVlIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImZlIiwibWF0aG1sIiwic3ZnIiwiZ2UiLCJoZSIsImllIiwiamUiLCJuYW1lc3BhY2VVUkkiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwia2UiLCJsZSIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1ucyIsImZsZXgiLCJmbGV4UG9zaXRpdmUiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibGluZUNsYW1wIiwidGFiU2l6ZSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJuZSIsIm9lIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwicGUiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInRyYWNrIiwid2JyIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJhdXRvRm9jdXMiLCJ4ZSIsIl9faHRtbCIsInllIiwiemUiLCJBZSIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJCZSIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiRGUiLCJFZSIsIlNldCIsIkZlIiwiR2UiLCJIZSIsIkllIiwiSmUiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJjaGlsZENvbnRleHRUeXBlcyIsIktlIiwiTGUiLCJNZSIsIk5lIiwiZ2V0Q2hpbGRDb250ZXh0IiwiT2UiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVWUiLCJlbGVtZW50VHlwZSIsInBlbmRpbmdQcm9wcyIsImNvbnRleHREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZSIsIlZlIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwicGVuZGluZ0NoaWxkcmVuIiwiY2YiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImRmIiwiZmYiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImdmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwidGYiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwibGYiLCJuZiIsIm1mIiwicGF5bG9hZCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ1ZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInZmIiwiY29udGV4dFR5cGUiLCJ3ZiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInhmIiwieWYiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInpmIiwiQWYiLCJfc3RyaW5nUmVmIiwiQmYiLCJDZiIsIk1hcCIsImRlbGV0ZSIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwidGFnTmFtZSIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsImJhc2VVcGRhdGUiLCJuZyIsIm9nIiwicGciLCJhY3Rpb24iLCJxZyIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJyZyIsImRlc3Ryb3kiLCJkZXBzIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInJlYWRDb250ZXh0IiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJRZyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIlJnIiwicGVuZGluZ0NvbnRleHQiLCJTZyIsInRpbWVkT3V0QXQiLCJmYWxsYmFjayIsIlRnIiwiVWciLCJoZiIsIldlIiwiaHlkcmF0ZSIsIm9ic2VydmVkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsIm9uQ2xpY2siLCJvbmNsaWNrIiwicGgiLCJXZWFrU2V0IiwicWgiLCJyaCIsInNoIiwidmgiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIndoIiwieGgiLCJ5aCIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJ6aCIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZSIsInVoIiwiaGkiLCJYaCIsIkJoIiwiV2Vha01hcCIsIkNoIiwiRGgiLCJFaCIsImNvbXBvbmVudERpZENhdGNoIiwiRmgiLCJjb21wb25lbnRTdGFjayIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVmgiLCJaaCIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsImVmIiwiUGQiLCJZaCIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiZmluaXNoZWRXb3JrIiwiJGgiLCJhaSIsImNyZWF0ZUVsZW1lbnROUyIsImJpIiwiY2kiLCJkaSIsIm1heER1cmF0aW9uIiwicGluZ0NhY2hlIiwiZWkiLCJmaSIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiZ2kiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1bnN0YWJsZV9ub3ciLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJ0aW1lb3V0SGFuZGxlIiwiQmkiLCJDaSIsIm5leHRTY2hlZHVsZWRSb290IiwiRGkiLCJFaSIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiX29uQ29tcGxldGUiLCJGaSIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJHaSIsIkhpIiwiSWkiLCJKaSIsIktpIiwiTGkiLCJOaSIsIl9yb290IiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwiT2kiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwiUGkiLCJfaW50ZXJuYWxSb290IiwiUWkiLCJTaSIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsIlJpIiwiVGkiLCJNaSIsInN0cmluZ2lmeSIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJWaSIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIlRlIiwib3ZlcnJpZGVQcm9wcyIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIldpIiwiWGkiLCJwcmV2aW91cyIsInByaW9yaXR5TGV2ZWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInBlcmZvcm1hbmNlIiwiX3NjaGVkTW9jayIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsIlBvcHBlciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2V4dGVuZHMiLCJVdGlsIiwiJCQkMSIsInRyYW5zaXRpb25FbmRFbXVsYXRvciIsIl90aGlzIiwiY2FsbGVkIiwiVFJBTlNJVElPTl9FTkQiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImdldFVJRCIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJzdWJzdHIiLCJlc2NhcGVJZCIsIiRzZWxlY3RvciIsInJlZmxvdyIsInN1cHBvcnRzVHJhbnNpdGlvbkVuZCIsIkJvb2xlYW4iLCJpc0VsZW1lbnQiLCJ0eXBlQ2hlY2tDb25maWciLCJjb21wb25lbnROYW1lIiwiY29uZmlnIiwiY29uZmlnVHlwZXMiLCJleHBlY3RlZFR5cGVzIiwidmFsdWVUeXBlIiwiUVVuaXQiLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsIkFsZXJ0IiwiSlFVRVJZX05PX0NPTkZMSUNUIiwiQ0xPU0UiLCJDTE9TRUQiLCJDTElDS19EQVRBX0FQSSIsIkNsYXNzTmFtZSIsIkFMRVJUIiwiRkFERSIsIlNIT1ciLCJfZWxlbWVudCIsIl9wcm90byIsImNsb3NlIiwicm9vdEVsZW1lbnQiLCJfZ2V0Um9vdEVsZW1lbnQiLCJjdXN0b21FdmVudCIsIl90cmlnZ2VyQ2xvc2VFdmVudCIsIl9yZW1vdmVFbGVtZW50IiwiY2xvc2VFdmVudCIsIl9kZXN0cm95RWxlbWVudCIsIl9qUXVlcnlJbnRlcmZhY2UiLCIkZWxlbWVudCIsIl9oYW5kbGVEaXNtaXNzIiwiYWxlcnRJbnN0YW5jZSIsIkJ1dHRvbiIsIk5BTUUiLCJBQ1RJVkUiLCJCVVRUT04iLCJGT0NVUyIsIlNlbGVjdG9yIiwiREFUQV9UT0dHTEVfQ0FSUk9UIiwiREFUQV9UT0dHTEUiLCJJTlBVVCIsIkZPQ1VTX0JMVVJfREFUQV9BUEkiLCJ0cmlnZ2VyQ2hhbmdlRXZlbnQiLCJhZGRBcmlhUHJlc3NlZCIsImNsYXNzTGlzdCIsIkNhcm91c2VsIiwiREFUQV9LRVkiLCJFVkVOVF9LRVkiLCJEZWZhdWx0Iiwia2V5Ym9hcmQiLCJzbGlkZSIsInBhdXNlIiwiRGVmYXVsdFR5cGUiLCJEaXJlY3Rpb24iLCJORVhUIiwiUFJFViIsIkxFRlQiLCJSSUdIVCIsIlNMSURFIiwiU0xJRCIsIktFWURPV04iLCJNT1VTRUVOVEVSIiwiTU9VU0VMRUFWRSIsIlRPVUNIRU5EIiwiTE9BRF9EQVRBX0FQSSIsIkNBUk9VU0VMIiwiSVRFTSIsIkFDVElWRV9JVEVNIiwiTkVYVF9QUkVWIiwiSU5ESUNBVE9SUyIsIkRBVEFfU0xJREUiLCJEQVRBX1JJREUiLCJfaXRlbXMiLCJfaW50ZXJ2YWwiLCJfYWN0aXZlRWxlbWVudCIsIl9pc1BhdXNlZCIsIl9pc1NsaWRpbmciLCJ0b3VjaFRpbWVvdXQiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl9hZGRFdmVudExpc3RlbmVycyIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImN5Y2xlIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwidmlzaWJpbGl0eVN0YXRlIiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiZGlyZWN0aW9uIiwiX3RoaXMyIiwiX2tleWRvd24iLCJfZ2V0SXRlbUJ5RGlyZWN0aW9uIiwiaXNOZXh0RGlyZWN0aW9uIiwiaXNQcmV2RGlyZWN0aW9uIiwibGFzdEl0ZW1JbmRleCIsImlzR29pbmdUb1dyYXAiLCJkZWx0YSIsIml0ZW1JbmRleCIsIl90cmlnZ2VyU2xpZGVFdmVudCIsImV2ZW50RGlyZWN0aW9uTmFtZSIsInRhcmdldEluZGV4IiwiZnJvbUluZGV4Iiwic2xpZGVFdmVudCIsIl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50IiwibmV4dEluZGljYXRvciIsImRpcmVjdGlvbmFsQ2xhc3NOYW1lIiwib3JkZXJDbGFzc05hbWUiLCJfdGhpczMiLCJhY3RpdmVFbGVtZW50SW5kZXgiLCJuZXh0RWxlbWVudCIsIm5leHRFbGVtZW50SW5kZXgiLCJpc0N5Y2xpbmciLCJzbGlkRXZlbnQiLCJfZGF0YUFwaUNsaWNrSGFuZGxlciIsInNsaWRlSW5kZXgiLCIkY2Fyb3VzZWwiLCJDb2xsYXBzZSIsIlNIT1dOIiwiSElERSIsIkhJRERFTiIsIkNPTExBUFNFIiwiQ09MTEFQU0lORyIsIkNPTExBUFNFRCIsIkRpbWVuc2lvbiIsIldJRFRIIiwiSEVJR0hUIiwiQUNUSVZFUyIsIl9pc1RyYW5zaXRpb25pbmciLCJfdHJpZ2dlckFycmF5IiwidGFiVG9nZ2xlcyIsIl9zZWxlY3RvciIsIl9wYXJlbnQiLCJfZ2V0UGFyZW50IiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsImFjdGl2ZXMiLCJhY3RpdmVzRGF0YSIsInN0YXJ0RXZlbnQiLCJkaW1lbnNpb24iLCJfZ2V0RGltZW5zaW9uIiwic2V0VHJhbnNpdGlvbmluZyIsImNhcGl0YWxpemVkRGltZW5zaW9uIiwic2Nyb2xsU2l6ZSIsIiRlbGVtIiwiaXNUcmFuc2l0aW9uaW5nIiwiaGFzV2lkdGgiLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCIkdGhpcyIsIiR0cmlnZ2VyIiwiJHRhcmdldCIsIkRyb3Bkb3duIiwiUkVHRVhQX0tFWURPV04iLCJBUlJPV19VUF9LRVlDT0RFIiwiQ0xJQ0siLCJLRVlET1dOX0RBVEFfQVBJIiwiS0VZVVBfREFUQV9BUEkiLCJESVNBQkxFRCIsIkRST1BVUCIsIkRST1BSSUdIVCIsIkRST1BMRUZUIiwiTUVOVVJJR0hUIiwiTUVOVUxFRlQiLCJQT1NJVElPTl9TVEFUSUMiLCJGT1JNX0NISUxEIiwiTUVOVSIsIk5BVkJBUl9OQVYiLCJWSVNJQkxFX0lURU1TIiwiQXR0YWNobWVudE1hcCIsIlRPUCIsIlRPUEVORCIsIkJPVFRPTSIsIkJPVFRPTUVORCIsIlJJR0hURU5EIiwiTEVGVEVORCIsImZsaXAiLCJib3VuZGFyeSIsIl9wb3BwZXIiLCJfbWVudSIsIl9nZXRNZW51RWxlbWVudCIsIl9pbk5hdmJhciIsIl9kZXRlY3ROYXZiYXIiLCJfZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJpc0FjdGl2ZSIsIl9jbGVhck1lbnVzIiwic2hvd0V2ZW50IiwiX2dldFBvcHBlckNvbmZpZyIsInNjaGVkdWxlVXBkYXRlIiwiX2dldFBsYWNlbWVudCIsIiRwYXJlbnREcm9wZG93biIsInBsYWNlbWVudCIsIm9mZnNldENvbmYiLCJvZmZzZXRzIiwicG9wcGVyQ29uZmlnIiwibW9kaWZpZXJzIiwicHJldmVudE92ZXJmbG93IiwiYm91bmRhcmllc0VsZW1lbnQiLCJ0b2dnbGVzIiwiZHJvcGRvd25NZW51IiwiaGlkZUV2ZW50IiwiX2RhdGFBcGlLZXlkb3duSGFuZGxlciIsIml0ZW1zIiwiTW9kYWwiLCJiYWNrZHJvcCIsIkZPQ1VTSU4iLCJSRVNJWkUiLCJDTElDS19ESVNNSVNTIiwiS0VZRE9XTl9ESVNNSVNTIiwiTU9VU0VVUF9ESVNNSVNTIiwiTU9VU0VET1dOX0RJU01JU1MiLCJTQ1JPTExCQVJfTUVBU1VSRVIiLCJCQUNLRFJPUCIsIk9QRU4iLCJESUFMT0ciLCJEQVRBX0RJU01JU1MiLCJGSVhFRF9DT05URU5UIiwiU1RJQ0tZX0NPTlRFTlQiLCJOQVZCQVJfVE9HR0xFUiIsIl9kaWFsb2ciLCJfYmFja2Ryb3AiLCJfaXNTaG93biIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX29yaWdpbmFsQm9keVBhZGRpbmciLCJfc2Nyb2xsYmFyV2lkdGgiLCJfY2hlY2tTY3JvbGxiYXIiLCJfc2V0U2Nyb2xsYmFyIiwiX2FkanVzdERpYWxvZyIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJfaGlkZU1vZGFsIiwiaGFuZGxlVXBkYXRlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsIl9lbmZvcmNlRm9jdXMiLCJzaG93bkV2ZW50IiwidHJhbnNpdGlvbkNvbXBsZXRlIiwiX3RoaXM0IiwiX3RoaXM1IiwiX3RoaXM2IiwiX3RoaXM3IiwiX3Jlc2V0QWRqdXN0bWVudHMiLCJfcmVzZXRTY3JvbGxiYXIiLCJfcmVtb3ZlQmFja2Ryb3AiLCJfdGhpczgiLCJkb0FuaW1hdGUiLCJjYWxsYmFja1JlbW92ZSIsImlzTW9kYWxPdmVyZmxvd2luZyIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicmlnaHQiLCJpbm5lcldpZHRoIiwiX2dldFNjcm9sbGJhcldpZHRoIiwiX3RoaXM5IiwiYWN0dWFsUGFkZGluZyIsImNhbGN1bGF0ZWRQYWRkaW5nIiwiYWN0dWFsTWFyZ2luIiwiY2FsY3VsYXRlZE1hcmdpbiIsInNjcm9sbERpdiIsInNjcm9sbGJhcldpZHRoIiwiY2xpZW50V2lkdGgiLCJfdGhpczEwIiwiVG9vbHRpcCIsIkJTQ0xTX1BSRUZJWF9SRUdFWCIsInRlbXBsYXRlIiwidGl0bGUiLCJmYWxsYmFja1BsYWNlbWVudCIsIkFVVE8iLCJIb3ZlclN0YXRlIiwiT1VUIiwiSU5TRVJURUQiLCJGT0NVU09VVCIsIlRPT0xUSVAiLCJUT09MVElQX0lOTkVSIiwiQVJST1ciLCJUcmlnZ2VyIiwiSE9WRVIiLCJNQU5VQUwiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwidGlwIiwiX3NldExpc3RlbmVycyIsImVuYWJsZSIsInRvZ2dsZUVuYWJsZWQiLCJkYXRhS2V5IiwiX2dldERlbGVnYXRlQ29uZmlnIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZW50ZXIiLCJfbGVhdmUiLCJnZXRUaXBFbGVtZW50IiwiaXNXaXRoQ29udGVudCIsImlzSW5UaGVEb20iLCJ0aXBJZCIsInNldENvbnRlbnQiLCJhdHRhY2htZW50IiwiX2dldEF0dGFjaG1lbnQiLCJhZGRBdHRhY2htZW50Q2xhc3MiLCJiZWhhdmlvciIsImFycm93Iiwib25DcmVhdGUiLCJvcmlnaW5hbFBsYWNlbWVudCIsIl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UiLCJvblVwZGF0ZSIsIl9maXhUcmFuc2l0aW9uIiwicHJldkhvdmVyU3RhdGUiLCJfVFJBTlNJVElPTl9EVVJBVElPTiIsIl9jbGVhblRpcENsYXNzIiwiZ2V0VGl0bGUiLCJDTEFTU19QUkVGSVgiLCIkdGlwIiwic2V0RWxlbWVudENvbnRlbnQiLCJ0cmlnZ2VycyIsImV2ZW50SW4iLCJldmVudE91dCIsIl9maXhUaXRsZSIsInRpdGxlVHlwZSIsInRhYkNsYXNzIiwiaW5pdENvbmZpZ0FuaW1hdGlvbiIsIlBvcG92ZXIiLCJUSVRMRSIsIkNPTlRFTlQiLCJfVG9vbHRpcCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsIl9nZXRDb250ZW50IiwiU2Nyb2xsU3B5IiwiQUNUSVZBVEUiLCJTQ1JPTEwiLCJEUk9QRE9XTl9JVEVNIiwiRFJPUERPV05fTUVOVSIsIkRBVEFfU1BZIiwiTkFWX0xJU1RfR1JPVVAiLCJOQVZfTElOS1MiLCJOQVZfSVRFTVMiLCJMSVNUX0lURU1TIiwiRFJPUERPV04iLCJEUk9QRE9XTl9JVEVNUyIsIkRST1BET1dOX1RPR0dMRSIsIk9mZnNldE1ldGhvZCIsIk9GRlNFVCIsIlBPU0lUSU9OIiwiX3Njcm9sbEVsZW1lbnQiLCJfb2Zmc2V0cyIsIl90YXJnZXRzIiwiX2FjdGl2ZVRhcmdldCIsIl9zY3JvbGxIZWlnaHQiLCJfcHJvY2VzcyIsInJlZnJlc2giLCJhdXRvTWV0aG9kIiwib2Zmc2V0TWV0aG9kIiwib2Zmc2V0QmFzZSIsIl9nZXRTY3JvbGxUb3AiLCJfZ2V0U2Nyb2xsSGVpZ2h0IiwidGFyZ2V0U2VsZWN0b3IiLCJ0YXJnZXRCQ1IiLCJfZ2V0T2Zmc2V0SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJtYXhTY3JvbGwiLCJfYWN0aXZhdGUiLCJfY2xlYXIiLCJpc0FjdGl2ZVRhcmdldCIsInF1ZXJpZXMiLCIkbGluayIsInNjcm9sbFNweXMiLCIkc3B5IiwiVGFiIiwiQUNUSVZFX1VMIiwiRFJPUERPV05fQUNUSVZFX0NISUxEIiwibGlzdEVsZW1lbnQiLCJpdGVtU2VsZWN0b3IiLCJoaWRkZW5FdmVudCIsIl90cmFuc2l0aW9uQ29tcGxldGUiLCJkcm9wZG93bkNoaWxkIiwiZHJvcGRvd25FbGVtZW50IiwiU2Nyb2xsc3B5IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImlzQnJvd3NlciIsImxvbmdlclRpbWVvdXRCcm93c2VycyIsInRpbWVvdXREdXJhdGlvbiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRlYm91bmNlIiwic2NoZWR1bGVkIiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZ2V0UGFyZW50Tm9kZSIsImdldFNjcm9sbFBhcmVudCIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsImdldE9mZnNldFBhcmVudCIsImdldFJvb3QiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwic2Nyb2xsaW5nRWxlbWVudCIsImdldEJvcmRlcnNTaXplIiwiYXhpcyIsInNpZGVBIiwic2lkZUIiLCJpc0lFMTAiLCJpc0lFMTAkMSIsImFwcFZlcnNpb24iLCJnZXRTaXplIiwiY29tcHV0ZWRTdHlsZSIsImdldFdpbmRvd1NpemVzIiwiY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImdldENsaWVudFJlY3QiLCJib3R0b20iLCJzaXplcyIsImhvcml6U2Nyb2xsYmFyIiwidmVydFNjcm9sbGJhciIsImdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEJvdW5kYXJpZXMiLCJwb3BwZXIiLCJyZWZlcmVuY2UiLCJib3VuZGFyaWVzIiwicmVsYXRpdmVPZmZzZXQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsImlzRml4ZWQiLCJfZ2V0V2luZG93U2l6ZXMiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiX3JlZiIsImZpbHRlcmVkQXJlYXMiLCJfcmVmMiIsImNvbXB1dGVkUGxhY2VtZW50IiwidmFyaWF0aW9uIiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsImdldE91dGVyU2l6ZXMiLCJtYXJnaW5Cb3R0b20iLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsImdldFBvcHBlck9mZnNldHMiLCJyZWZlcmVuY2VPZmZzZXRzIiwicG9wcGVyUmVjdCIsInBvcHBlck9mZnNldHMiLCJpc0hvcml6IiwibWFpblNpZGUiLCJzZWNvbmRhcnlTaWRlIiwibWVhc3VyZW1lbnQiLCJzZWNvbmRhcnlNZWFzdXJlbWVudCIsInJ1bk1vZGlmaWVycyIsImVuZHMiLCJmaW5kSW5kZXgiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsInRvQ2hlY2siLCJnZXRXaW5kb3ciLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwidXBkYXRlQm91bmQiLCJwYXNzaXZlIiwic2Nyb2xsRWxlbWVudCIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJldmVudHNFbmFibGVkIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwic2V0U3R5bGVzIiwiaXNNb2RpZmllclJlcXVpcmVkIiwicmVxdWVzdGluZ05hbWUiLCJyZXF1ZXN0ZWROYW1lIiwicmVxdWVzdGluZyIsImlzUmVxdWlyZWQiLCJfcmVxdWVzdGluZyIsInJlcXVlc3RlZCIsInBsYWNlbWVudHMiLCJ2YWxpZFBsYWNlbWVudHMiLCJjbG9ja3dpc2UiLCJjb3VudGVyIiwiQkVIQVZJT1JTIiwiRkxJUCIsIkNMT0NLV0lTRSIsIkNPVU5URVJDTE9DS1dJU0UiLCJwYXJzZU9mZnNldCIsImJhc2VQbGFjZW1lbnQiLCJ1c2VIZWlnaHQiLCJmcmFnbWVudHMiLCJmcmFnIiwiZGl2aWRlciIsInNwbGl0UmVnZXgiLCJvcHMiLCJvcCIsIm1lcmdlV2l0aFByZXZpb3VzIiwicmVkdWNlIiwic3RyIiwidG9WYWx1ZSIsImluZGV4MiIsIkRlZmF1bHRzIiwicmVtb3ZlT25EZXN0cm95Iiwic2hpZnR2YXJpYXRpb24iLCJfZGF0YSRvZmZzZXRzIiwiaXNWZXJ0aWNhbCIsInNpZGUiLCJzaGlmdE9mZnNldHMiLCJwcmlvcml0eSIsInByaW1hcnkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwic2Vjb25kYXJ5Iiwia2VlcFRvZ2V0aGVyIiwiZmxvb3IiLCJvcFNpZGUiLCJfZGF0YSRvZmZzZXRzJGFycm93IiwiYXJyb3dFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInNpZGVDYXBpdGFsaXplZCIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJyb3VuZCIsImZsaXBwZWQiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsInJlZk9mZnNldHMiLCJvdmVybGFwc1JlZiIsIm92ZXJmbG93c0xlZnQiLCJvdmVyZmxvd3NSaWdodCIsIm92ZXJmbG93c1RvcCIsIm92ZXJmbG93c0JvdHRvbSIsIm92ZXJmbG93c0JvdW5kYXJpZXMiLCJmbGlwcGVkVmFyaWF0aW9uIiwiZmxpcFZhcmlhdGlvbnMiLCJnZXRPcHBvc2l0ZVZhcmlhdGlvbiIsImlubmVyIiwic3VidHJhY3RMZW5ndGgiLCJib3VuZCIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJwcmVmaXhlZFByb3BlcnR5Iiwid2lsbENoYW5nZSIsImludmVydFRvcCIsImludmVydExlZnQiLCJ4LXBsYWNlbWVudCIsImFycm93U3R5bGVzIiwiYXBwbHlTdHlsZSIsIm9uTG9hZCIsIm1vZGlmaWVyT3B0aW9ucyIsImlzRGVzdHJveWVkIiwiaXNDcmVhdGVkIiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJVdGlscyIsIlBvcHBlclV0aWxzIiwiU2VhcmNoQmFyIiwiX3RoaXMkcHJvcHMiLCJ1c2VyIiwiaW5jbHVkZXMiLCJ0ZXJtIiwiUmVhY3QiLCJyZWFjdF9kZWZhdWx0IiwiYXJpYS1sYWJlbCIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJkYXRhU2VhcmNoIiwiY29tcG9uZW50c19hY3RpdmVVc2VyIiwiYWN0aXZlVXNlciIsImFsdCIsImFnZSIsInBob25lIiwiYXJpYS1oaWRkZW4iLCJwaHJhc2UiLCJ1c2VyRGF0YSIsIk5hbWUiLCJuZXdEYXRhIiwiZGVsZXRlVXNlciIsImJhc2VVcmwiLCJsb2ciLCJoYW5kbGVEZWxldGVVc2VyIiwiVXNlckxpc3QiLCJ1c2VycyIsInRvb2xCYXIiLCJpc1NvcnRlZCIsImluaXRpbERhdGEiLCJzb3J0ZWQiLCJuZXdTb3J0ZWQiLCJBZGRVc2VyIiwiYWRkVXNlcl9jbGFzc0NhbGxDaGVjayIsImFkZFVzZXJfZ2V0UHJvdG90eXBlT2YiLCJoYW5kbGVTdWJtaXQiLCJhZGRVc2VyX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIm9uSGFuZGxlQ2hhbmdlTmFtZSIsIm9uSGFuZGxlQ2hhbmdlQWdlIiwib25IYW5kbGVDaGFuZ2VJbWFnZSIsIm9uSGFuZGxlQ2hhbmdlUGhvbmUiLCJvbkhhbmRsZUNoYW5nZVBocmFzZSIsIm1vZGFsIiwiZm9ybURhdGEiLCJmZXRjaCIsIkFjY2VwdCIsImNvbnRlbnQtdHlwZSIsInJlZGlyZWN0IiwicmVmZXJyZXIiLCJzYXZlIiwiX3RvQ29uc3VtYWJsZUFycmF5Iiwic2F2ZVVzZXIiLCJyb2xlIiwiYXJpYS1sYWJlbGxlZGJ5IiwiZGF0YS1kaXNtaXNzIiwib25TdWJtaXQiLCJodG1sRm9yIiwiY2xvc2VBZGRGb3JtIiwiQXBwIiwiYXBwX2NsYXNzQ2FsbENoZWNrIiwiYXBwX2dldFByb3RvdHlwZU9mIiwiYXBwX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNob3dBZGRVc2VyIiwic2hvd0FkZEZvcm0iLCJfdGVtcGxhdGVPYmplY3QiLCJpbml0aWFsRGF0YSIsImxvYWREYXRhIiwiX3RoaXMkc3RhdGUiLCJzZWFyY2hCYXIiLCJ1cGRhdGVEYXRhIiwidXNlckxpc3RfVXNlckxpc3QiLCJhZGRVc2VyX0FkZFVzZXIiLCJSZWFjdERPTSIsImFwcF9BcHAiXSwibWFwcGluZ3MiOiJhQUdBLElBQUFBLEVBQUFDLE9BQUEsaUJBQ0FBLE9BQUEsaUJBQ0EsU0FBQUMsRUFBQUMsSUFnUkEsU0FBQUQsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRixLQUFBRyxFQUFBSCxHQUNBLE9BRUEsUUFBQUksS0FEQUQsRUFBQUgsSUFBQSxFQUNBQyxFQUNBSSxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBUCxFQUFBRyxLQUNBSyxFQUFBTCxHQUFBSCxFQUFBRyxJQUdBLEtBQUFNLEdBQUEsSUFBQUMsR0FDQUMsSUF6UkFDLENBQUFiLEVBQUFDLEdBQ0FILEtBQUFFLEVBQUFDLElBdURBLElBS0FhLEVBTEFDLEdBQUEsRUFFQUMsRUFBQSx1QkFDQUMsRUFBQSxJQUNBQyxFQUFBLEdBR0FDLEVBQUEsR0FFQUMsRUFBQSxHQUdBLFNBQUFDLEVBQUFqQixHQUNBLElBQUFrQixFQUFBQyxFQUFBbkIsR0FDQSxJQUFBa0IsRUFBQSxPQUFBRSxFQUNBLElBQUFDLEVBQUEsU0FBQUMsR0FzQkEsT0FyQkFKLEVBQUFLLElBQUFDLFFBQ0FMLEVBQUFHLElBQ0EsSUFBQUgsRUFBQUcsR0FBQUcsUUFBQUMsUUFBQTFCLElBQ0FtQixFQUFBRyxHQUFBRyxRQUFBRSxLQUFBM0IsSUFHQWUsRUFBQSxDQUFBZixHQUNBVSxFQUFBWSxJQUVBLElBQUFKLEVBQUFVLFNBQUFGLFFBQUFKLElBQ0FKLEVBQUFVLFNBQUFELEtBQUFMLEtBR0FPLFFBQUFDLEtBQ0EsNEJBQ0FSLEVBQ0EsMEJBQ0F0QixHQUVBZSxFQUFBLElBRUFLLEVBQUFFLElBRUFTLEVBQUEsU0FBQUMsR0FDQSxPQUNBQyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQSxXQUNBLE9BQUFmLEVBQUFZLElBRUFJLElBQUEsU0FBQUMsR0FDQWpCLEVBQUFZLEdBQUFLLEtBSUEsUUFBQUwsS0FBQVosRUFFQW5CLE9BQUFDLFVBQUFDLGVBQUFDLEtBQUFnQixFQUFBWSxJQUNBLE1BQUFBLEdBQ0EsTUFBQUEsR0FFQS9CLE9BQUFxQyxlQUFBakIsRUFBQVcsRUFBQUQsRUFBQUMsSUEyQkEsT0F4QkFYLEVBQUFrQixFQUFBLFNBQUEzQyxHQUdBLE1BRkEsVUFBQTRDLEdBQUFDLEVBQUEsV0FDQWxDLElBQ0FhLEVBQUFtQixFQUFBM0MsR0FBQThDLEtBQUFDLEVBQUEsU0FBQUMsR0FFQSxNQURBRCxJQUNBQyxJQUdBLFNBQUFELElBQ0FwQyxJQUNBLFlBQUFpQyxJQUNBSyxFQUFBakQsSUFDQWtELEVBQUFsRCxHQUVBLElBQUFXLEdBQUEsSUFBQUQsR0FDQUUsT0FLQWEsRUFBQTBCLEVBQUEsU0FBQVYsRUFBQVcsR0FFQSxPQURBLEVBQUFBLElBQUFYLEVBQUFoQixFQUFBZ0IsSUFDQWpCLEVBQUEyQixFQUFBVixHQUFBLEVBQUFXLElBRUEzQixFQUlBLFNBQUE0QixFQUFBakQsR0FDQSxJQUFBdUIsRUFBQSxDQUVBMkIsc0JBQUEsR0FDQUMsc0JBQUEsR0FDQUMsZUFBQSxFQUNBQyxlQUFBLEVBQ0FDLGlCQUFBLEdBQ0FDLE1BQUE3QyxJQUFBVixFQUdBd0IsUUFBQSxFQUNBZ0MsT0FBQSxTQUFBQyxFQUFBQyxHQUNBLFFBQUFDLElBQUFGLEVBQUFsQyxFQUFBNkIsZUFBQSxPQUNBLHNCQUFBSyxFQUFBbEMsRUFBQTZCLGNBQUFLLE9BQ0Esb0JBQUFBLEVBQ0EsUUFBQUcsRUFBQSxFQUFxQkEsRUFBQUgsRUFBQUksT0FBZ0JELElBQ3JDckMsRUFBQTJCLHNCQUFBTyxFQUFBRyxJQUFBRixHQUFBLGtCQUNBbkMsRUFBQTJCLHNCQUFBTyxHQUFBQyxHQUFBLGNBRUFJLFFBQUEsU0FBQUwsR0FDQSxRQUFBRSxJQUFBRixFQUFBbEMsRUFBQThCLGVBQUEsT0FDQSxvQkFBQUksRUFDQSxRQUFBRyxFQUFBLEVBQXFCQSxFQUFBSCxFQUFBSSxPQUFnQkQsSUFDckNyQyxFQUFBNEIsc0JBQUFNLEVBQUFHLEtBQUEsT0FDQXJDLEVBQUE0QixzQkFBQU0sSUFBQSxHQUVBTSxRQUFBLFNBQUFMLEdBQ0FuQyxFQUFBK0IsaUJBQUEzQixLQUFBK0IsSUFFQU0sa0JBQUEsU0FBQU4sR0FDQW5DLEVBQUErQixpQkFBQTNCLEtBQUErQixJQUVBTyxxQkFBQSxTQUFBUCxHQUNBLElBQUFRLEVBQUEzQyxFQUFBK0IsaUJBQUE1QixRQUFBZ0MsR0FDQVEsR0FBQSxHQUFBM0MsRUFBQStCLGlCQUFBYSxPQUFBRCxFQUFBLElBSUFFLE1BQUFDLEVBQ0FDLE1BQUFDLEVBQ0FDLE9BQUEsU0FBQUMsR0FDQSxJQUFBQSxFQUFBLE9BQUFqQyxFQUNBa0MsRUFBQS9DLEtBQUE4QyxJQUVBRSxpQkFBQSxTQUFBRixHQUNBQyxFQUFBL0MsS0FBQThDLElBRUFHLG9CQUFBLFNBQUFILEdBQ0EsSUFBQVAsRUFBQVEsRUFBQWhELFFBQUErQyxHQUNBUCxHQUFBLEdBQUFRLEVBQUFQLE9BQUFELEVBQUEsSUFJQVcsS0FBQS9ELEVBQUFkLElBR0EsT0FEQVUsT0FBQWlELEVBQ0FwQyxFQUdBLElBQUFtRCxFQUFBLEdBQ0FsQyxFQUFBLE9BRUEsU0FBQUMsRUFBQXFDLEdBQ0F0QyxFQUFBc0MsRUFDQSxRQUFBbEIsRUFBQSxFQUFrQkEsRUFBQWMsRUFBQWIsT0FBOEJELElBQ2hEYyxFQUFBZCxHQUFBeEQsS0FBQSxLQUFBMEUsR0FJQSxJQUtBQyxFQUdBMUUsRUFBQTJFLEVBUkExRSxFQUFBLEVBQ0FDLEVBQUEsRUFDQXNDLEVBQUEsR0FDQTlDLEVBQUEsR0FDQUQsRUFBQSxHQU1BLFNBQUFtRixFQUFBQyxHQUVBLE9BREFBLEVBQUEsS0FBQUEsR0FDQUEsSUFHQSxTQUFBYixFQUFBQyxHQUNBLFlBQUE5QixFQUNBLFVBQUEyQyxNQUFBLDBDQUlBLE9BRkF4RSxFQUFBMkQsRUFDQTdCLEVBQUEsVUE1TkEyQyxFQTZOQXZFLEVBNU5BdUUsS0FBQSxJQUNBLElBQUFDLFFBQUEsU0FBQUMsRUFBQUMsR0FDQSx1QkFBQUMsZUFDQSxPQUFBRCxFQUFBLElBQUFKLE1BQUEsdUJBRUEsSUFDQSxJQUFBN0QsRUFBQSxJQUFBa0UsZUFDQUMsRUFBQXJFLEVBQUFzRSxFQUFBLEdBQUE5RSxFQUFBLG1CQUNBVSxFQUFBcUUsS0FBQSxNQUFBRixHQUFBLEdBQ0FuRSxFQUFBc0UsUUFBQVIsRUFDQTlELEVBQUF1RSxLQUFBLE1BQ0ssTUFBQWpELEdBQ0wsT0FBQTJDLEVBQUEzQyxHQUVBdEIsRUFBQXdFLG1CQUFBLFdBQ0EsT0FBQXhFLEVBQUF5RSxXQUNBLE9BQUF6RSxFQUFBa0QsT0FFQWUsRUFDQSxJQUFBSixNQUFBLHVCQUFBTSxFQUFBLHFCQUVNLFNBQUFuRSxFQUFBa0QsT0FFTmMsU0FDTSxTQUFBaEUsRUFBQWtELFFBQUEsTUFBQWxELEVBQUFrRCxPQUVOZSxFQUFBLElBQUFKLE1BQUEsdUJBQUFNLEVBQUEsaUJBQ00sQ0FFTixJQUNBLElBQUFPLEVBQUFDLEtBQUFDLE1BQUE1RSxFQUFBNkUsY0FDTyxNQUFBNUQsR0FFUCxZQURBZ0QsRUFBQWhELEdBR0ErQyxFQUFBVSxRQXlMQXRELEtBQUEsU0FBQXNELEdBQ0EsSUFBQUEsRUFFQSxPQURBdkQsRUFBQSxRQUNBLEtBRUExQyxFQUFBLEdBQ0E4QyxFQUFBLEdBQ0EvQyxFQUFBa0csRUFBQUksRUFDQXBCLEVBQUFnQixFQUFBSyxFQUVBNUQsRUFBQSxXQUNBLElBQUE2RCxFQUFBLElBQUFqQixRQUFBLFNBQUFDLEVBQUFDLEdBQ0FSLEVBQUEsQ0FDQU8sVUFDQUMsWUFHQWxGLEVBQUEsR0FjQSxPQVRBeUMsRUFKQSxHQU9BLFlBQUFOLEdBQ0EsSUFBQWpDLEdBQ0EsSUFBQUQsR0FFQUUsSUFFQThGLElBNVBBLElBQUFsQixFQStRQSxTQUFBdEMsRUFBQWxELEdBQ0FFLEVBQUFGLElBR0FHLEVBQUFILElBQUEsRUFDQVUsSUE3UkEsU0FBQVYsR0FDQSxJQUFBMkcsRUFBQUMsU0FBQUMsY0FBQSxVQUNBRixFQUFBRyxRQUFBLFFBQ0FILEVBQUFJLElBQUF2RixFQUFBc0UsRUFBQSxHQUFBOUYsRUFBQSxJQUFBZ0IsRUFBQSxpQkFFQTRGLFNBQUFJLEtBQUFDLFlBQUFOLEdBeVJBTyxDQUFBbEgsSUFKQWlELEVBQUFqRCxJQUFBLEVBUUEsU0FBQVksSUFDQWlDLEVBQUEsU0FDQSxJQUFBc0UsRUFBQWhDLEVBRUEsR0FEQUEsRUFBQSxLQUNBZ0MsRUFDQSxHQUFBcEcsRUFJQTBFLFFBQUFDLFVBQ0E1QyxLQUFBLFdBQ0EsT0FBQTZCLEVBQUE1RCxLQUVBK0IsS0FDQSxTQUFBc0UsR0FDQUQsRUFBQXpCLFFBQUEwQixJQUVBLFNBQUFwRSxHQUNBbUUsRUFBQXhCLE9BQUEzQyxTQUdJLENBQ0osSUFBQXFFLEVBQUEsR0FDQSxRQUFBL0IsS0FBQTdFLEVBQ0FKLE9BQUFDLFVBQUFDLGVBQUFDLEtBQUFDLEVBQUE2RSxJQUNBK0IsRUFBQXRGLEtBQUFzRCxFQUFBQyxJQUdBNkIsRUFBQXpCLFFBQUEyQixJQUlBLFNBQUExQyxFQUFBMkMsR0FDQSxhQUFBMUUsRUFDQSxVQUFBMkMsTUFBQSwyQ0FHQSxJQUFBZ0MsRUFDQXZELEVBQ0F3RCxFQUNBQyxFQUNBckgsRUFFQSxTQUFBc0gsRUFBQUMsR0FVQSxJQVRBLElBQUFOLEVBQUEsQ0FBQU0sR0FDQUMsRUFBQSxHQUVBQyxFQUFBUixFQUFBUyxRQUFBQyxJQUFBLFNBQUF6QyxHQUNBLE9BQ0EwQyxNQUFBLENBQUExQyxHQUNBQSxRQUdBdUMsRUFBQTVELE9BQUEsSUFDQSxJQUFBZ0UsRUFBQUosRUFBQUssTUFDQTlILEVBQUE2SCxFQUFBM0MsR0FDQTBDLEVBQUFDLEVBQUFELE1BRUEsSUFEQVAsRUFBQWxHLEVBQUFuQixNQUNBcUgsRUFBQTlGLElBQUE2QixjQUFBLENBQ0EsR0FBQWlFLEVBQUE5RixJQUFBOEIsY0FDQSxPQUNBMEUsS0FBQSxnQkFDQUgsUUFDQTVILFlBR0EsR0FBQXFILEVBQUE5RixJQUFBZ0MsTUFDQSxPQUNBd0UsS0FBQSxhQUNBSCxRQUNBNUgsWUFHQSxRQUFBNEQsRUFBQSxFQUFvQkEsRUFBQXlELEVBQUE1RixRQUFBb0MsT0FBMkJELElBQUEsQ0FDL0MsSUFBQW9FLEVBQUFYLEVBQUE1RixRQUFBbUMsR0FDQXFFLEVBQUE5RyxFQUFBNkcsR0FDQSxHQUFBQyxFQUFBLENBQ0EsR0FBQUEsRUFBQTFHLElBQUE0QixzQkFBQW5ELEdBQ0EsT0FDQStILEtBQUEsV0FDQUgsUUFBQU0sT0FBQSxDQUFBRixJQUNBaEksV0FDQWdJLGFBR0EsSUFBQWYsRUFBQXZGLFFBQUFzRyxLQUNBQyxFQUFBMUcsSUFBQTJCLHNCQUFBbEQsSUFDQXdILEVBQUFRLEtBQ0FSLEVBQUFRLEdBQUEsSUFDQUcsRUFBQVgsRUFBQVEsR0FBQSxDQUFBaEksYUFHQXdILEVBQUFRLEdBQ0FmLEVBQUF0RixLQUFBcUcsR0FDQVAsRUFBQTlGLEtBQUEsQ0FDQWlHLFFBQUFNLE9BQUEsQ0FBQUYsSUFDQTlDLEdBQUE4QyxTQUtBLE9BQ0FELEtBQUEsV0FDQS9ILFNBQUF1SCxFQUNBTixrQkFDQU8sd0JBSUEsU0FBQVcsRUFBQUMsRUFBQUMsR0FDQSxRQUFBekUsRUFBQSxFQUFtQkEsRUFBQXlFLEVBQUF4RSxPQUFjRCxJQUFBLENBQ2pDLElBQUEwRSxFQUFBRCxFQUFBekUsSUFDQSxJQUFBd0UsRUFBQTFHLFFBQUE0RyxJQUFBRixFQUFBekcsS0FBQTJHLElBN0VBcEIsS0FBQSxHQW1GQSxJQUFBTSxFQUFBLEdBQ0FQLEVBQUEsR0FDQXNCLEVBQUEsR0FFQUMsRUFBQSxXQUNBM0csUUFBQUMsS0FDQSw0QkFBQWtGLEVBQUFoSCxTQUFBLHlCQUlBLFFBQUFrRixLQUFBN0UsRUFDQSxHQUFBSixPQUFBQyxVQUFBQyxlQUFBQyxLQUFBQyxFQUFBNkUsR0FBQSxDQUdBLElBQUE4QixFQUZBaEgsRUFBQWlGLEVBQUFDLEdBWUEsSUFBQXVELEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEVBQUEsR0FJQSxRQWZBNUIsRUFEQTNHLEVBQUE2RSxHQUNBb0MsRUFBQXRILEdBRUEsQ0FDQStILEtBQUEsV0FDQS9ILFNBQUFrRixJQVFBMEMsUUFDQWdCLEVBQUEseUJBQUE1QixFQUFBWSxNQUFBaUIsS0FBQSxTQUVBN0IsRUFBQWUsTUFDQSxvQkFDQWIsRUFBQTRCLFlBQUE1QixFQUFBNEIsV0FBQTlCLEdBQ0FFLEVBQUE2QixpQkFDQU4sRUFBQSxJQUFBdEQsTUFDQSxvQ0FDQTZCLEVBQUFoSCxTQUNBNEksSUFFQSxNQUNBLGVBQ0ExQixFQUFBNEIsWUFBQTVCLEVBQUE0QixXQUFBOUIsR0FDQUUsRUFBQTZCLGlCQUNBTixFQUFBLElBQUF0RCxNQUNBLDJDQUNBNkIsRUFBQWhILFNBQ0EsT0FDQWdILEVBQUFnQixTQUNBWSxJQUVBLE1BQ0EsaUJBQ0ExQixFQUFBOEIsY0FBQTlCLEVBQUE4QixhQUFBaEMsR0FDQUUsRUFBQStCLG1CQUNBUixFQUFBLElBQUF0RCxNQUNBLG1CQUFBbkYsRUFBQSxtQkFBQTRJLElBRUEsTUFDQSxlQUNBMUIsRUFBQWdDLFlBQUFoQyxFQUFBZ0MsV0FBQWxDLEdBQ0EwQixHQUFBLEVBQ0EsTUFDQSxlQUNBeEIsRUFBQWlDLFlBQUFqQyxFQUFBaUMsV0FBQW5DLEdBQ0EyQixHQUFBLEVBQ0EsTUFDQSxRQUNBLFVBQUF4RCxNQUFBLG9CQUFBNkIsRUFBQWUsTUFFQSxHQUFBVSxFQUVBLE9BREFoRyxFQUFBLFNBQ0E0QyxRQUFBRSxPQUFBa0QsR0FFQSxHQUFBQyxFQUdBLElBQUExSSxLQUZBdUksRUFBQXZJLEdBQUFLLEVBQUFMLEdBQ0FtSSxFQUFBbEIsRUFBQUQsRUFBQUMsaUJBQ0FELEVBQUFRLHFCQUVBdkgsT0FBQUMsVUFBQUMsZUFBQUMsS0FDQTRHLEVBQUFRLHFCQUNBeEgsS0FHQXdILEVBQUF4SCxLQUNBd0gsRUFBQXhILEdBQUEsSUFDQW1JLEVBQ0FYLEVBQUF4SCxHQUNBZ0gsRUFBQVEscUJBQUF4SCxLQUtBMkksSUFDQVIsRUFBQWxCLEVBQUEsQ0FBQUQsRUFBQWhILFdBQ0F1SSxFQUFBdkksR0FBQXdJLEdBTUEsSUFxQkF0RSxFQXJCQWtGLEVBQUEsR0FDQSxJQUFBeEYsRUFBQSxFQUFjQSxFQUFBcUQsRUFBQXBELE9BQTRCRCxJQUMxQzVELEVBQUFpSCxFQUFBckQsR0FFQXpDLEVBQUFuQixJQUNBbUIsRUFBQW5CLEdBQUF1QixJQUFBNkIsZUFFQWdHLEVBQUF6SCxLQUFBLENBQ0EwRixPQUFBckgsRUFDQXFKLGFBQUFsSSxFQUFBbkIsR0FBQXVCLElBQUE2QixnQkFLQVgsRUFBQSxXQUNBeEMsT0FBQXFKLEtBQUF4SixHQUFBeUosUUFBQSxTQUFBM0osSUFDQSxJQUFBRSxFQUFBRixJQXhoQkEsU0FBQUEsVUFDQTRKLGdCQUFBNUosR0F3aEJBNkosQ0FBQTdKLEtBTUEsSUFEQSxJQXFDQThKLEVBQ0FDLEVBdENBbEMsRUFBQVIsRUFBQVMsUUFDQUQsRUFBQTVELE9BQUEsR0FHQSxHQUZBN0QsRUFBQXlILEVBQUFLLE1BQ0FULEVBQUFsRyxFQUFBbkIsR0FDQSxDQUVBLElBQUE2RSxFQUFBLEdBR0ErRSxFQUFBdkMsRUFBQTlGLElBQUErQixpQkFDQSxJQUFBOEQsRUFBQSxFQUFlQSxFQUFBd0MsRUFBQS9GLE9BQTRCdUQsS0FDM0NELEVBQUF5QyxFQUFBeEMsSUFDQXZDLEdBY0EsSUFaQS9ELEVBQUFkLEdBQUE2RSxFQUdBd0MsRUFBQTlGLElBQUFDLFFBQUEsU0FHQUwsRUFBQW5CLFVBR0F3SCxFQUFBeEgsR0FHQW9ILEVBQUEsRUFBZUEsRUFBQUMsRUFBQXpGLFNBQUFpQyxPQUE0QnVELElBQUEsQ0FDM0MsSUFBQXlDLEVBQUExSSxFQUFBa0csRUFBQXpGLFNBQUF3RixJQUNBeUMsS0FDQTNGLEVBQUEyRixFQUFBcEksUUFBQUMsUUFBQTFCLEtBQ0EsR0FDQTZKLEVBQUFwSSxRQUFBMEMsT0FBQUQsRUFBQSxLQVFBLElBQUFsRSxLQUFBd0gsRUFDQSxHQUNBdkgsT0FBQUMsVUFBQUMsZUFBQUMsS0FBQW9ILEVBQUF4SCxLQUVBcUgsRUFBQWxHLEVBQUFuQixJQUdBLElBREEySixFQUFBbkMsRUFBQXhILEdBQ0FvSCxFQUFBLEVBQWlCQSxFQUFBdUMsRUFBQTlGLE9BQXVDdUQsSUFDeERzQyxFQUFBQyxFQUFBdkMsSUFDQWxELEVBQUFtRCxFQUFBekYsU0FBQUYsUUFBQWdJLEtBQ0EsR0FBQXJDLEVBQUF6RixTQUFBdUMsT0FBQUQsRUFBQSxHQVlBLElBQUFsRSxLQUxBeUMsRUFBQSxTQUVBN0IsRUFBQW9FLEVBR0F1RCxFQUNBdEksT0FBQUMsVUFBQUMsZUFBQUMsS0FBQW1JLEVBQUF2SSxLQUNBOEosRUFBQTlKLEdBQUF1SSxFQUFBdkksSUFLQSxJQUFBK0osRUFBQSxLQUNBLElBQUEvSixLQUFBd0gsRUFDQSxHQUNBdkgsT0FBQUMsVUFBQUMsZUFBQUMsS0FBQW9ILEVBQUF4SCxLQUVBcUgsRUFBQWxHLEVBQUFuQixJQUNBLENBQ0EySixFQUFBbkMsRUFBQXhILEdBQ0EsSUFBQWdLLEVBQUEsR0FDQSxJQUFBcEcsRUFBQSxFQUFpQkEsRUFBQStGLEVBQUE5RixPQUF1Q0QsSUFHeEQsR0FGQThGLEVBQUFDLEVBQUEvRixHQUNBdUQsRUFBQUUsRUFBQTlGLElBQUEyQixzQkFBQXdHLEdBQ0EsQ0FDQSxRQUFBTSxFQUFBdEksUUFBQXlGLEdBQUEsU0FDQTZDLEVBQUFySSxLQUFBd0YsR0FHQSxJQUFBdkQsRUFBQSxFQUFpQkEsRUFBQW9HLEVBQUFuRyxPQUFzQkQsSUFBQSxDQUN2Q3VELEVBQUE2QyxFQUFBcEcsR0FDQSxJQUNBdUQsRUFBQXdDLEdBQ1EsTUFBQS9HLEdBQ1JzRSxFQUFBK0MsV0FDQS9DLEVBQUErQyxVQUFBLENBQ0FsQyxLQUFBLGlCQUNBL0gsV0FDQWtLLGFBQUFQLEVBQUEvRixHQUNBbUcsTUFBQW5ILElBR0FzRSxFQUFBaUQsZUFDQUosTUFBQW5ILEtBU0EsSUFBQWdCLEVBQUEsRUFBY0EsRUFBQXdGLEVBQUF2RixPQUF3Q0QsSUFBQSxDQUN0RCxJQUFBMEUsRUFBQWMsRUFBQXhGLEdBQ0E1RCxFQUFBc0ksRUFBQWpCLE9BQ0F0RyxFQUFBLENBQUFmLEdBQ0EsSUFDQW9CLEVBQUFwQixHQUNLLE1BQUE0QyxHQUNMLHNCQUFBMEYsRUFBQWUsYUFDQSxJQUNBZixFQUFBZSxhQUFBekcsR0FDTyxNQUFBd0gsR0FDUGxELEVBQUErQyxXQUNBL0MsRUFBQStDLFVBQUEsQ0FDQWxDLEtBQUEsb0NBQ0EvSCxXQUNBK0osTUFBQUssRUFDQUMsY0FBQXpILElBR0FzRSxFQUFBaUQsZUFDQUosTUFBQUssR0FFQUwsTUFBQW5ILFFBR0FzRSxFQUFBK0MsV0FDQS9DLEVBQUErQyxVQUFBLENBQ0FsQyxLQUFBLHNCQUNBL0gsV0FDQStKLE1BQUFuSCxJQUdBc0UsRUFBQWlELGVBQ0FKLE1BQUFuSCxJQU9BLE9BQUFtSCxHQUNBdEgsRUFBQSxRQUNBNEMsUUFBQUUsT0FBQXdFLEtBR0F0SCxFQUFBLFFBQ0EsSUFBQTRDLFFBQUEsU0FBQUMsR0FDQUEsRUFBQTJCLE1BS0EsSUFBQTlGLEVBQUEsR0FHQSxTQUFBQyxFQUFBcEIsR0FHQSxHQUFBbUIsRUFBQW5CLEdBQ0EsT0FBQW1CLEVBQUFuQixHQUFBc0ssUUFHQSxJQUFBakQsRUFBQWxHLEVBQUFuQixHQUFBLENBQ0E0RCxFQUFBNUQsRUFDQXlFLEdBQUEsRUFDQTZGLFFBQUEsR0FDQS9JLElBQUEwQixFQUFBakQsR0FDQXlCLFNBQUFULEVBQUFELElBQUEsR0FBQUMsR0FDQVksU0FBQSxJQVVBLE9BTkFrSSxFQUFBOUosR0FBQUksS0FBQWlILEVBQUFpRCxRQUFBakQsSUFBQWlELFFBQUFySixFQUFBakIsSUFHQXFILEVBQUE1QyxHQUFBLEVBR0E0QyxFQUFBaUQsUUFLQWxKLEVBQUFtSixFQUFBVCxFQUdBMUksRUFBQWdGLEVBQUFqRixFQUdBQyxFQUFBb0osRUFBQSxTQUFBRixFQUFBdEksRUFBQXlJLEdBQ0FySixFQUFBc0osRUFBQUosRUFBQXRJLElBQ0EvQixPQUFBcUMsZUFBQWdJLEVBQUF0SSxFQUFBLENBQTBDRSxZQUFBLEVBQUFDLElBQUFzSSxLQUsxQ3JKLEVBQUF1SixFQUFBLFNBQUFMLEdBQ0Esb0JBQUFNLGVBQUFDLGFBQ0E1SyxPQUFBcUMsZUFBQWdJLEVBQUFNLE9BQUFDLFlBQUEsQ0FBd0R4SSxNQUFBLFdBRXhEcEMsT0FBQXFDLGVBQUFnSSxFQUFBLGNBQWlEakksT0FBQSxLQVFqRGpCLEVBQUEyQixFQUFBLFNBQUFWLEVBQUFXLEdBRUEsR0FEQSxFQUFBQSxJQUFBWCxFQUFBakIsRUFBQWlCLElBQ0EsRUFBQVcsRUFBQSxPQUFBWCxFQUNBLEtBQUFXLEdBQUEsaUJBQUFYLFFBQUF5SSxXQUFBLE9BQUF6SSxFQUNBLElBQUEwSSxFQUFBOUssT0FBQStLLE9BQUEsTUFHQSxHQUZBNUosRUFBQXVKLEVBQUFJLEdBQ0E5SyxPQUFBcUMsZUFBQXlJLEVBQUEsV0FBeUM3SSxZQUFBLEVBQUFHLFVBQ3pDLEVBQUFXLEdBQUEsaUJBQUFYLEVBQUEsUUFBQTRJLEtBQUE1SSxFQUFBakIsRUFBQW9KLEVBQUFPLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FBQTVJLEVBQUE0SSxJQUFxQkMsS0FBQSxLQUFBRCxJQUNySSxPQUFBRixHQUlBM0osRUFBQStKLEVBQUEsU0FBQTlELEdBQ0EsSUFBQW9ELEVBQUFwRCxLQUFBeUQsV0FDQSxXQUEyQixPQUFBekQsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBakcsRUFBQW9KLEVBQUFDLEVBQUEsSUFBQUEsR0FDQUEsR0FJQXJKLEVBQUFzSixFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUFwTCxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBZ0wsRUFBQUMsSUFHdERqSyxFQUFBc0UsRUFBQSxJQUdBdEUsRUFBQWlGLEVBQUEsV0FBc0MsT0FBQXpGLEdBSXRDSyxFQUFBLEVBQUFBLENBQUFHLEVBQUFrSyxFQUFBLGtDQ2x4QkFqRSxFQUFBaUQsUUFBbUJsSixFQUFRLG9CQ0gzQixJQUFBbUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQWFBLFNBQUFDLEVBQUFDLEdBRUEsYUFFZ0MsaUJBQUFwRSxFQUFBaUQsUUFTaENqRCxFQUFBaUQsUUFBQWtCLEVBQUFoRixTQUNBaUYsRUFBQUQsR0FBQSxHQUNBLFNBQUFFLEdBQ0EsSUFBQUEsRUFBQWxGLFNBQ0EsVUFBQXJCLE1BQUEsNENBRUEsT0FBQXNHLEVBQUFDLElBR0FELEVBQUFELEdBdEJBLENBMEJDLG9CQUFBN0wsY0FBQWdNLEtBQUEsU0FBQWhNLEVBQUFpTSxHQU1ELGFBRUEsSUFBQUMsRUFBQSxHQUVBckYsRUFBQTdHLEVBQUE2RyxTQUVBc0YsRUFBQTdMLE9BQUE4TCxlQUVBckUsRUFBQW1FLEVBQUFuRSxNQUVBUSxFQUFBMkQsRUFBQTNELE9BRUF2RyxFQUFBa0ssRUFBQWxLLEtBRUFELEVBQUFtSyxFQUFBbkssUUFFQXNLLEVBQUEsR0FFQUMsRUFBQUQsRUFBQUMsU0FFQUMsRUFBQUYsRUFBQTdMLGVBRUFnTSxFQUFBRCxFQUFBRCxTQUVBRyxFQUFBRCxFQUFBL0wsS0FBQUgsUUFFQW9NLEVBQUEsR0FJQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUdBLElBQUFqRyxHQUZBaUcsS0FBQWhHLEdBRUFDLGNBQUEsVUFFQUYsRUFBQWtHLEtBQUFGLEVBQ0FDLEVBQUE1RixLQUFBQyxZQUFBTixHQUFBbUcsV0FBQUMsWUFBQXBHLEdBUUEsSUFJQXFHLEVBQUEsU0FBQUMsRUFBQUMsR0FJQSxXQUFBRixFQUFBdkwsR0FBQTBMLEtBQUFGLEVBQUFDLElBS0FFLEVBQUEscUNBR0FDLEVBQUEsUUFDQUMsRUFBQSxZQUdBQyxFQUFBLFNBQUFDLEVBQUFDLEdBQ0EsT0FBQUEsRUFBQUMsZUEyWkEsU0FBQUMsRUFBQUMsR0FNQSxJQUFBM0osSUFBQTJKLEdBQUEsV0FBQUEsS0FBQTNKLE9BQ0FrRSxFQUFBNkUsRUFBQTdFLEtBQUF5RixHQUVBLG1CQUFBekYsSUFBQTZFLEVBQUFhLFNBQUFELEtBSUEsVUFBQXpGLEdBQUEsSUFBQWxFLEdBQ0EsaUJBQUFBLEtBQUEsR0FBQUEsRUFBQSxLQUFBMkosR0F0YUFaLEVBQUF2TCxHQUFBdUwsRUFBQTFNLFVBQUEsQ0FHQXdOLE9BMUJBLFFBNEJBQyxZQUFBZixFQUdBL0ksT0FBQSxFQUVBK0osUUFBQSxXQUNBLE9BQUFsRyxFQUFBdEgsS0FBQXVMLE9BS0F4SixJQUFBLFNBQUEwTCxHQUdBLGFBQUFBLEVBQ0FuRyxFQUFBdEgsS0FBQXVMLE1BSUFrQyxFQUFBLEVBQUFsQyxLQUFBa0MsRUFBQWxDLEtBQUE5SCxRQUFBOEgsS0FBQWtDLElBS0FDLFVBQUEsU0FBQUMsR0FHQSxJQUFBQyxFQUFBcEIsRUFBQXFCLE1BQUF0QyxLQUFBZ0MsY0FBQUksR0FNQSxPQUhBQyxFQUFBRSxXQUFBdkMsS0FHQXFDLEdBSUFHLEtBQUEsU0FBQXpLLEdBQ0EsT0FBQWtKLEVBQUF1QixLQUFBeEMsS0FBQWpJLElBR0FpRSxJQUFBLFNBQUFqRSxHQUNBLE9BQUFpSSxLQUFBbUMsVUFBQWxCLEVBQUFqRixJQUFBZ0UsS0FBQSxTQUFBeUMsRUFBQXhLLEdBQ0EsT0FBQUYsRUFBQXRELEtBQUFnTyxFQUFBeEssRUFBQXdLLE9BSUExRyxNQUFBLFdBQ0EsT0FBQWlFLEtBQUFtQyxVQUFBcEcsRUFBQXBELE1BQUFxSCxLQUFBMEMsYUFHQUMsTUFBQSxXQUNBLE9BQUEzQyxLQUFBNEMsR0FBQSxJQUdBQyxLQUFBLFdBQ0EsT0FBQTdDLEtBQUE0QyxJQUFBLElBR0FBLEdBQUEsU0FBQTNLLEdBQ0EsSUFBQTZLLEVBQUE5QyxLQUFBOUgsT0FDQXVELEdBQUF4RCxLQUFBLEVBQUE2SyxFQUFBLEdBQ0EsT0FBQTlDLEtBQUFtQyxVQUFBMUcsR0FBQSxHQUFBQSxFQUFBcUgsRUFBQSxDQUFBOUMsS0FBQXZFLElBQUEsS0FHQXNILElBQUEsV0FDQSxPQUFBL0MsS0FBQXVDLFlBQUF2QyxLQUFBZ0MsZUFLQWhNLE9BQ0FnTixLQUFBOUMsRUFBQThDLEtBQ0F4SyxPQUFBMEgsRUFBQTFILFFBR0F5SSxFQUFBZ0MsT0FBQWhDLEVBQUF2TCxHQUFBdU4sT0FBQSxXQUNBLElBQUExSCxFQUFBbEYsRUFBQTJFLEVBQUFrSSxFQUFBQyxFQUFBQyxFQUNBQyxFQUFBWCxVQUFBLE9BQ0F6SyxFQUFBLEVBQ0FDLEVBQUF3SyxVQUFBeEssT0FDQW9MLEdBQUEsRUFzQkEsSUFuQkEsa0JBQUFELElBQ0FDLEVBQUFELEVBR0FBLEVBQUFYLFVBQUF6SyxJQUFBLEdBQ0FBLEtBSUEsaUJBQUFvTCxHQUFBcEMsRUFBQXNDLFdBQUFGLEtBQ0FBLEVBQUEsSUFJQXBMLElBQUFDLElBQ0FtTCxFQUFBckQsS0FDQS9ILEtBR1FBLEVBQUFDLEVBQVlELElBR3BCLFVBQUFzRCxFQUFBbUgsVUFBQXpLLElBR0EsSUFBQTVCLEtBQUFrRixFQUNBUCxFQUFBcUksRUFBQWhOLEdBSUFnTixLQUhBSCxFQUFBM0gsRUFBQWxGLE1BUUFpTixHQUFBSixJQUFBakMsRUFBQXVDLGNBQUFOLEtBQ0FDLEVBQUFNLE1BQUFDLFFBQUFSLE1BRUFDLEdBQ0FBLEdBQUEsRUFDQUMsRUFBQXBJLEdBQUF5SSxNQUFBQyxRQUFBMUksS0FBQSxJQUdBb0ksRUFBQXBJLEdBQUFpRyxFQUFBdUMsY0FBQXhJLEtBQUEsR0FJQXFJLEVBQUFoTixHQUFBNEssRUFBQWdDLE9BQUFLLEVBQUFGLEVBQUFGLFNBR0tsTCxJQUFBa0wsSUFDTEcsRUFBQWhOLEdBQUE2TSxJQU9BLE9BQUFHLEdBR0FwQyxFQUFBZ0MsT0FBQSxDQUdBVSxRQUFBLFVBaExBLFFBZ0xBQyxLQUFBQyxVQUFBQyxRQUFBLFVBR0FDLFNBQUEsRUFFQTNGLE1BQUEsU0FBQTRGLEdBQ0EsVUFBQXhLLE1BQUF3SyxJQUdBQyxLQUFBLGFBRUFWLFdBQUEsU0FBQTFCLEdBQ0EsbUJBQUFaLEVBQUE3RSxLQUFBeUYsSUFHQUMsU0FBQSxTQUFBRCxHQUNBLGFBQUFBLFNBQUE3TixRQUdBa1EsVUFBQSxTQUFBckMsR0FLQSxJQUFBekYsRUFBQTZFLEVBQUE3RSxLQUFBeUYsR0FDQSxrQkFBQXpGLEdBQUEsV0FBQUEsS0FLQStILE1BQUF0QyxFQUFBdUMsV0FBQXZDLEtBR0EyQixjQUFBLFNBQUEzQixHQUNBLElBQUF3QyxFQUFBQyxFQUlBLFNBQUF6QyxHQUFBLG9CQUFBdkIsRUFBQTdMLEtBQUFvTixRQUlBd0MsRUFBQWxFLEVBQUEwQixLQVNBLG1CQURBeUMsRUFBQS9ELEVBQUE5TCxLQUFBNFAsRUFBQSxnQkFBQUEsRUFBQXJDLGNBQ0F4QixFQUFBL0wsS0FBQTZQLEtBQUE3RCxJQUdBOEQsY0FBQSxTQUFBMUMsR0FJQSxJQUFBeEwsRUFFQSxJQUFBQSxLQUFBd0wsRUFDQSxTQUVBLFVBR0F6RixLQUFBLFNBQUF5RixHQUNBLGFBQUFBLEVBQ0FBLEVBQUEsR0FJQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFDQXhCLEVBQUFDLEVBQUE3TCxLQUFBb04sS0FBQSxnQkFDQUEsR0FJQTJDLFdBQUEsU0FBQTVELEdBQ0FELEVBQUFDLElBTUE2RCxVQUFBLFNBQUFDLEdBQ0EsT0FBQUEsRUFBQVosUUFBQXhDLEVBQUEsT0FBQXdDLFFBQUF2QyxFQUFBQyxJQUdBZ0IsS0FBQSxTQUFBWCxFQUFBOUosR0FDQSxJQUFBRyxFQUFBRCxFQUFBLEVBRUEsR0FBQTJKLEVBQUFDLEdBRUEsSUFEQTNKLEVBQUEySixFQUFBM0osT0FDVUQsRUFBQUMsSUFDVixJQUFBSCxFQUFBdEQsS0FBQW9OLEVBQUE1SixLQUFBNEosRUFBQTVKLElBRHNCQSxVQU10QixJQUFBQSxLQUFBNEosRUFDQSxRQUFBOUosRUFBQXRELEtBQUFvTixFQUFBNUosS0FBQTRKLEVBQUE1SixJQUNBLE1BS0EsT0FBQTRKLEdBSUE4QyxLQUFBLFNBQUE3RCxHQUNBLGFBQUFBLEVBQ0EsSUFDQUEsRUFBQSxJQUFBZ0QsUUFBQXpDLEVBQUEsS0FJQXVELFVBQUEsU0FBQTFFLEVBQUEyRSxHQUNBLElBQUF4QyxFQUFBd0MsR0FBQSxHQWFBLE9BWEEsTUFBQTNFLElBQ0EwQixFQUFBdE4sT0FBQTRMLElBQ0FlLEVBQUFxQixNQUFBRCxFQUNBLGlCQUFBbkMsRUFDQSxDQUFBQSxNQUdBbEssRUFBQXZCLEtBQUE0TixFQUFBbkMsSUFJQW1DLEdBR0F5QyxRQUFBLFNBQUFyQyxFQUFBdkMsRUFBQWpJLEdBQ0EsYUFBQWlJLEdBQUEsRUFBQW5LLEVBQUF0QixLQUFBeUwsRUFBQXVDLEVBQUF4SyxJQUtBcUssTUFBQSxTQUFBSyxFQUFBb0MsR0FLQSxJQUpBLElBQUFqQyxHQUFBaUMsRUFBQTdNLE9BQ0F1RCxFQUFBLEVBQ0F4RCxFQUFBMEssRUFBQXpLLE9BRVN1RCxFQUFBcUgsRUFBU3JILElBQ2xCa0gsRUFBQTFLLEtBQUE4TSxFQUFBdEosR0FLQSxPQUZBa0gsRUFBQXpLLE9BQUFELEVBRUEwSyxHQUdBcUMsS0FBQSxTQUFBNUMsRUFBQXJLLEVBQUFrTixHQVNBLElBUkEsSUFDQUMsRUFBQSxHQUNBak4sRUFBQSxFQUNBQyxFQUFBa0ssRUFBQWxLLE9BQ0FpTixHQUFBRixFQUlTaE4sRUFBQUMsRUFBWUQsS0FDckJGLEVBQUFxSyxFQUFBbkssUUFDQWtOLEdBQ0FELEVBQUFsUCxLQUFBb00sRUFBQW5LLElBSUEsT0FBQWlOLEdBSUFsSixJQUFBLFNBQUFvRyxFQUFBckssRUFBQXFOLEdBQ0EsSUFBQWxOLEVBQUF4QixFQUNBdUIsRUFBQSxFQUNBb0ssRUFBQSxHQUdBLEdBQUFULEVBQUFRLEdBRUEsSUFEQWxLLEVBQUFrSyxFQUFBbEssT0FDVUQsRUFBQUMsRUFBWUQsSUFHdEIsT0FGQXZCLEVBQUFxQixFQUFBcUssRUFBQW5LLEtBQUFtTixLQUdBL0MsRUFBQXJNLEtBQUFVLFFBTUEsSUFBQXVCLEtBQUFtSyxFQUdBLE9BRkExTCxFQUFBcUIsRUFBQXFLLEVBQUFuSyxLQUFBbU4sS0FHQS9DLEVBQUFyTSxLQUFBVSxHQU1BLE9BQUE2RixFQUFBNUQsTUFBQSxHQUFBMEosSUFJQWdELEtBQUEsRUFJQUMsTUFBQSxTQUFBNVAsRUFBQXlMLEdBQ0EsSUFBQW9FLEVBQUFDLEVBQUFGLEVBVUEsR0FSQSxpQkFBQW5FLElBQ0FvRSxFQUFBN1AsRUFBQXlMLEdBQ0FBLEVBQUF6TCxFQUNBQSxFQUFBNlAsR0FLQXRFLEVBQUFzQyxXQUFBN04sR0FhQSxPQVJBOFAsRUFBQXpKLEVBQUF0SCxLQUFBaU8sVUFBQSxJQUNBNEMsRUFBQSxXQUNBLE9BQUE1UCxFQUFBaUQsTUFBQXdJLEdBQUFuQixLQUFBd0YsRUFBQWpKLE9BQUFSLEVBQUF0SCxLQUFBaU8sZUFJQTJDLEtBQUEzUCxFQUFBMlAsS0FBQTNQLEVBQUEyUCxNQUFBcEUsRUFBQW9FLE9BRUFDLEdBR0FHLElBQUFDLEtBQUFELElBSUEvRSxZQUdBLG1CQUFBekIsU0FDQWdDLEVBQUF2TCxHQUFBdUosT0FBQTBHLFVBQUF6RixFQUFBakIsT0FBQTBHLFdBSUExRSxFQUFBdUIsS0FBQSx1RUFBQW9ELE1BQUEsS0FDQSxTQUFBM04sRUFBQTVCLEdBQ0FnSyxFQUFBLFdBQUFoSyxFQUFBLEtBQUFBLEVBQUF3UCxnQkFtQkEsSUFBQUM7Ozs7Ozs7Ozs7O0FBV0EsU0FBQTlSLEdBRUEsSUFBQWlFLEVBQ0F5SSxFQUNBcUYsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFHQUMsRUFDQTNMLEVBQ0E0TCxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBMUIsRUFDQTJCLEVBR0FsRCxFQUFBLGVBQUErQixLQUNBb0IsRUFBQTlTLEVBQUE2RyxTQUNBa00sRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUFDLEtBQ0FDLEVBQUFELEtBQ0FFLEVBQUFGLEtBQ0FHLEVBQUEsU0FBQTVLLEVBQUFDLEdBSUEsT0FIQUQsSUFBQUMsSUFDQTZKLEdBQUEsR0FFQSxHQUlBaEcsRUFBQSxHQUFhL0wsZUFDYjBMLEVBQUEsR0FDQS9ELEVBQUErRCxFQUFBL0QsSUFDQW1MLEVBQUFwSCxFQUFBbEssS0FDQUEsRUFBQWtLLEVBQUFsSyxLQUNBK0YsRUFBQW1FLEVBQUFuRSxNQUdBaEcsRUFBQSxTQUFBd1IsRUFBQTlFLEdBR0EsSUFGQSxJQUFBeEssRUFBQSxFQUNBNkssRUFBQXlFLEVBQUFyUCxPQUNTRCxFQUFBNkssRUFBUzdLLElBQ2xCLEdBQUFzUCxFQUFBdFAsS0FBQXdLLEVBQ0EsT0FBQXhLLEVBR0EsVUFHQXVQLEVBQUEsNkhBS0FDLEVBQUEsc0JBR0FDLEVBQUEsZ0NBR0FDLEVBQUEsTUFBQUYsRUFBQSxLQUFBQyxFQUFBLE9BQUFELEVBRUEsZ0JBQUFBLEVBRUEsMkRBQUFDLEVBQUEsT0FBQUQsRUFDQSxPQUVBRyxFQUFBLEtBQUFGLEVBQUEsd0ZBS0FDLEVBQUEsZUFNQUUsRUFBQSxJQUFBQyxPQUFBTCxFQUFBLFNBQ0FwRyxFQUFBLElBQUF5RyxPQUFBLElBQUFMLEVBQUEsOEJBQUFBLEVBQUEsVUFFQU0sRUFBQSxJQUFBRCxPQUFBLElBQUFMLEVBQUEsS0FBQUEsRUFBQSxLQUNBTyxFQUFBLElBQUFGLE9BQUEsSUFBQUwsRUFBQSxXQUFBQSxFQUFBLElBQUFBLEVBQUEsS0FFQVEsRUFBQSxJQUFBSCxPQUFBLElBQUFMLEVBQUEsaUJBQUFBLEVBQUEsWUFFQVMsRUFBQSxJQUFBSixPQUFBRixHQUNBTyxFQUFBLElBQUFMLE9BQUEsSUFBQUosRUFBQSxLQUVBVSxFQUFBLENBQ0FDLEdBQUEsSUFBQVAsT0FBQSxNQUFBSixFQUFBLEtBQ0FZLE1BQUEsSUFBQVIsT0FBQSxRQUFBSixFQUFBLEtBQ0FhLElBQUEsSUFBQVQsT0FBQSxLQUFBSixFQUFBLFNBQ0FjLEtBQUEsSUFBQVYsT0FBQSxJQUFBSCxHQUNBYyxPQUFBLElBQUFYLE9BQUEsSUFBQUYsR0FDQWMsTUFBQSxJQUFBWixPQUFBLHlEQUFBTCxFQUNBLCtCQUFBQSxFQUFBLGNBQUFBLEVBQ0EsYUFBQUEsRUFBQSxjQUNBa0IsS0FBQSxJQUFBYixPQUFBLE9BQUFOLEVBQUEsVUFHQW9CLGFBQUEsSUFBQWQsT0FBQSxJQUFBTCxFQUFBLG1EQUNBQSxFQUFBLG1CQUFBQSxFQUFBLHlCQUdBb0IsRUFBQSxzQ0FDQUMsRUFBQSxTQUVBQyxFQUFBLHlCQUdBQyxFQUFBLG1DQUVBQyxFQUFBLE9BSUFDLEVBQUEsSUFBQXBCLE9BQUEscUJBQTRDTCxFQUFBLE1BQUFBLEVBQUEsYUFDNUMwQixHQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQSxLQUFBRixFQUFBLE1BSUEsT0FBQUUsTUFBQUQsRUFDQUQsRUFDQUUsRUFBQSxFQUVBQyxPQUFBQyxhQUFBRixFQUFBLE9BRUFDLE9BQUFDLGFBQUFGLEdBQUEsY0FBQUEsRUFBQSxRQUtBRyxHQUFBLHNEQUNBQyxHQUFBLFNBQUFDLEVBQUFDLEdBQ0EsT0FBQUEsRUFHQSxPQUFBRCxFQUNBLElBSUFBLEVBQUE3TixNQUFBLFdBQUE2TixFQUFBRSxXQUFBRixFQUFBMVIsT0FBQSxHQUFBb0ksU0FBQSxRQUlBLEtBQUFzSixHQU9BRyxHQUFBLFdBQ0F2RCxLQUdBd0QsR0FBQUMsR0FDQSxTQUFBeEgsR0FDQSxXQUFBQSxFQUFBeUgsV0FBQSxTQUFBekgsR0FBQSxVQUFBQSxJQUVBLENBQUcwSCxJQUFBLGFBQUFDLEtBQUEsV0FJSCxJQUNBcFUsRUFBQTJDLE1BQ0F1SCxFQUFBbkUsRUFBQXRILEtBQUFxUyxFQUFBdUQsWUFDQXZELEVBQUF1RCxZQUlBbkssRUFBQTRHLEVBQUF1RCxXQUFBblMsUUFBQW9TLFNBQ0MsTUFBQTFULEdBQ0RaLEVBQUEsQ0FBUzJDLE1BQUF1SCxFQUFBaEksT0FHVCxTQUFBbUwsRUFBQWtILEdBQ0FqRCxFQUFBM08sTUFBQTBLLEVBQUF0SCxFQUFBdEgsS0FBQThWLEtBS0EsU0FBQWxILEVBQUFrSCxHQUlBLElBSEEsSUFBQTlPLEVBQUE0SCxFQUFBbkwsT0FDQUQsRUFBQSxFQUVBb0wsRUFBQTVILEtBQUE4TyxFQUFBdFMsT0FDQW9MLEVBQUFuTCxPQUFBdUQsRUFBQSxJQUtBLFNBQUFxSyxHQUFBNUUsRUFBQUMsRUFBQTBELEVBQUEyRixHQUNBLElBQUE1TCxFQUFBM0csRUFBQXdLLEVBQUFnSSxFQUFBQyxFQUFBQyxFQUFBQyxFQUNBQyxFQUFBMUosS0FBQTJKLGNBR0FSLEVBQUFuSixJQUFBbUosU0FBQSxFQUtBLEdBSEF6RixLQUFBLEdBR0EsaUJBQUEzRCxPQUNBLElBQUFvSixHQUFBLElBQUFBLEdBQUEsS0FBQUEsRUFFQSxPQUFBekYsRUFJQSxJQUFBMkYsS0FFQXJKLElBQUEySixlQUFBM0osRUFBQTJGLEtBQUFqTSxHQUNBMkwsRUFBQXJGLEdBRUFBLEtBQUF0RyxFQUVBNkwsR0FBQSxDQUlBLFFBQUE0RCxJQUFBSSxFQUFBMUIsRUFBQStCLEtBQUE3SixJQUdBLEdBQUF0QyxFQUFBOEwsRUFBQSxJQUdBLE9BQUFKLEVBQUEsQ0FDQSxLQUFBN0gsRUFBQXRCLEVBQUE2SixlQUFBcE0sSUFVQSxPQUFBaUcsRUFMQSxHQUFBcEMsRUFBQWxKLEtBQUFxRixFQUVBLE9BREFpRyxFQUFBN08sS0FBQXlNLEdBQ0FvQyxPQVlBLEdBQUFnRyxJQUFBcEksRUFBQW9JLEVBQUFHLGVBQUFwTSxLQUNBaUksRUFBQTFGLEVBQUFzQixJQUNBQSxFQUFBbEosS0FBQXFGLEVBR0EsT0FEQWlHLEVBQUE3TyxLQUFBeU0sR0FDQW9DLE1BS0ssSUFBQTZGLEVBQUEsR0FFTCxPQURBMVUsRUFBQTJDLE1BQUFrTSxFQUFBMUQsRUFBQThKLHFCQUFBL0osSUFDQTJELEVBR0ssSUFBQWpHLEVBQUE4TCxFQUFBLEtBQUFoSyxFQUFBd0ssd0JBQ0wvSixFQUFBK0osdUJBR0EsT0FEQWxWLEVBQUEyQyxNQUFBa00sRUFBQTFELEVBQUErSix1QkFBQXRNLElBQ0FpRyxFQUtBLEdBQUFuRSxFQUFBeUssTUFDQS9ELEVBQUFsRyxFQUFBLFFBQ0F5RixNQUFBeUUsS0FBQWxLLElBQUEsQ0FFQSxPQUFBb0osRUFDQU8sRUFBQTFKLEVBQ0F5SixFQUFBMUosT0FNSyxjQUFBQyxFQUFBa0ssU0FBQXhGLGNBQUEsQ0FZTCxLQVRBNEUsRUFBQXRKLEVBQUFtSyxhQUFBLE9BQ0FiLElBQUEzRyxRQUFBNEYsR0FBQUMsSUFFQXhJLEVBQUFvSyxhQUFBLEtBQUFkLEVBQUE5RyxHQUtBMUwsR0FEQTBTLEVBQUF6RSxFQUFBaEYsSUFDQWhKLE9BQ0FELEtBQ0EwUyxFQUFBMVMsR0FBQSxJQUFBd1MsRUFBQSxJQUFBZSxHQUFBYixFQUFBMVMsSUFFQTJTLEVBQUFELEVBQUF6TixLQUFBLEtBR0EyTixFQUFBNUIsRUFBQW1DLEtBQUFsSyxJQUFBdUssR0FBQXRLLEVBQUFKLGFBQ0FJLEVBR0EsR0FBQXlKLEVBQ0EsSUFJQSxPQUhBNVUsRUFBQTJDLE1BQUFrTSxFQUNBZ0csRUFBQWEsaUJBQUFkLElBRUEvRixFQUNNLE1BQUE4RyxJQUNBLFFBQ05sQixJQUFBOUcsR0FDQXhDLEVBQUF5SyxnQkFBQSxRQVNBLE9BQUF4RixFQUFBbEYsRUFBQTRDLFFBQUF6QyxFQUFBLE1BQUFGLEVBQUEwRCxFQUFBMkYsR0FTQSxTQUFBdEQsS0FDQSxJQUFBdkosRUFBQSxHQVVBLE9BUkEsU0FBQWtPLEVBQUF2TSxFQUFBNUksR0FNQSxPQUpBaUgsRUFBQTNILEtBQUFzSixFQUFBLEtBQUF5RyxFQUFBK0Ysb0JBRUFELEVBQUFsTyxFQUFBb08sU0FFQUYsRUFBQXZNLEVBQUEsS0FBQTVJLEdBU0EsU0FBQXNWLEdBQUF0VyxHQUVBLE9BREFBLEVBQUFpTyxJQUFBLEVBQ0FqTyxFQU9BLFNBQUF1VyxHQUFBdlcsR0FDQSxJQUFBd1csRUFBQXJSLEVBQUFDLGNBQUEsWUFFQSxJQUNBLFFBQUFwRixFQUFBd1csR0FDRSxNQUFBdFYsR0FDRixTQUNFLFFBRUZzVixFQUFBbkwsWUFDQW1MLEVBQUFuTCxXQUFBQyxZQUFBa0wsR0FHQUEsRUFBQSxNQVNBLFNBQUFDLEdBQUFDLEVBQUFDLEdBSUEsSUFIQSxJQUFBbk0sRUFBQWtNLEVBQUF4RyxNQUFBLEtBQ0EzTixFQUFBaUksRUFBQWhJLE9BRUFELEtBQ0E4TixFQUFBdUcsV0FBQXBNLEVBQUFqSSxJQUFBb1UsRUFVQSxTQUFBRSxHQUFBOVAsRUFBQUMsR0FDQSxJQUFBOFAsRUFBQTlQLEdBQUFELEVBQ0FnUSxFQUFBRCxHQUFBLElBQUEvUCxFQUFBNk4sVUFBQSxJQUFBNU4sRUFBQTROLFVBQ0E3TixFQUFBaVEsWUFBQWhRLEVBQUFnUSxZQUdBLEdBQUFELEVBQ0EsT0FBQUEsRUFJQSxHQUFBRCxFQUNBLEtBQUFBLElBQUFHLGFBQ0EsR0FBQUgsSUFBQTlQLEVBQ0EsU0FLQSxPQUFBRCxFQUFBLEtBT0EsU0FBQW1RLEdBQUF4USxHQUNBLGdCQUFBcUcsR0FFQSxnQkFEQUEsRUFBQTRJLFNBQUF4RixlQUNBcEQsRUFBQXJHLFVBUUEsU0FBQXlRLEdBQUF6USxHQUNBLGdCQUFBcUcsR0FDQSxJQUFBcE0sRUFBQW9NLEVBQUE0SSxTQUFBeEYsY0FDQSxpQkFBQXhQLEdBQUEsV0FBQUEsSUFBQW9NLEVBQUFyRyxVQVFBLFNBQUEwUSxHQUFBNUMsR0FHQSxnQkFBQXpILEdBS0EsZUFBQUEsRUFTQUEsRUFBQTFCLGFBQUEsSUFBQTBCLEVBQUF5SCxTQUdBLFVBQUF6SCxFQUNBLFVBQUFBLEVBQUExQixXQUNBMEIsRUFBQTFCLFdBQUFtSixhQUVBekgsRUFBQXlILGFBTUF6SCxFQUFBc0ssYUFBQTdDLEdBSUF6SCxFQUFBc0ssY0FBQTdDLEdBQ0FGLEdBQUF2SCxLQUFBeUgsRUFHQXpILEVBQUF5SCxhQUtHLFVBQUF6SCxHQUNIQSxFQUFBeUgsY0FZQSxTQUFBOEMsR0FBQXRYLEdBQ0EsT0FBQXNXLEdBQUEsU0FBQWlCLEdBRUEsT0FEQUEsS0FDQWpCLEdBQUEsU0FBQXhCLEVBQUF0RixHQU1BLElBTEEsSUFBQXpKLEVBQ0F5UixFQUFBeFgsRUFBQSxHQUFBOFUsRUFBQXRTLE9BQUErVSxHQUNBaFYsRUFBQWlWLEVBQUFoVixPQUdBRCxLQUNBdVMsRUFBQS9PLEVBQUF5UixFQUFBalYsTUFDQXVTLEVBQUEvTyxLQUFBeUosRUFBQXpKLEdBQUErTyxFQUFBL08sU0FZQSxTQUFBZ1EsR0FBQXRLLEdBQ0EsT0FBQUEsUUFBQSxJQUFBQSxFQUFBOEosc0JBQUE5SixFQWlqQ0EsSUFBQWxKLEtBN2lDQXlJLEVBQUFvRixHQUFBcEYsUUFBQSxHQU9BdUYsRUFBQUgsR0FBQUcsTUFBQSxTQUFBeEQsR0FHQSxJQUFBMEssRUFBQTFLLE1BQUFxSSxlQUFBckksR0FBQTBLLGdCQUNBLFFBQUFBLEdBQUEsU0FBQUEsRUFBQTlCLFVBUUE3RSxFQUFBVixHQUFBVSxZQUFBLFNBQUE0RyxHQUNBLElBQUFDLEVBQUFDLEVBQ0F6TSxFQUFBdU0sSUFBQXRDLGVBQUFzQyxFQUFBdEcsRUFHQSxPQUFBakcsSUFBQWhHLEdBQUEsSUFBQWdHLEVBQUF5SixVQUFBekosRUFBQXNNLGlCQU1BMUcsR0FEQTVMLEVBQUFnRyxHQUNBc00sZ0JBQ0F6RyxHQUFBVCxFQUFBcEwsR0FJQWlNLElBQUFqTSxJQUNBeVMsRUFBQXpTLEVBQUEwUyxjQUFBRCxFQUFBRSxNQUFBRixJQUdBQSxFQUFBRyxpQkFDQUgsRUFBQUcsaUJBQUEsU0FBQTFELElBQUEsR0FHR3VELEVBQUFJLGFBQ0hKLEVBQUFJLFlBQUEsV0FBQTNELEtBVUFySixFQUFBaUgsV0FBQXNFLEdBQUEsU0FBQUMsR0FFQSxPQURBQSxFQUFBeUIsVUFBQSxLQUNBekIsRUFBQVosYUFBQSxlQU9BNUssRUFBQXVLLHFCQUFBZ0IsR0FBQSxTQUFBQyxHQUVBLE9BREFBLEVBQUFoUixZQUFBTCxFQUFBK1MsY0FBQSxNQUNBMUIsRUFBQWpCLHFCQUFBLEtBQUEvUyxTQUlBd0ksRUFBQXdLLHVCQUFBbkMsRUFBQXFDLEtBQUF2USxFQUFBcVEsd0JBTUF4SyxFQUFBbU4sUUFBQTVCLEdBQUEsU0FBQUMsR0FFQSxPQURBekYsRUFBQXZMLFlBQUFnUixHQUFBM1MsR0FBQW9LLEdBQ0E5SSxFQUFBaVQsb0JBQUFqVCxFQUFBaVQsa0JBQUFuSyxHQUFBekwsU0FJQXdJLEVBQUFtTixTQUNBOUgsRUFBQWdJLE9BQUEsWUFBQXhVLEdBQ0EsSUFBQXlVLEVBQUF6VSxFQUFBdUssUUFBQW9GLEVBQUFDLElBQ0EsZ0JBQUExRyxHQUNBLE9BQUFBLEVBQUE2SSxhQUFBLFFBQUEwQyxJQUdBakksRUFBQWtJLEtBQUEsWUFBQTFVLEVBQUE0SCxHQUNBLFlBQUFBLEVBQUE2SixnQkFBQXRFLEVBQUEsQ0FDQSxJQUFBakUsRUFBQXRCLEVBQUE2SixlQUFBelIsR0FDQSxPQUFBa0osRUFBQSxDQUFBQSxHQUFBLE9BSUFzRCxFQUFBZ0ksT0FBQSxZQUFBeFUsR0FDQSxJQUFBeVUsRUFBQXpVLEVBQUF1SyxRQUFBb0YsRUFBQUMsSUFDQSxnQkFBQTFHLEdBQ0EsSUFBQTJLLE9BQUEsSUFBQTNLLEVBQUF5TCxrQkFDQXpMLEVBQUF5TCxpQkFBQSxNQUNBLE9BQUFkLEtBQUExVyxRQUFBc1gsSUFNQWpJLEVBQUFrSSxLQUFBLFlBQUExVSxFQUFBNEgsR0FDQSxZQUFBQSxFQUFBNkosZ0JBQUF0RSxFQUFBLENBQ0EsSUFBQTBHLEVBQUFuVixFQUFBbUssRUFDQUssRUFBQXRCLEVBQUE2SixlQUFBelIsR0FFQSxHQUFBa0osRUFBQSxDQUlBLElBREEySyxFQUFBM0ssRUFBQXlMLGlCQUFBLFFBQ0FkLEVBQUExVyxRQUFBNkMsRUFDQSxPQUFBa0osR0FNQSxJQUZBTCxFQUFBakIsRUFBQTJNLGtCQUFBdlUsR0FDQXRCLEVBQUEsRUFDQXdLLEVBQUFMLEVBQUFuSyxNQUVBLElBREFtVixFQUFBM0ssRUFBQXlMLGlCQUFBLFFBQ0FkLEVBQUExVyxRQUFBNkMsRUFDQSxPQUFBa0osR0FLQSxZQU1Bc0QsRUFBQWtJLEtBQUEsSUFBQXZOLEVBQUF1SyxxQkFDQSxTQUFBa0QsRUFBQWhOLEdBQ0EsZ0JBQUFBLEVBQUE4SixxQkFDQTlKLEVBQUE4SixxQkFBQWtELEdBR0l6TixFQUFBeUssSUFDSmhLLEVBQUF1SyxpQkFBQXlDLFFBREksR0FLSixTQUFBQSxFQUFBaE4sR0FDQSxJQUFBc0IsRUFDQThDLEVBQUEsR0FDQXROLEVBQUEsRUFFQTRNLEVBQUExRCxFQUFBOEoscUJBQUFrRCxHQUdBLFNBQUFBLEVBQUEsQ0FDQSxLQUFBMUwsRUFBQW9DLEVBQUE1TSxNQUNBLElBQUF3SyxFQUFBNkgsVUFDQS9FLEVBQUF2UCxLQUFBeU0sR0FJQSxPQUFBOEMsRUFFQSxPQUFBVixHQUlBa0IsRUFBQWtJLEtBQUEsTUFBQXZOLEVBQUF3Syx3QkFBQSxTQUFBeUMsRUFBQXhNLEdBQ0EsWUFBQUEsRUFBQStKLHdCQUFBeEUsRUFDQSxPQUFBdkYsRUFBQStKLHVCQUFBeUMsSUFVQS9HLEVBQUEsR0FPQUQsRUFBQSxJQUVBakcsRUFBQXlLLElBQUFwQyxFQUFBcUMsS0FBQXZRLEVBQUE2USxxQkFHQU8sR0FBQSxTQUFBQyxHQU1BekYsRUFBQXZMLFlBQUFnUixHQUFBa0MsVUFBQSxVQUFBekssRUFBQSxxQkFDQUEsRUFBQSxrRUFPQXVJLEVBQUFSLGlCQUFBLHdCQUFBeFQsUUFDQXlPLEVBQUEzUSxLQUFBLFNBQUF5UixFQUFBLGdCQUtBeUUsRUFBQVIsaUJBQUEsY0FBQXhULFFBQ0F5TyxFQUFBM1EsS0FBQSxNQUFBeVIsRUFBQSxhQUFBRCxFQUFBLEtBSUEwRSxFQUFBUixpQkFBQSxRQUFBL0gsRUFBQSxNQUFBekwsUUFDQXlPLEVBQUEzUSxLQUFBLE1BTUFrVyxFQUFBUixpQkFBQSxZQUFBeFQsUUFDQXlPLEVBQUEzUSxLQUFBLFlBTUFrVyxFQUFBUixpQkFBQSxLQUFBL0gsRUFBQSxNQUFBekwsUUFDQXlPLEVBQUEzUSxLQUFBLGNBSUFpVyxHQUFBLFNBQUFDLEdBQ0FBLEVBQUFrQyxVQUFBLG9GQUtBLElBQUFDLEVBQUF4VCxFQUFBQyxjQUFBLFNBQ0F1VCxFQUFBOUMsYUFBQSxpQkFDQVcsRUFBQWhSLFlBQUFtVCxHQUFBOUMsYUFBQSxZQUlBVyxFQUFBUixpQkFBQSxZQUFBeFQsUUFDQXlPLEVBQUEzUSxLQUFBLE9BQUF5UixFQUFBLGVBS0EsSUFBQXlFLEVBQUFSLGlCQUFBLFlBQUF4VCxRQUNBeU8sRUFBQTNRLEtBQUEsd0JBS0F5USxFQUFBdkwsWUFBQWdSLEdBQUFoQyxVQUFBLEVBQ0EsSUFBQWdDLEVBQUFSLGlCQUFBLGFBQUF4VCxRQUNBeU8sRUFBQTNRLEtBQUEsd0JBSUFrVyxFQUFBUixpQkFBQSxRQUNBL0UsRUFBQTNRLEtBQUEsWUFJQTBLLEVBQUE0TixnQkFBQXZGLEVBQUFxQyxLQUFBbEcsRUFBQXVCLEVBQUF2QixTQUNBdUIsRUFBQThILHVCQUNBOUgsRUFBQStILG9CQUNBL0gsRUFBQWdJLGtCQUNBaEksRUFBQWlJLHFCQUVBekMsR0FBQSxTQUFBQyxHQUdBeEwsRUFBQWlPLGtCQUFBekosRUFBQXpRLEtBQUF5WCxFQUFBLEtBSUFoSCxFQUFBelEsS0FBQXlYLEVBQUEsYUFDQXRGLEVBQUE1USxLQUFBLEtBQUE0UixLQUlBakIsSUFBQXpPLFFBQUEsSUFBQTRQLE9BQUFuQixFQUFBekosS0FBQSxNQUNBMEosSUFBQTFPLFFBQUEsSUFBQTRQLE9BQUFsQixFQUFBMUosS0FBQSxNQUlBbVEsRUFBQXRFLEVBQUFxQyxLQUFBM0UsRUFBQW1JLHlCQUtBL0gsRUFBQXdHLEdBQUF0RSxFQUFBcUMsS0FBQTNFLEVBQUFJLFVBQ0EsU0FBQXBLLEVBQUFDLEdBQ0EsSUFBQW1TLEVBQUEsSUFBQXBTLEVBQUE2TixTQUFBN04sRUFBQTBRLGdCQUFBMVEsRUFDQXFTLEVBQUFwUyxLQUFBcUUsV0FDQSxPQUFBdEUsSUFBQXFTLFNBQUEsSUFBQUEsRUFBQXhFLFlBQ0F1RSxFQUFBaEksU0FDQWdJLEVBQUFoSSxTQUFBaUksR0FDQXJTLEVBQUFtUyx5QkFBQSxHQUFBblMsRUFBQW1TLHdCQUFBRSxNQUdBLFNBQUFyUyxFQUFBQyxHQUNBLEdBQUFBLEVBQ0EsS0FBQUEsSUFBQXFFLFlBQ0EsR0FBQXJFLElBQUFELEVBQ0EsU0FJQSxVQU9BNEssRUFBQWdHLEVBQ0EsU0FBQTVRLEVBQUFDLEdBR0EsR0FBQUQsSUFBQUMsRUFFQSxPQURBNkosR0FBQSxFQUNBLEVBSUEsSUFBQXdJLEdBQUF0UyxFQUFBbVMseUJBQUFsUyxFQUFBa1Msd0JBQ0EsT0FBQUcsSUFZQSxHQVBBQSxHQUFBdFMsRUFBQXFPLGVBQUFyTyxNQUFBQyxFQUFBb08sZUFBQXBPLEdBQ0FELEVBQUFtUyx3QkFBQWxTLEdBR0EsS0FJQWdFLEVBQUFzTyxjQUFBdFMsRUFBQWtTLHdCQUFBblMsS0FBQXNTLEVBR0F0UyxJQUFBNUIsR0FBQTRCLEVBQUFxTyxnQkFBQWhFLEdBQUFELEVBQUFDLEVBQUFySyxJQUNBLEVBRUFDLElBQUE3QixHQUFBNkIsRUFBQW9PLGdCQUFBaEUsR0FBQUQsRUFBQUMsRUFBQXBLLEdBQ0EsRUFJQTRKLEVBQ0F2USxFQUFBdVEsRUFBQTdKLEdBQUExRyxFQUFBdVEsRUFBQTVKLEdBQ0EsRUFHQSxFQUFBcVMsR0FBQSxNQUVBLFNBQUF0UyxFQUFBQyxHQUVBLEdBQUFELElBQUFDLEVBRUEsT0FEQTZKLEdBQUEsRUFDQSxFQUdBLElBQUFpRyxFQUNBdlUsRUFBQSxFQUNBZ1gsRUFBQXhTLEVBQUFzRSxXQUNBK04sRUFBQXBTLEVBQUFxRSxXQUNBbU8sRUFBQSxDQUFBelMsR0FDQTBTLEVBQUEsQ0FBQXpTLEdBR0EsSUFBQXVTLElBQUFILEVBQ0EsT0FBQXJTLElBQUE1QixHQUFBLEVBQ0E2QixJQUFBN0IsRUFBQSxFQUNBb1UsR0FBQSxFQUNBSCxFQUFBLEVBQ0F4SSxFQUNBdlEsRUFBQXVRLEVBQUE3SixHQUFBMUcsRUFBQXVRLEVBQUE1SixHQUNBLEVBR0csR0FBQXVTLElBQUFILEVBQ0gsT0FBQXZDLEdBQUE5UCxFQUFBQyxHQUtBLElBREE4UCxFQUFBL1AsRUFDQStQLElBQUF6TCxZQUNBbU8sRUFBQUUsUUFBQTVDLEdBR0EsSUFEQUEsRUFBQTlQLEVBQ0E4UCxJQUFBekwsWUFDQW9PLEVBQUFDLFFBQUE1QyxHQUlBLEtBQUEwQyxFQUFBalgsS0FBQWtYLEVBQUFsWCxJQUNBQSxJQUdBLE9BQUFBLEVBRUFzVSxHQUFBMkMsRUFBQWpYLEdBQUFrWCxFQUFBbFgsSUFHQWlYLEVBQUFqWCxLQUFBNk8sR0FBQSxFQUNBcUksRUFBQWxYLEtBQUE2TyxFQUFBLEVBQ0EsR0FHQWpNLEdBM1lBQSxHQThZQWlMLEdBQUFaLFFBQUEsU0FBQW1LLEVBQUFDLEdBQ0EsT0FBQXhKLEdBQUF1SixFQUFBLFVBQUFDLElBR0F4SixHQUFBd0ksZ0JBQUEsU0FBQTdMLEVBQUE0TSxHQVNBLElBUEE1TSxFQUFBcUksZUFBQXJJLEtBQUE1SCxHQUNBMkwsRUFBQS9ELEdBSUE0TSxJQUFBdkwsUUFBQW1FLEVBQUEsVUFFQXZILEVBQUE0TixpQkFBQTVILElBQ0FVLEVBQUFpSSxFQUFBLFFBQ0F6SSxNQUFBd0UsS0FBQWlFLE9BQ0ExSSxNQUFBeUUsS0FBQWlFLElBRUEsSUFDQSxJQUFBaE4sRUFBQTZDLEVBQUF6USxLQUFBZ08sRUFBQTRNLEdBR0EsR0FBQWhOLEdBQUEzQixFQUFBaU8sbUJBR0FsTSxFQUFBNUgsVUFBQSxLQUFBNEgsRUFBQTVILFNBQUF5UCxTQUNBLE9BQUFqSSxFQUVHLE1BQUF6TCxJQUdILE9BQUFrUCxHQUFBdUosRUFBQXhVLEVBQUEsTUFBQTRILElBQUF2SyxPQUFBLEdBR0E0TixHQUFBZSxTQUFBLFNBQUExRixFQUFBc0IsR0FLQSxPQUhBdEIsRUFBQTJKLGVBQUEzSixLQUFBdEcsR0FDQTJMLEVBQUFyRixHQUVBMEYsRUFBQTFGLEVBQUFzQixJQUdBcUQsR0FBQXlKLEtBQUEsU0FBQTlNLEVBQUFwTSxJQUVBb00sRUFBQXFJLGVBQUFySSxLQUFBNUgsR0FDQTJMLEVBQUEvRCxHQUdBLElBQUEvTSxFQUFBcVEsRUFBQXVHLFdBQUFqVyxFQUFBd1AsZUFFQTJKLEVBQUE5WixHQUFBNkssRUFBQTlMLEtBQUFzUixFQUFBdUcsV0FBQWpXLEVBQUF3UCxlQUNBblEsRUFBQStNLEVBQUFwTSxHQUFBcVEsUUFDQTFPLEVBRUEsWUFBQUEsSUFBQXdYLEVBQ0FBLEVBQ0E5TyxFQUFBaUgsYUFBQWpCLEVBQ0FqRSxFQUFBNkksYUFBQWpWLElBQ0FtWixFQUFBL00sRUFBQXlMLGlCQUFBN1gsS0FBQW1aLEVBQUFDLFVBQ0FELEVBQUE5WSxNQUNBLE1BR0FvUCxHQUFBNEosT0FBQSxTQUFBQyxHQUNBLE9BQUFBLEVBQUEsSUFBQTdMLFFBQUE0RixHQUFBQyxLQUdBN0QsR0FBQTFILE1BQUEsU0FBQTRGLEdBQ0EsVUFBQXhLLE1BQUEsMENBQUF3SyxJQU9BOEIsR0FBQThKLFdBQUEsU0FBQS9LLEdBQ0EsSUFBQXBDLEVBQ0FvTixFQUFBLEdBQ0FwVSxFQUFBLEVBQ0F4RCxFQUFBLEVBT0EsR0FKQXNPLEdBQUE3RixFQUFBb1AsaUJBQ0F4SixHQUFBNUYsRUFBQXFQLFlBQUFsTCxFQUFBOUksTUFBQSxHQUNBOEksRUFBQTdCLEtBQUFxRSxHQUVBZCxFQUFBLENBQ0EsS0FBQTlELEVBQUFvQyxFQUFBNU0sTUFDQXdLLElBQUFvQyxFQUFBNU0sS0FDQXdELEVBQUFvVSxFQUFBN1osS0FBQWlDLElBR0EsS0FBQXdELEtBQ0FvSixFQUFBck0sT0FBQXFYLEVBQUFwVSxHQUFBLEdBUUEsT0FGQTZLLEVBQUEsS0FFQXpCLEdBT0FtQixFQUFBRixHQUFBRSxRQUFBLFNBQUF2RCxHQUNBLElBQUEySyxFQUNBL0ssRUFBQSxHQUNBcEssRUFBQSxFQUNBcVMsRUFBQTdILEVBQUE2SCxTQUVBLEdBQUFBLEdBTUUsT0FBQUEsR0FBQSxJQUFBQSxHQUFBLEtBQUFBLEVBQUEsQ0FHRixvQkFBQTdILEVBQUF1TixZQUNBLE9BQUF2TixFQUFBdU4sWUFHQSxJQUFBdk4sSUFBQXdOLFdBQWdDeE4sRUFBTUEsSUFBQWtLLFlBQ3RDdEssR0FBQTJELEVBQUF2RCxRQUdFLE9BQUE2SCxHQUFBLElBQUFBLEVBQ0YsT0FBQTdILEVBQUF5TixlQWhCQSxLQUFBOUMsRUFBQTNLLEVBQUF4SyxNQUVBb0ssR0FBQTJELEVBQUFvSCxHQWtCQSxPQUFBL0ssSUFHQTBELEVBQUFELEdBQUFxSyxVQUFBLENBR0FyRSxZQUFBLEdBRUFzRSxhQUFBcEUsR0FFQXRCLE1BQUF0QyxFQUVBa0UsV0FBQSxHQUVBMkIsS0FBQSxHQUVBb0MsU0FBQSxDQUNBQyxJQUFBLENBQVFuRyxJQUFBLGFBQUF4SCxPQUFBLEdBQ1I0TixJQUFBLENBQVFwRyxJQUFBLGNBQ1JxRyxJQUFBLENBQVFyRyxJQUFBLGtCQUFBeEgsT0FBQSxHQUNSOE4sSUFBQSxDQUFRdEcsSUFBQSxvQkFHUnVHLFVBQUEsQ0FDQWxJLEtBQUEsU0FBQWtDLEdBVUEsT0FUQUEsRUFBQSxHQUFBQSxFQUFBLEdBQUE1RyxRQUFBb0YsRUFBQUMsSUFHQXVCLEVBQUEsSUFBQUEsRUFBQSxJQUFBQSxFQUFBLElBQUFBLEVBQUEsUUFBQTVHLFFBQUFvRixFQUFBQyxJQUVBLE9BQUF1QixFQUFBLEtBQ0FBLEVBQUEsT0FBQUEsRUFBQSxRQUdBQSxFQUFBM08sTUFBQSxNQUdBMk0sTUFBQSxTQUFBZ0MsR0E2QkEsT0FsQkFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBN0UsY0FFQSxRQUFBNkUsRUFBQSxHQUFBM08sTUFBQSxNQUVBMk8sRUFBQSxJQUNBNUUsR0FBQTFILE1BQUFzTSxFQUFBLElBS0FBLEVBQUEsS0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQUFBLEVBQUEsbUJBQUFBLEVBQUEsWUFBQUEsRUFBQSxLQUNBQSxFQUFBLEtBQUFBLEVBQUEsR0FBQUEsRUFBQSxZQUFBQSxFQUFBLEtBR0lBLEVBQUEsSUFDSjVFLEdBQUExSCxNQUFBc00sRUFBQSxJQUdBQSxHQUdBakMsT0FBQSxTQUFBaUMsR0FDQSxJQUFBaUcsRUFDQUMsR0FBQWxHLEVBQUEsSUFBQUEsRUFBQSxHQUVBLE9BQUF0QyxFQUFBLE1BQUFnRCxLQUFBVixFQUFBLElBQ0EsTUFJQUEsRUFBQSxHQUNBQSxFQUFBLEdBQUFBLEVBQUEsSUFBQUEsRUFBQSxPQUdJa0csR0FBQTFJLEVBQUFrRCxLQUFBd0YsS0FFSkQsRUFBQXpLLEVBQUEwSyxHQUFBLE1BRUFELEVBQUFDLEVBQUE3YSxRQUFBLElBQUE2YSxFQUFBMVksT0FBQXlZLEdBQUFDLEVBQUExWSxVQUdBd1MsRUFBQSxHQUFBQSxFQUFBLEdBQUEzTyxNQUFBLEVBQUE0VSxHQUNBakcsRUFBQSxHQUFBa0csRUFBQTdVLE1BQUEsRUFBQTRVLElBSUFqRyxFQUFBM08sTUFBQSxRQUlBZ1MsT0FBQSxDQUVBeEYsSUFBQSxTQUFBc0ksR0FDQSxJQUFBeEYsRUFBQXdGLEVBQUEvTSxRQUFBb0YsRUFBQUMsSUFBQXRELGNBQ0EsWUFBQWdMLEVBQ0EsV0FBZ0IsVUFDaEIsU0FBQXBPLEdBQ0EsT0FBQUEsRUFBQTRJLFVBQUE1SSxFQUFBNEksU0FBQXhGLGdCQUFBd0YsSUFJQS9DLE1BQUEsU0FBQXFGLEdBQ0EsSUFBQW1ELEVBQUE3SixFQUFBMEcsRUFBQSxLQUVBLE9BQUFtRCxJQUNBQSxFQUFBLElBQUFoSixPQUFBLE1BQUFMLEVBQUEsSUFBQWtHLEVBQUEsSUFBQWxHLEVBQUEsU0FDQVIsRUFBQTBHLEVBQUEsU0FBQWxMLEdBQ0EsT0FBQXFPLEVBQUExRixLQUFBLGlCQUFBM0ksRUFBQWtMLFdBQUFsTCxFQUFBa0wsZ0JBQUEsSUFBQWxMLEVBQUE2SSxjQUFBN0ksRUFBQTZJLGFBQUEsaUJBSUE5QyxLQUFBLFNBQUFuUyxFQUFBMGEsRUFBQXRZLEdBQ0EsZ0JBQUFnSyxHQUNBLElBQUFwSCxFQUFBeUssR0FBQXlKLEtBQUE5TSxFQUFBcE0sR0FFQSxhQUFBZ0YsRUFDQSxPQUFBMFYsR0FFQUEsSUFJQTFWLEdBQUEsR0FFQSxNQUFBMFYsRUFBQTFWLElBQUE1QyxFQUNBLE9BQUFzWSxFQUFBMVYsSUFBQTVDLEVBQ0EsT0FBQXNZLEVBQUF0WSxHQUFBLElBQUE0QyxFQUFBdEYsUUFBQTBDLEdBQ0EsT0FBQXNZLEVBQUF0WSxHQUFBNEMsRUFBQXRGLFFBQUEwQyxJQUFBLEVBQ0EsT0FBQXNZLEVBQUF0WSxHQUFBNEMsRUFBQVUsT0FBQXRELEVBQUFQLFVBQUFPLEVBQ0EsT0FBQXNZLEdBQUEsSUFBQTFWLEVBQUF5SSxRQUFBK0QsRUFBQSxVQUFBOVIsUUFBQTBDLElBQUEsRUFDQSxPQUFBc1ksSUFBQTFWLElBQUE1QyxHQUFBNEMsRUFBQVUsTUFBQSxFQUFBdEQsRUFBQVAsT0FBQSxLQUFBTyxFQUFBLFFBS0FpUSxNQUFBLFNBQUF0TSxFQUFBNFUsRUFBQS9ELEVBQUF0SyxFQUFBRSxHQUNBLElBQUFvTyxFQUFBLFFBQUE3VSxFQUFBTCxNQUFBLEtBQ0FtVixFQUFBLFNBQUE5VSxFQUFBTCxPQUFBLEdBQ0FvVixFQUFBLFlBQUFILEVBRUEsV0FBQXJPLEdBQUEsSUFBQUUsRUFHQSxTQUFBSixHQUNBLFFBQUFBLEVBQUExQixZQUdBLFNBQUEwQixFQUFBdEIsRUFBQWlRLEdBQ0EsSUFBQXZGLEVBQUF3RixFQUFBQyxFQUFBbEUsRUFBQW1FLEVBQUFDLEVBQ0FySCxFQUFBOEcsSUFBQUMsRUFBQSxnQ0FDQTVVLEVBQUFtRyxFQUFBMUIsV0FDQTFLLEVBQUE4YSxHQUFBMU8sRUFBQTRJLFNBQUF4RixjQUNBNEwsR0FBQUwsSUFBQUQsRUFDQTFFLEdBQUEsRUFFQSxHQUFBblEsRUFBQSxDQUdBLEdBQUEyVSxFQUFBLENBQ0EsS0FBQTlHLEdBQUEsQ0FFQSxJQURBaUQsRUFBQTNLLEVBQ0EySyxJQUFBakQsSUFDQSxHQUFBZ0gsRUFDQS9ELEVBQUEvQixTQUFBeEYsZ0JBQUF4UCxFQUNBLElBQUErVyxFQUFBOUMsU0FFQSxTQUlBa0gsRUFBQXJILEVBQUEsU0FBQS9OLElBQUFvVixHQUFBLGNBRUEsU0FNQSxHQUhBQSxFQUFBLENBQUFOLEVBQUE1VSxFQUFBMlQsV0FBQTNULEVBQUFvVixXQUdBUixHQUFBTyxHQWtCQSxJQUhBaEYsR0FEQThFLEdBREExRixHQUhBd0YsR0FKQUMsR0FEQWxFLEVBQUE5USxHQUNBcUgsS0FBQXlKLEVBQUF6SixHQUFBLEtBSUF5SixFQUFBdUUsWUFDQUwsRUFBQWxFLEVBQUF1RSxVQUFBLEtBRUF2VixJQUFBLElBQ0EsS0FBQTJLLEdBQUE4RSxFQUFBLEtBQ0FBLEVBQUEsR0FDQXVCLEVBQUFtRSxHQUFBalYsRUFBQStOLFdBQUFrSCxHQUVBbkUsSUFBQW1FLEdBQUFuRSxLQUFBakQsS0FHQXNDLEVBQUE4RSxFQUFBLElBQUFDLEVBQUFyVixPQUdBLE9BQUFpUixFQUFBOUMsWUFBQW1DLEdBQUFXLElBQUEzSyxFQUFBLENBQ0E0TyxFQUFBalYsR0FBQSxDQUFBMkssRUFBQXdLLEVBQUE5RSxHQUNBLFlBdUJBLEdBakJBZ0YsSUFZQWhGLEVBREE4RSxHQURBMUYsR0FIQXdGLEdBSkFDLEdBREFsRSxFQUFBM0ssR0FDQWtCLEtBQUF5SixFQUFBekosR0FBQSxLQUlBeUosRUFBQXVFLFlBQ0FMLEVBQUFsRSxFQUFBdUUsVUFBQSxLQUVBdlYsSUFBQSxJQUNBLEtBQUEySyxHQUFBOEUsRUFBQSxLQU1BLElBQUFZLEVBRUEsTUFBQVcsSUFBQW1FLEdBQUFuRSxLQUFBakQsS0FDQXNDLEVBQUE4RSxFQUFBLElBQUFDLEVBQUFyVixVQUVBZ1YsRUFDQS9ELEVBQUEvQixTQUFBeEYsZ0JBQUF4UCxFQUNBLElBQUErVyxFQUFBOUMsY0FDQW1DLElBR0FnRixLQUtBSixHQUpBQyxFQUFBbEUsRUFBQXpKLEtBQUF5SixFQUFBekosR0FBQSxLQUlBeUosRUFBQXVFLFlBQ0FMLEVBQUFsRSxFQUFBdUUsVUFBQSxLQUVBdlYsR0FBQSxDQUFBMkssRUFBQTBGLElBR0FXLElBQUEzSyxNQVVBLE9BREFnSyxHQUFBNUosS0FDQUYsR0FBQThKLEVBQUE5SixHQUFBLEdBQUE4SixFQUFBOUosR0FBQSxLQUtBOEYsT0FBQSxTQUFBbUosRUFBQTNFLEdBS0EsSUFBQXpILEVBQ0E5UCxFQUFBcVEsRUFBQTZCLFFBQUFnSyxJQUFBN0wsRUFBQThMLFdBQUFELEVBQUEvTCxnQkFDQUMsR0FBQTFILE1BQUEsdUJBQUF3VCxHQUtBLE9BQUFsYyxFQUFBaU8sR0FDQWpPLEVBQUF1WCxHQUlBdlgsRUFBQXdDLE9BQUEsR0FDQXNOLEVBQUEsQ0FBQW9NLElBQUEsR0FBQTNFLEdBQ0FsSCxFQUFBOEwsV0FBQXJkLGVBQUFvZCxFQUFBL0wsZUFDQW1HLEdBQUEsU0FBQXhCLEVBQUF0RixHQUlBLElBSEEsSUFBQTNNLEVBQ0F1WixFQUFBcGMsRUFBQThVLEVBQUF5QyxHQUNBaFYsRUFBQTZaLEVBQUE1WixPQUNBRCxLQUVBdVMsRUFEQWpTLEVBQUF4QyxFQUFBeVUsRUFBQXNILEVBQUE3WixPQUNBaU4sRUFBQTNNLEdBQUF1WixFQUFBN1osTUFHQSxTQUFBd0ssR0FDQSxPQUFBL00sRUFBQStNLEVBQUEsRUFBQStDLEtBSUE5UCxJQUlBa1MsUUFBQSxDQUVBbUssSUFBQS9GLEdBQUEsU0FBQTlLLEdBSUEsSUFBQW1OLEVBQUEsR0FDQXhKLEVBQUEsR0FDQW1OLEVBQUE3TCxFQUFBakYsRUFBQTRDLFFBQUF6QyxFQUFBLE9BRUEsT0FBQTJRLEVBQUFyTyxHQUNBcUksR0FBQSxTQUFBeEIsRUFBQXRGLEVBQUEvRCxFQUFBaVEsR0FNQSxJQUxBLElBQUEzTyxFQUNBd1AsRUFBQUQsRUFBQXhILEVBQUEsS0FBQTRHLEVBQUEsSUFDQW5aLEVBQUF1UyxFQUFBdFMsT0FHQUQsTUFDQXdLLEVBQUF3UCxFQUFBaGEsTUFDQXVTLEVBQUF2UyxLQUFBaU4sRUFBQWpOLEdBQUF3SyxNQUlBLFNBQUFBLEVBQUF0QixFQUFBaVEsR0FLQSxPQUpBL0MsRUFBQSxHQUFBNUwsRUFDQXVQLEVBQUEzRCxFQUFBLEtBQUErQyxFQUFBdk0sR0FFQXdKLEVBQUEsU0FDQXhKLEVBQUExSSxTQUlBK1YsSUFBQWxHLEdBQUEsU0FBQTlLLEdBQ0EsZ0JBQUF1QixHQUNBLE9BQUFxRCxHQUFBNUUsRUFBQXVCLEdBQUF2SyxPQUFBLEtBSUEyTyxTQUFBbUYsR0FBQSxTQUFBbEwsR0FFQSxPQURBQSxJQUFBZ0QsUUFBQW9GLEVBQUFDLElBQ0EsU0FBQTFHLEdBQ0EsT0FBQUEsRUFBQXVOLGFBQUF2TixFQUFBMFAsV0FBQW5NLEVBQUF2RCxJQUFBMU0sUUFBQStLLElBQUEsS0FXQXNSLEtBQUFwRyxHQUFBLFNBQUFvRyxHQU1BLE9BSkFqSyxFQUFBaUQsS0FBQWdILEdBQUEsS0FDQXRNLEdBQUExSCxNQUFBLHFCQUFBZ1UsR0FFQUEsSUFBQXRPLFFBQUFvRixFQUFBQyxJQUFBdEQsY0FDQSxTQUFBcEQsR0FDQSxJQUFBNFAsRUFDQSxHQUNBLEdBQUFBLEVBQUEzTCxFQUNBakUsRUFBQTJQLEtBQ0EzUCxFQUFBNkksYUFBQSxhQUFBN0ksRUFBQTZJLGFBQUEsUUFHQSxPQURBK0csSUFBQXhNLGlCQUNBdU0sR0FBQSxJQUFBQyxFQUFBdGMsUUFBQXFjLEVBQUEsWUFFSzNQLElBQUExQixhQUFBLElBQUEwQixFQUFBNkgsVUFDTCxZQUtBakgsT0FBQSxTQUFBWixHQUNBLElBQUE2UCxFQUFBdGUsRUFBQXVlLFVBQUF2ZSxFQUFBdWUsU0FBQUQsS0FDQSxPQUFBQSxLQUFBdlcsTUFBQSxLQUFBMEcsRUFBQWxKLElBR0FpWixLQUFBLFNBQUEvUCxHQUNBLE9BQUFBLElBQUFnRSxHQUdBZ00sTUFBQSxTQUFBaFEsR0FDQSxPQUFBQSxJQUFBNUgsRUFBQTZYLGlCQUFBN1gsRUFBQThYLFVBQUE5WCxFQUFBOFgsZ0JBQUFsUSxFQUFBckcsTUFBQXFHLEVBQUFtUSxPQUFBblEsRUFBQW9RLFdBSUFDLFFBQUFoRyxJQUFBLEdBQ0E1QyxTQUFBNEMsSUFBQSxHQUVBaUcsUUFBQSxTQUFBdFEsR0FHQSxJQUFBNEksRUFBQTVJLEVBQUE0SSxTQUFBeEYsY0FDQSxnQkFBQXdGLEtBQUE1SSxFQUFBc1EsU0FBQSxXQUFBMUgsS0FBQTVJLEVBQUF1USxVQUdBQSxTQUFBLFNBQUF2USxHQU9BLE9BSkFBLEVBQUExQixZQUNBMEIsRUFBQTFCLFdBQUFrUyxlQUdBLElBQUF4USxFQUFBdVEsVUFJQUUsTUFBQSxTQUFBelEsR0FLQSxJQUFBQSxJQUFBd04sV0FBZ0N4TixFQUFNQSxJQUFBa0ssWUFDdEMsR0FBQWxLLEVBQUE2SCxTQUFBLEVBQ0EsU0FHQSxVQUdBaE8sT0FBQSxTQUFBbUcsR0FDQSxPQUFBc0QsRUFBQTZCLFFBQUEsTUFBQW5GLElBSUEwUSxPQUFBLFNBQUExUSxHQUNBLE9BQUFxRyxFQUFBc0MsS0FBQTNJLEVBQUE0SSxXQUdBZ0QsTUFBQSxTQUFBNUwsR0FDQSxPQUFBb0csRUFBQXVDLEtBQUEzSSxFQUFBNEksV0FHQStILE9BQUEsU0FBQTNRLEdBQ0EsSUFBQXBNLEVBQUFvTSxFQUFBNEksU0FBQXhGLGNBQ0EsZ0JBQUF4UCxHQUFBLFdBQUFvTSxFQUFBckcsTUFBQSxXQUFBL0YsR0FHQXlLLEtBQUEsU0FBQTJCLEdBQ0EsSUFBQThNLEVBQ0EsZ0JBQUE5TSxFQUFBNEksU0FBQXhGLGVBQ0EsU0FBQXBELEVBQUFyRyxPQUlBLE9BQUFtVCxFQUFBOU0sRUFBQTZJLGFBQUEsbUJBQUFpRSxFQUFBMUosZ0JBSUFsRCxNQUFBcUssR0FBQSxXQUNBLFlBR0FuSyxLQUFBbUssR0FBQSxTQUFBRSxFQUFBaFYsR0FDQSxPQUFBQSxFQUFBLEtBR0EwSyxHQUFBb0ssR0FBQSxTQUFBRSxFQUFBaFYsRUFBQStVLEdBQ0EsT0FBQUEsRUFBQSxFQUFBQSxFQUFBL1UsRUFBQStVLEtBR0FvRyxLQUFBckcsR0FBQSxTQUFBRSxFQUFBaFYsR0FFQSxJQURBLElBQUFELEVBQUEsRUFDVUEsRUFBQUMsRUFBWUQsR0FBQSxFQUN0QmlWLEVBQUFsWCxLQUFBaUMsR0FFQSxPQUFBaVYsSUFHQW9HLElBQUF0RyxHQUFBLFNBQUFFLEVBQUFoVixHQUVBLElBREEsSUFBQUQsRUFBQSxFQUNVQSxFQUFBQyxFQUFZRCxHQUFBLEVBQ3RCaVYsRUFBQWxYLEtBQUFpQyxHQUVBLE9BQUFpVixJQUdBcUcsR0FBQXZHLEdBQUEsU0FBQUUsRUFBQWhWLEVBQUErVSxHQUVBLElBREEsSUFBQWhWLEVBQUFnVixFQUFBLEVBQUFBLEVBQUEvVSxFQUFBK1UsSUFDVWhWLEdBQUEsR0FDVmlWLEVBQUFsWCxLQUFBaUMsR0FFQSxPQUFBaVYsSUFHQXNHLEdBQUF4RyxHQUFBLFNBQUFFLEVBQUFoVixFQUFBK1UsR0FFQSxJQURBLElBQUFoVixFQUFBZ1YsRUFBQSxFQUFBQSxFQUFBL1UsRUFBQStVLElBQ1VoVixFQUFBQyxHQUNWZ1YsRUFBQWxYLEtBQUFpQyxHQUVBLE9BQUFpVixPQUtBdEYsUUFBQSxJQUFBN0IsRUFBQTZCLFFBQUEsR0FHQSxDQUFZNkwsT0FBQSxFQUFBQyxVQUFBLEVBQUFDLE1BQUEsRUFBQUMsVUFBQSxFQUFBQyxPQUFBLEdBQ1o5TixFQUFBNkIsUUFBQTNQLEdBQUEyVSxHQUFBM1UsR0FFQSxJQUFBQSxJQUFBLENBQVk2YixRQUFBLEVBQUFDLE9BQUEsR0FDWmhPLEVBQUE2QixRQUFBM1AsR0FBQTRVLEdBQUE1VSxHQUlBLFNBQUE0WixNQXVFQSxTQUFBckcsR0FBQXdJLEdBSUEsSUFIQSxJQUFBL2IsRUFBQSxFQUNBNkssRUFBQWtSLEVBQUE5YixPQUNBZ0osRUFBQSxHQUNRakosRUFBQTZLLEVBQVM3SyxJQUNqQmlKLEdBQUE4UyxFQUFBL2IsR0FBQXZCLE1BRUEsT0FBQXdLLEVBR0EsU0FBQStJLEdBQUErSCxFQUFBaUMsRUFBQUMsR0FDQSxJQUFBL0osRUFBQThKLEVBQUE5SixJQUNBZ0ssRUFBQUYsRUFBQTdKLEtBQ0E5SyxFQUFBNlUsR0FBQWhLLEVBQ0FpSyxFQUFBRixHQUFBLGVBQUE1VSxFQUNBK1UsRUFBQXJOLElBRUEsT0FBQWlOLEVBQUF0UixNQUVBLFNBQUFGLEVBQUF0QixFQUFBaVEsR0FDQSxLQUFBM08sSUFBQTBILElBQ0EsT0FBQTFILEVBQUE2SCxVQUFBOEosRUFDQSxPQUFBcEMsRUFBQXZQLEVBQUF0QixFQUFBaVEsR0FHQSxVQUlBLFNBQUEzTyxFQUFBdEIsRUFBQWlRLEdBQ0EsSUFBQWtELEVBQUFqRCxFQUFBQyxFQUNBaUQsRUFBQSxDQUFBeE4sRUFBQXNOLEdBR0EsR0FBQWpELEdBQ0EsS0FBQTNPLElBQUEwSCxJQUNBLFFBQUExSCxFQUFBNkgsVUFBQThKLElBQ0FwQyxFQUFBdlAsRUFBQXRCLEVBQUFpUSxHQUNBLGNBS0EsS0FBQTNPLElBQUEwSCxJQUNBLE9BQUExSCxFQUFBNkgsVUFBQThKLEVBT0EsR0FGQS9DLEdBSkFDLEVBQUE3TyxFQUFBa0IsS0FBQWxCLEVBQUFrQixHQUFBLEtBSUFsQixFQUFBa1AsWUFBQUwsRUFBQTdPLEVBQUFrUCxVQUFBLElBRUF3QyxPQUFBMVIsRUFBQTRJLFNBQUF4RixjQUNBcEQsSUFBQTBILElBQUExSCxNQUNPLEtBQUE2UixFQUFBakQsRUFBQS9SLEtBQ1BnVixFQUFBLEtBQUF2TixHQUFBdU4sRUFBQSxLQUFBRCxFQUdBLE9BQUFFLEVBQUEsR0FBQUQsRUFBQSxHQU1BLEdBSEFqRCxFQUFBL1IsR0FBQWlWLEVBR0FBLEVBQUEsR0FBQXZDLEVBQUF2UCxFQUFBdEIsRUFBQWlRLEdBQ0EsU0FNQSxVQUlBLFNBQUFvRCxHQUFBQyxHQUNBLE9BQUFBLEVBQUF2YyxPQUFBLEVBQ0EsU0FBQXVLLEVBQUF0QixFQUFBaVEsR0FFQSxJQURBLElBQUFuWixFQUFBd2MsRUFBQXZjLE9BQ0FELEtBQ0EsSUFBQXdjLEVBQUF4YyxHQUFBd0ssRUFBQXRCLEVBQUFpUSxHQUNBLFNBR0EsVUFFQXFELEVBQUEsR0FZQSxTQUFBQyxHQUFBekMsRUFBQWpXLEVBQUErUixFQUFBNU0sRUFBQWlRLEdBT0EsSUFOQSxJQUFBM08sRUFDQWtTLEVBQUEsR0FDQTFjLEVBQUEsRUFDQTZLLEVBQUFtUCxFQUFBL1osT0FDQTBjLEVBQUEsTUFBQTVZLEVBRVEvRCxFQUFBNkssRUFBUzdLLEtBQ2pCd0ssRUFBQXdQLEVBQUFoYSxNQUNBOFYsTUFBQXRMLEVBQUF0QixFQUFBaVEsS0FDQXVELEVBQUEzZSxLQUFBeU0sR0FDQW1TLEdBQ0E1WSxFQUFBaEcsS0FBQWlDLEtBTUEsT0FBQTBjLEVBR0EsU0FBQUUsR0FBQW5FLEVBQUF4UCxFQUFBOFEsRUFBQThDLEVBQUFDLEVBQUFDLEdBT0EsT0FOQUYsTUFBQW5SLEtBQ0FtUixFQUFBRCxHQUFBQyxJQUVBQyxNQUFBcFIsS0FDQW9SLEVBQUFGLEdBQUFFLEVBQUFDLElBRUFoSixHQUFBLFNBQUF4QixFQUFBM0YsRUFBQTFELEVBQUFpUSxHQUNBLElBQUE2RCxFQUFBaGQsRUFBQXdLLEVBQ0F5UyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQXZRLEVBQUEzTSxPQUdBa0ssRUFBQW9JLEdBNUNBLFNBQUF0SixFQUFBbVUsRUFBQXhRLEdBR0EsSUFGQSxJQUFBNU0sRUFBQSxFQUNBNkssRUFBQXVTLEVBQUFuZCxPQUNRRCxFQUFBNkssRUFBUzdLLElBQ2pCNk4sR0FBQTVFLEVBQUFtVSxFQUFBcGQsR0FBQTRNLEdBRUEsT0FBQUEsRUFzQ0F5USxDQUFBcFUsR0FBQSxJQUFBQyxFQUFBbUosU0FBQSxDQUFBbkosS0FBQSxJQUdBb1UsR0FBQTdFLElBQUFsRyxHQUFBdEosRUFFQWtCLEVBREFzUyxHQUFBdFMsRUFBQThTLEVBQUF4RSxFQUFBdlAsRUFBQWlRLEdBR0FvRSxFQUFBeEQsRUFFQStDLElBQUF2SyxFQUFBa0csRUFBQTBFLEdBQUFOLEdBR0EsR0FHQWpRLEVBQ0EwUSxFQVFBLEdBTEF2RCxHQUNBQSxFQUFBdUQsRUFBQUMsRUFBQXJVLEVBQUFpUSxHQUlBMEQsRUFNQSxJQUxBRyxFQUFBUCxHQUFBYyxFQUFBTCxHQUNBTCxFQUFBRyxFQUFBLEdBQUE5VCxFQUFBaVEsR0FHQW5aLEVBQUFnZCxFQUFBL2MsT0FDQUQsTUFDQXdLLEVBQUF3UyxFQUFBaGQsTUFDQXVkLEVBQUFMLEVBQUFsZCxNQUFBc2QsRUFBQUosRUFBQWxkLElBQUF3SyxJQUtBLEdBQUErSCxHQUNBLEdBQUF1SyxHQUFBckUsRUFBQSxDQUNBLEdBQUFxRSxFQUFBLENBSUEsSUFGQUUsRUFBQSxHQUNBaGQsRUFBQXVkLEVBQUF0ZCxPQUNBRCxNQUNBd0ssRUFBQStTLEVBQUF2ZCxLQUVBZ2QsRUFBQWpmLEtBQUF1ZixFQUFBdGQsR0FBQXdLLEdBR0FzUyxFQUFBLEtBQUFTLEVBQUEsR0FBQVAsRUFBQTdELEdBS0EsSUFEQW5aLEVBQUF1ZCxFQUFBdGQsT0FDQUQsTUFDQXdLLEVBQUErUyxFQUFBdmQsTUFDQWdkLEVBQUFGLEVBQUFoZixFQUFBeVUsRUFBQS9ILEdBQUF5UyxFQUFBamQsS0FBQSxJQUVBdVMsRUFBQXlLLEtBQUFwUSxFQUFBb1EsR0FBQXhTLFVBT0ErUyxFQUFBZCxHQUNBYyxJQUFBM1EsRUFDQTJRLEVBQUFoZCxPQUFBNGMsRUFBQUksRUFBQXRkLFFBQ0FzZCxHQUVBVCxFQUNBQSxFQUFBLEtBQUFsUSxFQUFBMlEsRUFBQXBFLEdBRUFwYixFQUFBMkMsTUFBQWtNLEVBQUEyUSxLQU1BLFNBQUFDLEdBQUF6QixHQXdCQSxJQXZCQSxJQUFBMEIsRUFBQTFELEVBQUF2VyxFQUNBcUgsRUFBQWtSLEVBQUE5YixPQUNBeWQsRUFBQTVQLEVBQUFzSyxTQUFBMkQsRUFBQSxHQUFBNVgsTUFDQXdaLEVBQUFELEdBQUE1UCxFQUFBc0ssU0FBQSxLQUNBcFksRUFBQTBkLEVBQUEsSUFHQUUsRUFBQTVMLEdBQUEsU0FBQXhILEdBQ0EsT0FBQUEsSUFBQWlULEdBQ0dFLEdBQUEsR0FDSEUsRUFBQTdMLEdBQUEsU0FBQXhILEdBQ0EsT0FBQTFNLEVBQUEyZixFQUFBalQsSUFBQSxHQUNHbVQsR0FBQSxHQUNIbkIsRUFBQSxVQUFBaFMsRUFBQXRCLEVBQUFpUSxHQUNBLElBQUEvTyxHQUFBc1QsSUFBQXZFLEdBQUFqUSxJQUFBa0YsTUFDQXFQLEVBQUF2VSxHQUFBbUosU0FDQXVMLEVBQUFwVCxFQUFBdEIsRUFBQWlRLEdBQ0EwRSxFQUFBclQsRUFBQXRCLEVBQUFpUSxJQUdBLE9BREFzRSxFQUFBLEtBQ0FyVCxJQUdRcEssRUFBQTZLLEVBQVM3SyxJQUNqQixHQUFBK1osRUFBQWpNLEVBQUFzSyxTQUFBMkQsRUFBQS9iLEdBQUFtRSxNQUNBcVksRUFBQSxDQUFBeEssR0FBQXVLLEdBQUFDLEdBQUF6QyxRQUNHLENBSUgsSUFIQUEsRUFBQWpNLEVBQUFnSSxPQUFBaUcsRUFBQS9iLEdBQUFtRSxNQUFBekQsTUFBQSxLQUFBcWIsRUFBQS9iLEdBQUFpTixVQUdBdkIsR0FBQSxDQUdBLElBREFsSSxJQUFBeEQsRUFDV3dELEVBQUFxSCxJQUNYaUQsRUFBQXNLLFNBQUEyRCxFQUFBdlksR0FBQVcsTUFEb0JYLEtBS3BCLE9BQUFvWixHQUNBNWMsRUFBQSxHQUFBdWMsR0FBQUMsR0FDQXhjLEVBQUEsR0FBQXVULEdBRUF3SSxFQUFBalksTUFBQSxFQUFBOUQsRUFBQSxHQUFBc0UsT0FBQSxDQUF1QzdGLE1BQUEsTUFBQXNkLEVBQUEvYixFQUFBLEdBQUFtRSxLQUFBLFVBQ3ZDMEgsUUFBQXpDLEVBQUEsTUFDQTJRLEVBQ0EvWixFQUFBd0QsR0FBQWdhLEdBQUF6QixFQUFBalksTUFBQTlELEVBQUF3RCxJQUNBQSxFQUFBcUgsR0FBQTJTLEdBQUF6QixJQUFBalksTUFBQU4sSUFDQUEsRUFBQXFILEdBQUEwSSxHQUFBd0ksSUFHQVMsRUFBQXplLEtBQUFnYyxHQUlBLE9BQUF3QyxHQUFBQyxHQThSQSxPQTltQkE1QyxHQUFBdGQsVUFBQXdSLEVBQUFnUSxRQUFBaFEsRUFBQTZCLFFBQ0E3QixFQUFBOEwsV0FBQSxJQUFBQSxHQUVBM0wsRUFBQUosR0FBQUksU0FBQSxTQUFBaEYsRUFBQThVLEdBQ0EsSUFBQWxFLEVBQUFwSCxFQUFBc0osRUFBQTVYLEVBQ0E2WixFQUFBdEwsRUFBQXVMLEVBQ0FDLEVBQUFoUCxFQUFBakcsRUFBQSxLQUVBLEdBQUFpVixFQUNBLE9BQUFILEVBQUEsRUFBQUcsRUFBQXBhLE1BQUEsR0FPQSxJQUpBa2EsRUFBQS9VLEVBQ0F5SixFQUFBLEdBQ0F1TCxFQUFBblEsRUFBQTJLLFVBRUF1RixHQUFBLENBeUJBLElBQUE3WixLQXRCQTBWLEtBQUFwSCxFQUFBM0MsRUFBQWdELEtBQUFrTCxNQUNBdkwsSUFFQXVMLElBQUFsYSxNQUFBMk8sRUFBQSxHQUFBeFMsU0FBQStkLEdBRUF0TCxFQUFBM1UsS0FBQWdlLEVBQUEsS0FHQWxDLEdBQUEsR0FHQXBILEVBQUExQyxFQUFBK0MsS0FBQWtMLE1BQ0FuRSxFQUFBcEgsRUFBQXFCLFFBQ0FpSSxFQUFBaGUsS0FBQSxDQUNBVSxNQUFBb2IsRUFFQTFWLEtBQUFzTyxFQUFBLEdBQUE1RyxRQUFBekMsRUFBQSxPQUVBNFUsSUFBQWxhLE1BQUErVixFQUFBNVosU0FJQTZOLEVBQUFnSSxTQUNBckQsRUFBQXRDLEVBQUFoTSxHQUFBMk8sS0FBQWtMLEtBQUFDLEVBQUE5WixNQUNBc08sRUFBQXdMLEVBQUE5WixHQUFBc08sTUFDQW9ILEVBQUFwSCxFQUFBcUIsUUFDQWlJLEVBQUFoZSxLQUFBLENBQ0FVLE1BQUFvYixFQUNBMVYsT0FDQThJLFFBQUF3RixJQUVBdUwsSUFBQWxhLE1BQUErVixFQUFBNVosU0FJQSxJQUFBNFosRUFDQSxNQU9BLE9BQUFrRSxFQUNBQyxFQUFBL2QsT0FDQStkLEVBQ0FuUSxHQUFBMUgsTUFBQThDLEdBRUFpRyxFQUFBakcsRUFBQXlKLEdBQUE1TyxNQUFBLElBK1hBb0ssRUFBQUwsR0FBQUssUUFBQSxTQUFBakYsRUFBQXdKLEdBQ0EsSUFBQXpTLEVBQ0FtZSxFQUFBLEdBQ0FDLEVBQUEsR0FDQUYsRUFBQS9PLEVBQUFsRyxFQUFBLEtBRUEsSUFBQWlWLEVBQUEsQ0FNQSxJQUpBekwsSUFDQUEsRUFBQXhFLEVBQUFoRixJQUVBakosRUFBQXlTLEVBQUF4UyxPQUNBRCxNQUNBa2UsRUFBQVYsR0FBQS9LLEVBQUF6UyxLQUNBMEwsR0FDQXlTLEVBQUFwZ0IsS0FBQW1nQixHQUVBRSxFQUFBcmdCLEtBQUFtZ0IsSUFLQUEsRUFBQS9PLEVBQUFsRyxFQXJJQSxTQUFBbVYsRUFBQUQsR0FDQSxJQUFBRSxFQUFBRixFQUFBbGUsT0FBQSxFQUNBcWUsRUFBQUYsRUFBQW5lLE9BQUEsRUFDQXNlLEVBQUEsU0FBQWhNLEVBQUFySixFQUFBaVEsRUFBQXZNLEVBQUE0UixHQUNBLElBQUFoVSxFQUFBaEgsRUFBQXVXLEVBQ0EwRSxFQUFBLEVBQ0F6ZSxFQUFBLElBQ0FnYSxFQUFBekgsR0FBQSxHQUNBbU0sRUFBQSxHQUNBQyxFQUFBdlEsRUFFQWpFLEVBQUFvSSxHQUFBK0wsR0FBQXhRLEVBQUFrSSxLQUFBLFFBQUF3SSxHQUVBSSxFQUFBOVAsR0FBQSxNQUFBNlAsRUFBQSxFQUFBaFQsS0FBQUMsVUFBQSxHQUNBZixFQUFBVixFQUFBbEssT0FTQSxJQVBBdWUsSUFDQXBRLEVBQUFsRixJQUFBdEcsR0FBQXNHLEdBQUFzVixHQU1VeGUsSUFBQTZLLEdBQUEsT0FBQUwsRUFBQUwsRUFBQW5LLElBQXdDQSxJQUFBLENBQ2xELEdBQUFzZSxHQUFBOVQsRUFBQSxDQU1BLElBTEFoSCxFQUFBLEVBQ0EwRixHQUFBc0IsRUFBQXFJLGdCQUFBalEsSUFDQTJMLEVBQUEvRCxHQUNBMk8sR0FBQTFLLEdBRUFzTCxFQUFBcUUsRUFBQTVhLE1BQ0EsR0FBQXVXLEVBQUF2UCxFQUFBdEIsR0FBQXRHLEVBQUF1VyxHQUFBLENBQ0F2TSxFQUFBN08sS0FBQXlNLEdBQ0EsTUFHQWdVLElBQ0ExUCxFQUFBOFAsR0FLQVAsS0FFQTdULEdBQUF1UCxHQUFBdlAsSUFDQWlVLElBSUFsTSxHQUNBeUgsRUFBQWpjLEtBQUF5TSxJQWdCQSxHQVRBaVUsR0FBQXplLEVBU0FxZSxHQUFBcmUsSUFBQXllLEVBQUEsQ0FFQSxJQURBamIsRUFBQSxFQUNBdVcsRUFBQW9FLEVBQUEzYSxNQUNBdVcsRUFBQUMsRUFBQTBFLEVBQUF4VixFQUFBaVEsR0FHQSxHQUFBNUcsRUFBQSxDQUVBLEdBQUFrTSxFQUFBLEVBQ0EsS0FBQXplLEtBQ0FnYSxFQUFBaGEsSUFBQTBlLEVBQUExZSxLQUNBMGUsRUFBQTFlLEdBQUFrRSxFQUFBMUgsS0FBQW9RLElBTUE4UixFQUFBakMsR0FBQWlDLEdBSUEzZ0IsRUFBQTJDLE1BQUFrTSxFQUFBOFIsR0FHQUYsSUFBQWpNLEdBQUFtTSxFQUFBemUsT0FBQSxHQUNBd2UsRUFBQU4sRUFBQWxlLE9BQUEsR0FFQTROLEdBQUE4SixXQUFBL0ssR0FVQSxPQUxBNFIsSUFDQTFQLEVBQUE4UCxFQUNBeFEsRUFBQXVRLEdBR0EzRSxHQUdBLE9BQUFxRSxFQUNBdEssR0FBQXdLLEdBQ0FBLEVBeUJBTSxDQUFBVCxFQUFBRCxLQUdBbFYsV0FFQSxPQUFBaVYsR0FZQS9QLEVBQUFOLEdBQUFNLE9BQUEsU0FBQWxGLEVBQUFDLEVBQUEwRCxFQUFBMkYsR0FDQSxJQUFBdlMsRUFBQStiLEVBQUErQyxFQUFBM2EsRUFBQTZSLEVBQ0ErSSxFQUFBLG1CQUFBOVYsS0FDQXdKLEdBQUFGLEdBQUF0RSxFQUFBaEYsRUFBQThWLEVBQUE5VixhQU1BLEdBSkEyRCxLQUFBLEdBSUEsSUFBQTZGLEVBQUF4UyxPQUFBLENBSUEsSUFEQThiLEVBQUF0SixFQUFBLEdBQUFBLEVBQUEsR0FBQTNPLE1BQUEsSUFDQTdELE9BQUEsV0FBQTZlLEVBQUEvQyxFQUFBLElBQUE1WCxNQUNBLElBQUErRSxFQUFBbUosVUFBQTVELEdBQUFYLEVBQUFzSyxTQUFBMkQsRUFBQSxHQUFBNVgsTUFBQSxDQUdBLEtBREErRSxHQUFBNEUsRUFBQWtJLEtBQUEsR0FBQThJLEVBQUE3UixRQUFBLEdBQUFwQixRQUFBb0YsRUFBQUMsSUFBQWhJLElBQUEsUUFFQSxPQUFBMEQsRUFHSW1TLElBQ0o3VixJQUFBSixZQUdBRyxJQUFBbkYsTUFBQWlZLEVBQUFqSSxRQUFBclYsTUFBQXdCLFFBS0EsSUFEQUQsRUFBQW1RLEVBQUEsYUFBQWdELEtBQUFsSyxHQUFBLEVBQUE4UyxFQUFBOWIsT0FDQUQsTUFDQThlLEVBQUEvQyxFQUFBL2IsSUFHQThOLEVBQUFzSyxTQUFBalUsRUFBQTJhLEVBQUEzYSxRQUdBLElBQUE2UixFQUFBbEksRUFBQWtJLEtBQUE3UixNQUVBb08sRUFBQXlELEVBQ0E4SSxFQUFBN1IsUUFBQSxHQUFBcEIsUUFBQW9GLEVBQUFDLElBQ0FGLEVBQUFtQyxLQUFBNEksRUFBQSxHQUFBNVgsT0FBQXFQLEdBQUF0SyxFQUFBSixhQUFBSSxJQUNBLENBS0EsR0FGQTZTLEVBQUF4YixPQUFBUCxFQUFBLEtBQ0FpSixFQUFBc0osRUFBQXRTLFFBQUFzVCxHQUFBd0ksSUFHQSxPQURBaGUsRUFBQTJDLE1BQUFrTSxFQUFBMkYsR0FDQTNGLEVBR0EsT0FlQSxPQVBBbVMsR0FBQTdRLEVBQUFqRixFQUFBd0osSUFDQUYsRUFDQXJKLEdBQ0F1RixFQUNBN0IsR0FDQTFELEdBQUE4SCxFQUFBbUMsS0FBQWxLLElBQUF1SyxHQUFBdEssRUFBQUosYUFBQUksR0FFQTBELEdBTUFuRSxFQUFBcVAsV0FBQXBNLEVBQUFpQyxNQUFBLElBQUE1QyxLQUFBcUUsR0FBQW5LLEtBQUEsTUFBQXlHLEVBSUFqRCxFQUFBb1AsbUJBQUF2SixFQUdBQyxJQUlBOUYsRUFBQXNPLGFBQUEvQyxHQUFBLFNBQUFDLEdBRUEsU0FBQUEsRUFBQTBDLHdCQUFBL1QsRUFBQUMsY0FBQSxlQU1BbVIsR0FBQSxTQUFBQyxHQUVBLE9BREFBLEVBQUFrQyxVQUFBLG1CQUNBLE1BQUFsQyxFQUFBK0QsV0FBQTNFLGFBQUEsV0FFQWEsR0FBQSxrQ0FBQTFKLEVBQUFwTSxFQUFBNFAsR0FDQSxJQUFBQSxFQUNBLE9BQUF4RCxFQUFBNkksYUFBQWpWLEVBQUEsU0FBQUEsRUFBQXdQLGNBQUEsT0FPQW5GLEVBQUFpSCxZQUFBc0UsR0FBQSxTQUFBQyxHQUdBLE9BRkFBLEVBQUFrQyxVQUFBLFdBQ0FsQyxFQUFBK0QsV0FBQTFFLGFBQUEsWUFDQSxLQUFBVyxFQUFBK0QsV0FBQTNFLGFBQUEsWUFFQWEsR0FBQSxpQkFBQTFKLEVBQUFwTSxFQUFBNFAsR0FDQSxJQUFBQSxHQUFBLFVBQUF4RCxFQUFBNEksU0FBQXhGLGNBQ0EsT0FBQXBELEVBQUF3VSxlQU9BaEwsR0FBQSxTQUFBQyxHQUNBLGFBQUFBLEVBQUFaLGFBQUEsZUFFQWEsR0FBQTNFLEVBQUEsU0FBQS9FLEVBQUFwTSxFQUFBNFAsR0FDQSxJQUFBdUosRUFDQSxJQUFBdkosRUFDQSxXQUFBeEQsRUFBQXBNLEtBQUF3UCxlQUNBMkosRUFBQS9NLEVBQUF5TCxpQkFBQTdYLEtBQUFtWixFQUFBQyxVQUNBRCxFQUFBOVksTUFDQSxPQUtBb1AsR0Foc0VBLENBa3NFQzlSLEdBSURpTixFQUFBZ04sS0FBQW5JLEVBQ0E3RSxFQUFBb08sS0FBQXZKLEVBQUFxSyxVQUdBbFAsRUFBQW9PLEtBQUEsS0FBQXBPLEVBQUFvTyxLQUFBekgsUUFDQTNHLEVBQUEyTyxXQUFBM08sRUFBQWlXLE9BQUFwUixFQUFBOEosV0FDQTNPLEVBQUFILEtBQUFnRixFQUFBRSxRQUNBL0UsRUFBQWtXLFNBQUFyUixFQUFBRyxNQUNBaEYsRUFBQTRGLFNBQUFmLEVBQUFlLFNBQ0E1RixFQUFBbVcsZUFBQXRSLEVBQUE0SixPQUtBLElBQUF2RixFQUFBLFNBQUExSCxFQUFBMEgsRUFBQWtOLEdBSUEsSUFIQSxJQUFBdkYsRUFBQSxHQUNBd0YsT0FBQXRmLElBQUFxZixHQUVBNVUsSUFBQTBILEtBQUEsSUFBQTFILEVBQUE2SCxVQUNBLE9BQUE3SCxFQUFBNkgsU0FBQSxDQUNBLEdBQUFnTixHQUFBclcsRUFBQXdCLEdBQUE4VSxHQUFBRixHQUNBLE1BRUF2RixFQUFBOWIsS0FBQXlNLEdBR0EsT0FBQXFQLEdBSUEwRixFQUFBLFNBQUFoWSxFQUFBaUQsR0FHQSxJQUZBLElBQUFxUCxFQUFBLEdBRVF0UyxFQUFHQSxJQUFBbU4sWUFDWCxJQUFBbk4sRUFBQThLLFVBQUE5SyxJQUFBaUQsR0FDQXFQLEVBQUE5YixLQUFBd0osR0FJQSxPQUFBc1MsR0FJQTJGLEVBQUF4VyxFQUFBb08sS0FBQTNFLE1BQUE5QixhQUlBLFNBQUF5QyxFQUFBNUksRUFBQXBNLEdBRUEsT0FBQW9NLEVBQUE0SSxVQUFBNUksRUFBQTRJLFNBQUF4RixnQkFBQXhQLEVBQUF3UCxjQUdBLElBQUE2UixFQUFBLGtFQUlBQyxFQUFBLGlCQUdBLFNBQUFDLEVBQUF0SSxFQUFBdUksRUFBQTlGLEdBQ0EsT0FBQTlRLEVBQUFzQyxXQUFBc1UsR0FDQTVXLEVBQUErRCxLQUFBc0ssRUFBQSxTQUFBN00sRUFBQXhLLEdBQ0EsUUFBQTRmLEVBQUFwakIsS0FBQWdPLEVBQUF4SyxFQUFBd0ssS0FBQXNQLElBS0E4RixFQUFBdk4sU0FDQXJKLEVBQUErRCxLQUFBc0ssRUFBQSxTQUFBN00sR0FDQSxPQUFBQSxJQUFBb1YsSUFBQTlGLElBS0EsaUJBQUE4RixFQUNBNVcsRUFBQStELEtBQUFzSyxFQUFBLFNBQUE3TSxHQUNBLE9BQUExTSxFQUFBdEIsS0FBQW9qQixFQUFBcFYsSUFBQSxJQUFBc1AsSUFLQTRGLEVBQUF2TSxLQUFBeU0sR0FDQTVXLEVBQUE4TSxPQUFBOEosRUFBQXZJLEVBQUF5QyxJQUlBOEYsRUFBQTVXLEVBQUE4TSxPQUFBOEosRUFBQXZJLEdBQ0FyTyxFQUFBK0QsS0FBQXNLLEVBQUEsU0FBQTdNLEdBQ0EsT0FBQTFNLEVBQUF0QixLQUFBb2pCLEVBQUFwVixJQUFBLElBQUFzUCxHQUFBLElBQUF0UCxFQUFBNkgsWUFJQXJKLEVBQUE4TSxPQUFBLFNBQUFzQixFQUFBak4sRUFBQTJQLEdBQ0EsSUFBQXRQLEVBQUFMLEVBQUEsR0FNQSxPQUpBMlAsSUFDQTFDLEVBQUEsUUFBQUEsRUFBQSxLQUdBLElBQUFqTixFQUFBbEssUUFBQSxJQUFBdUssRUFBQTZILFNBQ0FySixFQUFBZ04sS0FBQUssZ0JBQUE3TCxFQUFBNE0sR0FBQSxDQUFBNU0sR0FBQSxHQUdBeEIsRUFBQWdOLEtBQUEvSSxRQUFBbUssRUFBQXBPLEVBQUErRCxLQUFBNUMsRUFBQSxTQUFBSyxHQUNBLFdBQUFBLEVBQUE2SCxhQUlBckosRUFBQXZMLEdBQUF1TixPQUFBLENBQ0FnTCxLQUFBLFNBQUEvTSxHQUNBLElBQUFqSixFQUFBb0ssRUFDQVMsRUFBQTlDLEtBQUE5SCxPQUNBNGYsRUFBQTlYLEtBRUEsb0JBQUFrQixFQUNBLE9BQUFsQixLQUFBbUMsVUFBQWxCLEVBQUFDLEdBQUE2TSxPQUFBLFdBQ0EsSUFBQTlWLEVBQUEsRUFBZ0JBLEVBQUE2SyxFQUFTN0ssSUFDekIsR0FBQWdKLEVBQUE0RixTQUFBaVIsRUFBQTdmLEdBQUErSCxNQUNBLFlBUUEsSUFGQXFDLEVBQUFyQyxLQUFBbUMsVUFBQSxJQUVBbEssRUFBQSxFQUFjQSxFQUFBNkssRUFBUzdLLElBQ3ZCZ0osRUFBQWdOLEtBQUEvTSxFQUFBNFcsRUFBQTdmLEdBQUFvSyxHQUdBLE9BQUFTLEVBQUEsRUFBQTdCLEVBQUEyTyxXQUFBdk4sTUFFQTBMLE9BQUEsU0FBQTdNLEdBQ0EsT0FBQWxCLEtBQUFtQyxVQUFBeVYsRUFBQTVYLEtBQUFrQixHQUFBLFNBRUE2USxJQUFBLFNBQUE3USxHQUNBLE9BQUFsQixLQUFBbUMsVUFBQXlWLEVBQUE1WCxLQUFBa0IsR0FBQSxTQUVBcVcsR0FBQSxTQUFBclcsR0FDQSxRQUFBMFcsRUFDQTVYLEtBSUEsaUJBQUFrQixHQUFBdVcsRUFBQXJNLEtBQUFsSyxHQUNBRCxFQUFBQyxHQUNBQSxHQUFBLElBQ0EsR0FDQWhKLFVBU0EsSUFBQTZmLEVBTUEvTyxFQUFBLHVDQUVBL0gsRUFBQXZMLEdBQUEwTCxLQUFBLFNBQUFGLEVBQUFDLEVBQUFxUixHQUNBLElBQUE5SCxFQUFBakksRUFHQSxJQUFBdkIsRUFDQSxPQUFBbEIsS0FRQSxHQUhBd1MsS0FBQXVGLEVBR0EsaUJBQUE3VyxFQUFBLENBYUEsS0FQQXdKLEVBTEEsTUFBQXhKLEVBQUEsSUFDQSxNQUFBQSxJQUFBaEosT0FBQSxJQUNBZ0osRUFBQWhKLFFBQUEsRUFHQSxNQUFBZ0osRUFBQSxNQUdBOEgsRUFBQStCLEtBQUE3SixNQUlBd0osRUFBQSxJQUFBdkosRUE2Q0ksT0FBQUEsS0FBQVksUUFDSlosR0FBQXFSLEdBQUF2RSxLQUFBL00sR0FLQWxCLEtBQUFnQyxZQUFBYixHQUFBOE0sS0FBQS9NLEdBaERBLEdBQUF3SixFQUFBLElBWUEsR0FYQXZKLGVBQUFGLEVBQUFFLEVBQUEsR0FBQUEsRUFJQUYsRUFBQXFCLE1BQUF0QyxLQUFBaUIsRUFBQStXLFVBQ0F0TixFQUFBLEdBQ0F2SixLQUFBbUosU0FBQW5KLEVBQUEySixlQUFBM0osRUFBQXRHLEdBQ0EsSUFJQTZjLEVBQUF0TSxLQUFBVixFQUFBLEtBQUF6SixFQUFBdUMsY0FBQXJDLEdBQ0EsSUFBQXVKLEtBQUF2SixFQUdBRixFQUFBc0MsV0FBQXZELEtBQUEwSyxJQUNBMUssS0FBQTBLLEdBQUF2SixFQUFBdUosSUFJQTFLLEtBQUF1UCxLQUFBN0UsRUFBQXZKLEVBQUF1SixJQUtBLE9BQUExSyxLQVlBLE9BUkF5QyxFQUFBNUgsRUFBQW1RLGVBQUFOLEVBQUEsT0FLQTFLLEtBQUEsR0FBQXlDLEVBQ0F6QyxLQUFBOUgsT0FBQSxHQUVBOEgsS0FjRyxPQUFBa0IsRUFBQW9KLFVBQ0h0SyxLQUFBLEdBQUFrQixFQUNBbEIsS0FBQTlILE9BQUEsRUFDQThILE1BSUdpQixFQUFBc0MsV0FBQXJDLFFBQ0hsSixJQUFBd2EsRUFBQXlGLE1BQ0F6RixFQUFBeUYsTUFBQS9XLEdBR0FBLEVBQUFELEdBR0FBLEVBQUEyRCxVQUFBMUQsRUFBQWxCLFFBSUF6TCxVQUFBME0sRUFBQXZMLEdBR0FxaUIsRUFBQTlXLEVBQUFwRyxHQUdBLElBQUFxZCxFQUFBLGlDQUdBQyxFQUFBLENBQ0FsaUIsVUFBQSxFQUNBbWlCLFVBQUEsRUFDQWhPLE1BQUEsRUFDQWlPLE1BQUEsR0FvRkEsU0FBQUMsRUFBQTlMLEVBQUFyQyxHQUNBLE1BQUFxQyxJQUFBckMsS0FBQSxJQUFBcUMsRUFBQWxDLFdBQ0EsT0FBQWtDLEVBbkZBdkwsRUFBQXZMLEdBQUF1TixPQUFBLENBQ0FpUCxJQUFBLFNBQUE3TyxHQUNBLElBQUFrVixFQUFBdFgsRUFBQW9DLEVBQUFyRCxNQUNBbEgsRUFBQXlmLEVBQUFyZ0IsT0FFQSxPQUFBOEgsS0FBQStOLE9BQUEsV0FFQSxJQURBLElBQUE5VixFQUFBLEVBQ1VBLEVBQUFhLEVBQU9iLElBQ2pCLEdBQUFnSixFQUFBNEYsU0FBQTdHLEtBQUF1WSxFQUFBdGdCLElBQ0EsWUFNQXVnQixRQUFBLFNBQUFySSxFQUFBaFAsR0FDQSxJQUFBcUwsRUFDQXZVLEVBQUEsRUFDQWEsRUFBQWtILEtBQUE5SCxPQUNBNFosRUFBQSxHQUNBeUcsRUFBQSxpQkFBQXBJLEdBQUFsUCxFQUFBa1AsR0FHQSxJQUFBc0gsRUFBQXJNLEtBQUErRSxHQUNBLEtBQVVsWSxFQUFBYSxFQUFPYixJQUNqQixJQUFBdVUsRUFBQXhNLEtBQUEvSCxHQUEwQnVVLE9BQUFyTCxFQUF3QnFMLElBQUF6TCxXQUdsRCxHQUFBeUwsRUFBQWxDLFNBQUEsS0FBQWlPLEVBQ0FBLEVBQUFFLE1BQUFqTSxJQUFBLEVBR0EsSUFBQUEsRUFBQWxDLFVBQ0FySixFQUFBZ04sS0FBQUssZ0JBQUE5QixFQUFBMkQsSUFBQSxDQUVBMkIsRUFBQTliLEtBQUF3VyxHQUNBLE1BTUEsT0FBQXhNLEtBQUFtQyxVQUFBMlAsRUFBQTVaLE9BQUEsRUFBQStJLEVBQUEyTyxXQUFBa0MsT0FJQTJHLE1BQUEsU0FBQWhXLEdBR0EsT0FBQUEsRUFLQSxpQkFBQUEsRUFDQTFNLEVBQUF0QixLQUFBd00sRUFBQXdCLEdBQUF6QyxLQUFBLElBSUFqSyxFQUFBdEIsS0FBQXVMLEtBR0F5QyxFQUFBVixPQUFBVSxFQUFBLEdBQUFBLEdBWkF6QyxLQUFBLElBQUFBLEtBQUEsR0FBQWUsV0FBQWYsS0FBQTJDLFFBQUErVixVQUFBeGdCLFFBQUEsR0FnQkF5Z0IsSUFBQSxTQUFBelgsRUFBQUMsR0FDQSxPQUFBbkIsS0FBQW1DLFVBQ0FsQixFQUFBMk8sV0FDQTNPLEVBQUFxQixNQUFBdEMsS0FBQXhKLE1BQUF5SyxFQUFBQyxFQUFBQyxPQUtBeVgsUUFBQSxTQUFBMVgsR0FDQSxPQUFBbEIsS0FBQTJZLElBQUEsTUFBQXpYLEVBQ0FsQixLQUFBdUMsV0FBQXZDLEtBQUF1QyxXQUFBd0wsT0FBQTdNLE9BVUFELEVBQUF1QixLQUFBLENBQ0FsRyxPQUFBLFNBQUFtRyxHQUNBLElBQUFuRyxFQUFBbUcsRUFBQTFCLFdBQ0EsT0FBQXpFLEdBQUEsS0FBQUEsRUFBQWdPLFNBQUFoTyxFQUFBLE1BRUF4RyxRQUFBLFNBQUEyTSxHQUNBLE9BQUEwSCxFQUFBMUgsRUFBQSxlQUVBb1csYUFBQSxTQUFBcFcsRUFBQXhLLEVBQUFvZixHQUNBLE9BQUFsTixFQUFBMUgsRUFBQSxhQUFBNFUsSUFFQWpOLEtBQUEsU0FBQTNILEdBQ0EsT0FBQTZWLEVBQUE3VixFQUFBLGdCQUVBNFYsS0FBQSxTQUFBNVYsR0FDQSxPQUFBNlYsRUFBQTdWLEVBQUEsb0JBRUFxVyxRQUFBLFNBQUFyVyxHQUNBLE9BQUEwSCxFQUFBMUgsRUFBQSxnQkFFQWlXLFFBQUEsU0FBQWpXLEdBQ0EsT0FBQTBILEVBQUExSCxFQUFBLG9CQUVBc1csVUFBQSxTQUFBdFcsRUFBQXhLLEVBQUFvZixHQUNBLE9BQUFsTixFQUFBMUgsRUFBQSxjQUFBNFUsSUFFQTJCLFVBQUEsU0FBQXZXLEVBQUF4SyxFQUFBb2YsR0FDQSxPQUFBbE4sRUFBQTFILEVBQUEsa0JBQUE0VSxJQUVBRyxTQUFBLFNBQUEvVSxHQUNBLE9BQUErVSxHQUFBL1UsRUFBQTFCLFlBQUEsSUFBMENrUCxXQUFBeE4sSUFFMUN4TSxTQUFBLFNBQUF3TSxHQUNBLE9BQUErVSxFQUFBL1UsRUFBQXdOLGFBRUFtSSxTQUFBLFNBQUEzVixHQUNBLE9BQUE0SSxFQUFBNUksRUFBQSxVQUNBQSxFQUFBd1csaUJBTUE1TixFQUFBNUksRUFBQSxjQUNBQSxJQUFBeVcsU0FBQXpXLEdBR0F4QixFQUFBcUIsTUFBQSxHQUFBRyxFQUFBNEgsZUFFQyxTQUFBaFUsRUFBQVgsR0FDRHVMLEVBQUF2TCxHQUFBVyxHQUFBLFNBQUFnaEIsRUFBQW5XLEdBQ0EsSUFBQTRRLEVBQUE3USxFQUFBakYsSUFBQWdFLEtBQUF0SyxFQUFBMmhCLEdBdUJBLE1BckJBLFVBQUFoaEIsRUFBQTBGLE9BQUEsS0FDQW1GLEVBQUFtVyxHQUdBblcsR0FBQSxpQkFBQUEsSUFDQTRRLEVBQUE3USxFQUFBOE0sT0FBQTdNLEVBQUE0USxJQUdBOVIsS0FBQTlILE9BQUEsSUFHQWlnQixFQUFBOWhCLElBQ0E0SyxFQUFBMk8sV0FBQWtDLEdBSUFvRyxFQUFBOU0sS0FBQS9VLElBQ0F5YixFQUFBcUgsV0FJQW5aLEtBQUFtQyxVQUFBMlAsTUFHQSxJQUFBc0gsRUFBQSxvQkFzT0EsU0FBQUMsRUFBQUMsR0FDQSxPQUFBQSxFQUVBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQUEsRUFHQSxTQUFBQyxFQUFBL2lCLEVBQUFpRCxFQUFBQyxFQUFBOGYsR0FDQSxJQUFBQyxFQUVBLElBR0FqakIsR0FBQXVLLEVBQUFzQyxXQUFBb1csRUFBQWpqQixFQUFBaUUsU0FDQWdmLEVBQUFsbEIsS0FBQWlDLEdBQUFzUSxLQUFBck4sR0FBQWlnQixLQUFBaGdCLEdBR0dsRCxHQUFBdUssRUFBQXNDLFdBQUFvVyxFQUFBampCLEVBQUFLLE1BQ0g0aUIsRUFBQWxsQixLQUFBaUMsRUFBQWlELEVBQUFDLEdBUUFELEVBQUFoQixXQUFBWCxFQUFBLENBQUF0QixHQUFBcUYsTUFBQTJkLElBTUUsTUFBQWhqQixHQUlGa0QsRUFBQWpCLFdBQUFYLEVBQUEsQ0FBQXRCLEtBdk9BdUssRUFBQTRZLFVBQUEsU0FBQXRlLEdBSUFBLEVBQUEsaUJBQUFBLEVBbENBLFNBQUFBLEdBQ0EsSUFBQWtFLEVBQUEsR0FJQSxPQUhBd0IsRUFBQXVCLEtBQUFqSCxFQUFBbVAsTUFBQTBPLElBQUEsWUFBQWhRLEVBQUEwUSxHQUNBcmEsRUFBQXFhLElBQUEsSUFFQXJhLEVBOEJBc2EsQ0FBQXhlLEdBQ0EwRixFQUFBZ0MsT0FBQSxHQUFtQjFILEdBRW5CLElBQ0F5ZSxFQUdBQyxFQUdBQyxFQUdBQyxFQUdBNVMsRUFBQSxHQUdBekwsRUFBQSxHQUdBc2UsR0FBQSxFQUdBQyxFQUFBLFdBUUEsSUFMQUYsS0FBQTVlLEVBQUErZSxLQUlBSixFQUFBRixHQUFBLEVBQ1VsZSxFQUFBNUQsT0FBY2tpQixHQUFBLEVBRXhCLElBREFILEVBQUFuZSxFQUFBaVEsVUFDQXFPLEVBQUE3UyxFQUFBclAsU0FHQSxJQUFBcVAsRUFBQTZTLEdBQUF6aEIsTUFBQXNoQixFQUFBLEdBQUFBLEVBQUEsS0FDQTFlLEVBQUFnZixjQUdBSCxFQUFBN1MsRUFBQXJQLE9BQ0EraEIsR0FBQSxHQU1BMWUsRUFBQTBlLFNBQ0FBLEdBQUEsR0FHQUQsR0FBQSxFQUdBRyxJQUlBNVMsRUFEQTBTLEVBQ0EsR0FJQSxLQU1BbkMsRUFBQSxDQUdBYSxJQUFBLFdBMkJBLE9BMUJBcFIsSUFHQTBTLElBQUFELElBQ0FJLEVBQUE3UyxFQUFBclAsT0FBQSxFQUNBNEQsRUFBQTlGLEtBQUFpa0IsSUFHQSxTQUFBdEIsRUFBQW5ULEdBQ0F2RSxFQUFBdUIsS0FBQWdELEVBQUEsU0FBQTRELEVBQUFoRSxHQUNBbkUsRUFBQXNDLFdBQUE2QixHQUNBN0osRUFBQTJiLFFBQUFZLEVBQUE1RixJQUFBOU0sSUFDQW1DLEVBQUF2UixLQUFBb1AsR0FFUUEsS0FBQWxOLFFBQUEsV0FBQStJLEVBQUE3RSxLQUFBZ0osSUFHUnVULEVBQUF2VCxLQVRBLENBWU0xQyxXQUVOdVgsSUFBQUQsR0FDQUssS0FHQXJhLE1BSUF3YSxPQUFBLFdBWUEsT0FYQXZaLEVBQUF1QixLQUFBRSxVQUFBLFNBQUEwRyxFQUFBaEUsR0FFQSxJQURBLElBQUFxVCxHQUNBQSxFQUFBeFgsRUFBQTZELFFBQUFNLEVBQUFtQyxFQUFBa1IsS0FBQSxHQUNBbFIsRUFBQS9PLE9BQUFpZ0IsRUFBQSxHQUdBQSxHQUFBMkIsR0FDQUEsTUFJQXBhLE1BS0FrUyxJQUFBLFNBQUF4YyxHQUNBLE9BQUFBLEVBQ0F1TCxFQUFBNkQsUUFBQXBQLEVBQUE2UixJQUFBLEVBQ0FBLEVBQUFyUCxPQUFBLEdBSUFnYixNQUFBLFdBSUEsT0FIQTNMLElBQ0FBLEVBQUEsSUFFQXZILE1BTUF5YSxRQUFBLFdBR0EsT0FGQU4sRUFBQXJlLEVBQUEsR0FDQXlMLEVBQUEwUyxFQUFBLEdBQ0FqYSxNQUVBa0ssU0FBQSxXQUNBLE9BQUEzQyxHQU1BbVQsS0FBQSxXQUtBLE9BSkFQLEVBQUFyZSxFQUFBLEdBQ0FtZSxHQUFBRCxJQUNBelMsRUFBQTBTLEVBQUEsSUFFQWphLE1BRUFtYSxPQUFBLFdBQ0EsUUFBQUEsR0FJQVEsU0FBQSxTQUFBeFosRUFBQXFFLEdBU0EsT0FSQTJVLElBRUEzVSxFQUFBLENBQUFyRSxHQURBcUUsS0FBQSxJQUNBekosTUFBQXlKLEVBQUF6SixRQUFBeUosR0FDQTFKLEVBQUE5RixLQUFBd1AsR0FDQXdVLEdBQ0FLLEtBR0FyYSxNQUlBcWEsS0FBQSxXQUVBLE9BREF2QyxFQUFBNkMsU0FBQTNhLEtBQUEwQyxXQUNBMUMsTUFJQWthLE1BQUEsV0FDQSxRQUFBQSxJQUlBLE9BQUFwQyxHQTRDQTdXLEVBQUFnQyxPQUFBLENBRUEyWCxTQUFBLFNBQUFDLEdBQ0EsSUFBQUMsRUFBQSxDQUlBLHFCQUFBN1osRUFBQTRZLFVBQUEsVUFDQTVZLEVBQUE0WSxVQUFBLGFBQ0Esa0JBQUE1WSxFQUFBNFksVUFBQSxlQUNBNVksRUFBQTRZLFVBQUEsNkJBQ0EsaUJBQUE1WSxFQUFBNFksVUFBQSxlQUNBNVksRUFBQTRZLFVBQUEsOEJBRUFrQixFQUFBLFVBQ0FwZ0IsRUFBQSxDQUNBb2dCLE1BQUEsV0FDQSxPQUFBQSxHQUVBQyxPQUFBLFdBRUEsT0FEQTVmLEVBQUE0TCxLQUFBdEUsV0FBQWtYLEtBQUFsWCxXQUNBMUMsTUFFQWliLE1BQUEsU0FBQXZsQixHQUNBLE9BQUFpRixFQUFBNUQsS0FBQSxLQUFBckIsSUFJQXdsQixLQUFBLFdBQ0EsSUFBQUMsRUFBQXpZLFVBRUEsT0FBQXpCLEVBQUEyWixTQUFBLFNBQUFRLEdBQ0FuYSxFQUFBdUIsS0FBQXNZLEVBQUEsU0FBQTdpQixFQUFBb2pCLEdBR0EsSUFBQTNsQixFQUFBdUwsRUFBQXNDLFdBQUE0WCxFQUFBRSxFQUFBLE1BQUFGLEVBQUFFLEVBQUEsSUFLQWpnQixFQUFBaWdCLEVBQUEsZUFDQSxJQUFBQyxFQUFBNWxCLEtBQUFpRCxNQUFBcUgsS0FBQTBDLFdBQ0E0WSxHQUFBcmEsRUFBQXNDLFdBQUErWCxFQUFBM2dCLFNBQ0EyZ0IsRUFBQTNnQixVQUNBNGdCLFNBQUFILEVBQUFJLFFBQ0F4VSxLQUFBb1UsRUFBQXpoQixTQUNBaWdCLEtBQUF3QixFQUFBeGhCLFFBRUF3aEIsRUFBQUMsRUFBQSxXQUNBcmIsS0FDQXRLLEVBQUEsQ0FBQTRsQixHQUFBNVksZUFLQXlZLEVBQUEsT0FDTXhnQixXQUVONUQsS0FBQSxTQUFBMGtCLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQSxFQUNBLFNBQUFqaUIsRUFBQWtpQixFQUFBemdCLEVBQUFpUixFQUFBeVAsR0FDQSxrQkFDQSxJQUFBQyxFQUFBL2IsS0FDQXdGLEVBQUE5QyxVQUNBc1osRUFBQSxXQUNBLElBQUFWLEVBQUF2a0IsRUFLQSxLQUFBOGtCLEVBQUFELEdBQUEsQ0FRQSxJQUpBTixFQUFBalAsRUFBQTFULE1BQUFvakIsRUFBQXZXLE1BSUFwSyxFQUFBVCxVQUNBLFVBQUFzaEIsVUFBQSw0QkFPQWxsQixFQUFBdWtCLElBS0EsaUJBQUFBLEdBQ0EsbUJBQUFBLElBQ0FBLEVBQUF2a0IsS0FHQWtLLEVBQUFzQyxXQUFBeE0sR0FHQStrQixFQUNBL2tCLEVBQUF0QyxLQUNBNm1CLEVBQ0EzaEIsRUFBQWlpQixFQUFBeGdCLEVBQUFpZSxFQUFBeUMsR0FDQW5pQixFQUFBaWlCLEVBQUF4Z0IsRUFBQW1lLEVBQUF1QyxLQU9BRixJQUVBN2tCLEVBQUF0QyxLQUNBNm1CLEVBQ0EzaEIsRUFBQWlpQixFQUFBeGdCLEVBQUFpZSxFQUFBeUMsR0FDQW5pQixFQUFBaWlCLEVBQUF4Z0IsRUFBQW1lLEVBQUF1QyxHQUNBbmlCLEVBQUFpaUIsRUFBQXhnQixFQUFBaWUsRUFDQWplLEVBQUE4Z0IsZUFTQTdQLElBQUFnTixJQUNBMEMsT0FBQS9qQixFQUNBd04sRUFBQSxDQUFBOFYsS0FLQVEsR0FBQTFnQixFQUFBK2dCLGFBQUFKLEVBQUF2VyxNQUtBNFcsRUFBQU4sRUFDQUUsRUFDQSxXQUNBLElBQ0FBLElBQ1csTUFBQXBsQixHQUVYcUssRUFBQTJaLFNBQUF5QixlQUNBcGIsRUFBQTJaLFNBQUF5QixjQUFBemxCLEVBQ0F3bEIsRUFBQUUsWUFNQVQsRUFBQSxHQUFBRCxJQUlBdlAsSUFBQWtOLElBQ0F3QyxPQUFBL2pCLEVBQ0F3TixFQUFBLENBQUE1TyxJQUdBd0UsRUFBQW1oQixXQUFBUixFQUFBdlcsTUFTQXFXLEVBQ0FPLEtBS0FuYixFQUFBMlosU0FBQTRCLGVBQ0FKLEVBQUFFLFdBQUFyYixFQUFBMlosU0FBQTRCLGdCQUVBeG9CLEVBQUF5b0IsV0FBQUwsS0FLQSxPQUFBbmIsRUFBQTJaLFNBQUEsU0FBQVEsR0FHQU4sRUFBQSxNQUFBbkMsSUFDQWhmLEVBQ0EsRUFDQXloQixFQUNBbmEsRUFBQXNDLFdBQUFvWSxHQUNBQSxFQUNBdEMsRUFDQStCLEVBQUFjLGFBS0FwQixFQUFBLE1BQUFuQyxJQUNBaGYsRUFDQSxFQUNBeWhCLEVBQ0FuYSxFQUFBc0MsV0FBQWtZLEdBQ0FBLEVBQ0FwQyxJQUtBeUIsRUFBQSxNQUFBbkMsSUFDQWhmLEVBQ0EsRUFDQXloQixFQUNBbmEsRUFBQXNDLFdBQUFtWSxHQUNBQSxFQUNBbkMsTUFHTTVlLFdBS05BLFFBQUEsU0FBQWtILEdBQ0EsYUFBQUEsRUFBQVosRUFBQWdDLE9BQUFwQixFQUFBbEgsT0FHQVMsRUFBQSxHQTJEQSxPQXhEQTZGLEVBQUF1QixLQUFBc1ksRUFBQSxTQUFBN2lCLEVBQUFvakIsR0FDQSxJQUFBOVQsRUFBQThULEVBQUEsR0FDQXFCLEVBQUFyQixFQUFBLEdBS0ExZ0IsRUFBQTBnQixFQUFBLElBQUE5VCxFQUFBb1IsSUFHQStELEdBQ0FuVixFQUFBb1IsSUFDQSxXQUlBb0MsRUFBQTJCLEdBS0E1QixFQUFBLEVBQUE3aUIsR0FBQSxHQUFBd2lCLFFBR0FLLEVBQUEsTUFBQUosTUFPQW5ULEVBQUFvUixJQUFBMEMsRUFBQSxHQUFBaEIsTUFLQWpmLEVBQUFpZ0IsRUFBQSxlQUVBLE9BREFqZ0IsRUFBQWlnQixFQUFBLFdBQUFyYixPQUFBNUUsT0FBQXBELEVBQUFnSSxLQUFBMEMsV0FDQTFDLE1BTUE1RSxFQUFBaWdCLEVBQUEsV0FBQTlULEVBQUFvVCxXQUlBaGdCLFVBQUFTLEdBR0F5ZixHQUNBQSxFQUFBcG1CLEtBQUEyRyxLQUlBQSxHQUlBdWhCLEtBQUEsU0FBQUMsR0FDQSxJQUdBQyxFQUFBbmEsVUFBQXhLLE9BR0FELEVBQUE0a0IsRUFHQUMsRUFBQXJaLE1BQUF4TCxHQUNBOGtCLEVBQUFoaEIsRUFBQXRILEtBQUFpTyxXQUdBc2EsRUFBQS9iLEVBQUEyWixXQUdBcUMsRUFBQSxTQUFBaGxCLEdBQ0EsZ0JBQUF2QixHQUNBb21CLEVBQUE3a0IsR0FBQStILEtBQ0ErYyxFQUFBOWtCLEdBQUF5SyxVQUFBeEssT0FBQSxFQUFBNkQsRUFBQXRILEtBQUFpTyxXQUFBaE0sSUFDQW1tQixHQUNBRyxFQUFBYixZQUFBVyxFQUFBQyxLQU1BLEdBQUFGLEdBQUEsSUFDQXBELEVBQUFtRCxFQUFBSSxFQUFBaFcsS0FBQWlXLEVBQUFobEIsSUFBQTBCLFFBQUFxakIsRUFBQXBqQixRQUNBaWpCLEdBR0EsWUFBQUcsRUFBQWpDLFNBQ0E5WixFQUFBc0MsV0FBQXdaLEVBQUE5a0IsSUFBQThrQixFQUFBOWtCLEdBQUFsQixPQUVBLE9BQUFpbUIsRUFBQWptQixPQUtBLEtBQUFrQixLQUNBd2hCLEVBQUFzRCxFQUFBOWtCLEdBQUFnbEIsRUFBQWhsQixHQUFBK2tCLEVBQUFwakIsUUFHQSxPQUFBb2pCLEVBQUFyaUIsYUFPQSxJQUFBdWlCLEVBQUEseURBRUFqYyxFQUFBMlosU0FBQXlCLGNBQUEsU0FBQWplLEVBQUErZSxHQUlBbnBCLEVBQUFrQyxTQUFBbEMsRUFBQWtDLFFBQUFDLE1BQUFpSSxHQUFBOGUsRUFBQTlSLEtBQUFoTixFQUFBL0gsT0FDQXJDLEVBQUFrQyxRQUFBQyxLQUFBLDhCQUFBaUksRUFBQWdmLFFBQUFoZixFQUFBK2UsVUFPQWxjLEVBQUFvYyxlQUFBLFNBQUFqZixHQUNBcEssRUFBQXlvQixXQUFBLFdBQ0EsTUFBQXJlLEtBUUEsSUFBQWtmLEVBQUFyYyxFQUFBMlosV0FrREEsU0FBQTJDLElBQ0ExaUIsRUFBQTJpQixvQkFBQSxtQkFBQUQsR0FDQXZwQixFQUFBd3BCLG9CQUFBLE9BQUFELEdBQ0F0YyxFQUFBZ1gsUUFuREFoWCxFQUFBdkwsR0FBQXVpQixNQUFBLFNBQUF2aUIsR0FZQSxPQVZBNG5CLEVBQ0F2bUIsS0FBQXJCLEdBS0F1bEIsTUFBQSxTQUFBN2MsR0FDQTZDLEVBQUFvYyxlQUFBamYsS0FHQTRCLE1BR0FpQixFQUFBZ0MsT0FBQSxDQUdBYyxTQUFBLEVBSUEwWixVQUFBLEVBR0F4RixNQUFBLFNBQUF5RixLQUdBLElBQUFBLElBQUF6YyxFQUFBd2MsVUFBQXhjLEVBQUE4QyxXQUtBOUMsRUFBQThDLFNBQUEsR0FHQSxJQUFBMlosS0FBQXpjLEVBQUF3YyxVQUFBLEdBS0FILEVBQUFuQixZQUFBdGhCLEVBQUEsQ0FBQW9HLFFBSUFBLEVBQUFnWCxNQUFBbGhCLEtBQUF1bUIsRUFBQXZtQixLQWFBLGFBQUE4RCxFQUFBVCxZQUNBLFlBQUFTLEVBQUFULGFBQUFTLEVBQUFzUyxnQkFBQXdRLFNBR0EzcEIsRUFBQXlvQixXQUFBeGIsRUFBQWdYLFFBS0FwZCxFQUFBNFMsaUJBQUEsbUJBQUE4UCxHQUdBdnBCLEVBQUF5WixpQkFBQSxPQUFBOFAsSUFRQSxJQUFBSyxFQUFBLFNBQUF4YixFQUFBMU0sRUFBQTRKLEVBQUE1SSxFQUFBbW5CLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQTlsQixFQUFBLEVBQ0E2SyxFQUFBVixFQUFBbEssT0FDQThsQixFQUFBLE1BQUExZSxFQUdBLGNBQUEyQixFQUFBN0UsS0FBQWtELEdBRUEsSUFBQXJILEtBREE0bEIsR0FBQSxFQUNBdmUsRUFDQXNlLEVBQUF4YixFQUFBMU0sRUFBQXVDLEVBQUFxSCxFQUFBckgsSUFBQSxFQUFBNmxCLEVBQUFDLFFBSUUsUUFBQS9sQixJQUFBdEIsSUFDRm1uQixHQUFBLEVBRUE1YyxFQUFBc0MsV0FBQTdNLEtBQ0FxbkIsR0FBQSxHQUdBQyxJQUdBRCxHQUNBcm9CLEVBQUFqQixLQUFBMk4sRUFBQTFMLEdBQ0FoQixFQUFBLE9BSUFzb0IsRUFBQXRvQixFQUNBQSxFQUFBLFNBQUErTSxFQUFBbkQsRUFBQTVJLEdBQ0EsT0FBQXNuQixFQUFBdnBCLEtBQUF3TSxFQUFBd0IsR0FBQS9MLE1BS0FoQixHQUNBLEtBQVV1QyxFQUFBNkssRUFBUzdLLElBQ25CdkMsRUFDQTBNLEVBQUFuSyxHQUFBcUgsRUFBQXllLEVBQ0FybkIsRUFDQUEsRUFBQWpDLEtBQUEyTixFQUFBbkssS0FBQXZDLEVBQUEwTSxFQUFBbkssR0FBQXFILEtBTUEsT0FBQXVlLEVBQ0F6YixFQUlBNGIsRUFDQXRvQixFQUFBakIsS0FBQTJOLEdBR0FVLEVBQUFwTixFQUFBME0sRUFBQSxHQUFBOUMsR0FBQXdlLEdBRUFHLEVBQUEsU0FBQUMsR0FRQSxXQUFBQSxFQUFBNVQsVUFBQSxJQUFBNFQsRUFBQTVULFlBQUE0VCxFQUFBNVQsVUFNQSxTQUFBNlQsSUFDQW5lLEtBQUEyRCxRQUFBMUMsRUFBQTBDLFFBQUF3YSxFQUFBQyxNQUdBRCxFQUFBQyxJQUFBLEVBRUFELEVBQUE1cEIsVUFBQSxDQUVBc1gsTUFBQSxTQUFBcVMsR0FHQSxJQUFBeG5CLEVBQUF3bkIsRUFBQWxlLEtBQUEyRCxTQTRCQSxPQXpCQWpOLElBQ0FBLEVBQUEsR0FLQXVuQixFQUFBQyxLQUlBQSxFQUFBNVQsU0FDQTRULEVBQUFsZSxLQUFBMkQsU0FBQWpOLEVBTUFwQyxPQUFBcUMsZUFBQXVuQixFQUFBbGUsS0FBQTJELFFBQUEsQ0FDQWpOLFFBQ0FKLGNBQUEsTUFNQUksR0FFQUQsSUFBQSxTQUFBeW5CLEVBQUFobEIsRUFBQXhDLEdBQ0EsSUFBQTJuQixFQUNBeFMsRUFBQTdMLEtBQUE2TCxNQUFBcVMsR0FJQSxvQkFBQWhsQixFQUNBMlMsRUFBQTVLLEVBQUF3RCxVQUFBdkwsSUFBQXhDLE9BTUEsSUFBQTJuQixLQUFBbmxCLEVBQ0EyUyxFQUFBNUssRUFBQXdELFVBQUE0WixJQUFBbmxCLEVBQUFtbEIsR0FHQSxPQUFBeFMsR0FFQXJWLElBQUEsU0FBQTBuQixFQUFBNWUsR0FDQSxZQUFBdEgsSUFBQXNILEVBQ0FVLEtBQUE2TCxNQUFBcVMsR0FHQUEsRUFBQWxlLEtBQUEyRCxVQUFBdWEsRUFBQWxlLEtBQUEyRCxTQUFBMUMsRUFBQXdELFVBQUFuRixLQUVBc2UsT0FBQSxTQUFBTSxFQUFBNWUsRUFBQTVJLEdBYUEsWUFBQXNCLElBQUFzSCxHQUNBQSxHQUFBLGlCQUFBQSxRQUFBdEgsSUFBQXRCLEVBRUFzSixLQUFBeEosSUFBQTBuQixFQUFBNWUsSUFTQVUsS0FBQXZKLElBQUF5bkIsRUFBQTVlLEVBQUE1SSxRQUlBc0IsSUFBQXRCLElBQUE0SSxJQUVBa2IsT0FBQSxTQUFBMEQsRUFBQTVlLEdBQ0EsSUFBQXJILEVBQ0E0VCxFQUFBcVMsRUFBQWxlLEtBQUEyRCxTQUVBLFFBQUEzTCxJQUFBNlQsRUFBQSxDQUlBLFFBQUE3VCxJQUFBc0gsRUFBQSxDQWtCQXJILEdBWEFxSCxFQUpBbUUsTUFBQUMsUUFBQXBFLEdBSUFBLEVBQUF0RCxJQUFBaUYsRUFBQXdELFlBRUFuRixFQUFBMkIsRUFBQXdELFVBQUFuRixNQUlBdU0sRUFDQSxDQUFBdk0sR0FDQUEsRUFBQW9MLE1BQUEwTyxJQUFBLElBR0FsaEIsT0FFQSxLQUFBRCxZQUNBNFQsRUFBQXZNLEVBQUFySCxVQUtBRCxJQUFBc0gsR0FBQTJCLEVBQUFzRCxjQUFBc0gsTUFNQXFTLEVBQUE1VCxTQUNBNFQsRUFBQWxlLEtBQUEyRCxjQUFBM0wsU0FFQWttQixFQUFBbGUsS0FBQTJELFlBSUEyYSxRQUFBLFNBQUFKLEdBQ0EsSUFBQXJTLEVBQUFxUyxFQUFBbGUsS0FBQTJELFNBQ0EsWUFBQTNMLElBQUE2VCxJQUFBNUssRUFBQXNELGNBQUFzSCxLQUdBLElBQUEwUyxFQUFBLElBQUFKLEVBRUFLLEVBQUEsSUFBQUwsRUFjQU0sRUFBQSxnQ0FDQUMsRUFBQSxTQTJCQSxTQUFBQyxFQUFBbGMsRUFBQW5ELEVBQUFwRyxHQUNBLElBQUE3QyxFQUlBLFFBQUEyQixJQUFBa0IsR0FBQSxJQUFBdUosRUFBQTZILFNBSUEsR0FIQWpVLEVBQUEsUUFBQWlKLEVBQUF3RSxRQUFBNGEsRUFBQSxPQUFBN1ksY0FHQSxpQkFGQTNNLEVBQUF1SixFQUFBNkksYUFBQWpWLElBRUEsQ0FDQSxJQUNBNkMsRUFwQ0EsU0FBQUEsR0FDQSxlQUFBQSxHQUlBLFVBQUFBLElBSUEsU0FBQUEsRUFDQSxLQUlBQSxPQUFBLElBQ0FBLEVBR0F1bEIsRUFBQXJULEtBQUFsUyxHQUNBb0IsS0FBQUMsTUFBQXJCLEdBR0FBLEdBY0EwbEIsQ0FBQTFsQixHQUNJLE1BQUF0QyxJQUdKNG5CLEVBQUEvbkIsSUFBQWdNLEVBQUFuRCxFQUFBcEcsUUFFQUEsT0FBQWxCLEVBR0EsT0FBQWtCLEVBR0ErSCxFQUFBZ0MsT0FBQSxDQUNBcWIsUUFBQSxTQUFBN2IsR0FDQSxPQUFBK2IsRUFBQUYsUUFBQTdiLElBQUE4YixFQUFBRCxRQUFBN2IsSUFHQXZKLEtBQUEsU0FBQXVKLEVBQUFwTSxFQUFBNkMsR0FDQSxPQUFBc2xCLEVBQUFaLE9BQUFuYixFQUFBcE0sRUFBQTZDLElBR0EybEIsV0FBQSxTQUFBcGMsRUFBQXBNLEdBQ0Ftb0IsRUFBQWhFLE9BQUEvWCxFQUFBcE0sSUFLQXlvQixNQUFBLFNBQUFyYyxFQUFBcE0sRUFBQTZDLEdBQ0EsT0FBQXFsQixFQUFBWCxPQUFBbmIsRUFBQXBNLEVBQUE2QyxJQUdBNmxCLFlBQUEsU0FBQXRjLEVBQUFwTSxHQUNBa29CLEVBQUEvRCxPQUFBL1gsRUFBQXBNLE1BSUE0SyxFQUFBdkwsR0FBQXVOLE9BQUEsQ0FDQS9KLEtBQUEsU0FBQW9HLEVBQUE1SSxHQUNBLElBQUF1QixFQUFBNUIsRUFBQTZDLEVBQ0F1SixFQUFBekMsS0FBQSxHQUNBb00sRUFBQTNKLEtBQUFrRixXQUdBLFFBQUEzUCxJQUFBc0gsRUFBQSxDQUNBLEdBQUFVLEtBQUE5SCxTQUNBZ0IsRUFBQXNsQixFQUFBaG9CLElBQUFpTSxHQUVBLElBQUFBLEVBQUE2SCxXQUFBaVUsRUFBQS9uQixJQUFBaU0sRUFBQSxrQkFFQSxJQURBeEssRUFBQW1VLEVBQUFsVSxPQUNBRCxLQUlBbVUsRUFBQW5VLElBRUEsS0FEQTVCLEVBQUErVixFQUFBblUsR0FBQTVCLE1BQ0FOLFFBQUEsV0FDQU0sRUFBQTRLLEVBQUF3RCxVQUFBcE8sRUFBQTBGLE1BQUEsSUFDQTRpQixFQUFBbGMsRUFBQXBNLEVBQUE2QyxFQUFBN0MsS0FJQWtvQixFQUFBOW5CLElBQUFnTSxFQUFBLG1CQUlBLE9BQUF2SixFQUlBLHVCQUFBb0csRUFDQVUsS0FBQXdDLEtBQUEsV0FDQWdjLEVBQUEvbkIsSUFBQXVKLEtBQUFWLEtBSUFzZSxFQUFBNWQsS0FBQSxTQUFBdEosR0FDQSxJQUFBd0MsRUFPQSxHQUFBdUosUUFBQXpLLElBQUF0QixFQUtBLFlBQUFzQixLQURBa0IsRUFBQXNsQixFQUFBaG9CLElBQUFpTSxFQUFBbkQsSUFFQXBHLE9BTUFsQixLQURBa0IsRUFBQXlsQixFQUFBbGMsRUFBQW5ELElBRUFwRyxPQUlBLEVBSUE4RyxLQUFBd0MsS0FBQSxXQUdBZ2MsRUFBQS9uQixJQUFBdUosS0FBQVYsRUFBQTVJLE1BRUcsS0FBQUEsRUFBQWdNLFVBQUF4SyxPQUFBLFlBR0gybUIsV0FBQSxTQUFBdmYsR0FDQSxPQUFBVSxLQUFBd0MsS0FBQSxXQUNBZ2MsRUFBQWhFLE9BQUF4YSxLQUFBVixRQU1BMkIsRUFBQWdDLE9BQUEsQ0FDQW5ILE1BQUEsU0FBQTJHLEVBQUFyRyxFQUFBbEQsR0FDQSxJQUFBNEMsRUFFQSxHQUFBMkcsRUFZQSxPQVhBckcsTUFBQSxjQUNBTixFQUFBeWlCLEVBQUEvbkIsSUFBQWlNLEVBQUFyRyxHQUdBbEQsS0FDQTRDLEdBQUEySCxNQUFBQyxRQUFBeEssR0FDQTRDLEVBQUF5aUIsRUFBQVgsT0FBQW5iLEVBQUFyRyxFQUFBNkUsRUFBQTJELFVBQUExTCxJQUVBNEMsRUFBQTlGLEtBQUFrRCxJQUdBNEMsR0FBQSxJQUlBa2pCLFFBQUEsU0FBQXZjLEVBQUFyRyxHQUNBQSxLQUFBLEtBRUEsSUFBQU4sRUFBQW1GLEVBQUFuRixNQUFBMkcsRUFBQXJHLEdBQ0E2aUIsRUFBQW5qQixFQUFBNUQsT0FDQXhDLEVBQUFvRyxFQUFBaVEsUUFDQW1ULEVBQUFqZSxFQUFBa2UsWUFBQTFjLEVBQUFyRyxHQU1BLGVBQUExRyxJQUNBQSxFQUFBb0csRUFBQWlRLFFBQ0FrVCxLQUdBdnBCLElBSUEsT0FBQTBHLEdBQ0FOLEVBQUFzVCxRQUFBLHFCQUlBOFAsRUFBQUUsS0FDQTFwQixFQUFBakIsS0FBQWdPLEVBcEJBLFdBQ0F4QixFQUFBK2QsUUFBQXZjLEVBQUFyRyxJQW1CQThpQixLQUdBRCxHQUFBQyxHQUNBQSxFQUFBaE0sTUFBQW1ILFFBS0E4RSxZQUFBLFNBQUExYyxFQUFBckcsR0FDQSxJQUFBa0QsRUFBQWxELEVBQUEsYUFDQSxPQUFBbWlCLEVBQUEvbkIsSUFBQWlNLEVBQUFuRCxJQUFBaWYsRUFBQVgsT0FBQW5iLEVBQUFuRCxFQUFBLENBQ0E0VCxNQUFBalMsRUFBQTRZLFVBQUEsZUFBQWxCLElBQUEsV0FDQTRGLEVBQUEvRCxPQUFBL1gsRUFBQSxDQUFBckcsRUFBQSxRQUFBa0QsV0FNQTJCLEVBQUF2TCxHQUFBdU4sT0FBQSxDQUNBbkgsTUFBQSxTQUFBTSxFQUFBbEQsR0FDQSxJQUFBbW1CLEVBQUEsRUFRQSxNQU5BLGlCQUFBampCLElBQ0FsRCxFQUFBa0QsRUFDQUEsRUFBQSxLQUNBaWpCLEtBR0EzYyxVQUFBeEssT0FBQW1uQixFQUNBcGUsRUFBQW5GLE1BQUFrRSxLQUFBLEdBQUE1RCxRQUdBcEUsSUFBQWtCLEVBQ0E4RyxLQUNBQSxLQUFBd0MsS0FBQSxXQUNBLElBQUExRyxFQUFBbUYsRUFBQW5GLE1BQUFrRSxLQUFBNUQsRUFBQWxELEdBR0ErSCxFQUFBa2UsWUFBQW5mLEtBQUE1RCxHQUVBLE9BQUFBLEdBQUEsZUFBQU4sRUFBQSxJQUNBbUYsRUFBQStkLFFBQUFoZixLQUFBNUQsTUFJQTRpQixRQUFBLFNBQUE1aUIsR0FDQSxPQUFBNEQsS0FBQXdDLEtBQUEsV0FDQXZCLEVBQUErZCxRQUFBaGYsS0FBQTVELE1BR0FrakIsV0FBQSxTQUFBbGpCLEdBQ0EsT0FBQTRELEtBQUFsRSxNQUFBTSxHQUFBLFVBS0F6QixRQUFBLFNBQUF5QixFQUFBeUYsR0FDQSxJQUFBMEQsRUFDQWdhLEVBQUEsRUFDQUMsRUFBQXZlLEVBQUEyWixXQUNBdEwsRUFBQXRQLEtBQ0EvSCxFQUFBK0gsS0FBQTlILE9BQ0F5QixFQUFBLGFBQ0E0bEIsR0FDQUMsRUFBQXJELFlBQUE3TSxFQUFBLENBQUFBLEtBVUEsSUFOQSxpQkFBQWxULElBQ0F5RixFQUFBekYsRUFDQUEsT0FBQXBFLEdBRUFvRSxLQUFBLEtBRUFuRSxNQUNBc04sRUFBQWdaLEVBQUEvbkIsSUFBQThZLEVBQUFyWCxHQUFBbUUsRUFBQSxnQkFDQW1KLEVBQUEyTixRQUNBcU0sSUFDQWhhLEVBQUEyTixNQUFBeUYsSUFBQWhmLElBSUEsT0FEQUEsSUFDQTZsQixFQUFBN2tCLFFBQUFrSCxNQUdBLElBQUE0ZCxFQUFBLHNDQUFBQyxPQUVBQyxHQUFBLElBQUE3WCxPQUFBLGlCQUFBMlgsRUFBQSxtQkFHQUcsR0FBQSxnQ0FFQUMsR0FBQSxTQUFBcGQsRUFBQXlKLEdBT0EsZ0JBSEF6SixFQUFBeUosR0FBQXpKLEdBR0FxZCxNQUFBQyxTQUNBLEtBQUF0ZCxFQUFBcWQsTUFBQUMsU0FNQTllLEVBQUE0RixTQUFBcEUsRUFBQXFJLGNBQUFySSxJQUVBLFNBQUF4QixFQUFBK2UsSUFBQXZkLEVBQUEsWUFHQXdkLEdBQUEsU0FBQXhkLEVBQUFsSCxFQUFBeEQsRUFBQXlOLEdBQ0EsSUFBQW5ELEVBQUFoTSxFQUNBNnBCLEVBQUEsR0FHQSxJQUFBN3BCLEtBQUFrRixFQUNBMmtCLEVBQUE3cEIsR0FBQW9NLEVBQUFxZCxNQUFBenBCLEdBQ0FvTSxFQUFBcWQsTUFBQXpwQixHQUFBa0YsRUFBQWxGLEdBTUEsSUFBQUEsS0FIQWdNLEVBQUF0SyxFQUFBWSxNQUFBOEosRUFBQStDLEdBQUEsSUFHQWpLLEVBQ0FrSCxFQUFBcWQsTUFBQXpwQixHQUFBNnBCLEVBQUE3cEIsR0FHQSxPQUFBZ00sR0FNQSxTQUFBOGQsR0FBQTFkLEVBQUE0YixFQUFBK0IsRUFBQUMsR0FDQSxJQUFBQyxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsR0FDQUMsRUFBQUosRUFDQSxXQUNBLE9BQUFBLEVBQUE3VCxPQUVBLFdBQ0EsT0FBQXZMLEVBQUErZSxJQUFBdmQsRUFBQTRiLEVBQUEsS0FFQXFDLEVBQUFELElBQ0FFLEVBQUFQLEtBQUEsS0FBQW5mLEVBQUEyZixVQUFBdkMsR0FBQSxTQUdBd0MsR0FBQTVmLEVBQUEyZixVQUFBdkMsSUFBQSxPQUFBc0MsSUFBQUQsSUFDQWYsR0FBQTVVLEtBQUE5SixFQUFBK2UsSUFBQXZkLEVBQUE0YixJQUVBLEdBQUF3QyxLQUFBLEtBQUFGLEVBQUEsQ0FHQUEsS0FBQUUsRUFBQSxHQUdBVCxLQUFBLEdBR0FTLEdBQUFILEdBQUEsRUFFQSxHQU9BRyxHQUhBTixLQUFBLEtBSUF0ZixFQUFBNmUsTUFBQXJkLEVBQUE0YixFQUFBd0MsRUFBQUYsU0FLQUosT0FBQUUsSUFBQUMsSUFBQSxJQUFBSCxLQUFBQyxHQWlCQSxPQWJBSixJQUNBUyxPQUFBSCxHQUFBLEVBR0FKLEVBQUFGLEVBQUEsR0FDQVMsR0FBQVQsRUFBQSxNQUFBQSxFQUFBLElBQ0FBLEVBQUEsR0FDQUMsSUFDQUEsRUFBQU0sT0FDQU4sRUFBQTdPLE1BQUFxUCxFQUNBUixFQUFBdGQsSUFBQXVkLElBR0FBLEVBSUEsSUFBQVEsR0FBQSxHQUVBLFNBQUFDLEdBQUF0ZSxHQUNBLElBQUF3UyxFQUNBcFUsRUFBQTRCLEVBQUFxSSxjQUNBTyxFQUFBNUksRUFBQTRJLFNBQ0EwVSxFQUFBZSxHQUFBelYsR0FFQSxPQUFBMFUsSUFJQTlLLEVBQUFwVSxFQUFBbWdCLEtBQUE5bEIsWUFBQTJGLEVBQUEvRixjQUFBdVEsSUFDQTBVLEVBQUE5ZSxFQUFBK2UsSUFBQS9LLEVBQUEsV0FFQUEsRUFBQWxVLFdBQUFDLFlBQUFpVSxHQUVBLFNBQUE4SyxJQUNBQSxFQUFBLFNBRUFlLEdBQUF6VixHQUFBMFUsRUFFQUEsR0FHQSxTQUFBa0IsR0FBQTNSLEVBQUE0UixHQU9BLElBTkEsSUFBQW5CLEVBQUF0ZCxFQUNBMGUsRUFBQSxHQUNBMUksRUFBQSxFQUNBdmdCLEVBQUFvWCxFQUFBcFgsT0FHUXVnQixFQUFBdmdCLEVBQWdCdWdCLEtBQ3hCaFcsRUFBQTZNLEVBQUFtSixJQUNBcUgsUUFJQUMsRUFBQXRkLEVBQUFxZCxNQUFBQyxRQUNBbUIsR0FLQSxTQUFBbkIsSUFDQW9CLEVBQUExSSxHQUFBOEYsRUFBQS9uQixJQUFBaU0sRUFBQSxpQkFDQTBlLEVBQUExSSxLQUNBaFcsRUFBQXFkLE1BQUFDLFFBQUEsS0FHQSxLQUFBdGQsRUFBQXFkLE1BQUFDLFNBQUFGLEdBQUFwZCxLQUNBMGUsRUFBQTFJLEdBQUFzSSxHQUFBdGUsS0FHQSxTQUFBc2QsSUFDQW9CLEVBQUExSSxHQUFBLE9BR0E4RixFQUFBOW5CLElBQUFnTSxFQUFBLFVBQUFzZCxLQU1BLElBQUF0SCxFQUFBLEVBQWlCQSxFQUFBdmdCLEVBQWdCdWdCLElBQ2pDLE1BQUEwSSxFQUFBMUksS0FDQW5KLEVBQUFtSixHQUFBcUgsTUFBQUMsUUFBQW9CLEVBQUExSSxJQUlBLE9BQUFuSixFQUdBck8sRUFBQXZMLEdBQUF1TixPQUFBLENBQ0FpZSxLQUFBLFdBQ0EsT0FBQUQsR0FBQWpoQixNQUFBLElBRUFvaEIsS0FBQSxXQUNBLE9BQUFILEdBQUFqaEIsT0FFQXFoQixPQUFBLFNBQUF0RyxHQUNBLHdCQUFBQSxFQUNBQSxFQUFBL2EsS0FBQWtoQixPQUFBbGhCLEtBQUFvaEIsT0FHQXBoQixLQUFBd0MsS0FBQSxXQUNBcWQsR0FBQTdmLE1BQ0FpQixFQUFBakIsTUFBQWtoQixPQUVBamdCLEVBQUFqQixNQUFBb2hCLFlBS0EsSUFBQUUsR0FBQSx3QkFFQUMsR0FBQSxpQ0FFQUMsR0FBQSw0QkFLQUMsR0FBQSxDQUdBQyxPQUFBLCtDQUtBQyxNQUFBLHlCQUNBQyxJQUFBLDhDQUNBQyxHQUFBLHdDQUNBQyxHQUFBLGlEQUVBQyxTQUFBLFdBVUEsU0FBQUMsR0FBQTdnQixFQUFBZ04sR0FJQSxJQUFBOUwsRUFZQSxPQVRBQSxPQURBLElBQUFsQixFQUFBOEoscUJBQ0E5SixFQUFBOEoscUJBQUFrRCxHQUFBLFVBRUUsSUFBQWhOLEVBQUF1SyxpQkFDRnZLLEVBQUF1SyxpQkFBQXlDLEdBQUEsS0FHQSxRQUdBblcsSUFBQW1XLE1BQUE5QyxFQUFBbEssRUFBQWdOLEdBQ0FsTixFQUFBcUIsTUFBQSxDQUFBbkIsR0FBQWtCLEdBR0FBLEVBS0EsU0FBQTRmLEdBQUE3ZixFQUFBOGYsR0FJQSxJQUhBLElBQUFqcUIsRUFBQSxFQUNBYSxFQUFBc0osRUFBQWxLLE9BRVFELEVBQUFhLEVBQU9iLElBQ2ZzbUIsRUFBQTluQixJQUNBMkwsRUFBQW5LLEdBQ0EsY0FDQWlxQixHQUFBM0QsRUFBQS9uQixJQUFBMHJCLEVBQUFqcUIsR0FBQSxlQXZDQXdwQixHQUFBVSxTQUFBVixHQUFBQyxPQUVBRCxHQUFBVyxNQUFBWCxHQUFBWSxNQUFBWixHQUFBYSxTQUFBYixHQUFBYyxRQUFBZCxHQUFBRSxNQUNBRixHQUFBZSxHQUFBZixHQUFBSyxHQTBDQSxJQThGQVcsR0FDQXBVLEdBL0ZBcVUsR0FBQSxZQUVBLFNBQUFDLEdBQUF2Z0IsRUFBQWpCLEVBQUF5aEIsRUFBQUMsRUFBQUMsR0FPQSxJQU5BLElBQUFyZ0IsRUFBQThDLEVBQUE0SSxFQUFBNFUsRUFBQWxjLEVBQUFwTCxFQUNBdW5CLEVBQUE3aEIsRUFBQThoQix5QkFDQUMsRUFBQSxHQUNBanJCLEVBQUEsRUFDQWEsRUFBQXNKLEVBQUFsSyxPQUVRRCxFQUFBYSxFQUFPYixJQUdmLElBRkF3SyxFQUFBTCxFQUFBbkssS0FFQSxJQUFBd0ssRUFHQSxjQUFBeEIsRUFBQTdFLEtBQUFxRyxHQUlBeEIsRUFBQXFCLE1BQUE0Z0IsRUFBQXpnQixFQUFBNkgsU0FBQSxDQUFBN0gsV0FHSSxHQUFBaWdCLEdBQUF0WCxLQUFBM0ksR0FJQSxDQVVKLElBVEE4QyxLQUFBeWQsRUFBQTluQixZQUFBaUcsRUFBQXJHLGNBQUEsUUFHQXFULEdBQUFvVCxHQUFBeFcsS0FBQXRJLElBQUEsWUFBQW9ELGNBQ0FrZCxFQUFBdEIsR0FBQXRULElBQUFzVCxHQUFBTSxTQUNBeGMsRUFBQTZJLFVBQUEyVSxFQUFBLEdBQUE5aEIsRUFBQWtpQixjQUFBMWdCLEdBQUFzZ0IsRUFBQSxHQUdBdG5CLEVBQUFzbkIsRUFBQSxHQUNBdG5CLEtBQ0E4SixJQUFBbU0sVUFLQXpRLEVBQUFxQixNQUFBNGdCLEVBQUEzZCxFQUFBOEUsYUFHQTlFLEVBQUF5ZCxFQUFBL1MsWUFHQUQsWUFBQSxRQXpCQWtULEVBQUFsdEIsS0FBQW1MLEVBQUFpaUIsZUFBQTNnQixJQWtDQSxJQUhBdWdCLEVBQUFoVCxZQUFBLEdBRUEvWCxFQUFBLEVBQ0F3SyxFQUFBeWdCLEVBQUFqckIsTUFHQSxHQUFBNHFCLEdBQUE1aEIsRUFBQTZELFFBQUFyQyxFQUFBb2dCLElBQUEsRUFDQUMsR0FDQUEsRUFBQTlzQixLQUFBeU0sUUFnQkEsR0FYQW9FLEVBQUE1RixFQUFBNEYsU0FBQXBFLEVBQUFxSSxjQUFBckksR0FHQThDLEVBQUF5YyxHQUFBZ0IsRUFBQTluQixZQUFBdUgsR0FBQSxVQUdBb0UsR0FDQW9iLEdBQUExYyxHQUlBcWQsRUFFQSxJQURBbm5CLEVBQUEsRUFDQWdILEVBQUE4QyxFQUFBOUosTUFDQStsQixHQUFBcFcsS0FBQTNJLEVBQUFyRyxNQUFBLEtBQ0F3bUIsRUFBQTVzQixLQUFBeU0sR0FNQSxPQUFBdWdCLEVBTUFQLEdBREE1bkIsRUFBQW9vQix5QkFDQS9uQixZQUFBTCxFQUFBQyxjQUFBLFNBQ0F1VCxHQUFBeFQsRUFBQUMsY0FBQSxVQU1BeVEsYUFBQSxnQkFDQThDLEdBQUE5QyxhQUFBLHFCQUNBOEMsR0FBQTlDLGFBQUEsWUFFQWtYLEdBQUF2bkIsWUFBQW1ULElBSUEzTixFQUFBMmlCLFdBQUFaLEdBQUFhLFdBQUEsR0FBQUEsV0FBQSxHQUFBNVIsVUFBQXFCLFFBSUEwUCxHQUFBclUsVUFBQSx5QkFDQTFOLEVBQUE2aUIsaUJBQUFkLEdBQUFhLFdBQUEsR0FBQTVSLFVBQUF1RixhQUVBLElBQUE5SixHQUFBdFMsRUFBQXNTLGdCQUtBcVcsR0FBQSxPQUNBQyxHQUFBLGlEQUNBQyxHQUFBLHNCQUVBLFNBQUFDLEtBQ0EsU0FHQSxTQUFBQyxLQUNBLFNBS0EsU0FBQUMsS0FDQSxJQUNBLE9BQUFocEIsRUFBQTZYLGNBQ0UsTUFBQXpiLEtBR0YsU0FBQTZzQixHQUFBcmhCLEVBQUFzaEIsRUFBQTdpQixFQUFBaEksRUFBQXhELEVBQUFzdUIsR0FDQSxJQUFBQyxFQUFBN25CLEVBR0Esb0JBQUEybkIsRUFBQSxDQVNBLElBQUEzbkIsSUFOQSxpQkFBQThFLElBR0FoSSxLQUFBZ0ksRUFDQUEsT0FBQWxKLEdBRUErckIsRUFDQUQsR0FBQXJoQixFQUFBckcsRUFBQThFLEVBQUFoSSxFQUFBNnFCLEVBQUEzbkIsR0FBQTRuQixHQUVBLE9BQUF2aEIsRUFzQkEsR0FuQkEsTUFBQXZKLEdBQUEsTUFBQXhELEdBR0FBLEVBQUF3TCxFQUNBaEksRUFBQWdJLE9BQUFsSixHQUNFLE1BQUF0QyxJQUNGLGlCQUFBd0wsR0FHQXhMLEVBQUF3RCxFQUNBQSxPQUFBbEIsSUFJQXRDLEVBQUF3RCxFQUNBQSxFQUFBZ0ksRUFDQUEsT0FBQWxKLEtBR0EsSUFBQXRDLEVBQ0FBLEVBQUFrdUIsUUFDRSxJQUFBbHVCLEVBQ0YsT0FBQStNLEVBZUEsT0FaQSxJQUFBdWhCLElBQ0FDLEVBQUF2dUIsR0FDQUEsRUFBQSxTQUFBd3VCLEdBSUEsT0FEQWpqQixJQUFBa2pCLElBQUFELEdBQ0FELEVBQUF0ckIsTUFBQXFILEtBQUEwQyxhQUlBMkMsS0FBQTRlLEVBQUE1ZSxPQUFBNGUsRUFBQTVlLEtBQUFwRSxFQUFBb0UsU0FFQTVDLEVBQUFELEtBQUEsV0FDQXZCLEVBQUFpakIsTUFBQXZMLElBQUEzWSxLQUFBK2pCLEVBQUFydUIsRUFBQXdELEVBQUFnSSxLQVFBRCxFQUFBaWpCLE1BQUEsQ0FFQXJrQixPQUFBLEdBRUE4WSxJQUFBLFNBQUFsVyxFQUFBc2hCLEVBQUExWCxFQUFBblQsRUFBQWdJLEdBRUEsSUFBQWtqQixFQUFBQyxFQUFBOWUsRUFDQStlLEVBQUFsdEIsRUFBQW10QixFQUNBekksRUFBQTBJLEVBQUFwb0IsRUFBQXFvQixFQUFBQyxFQUNBQyxFQUFBcEcsRUFBQS9uQixJQUFBaU0sR0FHQSxHQUFBa2lCLEVBdUNBLElBbENBdFksWUFFQUEsR0FEQStYLEVBQUEvWCxHQUNBQSxRQUNBbkwsRUFBQWtqQixFQUFBbGpCLFVBS0FBLEdBQ0FELEVBQUFnTixLQUFBSyxnQkFBQW5CLEdBQUFqTSxHQUlBbUwsRUFBQWhILE9BQ0FnSCxFQUFBaEgsS0FBQXBFLEVBQUFvRSxTQUlBaWYsRUFBQUssRUFBQUwsVUFDQUEsRUFBQUssRUFBQUwsT0FBQSxLQUVBRCxFQUFBTSxFQUFBQyxVQUNBUCxFQUFBTSxFQUFBQyxPQUFBLFNBQUFodUIsR0FJQSxnQkFBQXFLLEtBQUFpakIsTUFBQVcsWUFBQWp1QixFQUFBd0YsS0FDQTZFLEVBQUFpakIsTUFBQVksU0FBQW5zQixNQUFBOEosRUFBQUMsZ0JBQUExSyxJQU1BWixHQURBMnNCLE1BQUEsSUFBQXJaLE1BQUEwTyxJQUFBLE1BQ0FsaEIsT0FDQWQsS0FFQWdGLEVBQUFzb0IsR0FEQW5mLEVBQUFtZSxHQUFBM1ksS0FBQWdaLEVBQUEzc0IsS0FBQSxJQUNBLEdBQ0FxdEIsR0FBQWxmLEVBQUEsUUFBQUssTUFBQSxLQUFBNUMsT0FHQTVHLElBS0EwZixFQUFBN2EsRUFBQWlqQixNQUFBcEksUUFBQTFmLElBQUEsR0FHQUEsR0FBQThFLEVBQUE0YSxFQUFBaUosYUFBQWpKLEVBQUFrSixXQUFBNW9CLEVBR0EwZixFQUFBN2EsRUFBQWlqQixNQUFBcEksUUFBQTFmLElBQUEsR0FHQW1vQixFQUFBdGpCLEVBQUFnQyxPQUFBLENBQ0E3RyxPQUNBc29CLFdBQ0F4ckIsT0FDQW1ULFVBQ0FoSCxLQUFBZ0gsRUFBQWhILEtBQ0FuRSxXQUNBMEgsYUFBQTFILEdBQUFELEVBQUFvTyxLQUFBM0UsTUFBQTlCLGFBQUF3QyxLQUFBbEssR0FDQStqQixVQUFBUixFQUFBdm5CLEtBQUEsTUFDSWtuQixJQUdKSSxFQUFBRixFQUFBbG9CLE9BQ0Fvb0IsRUFBQUYsRUFBQWxvQixHQUFBLElBQ0E4b0IsY0FBQSxFQUdBcEosRUFBQXFKLFFBQ0EsSUFBQXJKLEVBQUFxSixNQUFBMXdCLEtBQUFnTyxFQUFBdkosRUFBQXVyQixFQUFBSixJQUVBNWhCLEVBQUFnTCxrQkFDQWhMLEVBQUFnTCxpQkFBQXJSLEVBQUFpb0IsSUFLQXZJLEVBQUFuRCxNQUNBbUQsRUFBQW5ELElBQUFsa0IsS0FBQWdPLEVBQUE4aEIsR0FFQUEsRUFBQWxZLFFBQUFoSCxPQUNBa2YsRUFBQWxZLFFBQUFoSCxLQUFBZ0gsRUFBQWhILE9BS0FuRSxFQUNBc2pCLEVBQUFoc0IsT0FBQWdzQixFQUFBVSxnQkFBQSxFQUFBWCxHQUVBQyxFQUFBeHVCLEtBQUF1dUIsR0FJQXRqQixFQUFBaWpCLE1BQUFya0IsT0FBQXpELElBQUEsSUFNQW9lLE9BQUEsU0FBQS9YLEVBQUFzaEIsRUFBQTFYLEVBQUFuTCxFQUFBa2tCLEdBRUEsSUFBQTNwQixFQUFBNHBCLEVBQUE5ZixFQUNBK2UsRUFBQWx0QixFQUFBbXRCLEVBQ0F6SSxFQUFBMEksRUFBQXBvQixFQUFBcW9CLEVBQUFDLEVBQ0FDLEVBQUFwRyxFQUFBRCxRQUFBN2IsSUFBQThiLEVBQUEvbkIsSUFBQWlNLEdBRUEsR0FBQWtpQixJQUFBTCxFQUFBSyxFQUFBTCxRQUFBLENBT0EsSUFEQWx0QixHQURBMnNCLE1BQUEsSUFBQXJaLE1BQUEwTyxJQUFBLE1BQ0FsaEIsT0FDQWQsS0FNQSxHQUpBZ0YsRUFBQXNvQixHQURBbmYsRUFBQW1lLEdBQUEzWSxLQUFBZ1osRUFBQTNzQixLQUFBLElBQ0EsR0FDQXF0QixHQUFBbGYsRUFBQSxRQUFBSyxNQUFBLEtBQUE1QyxPQUdBNUcsRUFBQSxDQWVBLElBUkEwZixFQUFBN2EsRUFBQWlqQixNQUFBcEksUUFBQTFmLElBQUEsR0FFQW9vQixFQUFBRixFQURBbG9CLEdBQUE4RSxFQUFBNGEsRUFBQWlKLGFBQUFqSixFQUFBa0osV0FBQTVvQixJQUNBLEdBQ0FtSixJQUFBLElBQ0EsSUFBQXVDLE9BQUEsVUFBQTJjLEVBQUF2bkIsS0FBQSw0QkFHQW1vQixFQUFBNXBCLEVBQUErb0IsRUFBQXRzQixPQUNBdUQsS0FDQThvQixFQUFBQyxFQUFBL29CLElBRUEycEIsR0FBQVYsSUFBQUgsRUFBQUcsVUFDQXJZLEtBQUFoSCxPQUFBa2YsRUFBQWxmLE1BQ0FFLE1BQUE2RixLQUFBbVosRUFBQVUsWUFDQS9qQixPQUFBcWpCLEVBQUFyakIsV0FDQSxPQUFBQSxJQUFBcWpCLEVBQUFyakIsWUFDQXNqQixFQUFBaHNCLE9BQUFpRCxFQUFBLEdBRUE4b0IsRUFBQXJqQixVQUNBc2pCLEVBQUFVLGdCQUVBcEosRUFBQXRCLFFBQ0FzQixFQUFBdEIsT0FBQS9sQixLQUFBZ08sRUFBQThoQixJQU9BYyxJQUFBYixFQUFBdHNCLFNBQ0E0akIsRUFBQXdKLFdBQ0EsSUFBQXhKLEVBQUF3SixTQUFBN3dCLEtBQUFnTyxFQUFBZ2lCLEVBQUFFLEVBQUFDLFNBRUEzakIsRUFBQXNrQixZQUFBOWlCLEVBQUFyRyxFQUFBdW9CLEVBQUFDLGVBR0FOLEVBQUFsb0IsU0ExQ0EsSUFBQUEsS0FBQWtvQixFQUNBcmpCLEVBQUFpakIsTUFBQTFKLE9BQUEvWCxFQUFBckcsRUFBQTJuQixFQUFBM3NCLEdBQUFpVixFQUFBbkwsR0FBQSxHQThDQUQsRUFBQXNELGNBQUErZixJQUNBL0YsRUFBQS9ELE9BQUEvWCxFQUFBLG1CQUlBcWlCLFNBQUEsU0FBQVUsR0FHQSxJQUVBdnRCLEVBQUF3RCxFQUFBNEcsRUFBQXlQLEVBQUF5UyxFQUFBa0IsRUFGQXZCLEVBQUFqakIsRUFBQWlqQixNQUFBd0IsSUFBQUYsR0FHQWhnQixFQUFBLElBQUEvQixNQUFBZixVQUFBeEssUUFDQXNzQixHQUFBakcsRUFBQS9uQixJQUFBd0osS0FBQSxlQUFvRGtrQixFQUFBOW5CLE9BQUEsR0FDcEQwZixFQUFBN2EsRUFBQWlqQixNQUFBcEksUUFBQW9JLEVBQUE5bkIsT0FBQSxHQUtBLElBRkFvSixFQUFBLEdBQUEwZSxFQUVBanNCLEVBQUEsRUFBY0EsRUFBQXlLLFVBQUF4SyxPQUFzQkQsSUFDcEN1TixFQUFBdk4sR0FBQXlLLFVBQUF6SyxHQU1BLEdBSEFpc0IsRUFBQXlCLGVBQUEzbEIsTUFHQThiLEVBQUE4SixjQUFBLElBQUE5SixFQUFBOEosWUFBQW54QixLQUFBdUwsS0FBQWtrQixHQUFBLENBU0EsSUFKQXVCLEVBQUF4a0IsRUFBQWlqQixNQUFBTSxTQUFBL3ZCLEtBQUF1TCxLQUFBa2tCLEVBQUFNLEdBR0F2c0IsRUFBQSxHQUNBNlosRUFBQTJULEVBQUF4dEIsUUFBQWlzQixFQUFBMkIsd0JBSUEsSUFIQTNCLEVBQUE0QixjQUFBaFUsRUFBQXJQLEtBRUFoSCxFQUFBLEdBQ0E4b0IsRUFBQXpTLEVBQUEwUyxTQUFBL29CLFFBQ0F5b0IsRUFBQTZCLGlDQUlBN0IsRUFBQThCLGFBQUE5QixFQUFBOEIsV0FBQTVhLEtBQUFtWixFQUFBVSxhQUVBZixFQUFBSyxZQUNBTCxFQUFBaHJCLEtBQUFxckIsRUFBQXJyQixVQUtBbEIsS0FIQXFLLElBQUFwQixFQUFBaWpCLE1BQUFwSSxRQUFBeUksRUFBQUcsV0FBQSxJQUErREUsUUFDL0RMLEVBQUFsWSxTQUFBMVQsTUFBQW1aLEVBQUFyUCxLQUFBK0MsTUFHQSxLQUFBMGUsRUFBQTdvQixPQUFBZ0gsS0FDQTZoQixFQUFBK0IsaUJBQ0EvQixFQUFBZ0Msb0JBWUEsT0FKQXBLLEVBQUFxSyxjQUNBckssRUFBQXFLLGFBQUExeEIsS0FBQXVMLEtBQUFra0IsR0FHQUEsRUFBQTdvQixTQUdBbXBCLFNBQUEsU0FBQU4sRUFBQU0sR0FDQSxJQUFBdnNCLEVBQUFzc0IsRUFBQTVVLEVBQUF5VyxFQUFBQyxFQUNBWixFQUFBLEdBQ0FQLEVBQUFWLEVBQUFVLGNBQ0ExWSxFQUFBMFgsRUFBQTdnQixPQUdBLEdBQUE2aEIsR0FJQTFZLEVBQUFsQyxZQU9BLFVBQUE0WixFQUFBOW5CLE1BQUE4bkIsRUFBQTlRLFFBQUEsR0FFQSxLQUFVNUcsSUFBQXhNLEtBQWN3TSxJQUFBekwsWUFBQWYsS0FJeEIsT0FBQXdNLEVBQUFsQyxXQUFBLFVBQUE0WixFQUFBOW5CLE9BQUEsSUFBQW9RLEVBQUF0QyxVQUFBLENBR0EsSUFGQWtjLEVBQUEsR0FDQUMsRUFBQSxHQUNBcHVCLEVBQUEsRUFBaUJBLEVBQUFpdEIsRUFBbUJqdEIsU0FNcENELElBQUFxdUIsRUFGQTFXLEdBSEE0VSxFQUFBQyxFQUFBdnNCLElBR0FpSixTQUFBLE9BR0FtbEIsRUFBQTFXLEdBQUE0VSxFQUFBM2IsYUFDQTNILEVBQUEwTyxFQUFBM1AsTUFBQXlZLE1BQUFqTSxJQUFBLEVBQ0F2TCxFQUFBZ04sS0FBQTBCLEVBQUEzUCxLQUFBLE1BQUF3TSxJQUFBdFUsUUFFQW11QixFQUFBMVcsSUFDQXlXLEVBQUFwd0IsS0FBQXV1QixHQUdBNkIsRUFBQWx1QixRQUNBdXRCLEVBQUF6dkIsS0FBQSxDQUEwQnlNLEtBQUErSixFQUFBZ1ksU0FBQTRCLElBWTFCLE9BTEE1WixFQUFBeE0sS0FDQWtsQixFQUFBVixFQUFBdHNCLFFBQ0F1dEIsRUFBQXp2QixLQUFBLENBQXVCeU0sS0FBQStKLEVBQUFnWSxXQUFBem9CLE1BQUFtcEIsS0FHdkJPLEdBR0FhLFFBQUEsU0FBQWp3QixFQUFBa3dCLEdBQ0FqeUIsT0FBQXFDLGVBQUFzSyxFQUFBdWxCLE1BQUFqeUIsVUFBQThCLEVBQUEsQ0FDQUUsWUFBQSxFQUNBRCxjQUFBLEVBRUFFLElBQUF5SyxFQUFBc0MsV0FBQWdqQixHQUNBLFdBQ0EsR0FBQXZtQixLQUFBeW1CLGNBQ0EsT0FBQUYsRUFBQXZtQixLQUFBeW1CLGdCQUdBLFdBQ0EsR0FBQXptQixLQUFBeW1CLGNBQ0EsT0FBQXptQixLQUFBeW1CLGNBQUFwd0IsSUFJQUksSUFBQSxTQUFBQyxHQUNBcEMsT0FBQXFDLGVBQUFxSixLQUFBM0osRUFBQSxDQUNBRSxZQUFBLEVBQ0FELGNBQUEsRUFDQW93QixVQUFBLEVBQ0Fod0IsY0FNQWd2QixJQUFBLFNBQUFlLEdBQ0EsT0FBQUEsRUFBQXhsQixFQUFBMEMsU0FDQThpQixFQUNBLElBQUF4bEIsRUFBQXVsQixNQUFBQyxJQUdBM0ssUUFBQSxDQUNBNkssS0FBQSxDQUdBQyxVQUFBLEdBRUFuVSxNQUFBLENBR0FvVSxRQUFBLFdBQ0EsR0FBQTdtQixPQUFBNmpCLE1BQUE3akIsS0FBQXlTLE1BRUEsT0FEQXpTLEtBQUF5UyxTQUNBLEdBR0FzUyxhQUFBLFdBRUErQixLQUFBLENBQ0FELFFBQUEsV0FDQSxHQUFBN21CLE9BQUE2akIsTUFBQTdqQixLQUFBOG1CLEtBRUEsT0FEQTltQixLQUFBOG1CLFFBQ0EsR0FHQS9CLGFBQUEsWUFFQWdDLE1BQUEsQ0FHQUYsUUFBQSxXQUNBLGdCQUFBN21CLEtBQUE1RCxNQUFBNEQsS0FBQSttQixPQUFBMWIsRUFBQXJMLEtBQUEsU0FFQSxPQURBQSxLQUFBK21CLFNBQ0EsR0FLQWhGLFNBQUEsU0FBQW1DLEdBQ0EsT0FBQTdZLEVBQUE2WSxFQUFBN2dCLE9BQUEsT0FJQTJqQixhQUFBLENBQ0FiLGFBQUEsU0FBQWpDLFFBSUFsc0IsSUFBQWtzQixFQUFBN29CLFFBQUE2b0IsRUFBQXVDLGdCQUNBdkMsRUFBQXVDLGNBQUFRLFlBQUEvQyxFQUFBN29CLFlBT0E0RixFQUFBc2tCLFlBQUEsU0FBQTlpQixFQUFBckcsRUFBQXdvQixHQUdBbmlCLEVBQUErYSxxQkFDQS9hLEVBQUErYSxvQkFBQXBoQixFQUFBd29CLElBSUEzakIsRUFBQXVsQixNQUFBLFNBQUF4ckIsRUFBQWtzQixHQUdBLEtBQUFsbkIsZ0JBQUFpQixFQUFBdWxCLE9BQ0EsV0FBQXZsQixFQUFBdWxCLE1BQUF4ckIsRUFBQWtzQixHQUlBbHNCLEtBQUFvQixNQUNBNEQsS0FBQXltQixjQUFBenJCLEVBQ0FnRixLQUFBNUQsS0FBQXBCLEVBQUFvQixLQUlBNEQsS0FBQW1uQixtQkFBQW5zQixFQUFBb3NCLHVCQUNBcHZCLElBQUFnRCxFQUFBb3NCLG1CQUdBLElBQUFwc0IsRUFBQWlzQixZQUNBdEQsR0FDQUMsR0FLQTVqQixLQUFBcUQsT0FBQXJJLEVBQUFxSSxRQUFBLElBQUFySSxFQUFBcUksT0FBQWlILFNBQ0F0UCxFQUFBcUksT0FBQXRDLFdBQ0EvRixFQUFBcUksT0FFQXJELEtBQUE4bEIsY0FBQTlxQixFQUFBOHFCLGNBQ0E5bEIsS0FBQXFuQixjQUFBcnNCLEVBQUFxc0IsZUFJQXJuQixLQUFBNUQsS0FBQXBCLEVBSUFrc0IsR0FDQWptQixFQUFBZ0MsT0FBQWpELEtBQUFrbkIsR0FJQWxuQixLQUFBc25CLFVBQUF0c0IsS0FBQXNzQixXQUFBcm1CLEVBQUF3RSxNQUdBekYsS0FBQWlCLEVBQUEwQyxVQUFBLEdBS0ExQyxFQUFBdWxCLE1BQUFqeUIsVUFBQSxDQUNBeU4sWUFBQWYsRUFBQXVsQixNQUNBVyxtQkFBQXZELEdBQ0FpQyxxQkFBQWpDLEdBQ0FtQyw4QkFBQW5DLEdBQ0EyRCxhQUFBLEVBRUF0QixlQUFBLFdBQ0EsSUFBQXJ2QixFQUFBb0osS0FBQXltQixjQUVBem1CLEtBQUFtbkIsbUJBQUF4RCxHQUVBL3NCLElBQUFvSixLQUFBdW5CLGFBQ0Ezd0IsRUFBQXF2QixrQkFHQUMsZ0JBQUEsV0FDQSxJQUFBdHZCLEVBQUFvSixLQUFBeW1CLGNBRUF6bUIsS0FBQTZsQixxQkFBQWxDLEdBRUEvc0IsSUFBQW9KLEtBQUF1bkIsYUFDQTN3QixFQUFBc3ZCLG1CQUdBc0IseUJBQUEsV0FDQSxJQUFBNXdCLEVBQUFvSixLQUFBeW1CLGNBRUF6bUIsS0FBQStsQiw4QkFBQXBDLEdBRUEvc0IsSUFBQW9KLEtBQUF1bkIsYUFDQTN3QixFQUFBNHdCLDJCQUdBeG5CLEtBQUFrbUIsb0JBS0FqbEIsRUFBQXVCLEtBQUEsQ0FDQWlsQixRQUFBLEVBQ0FDLFNBQUEsRUFDQUMsWUFBQSxFQUNBQyxnQkFBQSxFQUNBQyxTQUFBLEVBQ0FDLFFBQUEsRUFDQUMsWUFBQSxFQUNBQyxTQUFBLEVBQ0FDLE9BQUEsRUFDQUMsT0FBQSxFQUNBQyxVQUFBLEVBQ0FDLE1BQUEsRUFDQUMsTUFBQSxFQUNBQyxVQUFBLEVBQ0FocEIsS0FBQSxFQUNBaXBCLFNBQUEsRUFDQW5WLFFBQUEsRUFDQW9WLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxXQUFBLEVBQ0FDLGFBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLGVBQUEsRUFDQUMsV0FBQSxFQUNBQyxTQUFBLEVBRUFDLE1BQUEsU0FBQWxGLEdBQ0EsSUFBQTlRLEVBQUE4USxFQUFBOVEsT0FHQSxhQUFBOFEsRUFBQWtGLE9BQUE1RixHQUFBcFksS0FBQThZLEVBQUE5bkIsTUFDQSxNQUFBOG5CLEVBQUFvRSxTQUFBcEUsRUFBQW9FLFNBQUFwRSxFQUFBcUUsU0FJQXJFLEVBQUFrRixZQUFBcHhCLElBQUFvYixHQUFBcVEsR0FBQXJZLEtBQUE4WSxFQUFBOW5CLE1BQ0EsRUFBQWdYLEVBQ0EsRUFHQSxFQUFBQSxFQUNBLEVBR0EsRUFBQUEsRUFDQSxFQUdBLEVBR0E4USxFQUFBa0YsUUFFQ25vQixFQUFBaWpCLE1BQUFvQyxTQVVEcmxCLEVBQUF1QixLQUFBLENBQ0E2bUIsV0FBQSxZQUNBQyxXQUFBLFdBQ0FDLGFBQUEsY0FDQUMsYUFBQSxjQUNDLFNBQUFDLEVBQUEvRCxHQUNEemtCLEVBQUFpakIsTUFBQXBJLFFBQUEyTixHQUFBLENBQ0ExRSxhQUFBVyxFQUNBVixTQUFBVSxFQUVBZCxPQUFBLFNBQUFWLEdBQ0EsSUFBQTdoQixFQUVBcW5CLEVBQUF4RixFQUFBbUQsY0FDQTlDLEVBQUFMLEVBQUFLLFVBU0EsT0FMQW1GLFFBTkExcEIsTUFNQWlCLEVBQUE0RixTQU5BN0csS0FNQTBwQixNQUNBeEYsRUFBQTluQixLQUFBbW9CLEVBQUFHLFNBQ0FyaUIsRUFBQWtpQixFQUFBbFksUUFBQTFULE1BQUFxSCxLQUFBMEMsV0FDQXdoQixFQUFBOW5CLEtBQUFzcEIsR0FFQXJqQixNQUtBcEIsRUFBQXZMLEdBQUF1TixPQUFBLENBRUE2Z0IsR0FBQSxTQUFBQyxFQUFBN2lCLEVBQUFoSSxFQUFBeEQsR0FDQSxPQUFBb3VCLEdBQUE5akIsS0FBQStqQixFQUFBN2lCLEVBQUFoSSxFQUFBeEQsSUFFQXN1QixJQUFBLFNBQUFELEVBQUE3aUIsRUFBQWhJLEVBQUF4RCxHQUNBLE9BQUFvdUIsR0FBQTlqQixLQUFBK2pCLEVBQUE3aUIsRUFBQWhJLEVBQUF4RCxFQUFBLElBRUF5dUIsSUFBQSxTQUFBSixFQUFBN2lCLEVBQUF4TCxHQUNBLElBQUE2dUIsRUFBQW5vQixFQUNBLEdBQUEybkIsS0FBQWtDLGdCQUFBbEMsRUFBQVEsVUFXQSxPQVJBQSxFQUFBUixFQUFBUSxVQUNBdGpCLEVBQUE4aUIsRUFBQTRCLGdCQUFBeEIsSUFDQUksRUFBQVUsVUFDQVYsRUFBQUcsU0FBQSxJQUFBSCxFQUFBVSxVQUNBVixFQUFBRyxTQUNBSCxFQUFBcmpCLFNBQ0FxakIsRUFBQWxZLFNBRUFyTSxLQUVBLG9CQUFBK2pCLEVBQUEsQ0FHQSxJQUFBM25CLEtBQUEybkIsRUFDQS9qQixLQUFBbWtCLElBQUEvbkIsRUFBQThFLEVBQUE2aUIsRUFBQTNuQixJQUVBLE9BQUE0RCxLQVdBLE9BVEEsSUFBQWtCLEdBQUEsbUJBQUFBLElBR0F4TCxFQUFBd0wsRUFDQUEsT0FBQWxKLElBRUEsSUFBQXRDLElBQ0FBLEVBQUFrdUIsSUFFQTVqQixLQUFBd0MsS0FBQSxXQUNBdkIsRUFBQWlqQixNQUFBMUosT0FBQXhhLEtBQUErakIsRUFBQXJ1QixFQUFBd0wsUUFNQSxJQUtBeW9CLEdBQUEsOEZBT0FDLEdBQUEsd0JBR0FDLEdBQUEsb0NBQ0FDLEdBQUEsY0FDQUMsR0FBQSwyQ0FHQSxTQUFBQyxHQUFBdm5CLEVBQUF5VyxHQUNBLE9BQUE3TixFQUFBNUksRUFBQSxVQUNBNEksRUFBQSxLQUFBNk4sRUFBQTVPLFNBQUE0TyxJQUFBakosV0FBQSxPQUVBaFAsRUFBQSxTQUFBd0IsR0FBQSxJQUdBQSxFQUlBLFNBQUF3bkIsR0FBQXhuQixHQUVBLE9BREFBLEVBQUFyRyxNQUFBLE9BQUFxRyxFQUFBNkksYUFBQSxhQUFBN0ksRUFBQXJHLEtBQ0FxRyxFQUVBLFNBQUF5bkIsR0FBQXpuQixHQUNBLElBQUFpSSxFQUFBb2YsR0FBQS9lLEtBQUF0SSxFQUFBckcsTUFRQSxPQU5Bc08sRUFDQWpJLEVBQUFyRyxLQUFBc08sRUFBQSxHQUVBakksRUFBQW1KLGdCQUFBLFFBR0FuSixFQUdBLFNBQUEwbkIsR0FBQW52QixFQUFBb3ZCLEdBQ0EsSUFBQW55QixFQUFBYSxFQUFBc0QsRUFBQWl1QixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBbEcsRUFFQSxPQUFBOEYsRUFBQTlmLFNBQUEsQ0FLQSxHQUFBaVUsRUFBQUQsUUFBQXRqQixLQUNBcXZCLEVBQUE5TCxFQUFBWCxPQUFBNWlCLEdBQ0FzdkIsRUFBQS9MLEVBQUE5bkIsSUFBQTJ6QixFQUFBQyxHQUNBL0YsRUFBQStGLEVBQUEvRixRQU1BLElBQUFsb0IsWUFIQWt1QixFQUFBMUYsT0FDQTBGLEVBQUFoRyxPQUFBLEdBRUFBLEVBQ0EsSUFBQXJzQixFQUFBLEVBQUFhLEVBQUF3ckIsRUFBQWxvQixHQUFBbEUsT0FBMkNELEVBQUFhLEVBQU9iLElBQ2xEZ0osRUFBQWlqQixNQUFBdkwsSUFBQXlSLEVBQUFodUIsRUFBQWtvQixFQUFBbG9CLEdBQUFuRSxJQU9BdW1CLEVBQUFGLFFBQUF0akIsS0FDQXV2QixFQUFBL0wsRUFBQVosT0FBQTVpQixHQUNBd3ZCLEVBQUF2cEIsRUFBQWdDLE9BQUEsR0FBOEJzbkIsR0FFOUIvTCxFQUFBL25CLElBQUEyekIsRUFBQUksS0FrQkEsU0FBQUMsR0FBQUMsRUFBQWxsQixFQUFBek4sRUFBQStxQixHQUdBdGQsRUFBQWpKLEVBQUE1RCxNQUFBLEdBQUE2TSxHQUVBLElBQUF3ZCxFQUFBcmdCLEVBQUFpZ0IsRUFBQStILEVBQUF2ZCxFQUFBdk0sRUFDQTVJLEVBQUEsRUFDQWEsRUFBQTR4QixFQUFBeHlCLE9BQ0EweUIsRUFBQTl4QixFQUFBLEVBQ0FwQyxFQUFBOE8sRUFBQSxHQUNBakMsRUFBQXRDLEVBQUFzQyxXQUFBN00sR0FHQSxHQUFBNk0sR0FDQXpLLEVBQUEsb0JBQUFwQyxJQUNBZ0ssRUFBQTJpQixZQUFBd0csR0FBQXplLEtBQUExVSxHQUNBLE9BQUFnMEIsRUFBQWxvQixLQUFBLFNBQUFpVyxHQUNBLElBQUFYLEVBQUE0UyxFQUFBOW5CLEdBQUE2VixHQUNBbFYsSUFDQWlDLEVBQUEsR0FBQTlPLEVBQUFqQyxLQUFBdUwsS0FBQXlZLEVBQUFYLEVBQUErUyxTQUVBSixHQUFBM1MsRUFBQXRTLEVBQUF6TixFQUFBK3FCLEtBSUEsR0FBQWhxQixJQUVBNkosR0FEQXFnQixFQUFBTCxHQUFBbmQsRUFBQWtsQixFQUFBLEdBQUE1ZixlQUFBLEVBQUE0ZixFQUFBNUgsSUFDQTdTLFdBRUEsSUFBQStTLEVBQUEzWSxXQUFBblMsU0FDQThxQixFQUFBcmdCLEdBSUFBLEdBQUFtZ0IsR0FBQSxDQU9BLElBTEE2SCxHQURBL0gsRUFBQTNoQixFQUFBakYsSUFBQWdtQixHQUFBZ0IsRUFBQSxVQUFBaUgsS0FDQS94QixPQUtVRCxFQUFBYSxFQUFPYixJQUNqQm1WLEVBQUE0VixFQUVBL3FCLElBQUEyeUIsSUFDQXhkLEVBQUFuTSxFQUFBbUMsTUFBQWdLLEdBQUEsTUFHQXVkLEdBSUExcEIsRUFBQXFCLE1BQUFzZ0IsRUFBQVosR0FBQTVVLEVBQUEsWUFJQXJWLEVBQUF0RCxLQUFBaTJCLEVBQUF6eUIsR0FBQW1WLEVBQUFuVixHQUdBLEdBQUEweUIsRUFPQSxJQU5BOXBCLEVBQUEraEIsSUFBQTFxQixPQUFBLEdBQUE0UyxjQUdBN0osRUFBQWpGLElBQUE0bUIsRUFBQXNILElBR0FqeUIsRUFBQSxFQUFnQkEsRUFBQTB5QixFQUFnQjF5QixJQUNoQ21WLEVBQUF3VixFQUFBM3FCLEdBQ0F1cEIsR0FBQXBXLEtBQUFnQyxFQUFBaFIsTUFBQSxNQUNBbWlCLEVBQUFYLE9BQUF4USxFQUFBLGVBQ0FuTSxFQUFBNEYsU0FBQWhHLEVBQUF1TSxLQUVBQSxFQUFBcFMsSUFHQWlHLEVBQUE2cEIsVUFDQTdwQixFQUFBNnBCLFNBQUExZCxFQUFBcFMsS0FHQTJGLEVBQUF5TSxFQUFBNEMsWUFBQWxNLFFBQUFpbUIsR0FBQSxJQUFBbHBCLElBUUEsT0FBQTZwQixFQUdBLFNBQUFsUSxHQUFBL1gsRUFBQXZCLEVBQUE2cEIsR0FLQSxJQUpBLElBQUEzZCxFQUNBOFYsRUFBQWhpQixFQUFBRCxFQUFBOE0sT0FBQTdNLEVBQUF1QixLQUNBeEssRUFBQSxFQUVRLE9BQUFtVixFQUFBOFYsRUFBQWpyQixJQUErQkEsSUFDdkM4eUIsR0FBQSxJQUFBM2QsRUFBQTlDLFVBQ0FySixFQUFBK3BCLFVBQUFoSixHQUFBNVUsSUFHQUEsRUFBQXJNLGFBQ0FncUIsR0FBQTlwQixFQUFBNEYsU0FBQXVHLEVBQUF0QyxjQUFBc0MsSUFDQTZVLEdBQUFELEdBQUE1VSxFQUFBLFdBRUFBLEVBQUFyTSxXQUFBQyxZQUFBb00sSUFJQSxPQUFBM0ssRUFHQXhCLEVBQUFnQyxPQUFBLENBQ0FrZ0IsY0FBQSxTQUFBMEgsR0FDQSxPQUFBQSxFQUFBL21CLFFBQUE2bEIsR0FBQSxjQUdBdm1CLE1BQUEsU0FBQVgsRUFBQXdvQixFQUFBQyxHQUNBLElBQUFqekIsRUFBQWEsRUFBQXF5QixFQUFBQyxFQWxJQXB3QixFQUFBb3ZCLEVBQ0EvZSxFQWtJQWpJLEVBQUFYLEVBQUE2Z0IsV0FBQSxHQUNBK0gsRUFBQXBxQixFQUFBNEYsU0FBQXBFLEVBQUFxSSxjQUFBckksR0FHQSxLQUFBL0IsRUFBQTZpQixnQkFBQSxJQUFBOWdCLEVBQUE2SCxVQUFBLEtBQUE3SCxFQUFBNkgsVUFDQXJKLEVBQUFrVyxTQUFBMVUsSUFNQSxJQUhBMm9CLEVBQUFwSixHQUFBNWUsR0FHQW5MLEVBQUEsRUFBQWEsR0FGQXF5QixFQUFBbkosR0FBQXZmLElBRUF2SyxPQUF1Q0QsRUFBQWEsRUFBT2IsSUE5STlDK0MsRUErSUFtd0IsRUFBQWx6QixHQS9JQW15QixFQStJQWdCLEVBQUFuekIsR0E5SUFvVCxTQUdBLFdBSEFBLEVBQUErZSxFQUFBL2UsU0FBQXhGLGdCQUdBeWIsR0FBQWxXLEtBQUFwUSxFQUFBb0IsTUFDQWd1QixFQUFBclgsUUFBQS9YLEVBQUErWCxRQUdFLFVBQUExSCxHQUFBLGFBQUFBLElBQ0YrZSxFQUFBblQsYUFBQWpjLEVBQUFpYyxjQTJJQSxHQUFBZ1UsRUFDQSxHQUFBQyxFQUlBLElBSEFDLEtBQUFuSixHQUFBdmYsR0FDQTJvQixLQUFBcEosR0FBQTVlLEdBRUFuTCxFQUFBLEVBQUFhLEVBQUFxeUIsRUFBQWp6QixPQUF3Q0QsRUFBQWEsRUFBT2IsSUFDL0NreUIsR0FBQWdCLEVBQUFsekIsR0FBQW16QixFQUFBbnpCLFNBR0FreUIsR0FBQTFuQixFQUFBVyxHQVdBLE9BTkFnb0IsRUFBQXBKLEdBQUE1ZSxFQUFBLFdBQ0FsTCxPQUFBLEdBQ0ErcEIsR0FBQW1KLEdBQUFDLEdBQUFySixHQUFBdmYsRUFBQSxXQUlBVyxHQUdBNG5CLFVBQUEsU0FBQTVvQixHQUtBLElBSkEsSUFBQWxKLEVBQUF1SixFQUFBckcsRUFDQTBmLEVBQUE3YSxFQUFBaWpCLE1BQUFwSSxRQUNBN2pCLEVBQUEsT0FFU0QsS0FBQXlLLEVBQUFMLEVBQUFuSyxJQUFxQ0EsSUFDOUMsR0FBQWdtQixFQUFBeGIsR0FBQSxDQUNBLEdBQUF2SixFQUFBdUosRUFBQThiLEVBQUE1YSxTQUFBLENBQ0EsR0FBQXpLLEVBQUFvckIsT0FDQSxJQUFBbG9CLEtBQUFsRCxFQUFBb3JCLE9BQ0F4SSxFQUFBMWYsR0FDQTZFLEVBQUFpakIsTUFBQTFKLE9BQUEvWCxFQUFBckcsR0FJQTZFLEVBQUFza0IsWUFBQTlpQixFQUFBckcsRUFBQWxELEVBQUEwckIsUUFPQW5pQixFQUFBOGIsRUFBQTVhLGNBQUEzTCxFQUVBeUssRUFBQStiLEVBQUE3YSxXQUlBbEIsRUFBQStiLEVBQUE3YSxjQUFBM0wsT0FPQWlKLEVBQUF2TCxHQUFBdU4sT0FBQSxDQUNBcW9CLE9BQUEsU0FBQXBxQixHQUNBLE9BQUFzWixHQUFBeGEsS0FBQWtCLEdBQUEsSUFHQXNaLE9BQUEsU0FBQXRaLEdBQ0EsT0FBQXNaLEdBQUF4YSxLQUFBa0IsSUFHQUosS0FBQSxTQUFBcEssR0FDQSxPQUFBa25CLEVBQUE1ZCxLQUFBLFNBQUF0SixHQUNBLFlBQUFzQixJQUFBdEIsRUFDQXVLLEVBQUFILEtBQUFkLE1BQ0FBLEtBQUFrVCxRQUFBMVEsS0FBQSxXQUNBLElBQUF4QyxLQUFBc0ssVUFBQSxLQUFBdEssS0FBQXNLLFVBQUEsSUFBQXRLLEtBQUFzSyxXQUNBdEssS0FBQWdRLFlBQUF0WixNQUdHLEtBQUFBLEVBQUFnTSxVQUFBeEssU0FHSHF6QixPQUFBLFdBQ0EsT0FBQWQsR0FBQXpxQixLQUFBMEMsVUFBQSxTQUFBRCxHQUNBLElBQUF6QyxLQUFBc0ssVUFBQSxLQUFBdEssS0FBQXNLLFVBQUEsSUFBQXRLLEtBQUFzSyxVQUNBMGYsR0FBQWhxQixLQUFBeUMsR0FDQXZILFlBQUF1SCxNQUtBK29CLFFBQUEsV0FDQSxPQUFBZixHQUFBenFCLEtBQUEwQyxVQUFBLFNBQUFELEdBQ0EsT0FBQXpDLEtBQUFzSyxVQUFBLEtBQUF0SyxLQUFBc0ssVUFBQSxJQUFBdEssS0FBQXNLLFNBQUEsQ0FDQSxJQUFBakgsRUFBQTJtQixHQUFBaHFCLEtBQUF5QyxHQUNBWSxFQUFBb29CLGFBQUFocEIsRUFBQVksRUFBQTRNLGdCQUtBeWIsT0FBQSxXQUNBLE9BQUFqQixHQUFBenFCLEtBQUEwQyxVQUFBLFNBQUFELEdBQ0F6QyxLQUFBZSxZQUNBZixLQUFBZSxXQUFBMHFCLGFBQUFocEIsRUFBQXpDLFNBS0EyckIsTUFBQSxXQUNBLE9BQUFsQixHQUFBenFCLEtBQUEwQyxVQUFBLFNBQUFELEdBQ0F6QyxLQUFBZSxZQUNBZixLQUFBZSxXQUFBMHFCLGFBQUFocEIsRUFBQXpDLEtBQUEyTSxnQkFLQXVHLE1BQUEsV0FJQSxJQUhBLElBQUF6USxFQUNBeEssRUFBQSxFQUVTLE9BQUF3SyxFQUFBekMsS0FBQS9ILElBQThCQSxJQUN2QyxJQUFBd0ssRUFBQTZILFdBR0FySixFQUFBK3BCLFVBQUFoSixHQUFBdmYsR0FBQSxJQUdBQSxFQUFBdU4sWUFBQSxJQUlBLE9BQUFoUSxNQUdBb0QsTUFBQSxTQUFBNm5CLEVBQUFDLEdBSUEsT0FIQUQsRUFBQSxNQUFBQSxLQUNBQyxFQUFBLE1BQUFBLEVBQUFELEVBQUFDLEVBRUFsckIsS0FBQWhFLElBQUEsV0FDQSxPQUFBaUYsRUFBQW1DLE1BQUFwRCxLQUFBaXJCLEVBQUFDLE1BSUFMLEtBQUEsU0FBQW4wQixHQUNBLE9BQUFrbkIsRUFBQTVkLEtBQUEsU0FBQXRKLEdBQ0EsSUFBQStMLEVBQUF6QyxLQUFBLE9BQ0EvSCxFQUFBLEVBQ0FhLEVBQUFrSCxLQUFBOUgsT0FFQSxRQUFBRixJQUFBdEIsR0FBQSxJQUFBK0wsRUFBQTZILFNBQ0EsT0FBQTdILEVBQUEyTCxVQUlBLG9CQUFBMVgsSUFBQWt6QixHQUFBeGUsS0FBQTFVLEtBQ0ErcUIsSUFBQUYsR0FBQXhXLEtBQUFyVSxJQUFBLFlBQUFtUCxlQUFBLENBRUFuUCxFQUFBdUssRUFBQWtpQixjQUFBenNCLEdBRUEsSUFDQSxLQUFZdUIsRUFBQWEsRUFBT2IsSUFJbkIsS0FIQXdLLEVBQUF6QyxLQUFBL0gsSUFBQSxJQUdBcVMsV0FDQXJKLEVBQUErcEIsVUFBQWhKLEdBQUF2ZixHQUFBLElBQ0FBLEVBQUEyTCxVQUFBMVgsR0FJQStMLEVBQUEsRUFHSyxNQUFBN0wsS0FHTDZMLEdBQ0F6QyxLQUFBa1QsUUFBQXFZLE9BQUE3MEIsSUFFRyxLQUFBQSxFQUFBZ00sVUFBQXhLLFNBR0gwekIsWUFBQSxXQUNBLElBQUE5SSxFQUFBLEdBR0EsT0FBQTJILEdBQUF6cUIsS0FBQTBDLFVBQUEsU0FBQUQsR0FDQSxJQUFBbkcsRUFBQTBELEtBQUFlLFdBRUFFLEVBQUE2RCxRQUFBOUUsS0FBQThpQixHQUFBLElBQ0E3aEIsRUFBQStwQixVQUFBaEosR0FBQWhpQixPQUNBMUQsR0FDQUEsRUFBQXV2QixhQUFBcHBCLEVBQUF6QyxRQUtHOGlCLE1BSUg3aEIsRUFBQXVCLEtBQUEsQ0FDQXNwQixTQUFBLFNBQ0FDLFVBQUEsVUFDQU4sYUFBQSxTQUNBTyxZQUFBLFFBQ0FDLFdBQUEsZUFDQyxTQUFBNTFCLEVBQUE2MUIsR0FDRGpyQixFQUFBdkwsR0FBQVcsR0FBQSxTQUFBNkssR0FPQSxJQU5BLElBQUFrQixFQUNBQyxFQUFBLEdBQ0E4cEIsRUFBQWxyQixFQUFBQyxHQUNBMkIsRUFBQXNwQixFQUFBajBCLE9BQUEsRUFDQUQsRUFBQSxFQUVTQSxHQUFBNEssRUFBVzVLLElBQ3BCbUssRUFBQW5LLElBQUE0SyxFQUFBN0MsVUFBQW9ELE9BQUEsR0FDQW5DLEVBQUFrckIsRUFBQWwwQixJQUFBaTBCLEdBQUE5cEIsR0FJQXBNLEVBQUEyQyxNQUFBMEosRUFBQUQsRUFBQTVMLE9BR0EsT0FBQXdKLEtBQUFtQyxVQUFBRSxNQUdBLElBQUErcEIsR0FBQSxVQUVBQyxHQUFBLElBQUF2a0IsT0FBQSxLQUFBMlgsRUFBQSx1QkFFQTZNLEdBQUEsU0FBQTdwQixHQUtBLElBQUEybEIsRUFBQTNsQixFQUFBcUksY0FBQXlDLFlBTUEsT0FKQTZhLEtBQUFtRSxTQUNBbkUsRUFBQXAwQixHQUdBbzBCLEVBQUFvRSxpQkFBQS9wQixJQW1GQSxTQUFBZ3FCLEdBQUFocUIsRUFBQXBNLEVBQUFxMkIsR0FDQSxJQUFBQyxFQUFBQyxFQUFBQyxFQUFBeHFCLEVBTUF5ZCxFQUFBcmQsRUFBQXFkLE1BcUNBLE9BbkNBNE0sS0FBQUosR0FBQTdwQixNQVFBLE1BRkFKLEVBQUFxcUIsRUFBQUksaUJBQUF6MkIsSUFBQXEyQixFQUFBcjJCLEtBRUE0SyxFQUFBNEYsU0FBQXBFLEVBQUFxSSxjQUFBckksS0FDQUosRUFBQXBCLEVBQUE2ZSxNQUFBcmQsRUFBQXBNLEtBUUFxSyxFQUFBcXNCLG9CQUFBVixHQUFBamhCLEtBQUEvSSxJQUFBK3BCLEdBQUFoaEIsS0FBQS9VLEtBR0FzMkIsRUFBQTdNLEVBQUE2TSxNQUNBQyxFQUFBOU0sRUFBQThNLFNBQ0FDLEVBQUEvTSxFQUFBK00sU0FHQS9NLEVBQUE4TSxTQUFBOU0sRUFBQStNLFNBQUEvTSxFQUFBNk0sTUFBQXRxQixFQUNBQSxFQUFBcXFCLEVBQUFDLE1BR0E3TSxFQUFBNk0sUUFDQTdNLEVBQUE4TSxXQUNBOU0sRUFBQStNLGtCQUlBNzBCLElBQUFxSyxFQUlBQSxFQUFBLEdBQ0FBLEVBSUEsU0FBQTJxQixHQUFBQyxFQUFBQyxHQUdBLE9BQ0ExMkIsSUFBQSxXQUNBLElBQUF5MkIsSUFTQSxPQUFBanRCLEtBQUF4SixJQUFBMDJCLEdBQUF2MEIsTUFBQXFILEtBQUEwQyxrQkFMQTFDLEtBQUF4SixPQTVJQSxXQUlBLFNBQUEyMkIsSUFHQSxHQUFBMUssRUFBQSxDQUlBQSxFQUFBM0MsTUFBQXNOLFFBQ0EsNEdBSUEzSyxFQUFBclUsVUFBQSxHQUNBakIsR0FBQWpTLFlBQUFteUIsR0FFQSxJQUFBQyxFQUFBdDVCLEVBQUF3NEIsaUJBQUEvSixHQUNBOEssRUFBQSxPQUFBRCxFQUFBOWYsSUFHQWdnQixFQUFBLFFBQUFGLEVBQUFHLFdBQ0FDLEVBQUEsUUFBQUosRUFBQVgsTUFJQWxLLEVBQUEzQyxNQUFBNk4sWUFBQSxNQUNBQyxFQUFBLFFBQUFOLEVBQUFLLFlBRUF4Z0IsR0FBQW5NLFlBQUFxc0IsR0FJQTVLLEVBQUEsTUFHQSxJQUFBOEssRUFBQUcsRUFBQUUsRUFBQUosRUFDQUgsRUFBQXh5QixFQUFBQyxjQUFBLE9BQ0EybkIsRUFBQTVuQixFQUFBQyxjQUFBLE9BR0EybkIsRUFBQTNDLFFBTUEyQyxFQUFBM0MsTUFBQStOLGVBQUEsY0FDQXBMLEVBQUFhLFdBQUEsR0FBQXhELE1BQUErTixlQUFBLEdBQ0FudEIsRUFBQW90QixnQkFBQSxnQkFBQXJMLEVBQUEzQyxNQUFBK04sZUFFQVIsRUFBQXZOLE1BQUFzTixRQUFBLDRGQUVBQyxFQUFBbnlCLFlBQUF1bkIsR0FFQXhoQixFQUFBZ0MsT0FBQXZDLEVBQUEsQ0FDQXF0QixjQUFBLFdBRUEsT0FEQVosSUFDQUksR0FFQVMsa0JBQUEsV0FFQSxPQURBYixJQUNBTyxHQUVBWCxpQkFBQSxXQUVBLE9BREFJLElBQ0FTLEdBRUFLLG1CQUFBLFdBRUEsT0FEQWQsSUFDQUssTUF4RUEsR0F1SkEsSUFLQVUsR0FBQSw0QkFDQUMsR0FBQSxNQUNBQyxHQUFBLENBQVlDLFNBQUEsV0FBQUMsV0FBQSxTQUFBdk8sUUFBQSxTQUNad08sR0FBQSxDQUNBQyxjQUFBLElBQ0FDLFdBQUEsT0FHQUMsR0FBQSxzQkFDQUMsR0FBQTl6QixFQUFBQyxjQUFBLE9BQUFnbEIsTUF3QkEsU0FBQThPLEdBQUF2NEIsR0FDQSxJQUFBZ00sRUFBQXBCLEVBQUE0dEIsU0FBQXg0QixHQUlBLE9BSEFnTSxJQUNBQSxFQUFBcEIsRUFBQTR0QixTQUFBeDRCLEdBeEJBLFNBQUFBLEdBR0EsR0FBQUEsS0FBQXM0QixHQUNBLE9BQUF0NEIsRUFPQSxJQUhBLElBQUF5NEIsRUFBQXo0QixFQUFBLEdBQUFzTCxjQUFBdEwsRUFBQTBGLE1BQUEsR0FDQTlELEVBQUF5MkIsR0FBQXgyQixPQUVBRCxLQUVBLElBREE1QixFQUFBcTRCLEdBQUF6MkIsR0FBQTYyQixLQUNBSCxHQUNBLE9BQUF0NEIsRUFVQTA0QixDQUFBMTRCLE9BRUFnTSxFQUdBLFNBQUEyc0IsR0FBQXZzQixFQUFBL0wsRUFBQXU0QixHQUlBLElBQUEvcEIsRUFBQXlhLEdBQUE1VSxLQUFBclUsR0FDQSxPQUFBd08sRUFHQXRCLEtBQUFzckIsSUFBQSxFQUFBaHFCLEVBQUEsSUFBQStwQixHQUFBLEtBQUEvcEIsRUFBQSxVQUNBeE8sRUFHQSxTQUFBeTRCLEdBQUExc0IsRUFBQXBNLEVBQUErNEIsRUFBQUMsRUFBQUMsR0FDQSxJQUFBcjNCLEVBQ0F1WCxFQUFBLEVBV0EsSUFQQXZYLEVBREFtM0IsS0FBQUMsRUFBQSxvQkFDQSxFQUlBLFVBQUFoNUIsRUFBQSxJQUdRNEIsRUFBQSxFQUFPQSxHQUFBLEVBR2YsV0FBQW0zQixJQUNBNWYsR0FBQXZPLEVBQUErZSxJQUFBdmQsRUFBQTJzQixFQUFBeFAsR0FBQTNuQixJQUFBLEVBQUFxM0IsSUFHQUQsR0FHQSxZQUFBRCxJQUNBNWYsR0FBQXZPLEVBQUErZSxJQUFBdmQsRUFBQSxVQUFBbWQsR0FBQTNuQixJQUFBLEVBQUFxM0IsSUFJQSxXQUFBRixJQUNBNWYsR0FBQXZPLEVBQUErZSxJQUFBdmQsRUFBQSxTQUFBbWQsR0FBQTNuQixHQUFBLFdBQUFxM0IsTUFLQTlmLEdBQUF2TyxFQUFBK2UsSUFBQXZkLEVBQUEsVUFBQW1kLEdBQUEzbkIsSUFBQSxFQUFBcTNCLEdBR0EsWUFBQUYsSUFDQTVmLEdBQUF2TyxFQUFBK2UsSUFBQXZkLEVBQUEsU0FBQW1kLEdBQUEzbkIsR0FBQSxXQUFBcTNCLEtBS0EsT0FBQTlmLEVBR0EsU0FBQStmLEdBQUE5c0IsRUFBQXBNLEVBQUErNEIsR0FHQSxJQUFBSSxFQUNBRixFQUFBaEQsR0FBQTdwQixHQUNBK00sRUFBQWlkLEdBQUFocUIsRUFBQXBNLEVBQUFpNUIsR0FDQUQsRUFBQSxlQUFBcHVCLEVBQUErZSxJQUFBdmQsRUFBQSxlQUFBNnNCLEdBR0EsT0FBQWpELEdBQUFqaEIsS0FBQW9FLEdBQ0FBLEdBS0FnZ0IsRUFBQUgsSUFDQTN1QixFQUFBc3RCLHFCQUFBeGUsSUFBQS9NLEVBQUFxZCxNQUFBenBCLElBSUEsU0FBQW1aLElBQ0FBLEVBQUEvTSxFQUFBLFNBQUFwTSxFQUFBLEdBQUFzTCxjQUFBdEwsRUFBQTBGLE1BQUEsTUFJQXlULEVBQUFwTCxXQUFBb0wsSUFBQSxHQUlBMmYsR0FDQTFzQixFQUNBcE0sRUFDQSs0QixJQUFBQyxFQUFBLG9CQUNBRyxFQUNBRixHQUVBLE1BaVJBLFNBQUFHLEdBQUFodEIsRUFBQWxILEVBQUE4aUIsRUFBQXRiLEVBQUEyc0IsR0FDQSxXQUFBRCxHQUFBbDdCLFVBQUE2TSxLQUFBcUIsRUFBQWxILEVBQUE4aUIsRUFBQXRiLEVBQUEyc0IsR0EvUUF6dUIsRUFBQWdDLE9BQUEsQ0FJQTBzQixTQUFBLENBQ0FDLFFBQUEsQ0FDQXA1QixJQUFBLFNBQUFpTSxFQUFBaXFCLEdBQ0EsR0FBQUEsRUFBQSxDQUdBLElBQUFycUIsRUFBQW9xQixHQUFBaHFCLEVBQUEsV0FDQSxXQUFBSixFQUFBLElBQUFBLE1BT0F1ZSxVQUFBLENBQ0FpUCx5QkFBQSxFQUNBQyxhQUFBLEVBQ0FDLGFBQUEsRUFDQUMsVUFBQSxFQUNBQyxZQUFBLEVBQ0F4QixZQUFBLEVBQ0F5QixZQUFBLEVBQ0FOLFNBQUEsRUFDQU8sT0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFFBQUEsRUFDQUMsUUFBQSxFQUNBQyxNQUFBLEdBS0ExQixTQUFBLENBQ0EyQixNQUFBLFlBSUExUSxNQUFBLFNBQUFyZCxFQUFBcE0sRUFBQUssRUFBQTA0QixHQUdBLEdBQUEzc0IsR0FBQSxJQUFBQSxFQUFBNkgsVUFBQSxJQUFBN0gsRUFBQTZILFVBQUE3SCxFQUFBcWQsTUFBQSxDQUtBLElBQUF6ZCxFQUFBakcsRUFBQThpQixFQUNBdVIsRUFBQXh2QixFQUFBd0QsVUFBQXBPLEdBQ0FxNkIsRUFBQXZDLEdBQUEvaUIsS0FBQS9VLEdBQ0F5cEIsRUFBQXJkLEVBQUFxZCxNQWFBLEdBUkE0USxJQUNBcjZCLEVBQUF1NEIsR0FBQTZCLElBSUF2UixFQUFBamUsRUFBQTB1QixTQUFBdDVCLElBQUE0SyxFQUFBMHVCLFNBQUFjLFFBR0F6NEIsSUFBQXRCLEVBd0NBLE9BQUF3b0IsR0FBQSxRQUFBQSxRQUNBbG5CLEtBQUFxSyxFQUFBNmMsRUFBQTFvQixJQUFBaU0sR0FBQSxFQUFBMnNCLElBRUEvc0IsRUFJQXlkLEVBQUF6cEIsR0EzQ0EsWUFIQStGLFNBQUExRixLQUdBMkwsRUFBQXNkLEdBQUE1VSxLQUFBclUsS0FBQTJMLEVBQUEsS0FDQTNMLEVBQUF5cEIsR0FBQTFkLEVBQUFwTSxFQUFBZ00sR0FHQWpHLEVBQUEsVUFJQSxNQUFBMUYsVUFLQSxXQUFBMEYsSUFDQTFGLEdBQUEyTCxLQUFBLEtBQUFwQixFQUFBMmYsVUFBQTZQLEdBQUEsVUFJQS92QixFQUFBb3RCLGlCQUFBLEtBQUFwM0IsR0FBQSxJQUFBTCxFQUFBTixRQUFBLGdCQUNBK3BCLEVBQUF6cEIsR0FBQSxXQUlBNm9CLEdBQUEsUUFBQUEsUUFDQWxuQixLQUFBdEIsRUFBQXdvQixFQUFBem9CLElBQUFnTSxFQUFBL0wsRUFBQTA0QixNQUVBc0IsRUFDQTVRLEVBQUE2USxZQUFBdDZCLEVBQUFLLEdBRUFvcEIsRUFBQXpwQixHQUFBSyxNQWtCQXNwQixJQUFBLFNBQUF2ZCxFQUFBcE0sRUFBQSs0QixFQUFBRSxHQUNBLElBQUE5ZixFQUFBdE4sRUFBQWdkLEVBQ0F1UixFQUFBeHZCLEVBQUF3RCxVQUFBcE8sR0E2QkEsT0E1QkE4M0IsR0FBQS9pQixLQUFBL1UsS0FNQUEsRUFBQXU0QixHQUFBNkIsS0FJQXZSLEVBQUFqZSxFQUFBMHVCLFNBQUF0NUIsSUFBQTRLLEVBQUEwdUIsU0FBQWMsS0FHQSxRQUFBdlIsSUFDQTFQLEVBQUEwUCxFQUFBMW9CLElBQUFpTSxHQUFBLEVBQUEyc0IsU0FJQXAzQixJQUFBd1gsSUFDQUEsRUFBQWlkLEdBQUFocUIsRUFBQXBNLEVBQUFpNUIsSUFJQSxXQUFBOWYsR0FBQW5aLEtBQUFrNEIsS0FDQS9lLEVBQUErZSxHQUFBbDRCLElBSUEsS0FBQSs0QixNQUNBbHRCLEVBQUFrQyxXQUFBb0wsSUFDQSxJQUFBNGYsR0FBQXdCLFNBQUExdUIsTUFBQSxFQUFBc04sR0FHQUEsS0FJQXZPLEVBQUF1QixLQUFBLDRCQUFBdkssRUFBQTVCLEdBQ0E0SyxFQUFBMHVCLFNBQUF0NUIsR0FBQSxDQUNBRyxJQUFBLFNBQUFpTSxFQUFBaXFCLEVBQUEwQyxHQUNBLEdBQUExQyxFQUlBLE9BQUF3QixHQUFBOWlCLEtBQUFuSyxFQUFBK2UsSUFBQXZkLEVBQUEsYUFRQUEsRUFBQW91QixpQkFBQTM0QixRQUFBdUssRUFBQXF1Qix3QkFBQW5FLE1BSUE0QyxHQUFBOXNCLEVBQUFwTSxFQUFBKzRCLEdBSEFuUCxHQUFBeGQsRUFBQTJyQixHQUFBLFdBQ0EsT0FBQW1CLEdBQUE5c0IsRUFBQXBNLEVBQUErNEIsTUFNQTM0QixJQUFBLFNBQUFnTSxFQUFBL0wsRUFBQTA0QixHQUNBLElBQUFscUIsRUFDQW9xQixFQUFBRixHQUFBOUMsR0FBQTdwQixHQUNBd3NCLEVBQUFHLEdBQUFELEdBQ0Exc0IsRUFDQXBNLEVBQ0ErNEIsRUFDQSxlQUFBbnVCLEVBQUErZSxJQUFBdmQsRUFBQSxlQUFBNnNCLEdBQ0FBLEdBV0EsT0FQQUwsSUFBQS9wQixFQUFBeWEsR0FBQTVVLEtBQUFyVSxLQUNBLFFBQUF3TyxFQUFBLFlBRUF6QyxFQUFBcWQsTUFBQXpwQixHQUFBSyxFQUNBQSxFQUFBdUssRUFBQStlLElBQUF2ZCxFQUFBcE0sSUFHQTI0QixHQUFBdnNCLEVBQUEvTCxFQUFBdTRCLE9BS0FodUIsRUFBQTB1QixTQUFBbEMsV0FBQVQsR0FBQXRzQixFQUFBdXRCLG1CQUNBLFNBQUF4ckIsRUFBQWlxQixHQUNBLEdBQUFBLEVBQ0EsT0FBQXRvQixXQUFBcW9CLEdBQUFocUIsRUFBQSxnQkFDQUEsRUFBQXF1Qix3QkFBQUMsS0FDQTlRLEdBQUF4ZCxFQUFBLENBQWtCZ3JCLFdBQUEsR0FBZ0IsV0FDbEMsT0FBQWhyQixFQUFBcXVCLHdCQUFBQyxRQUVBLE9BTUE5dkIsRUFBQXVCLEtBQUEsQ0FDQXd1QixPQUFBLEdBQ0FDLFFBQUEsR0FDQUMsT0FBQSxTQUNDLFNBQUFDLEVBQUFDLEdBQ0Rud0IsRUFBQTB1QixTQUFBd0IsRUFBQUMsR0FBQSxDQUNBQyxPQUFBLFNBQUEzNkIsR0FPQSxJQU5BLElBQUF1QixFQUFBLEVBQ0FxNUIsRUFBQSxHQUdBQyxFQUFBLGlCQUFBNzZCLElBQUFrUCxNQUFBLE1BQUFsUCxHQUVVdUIsRUFBQSxFQUFPQSxJQUNqQnE1QixFQUFBSCxFQUFBdlIsR0FBQTNuQixHQUFBbTVCLEdBQ0FHLEVBQUF0NUIsSUFBQXM1QixFQUFBdDVCLEVBQUEsSUFBQXM1QixFQUFBLEdBR0EsT0FBQUQsSUFJQWxGLEdBQUFoaEIsS0FBQStsQixLQUNBbHdCLEVBQUEwdUIsU0FBQXdCLEVBQUFDLEdBQUEzNkIsSUFBQXU0QixNQUlBL3RCLEVBQUF2TCxHQUFBdU4sT0FBQSxDQUNBK2MsSUFBQSxTQUFBM3BCLEVBQUFLLEdBQ0EsT0FBQWtuQixFQUFBNWQsS0FBQSxTQUFBeUMsRUFBQXBNLEVBQUFLLEdBQ0EsSUFBQTQ0QixFQUFBeHNCLEVBQ0E5RyxFQUFBLEdBQ0EvRCxFQUFBLEVBRUEsR0FBQXdMLE1BQUFDLFFBQUFyTixHQUFBLENBSUEsSUFIQWk1QixFQUFBaEQsR0FBQTdwQixHQUNBSyxFQUFBek0sRUFBQTZCLE9BRVdELEVBQUE2SyxFQUFTN0ssSUFDcEIrRCxFQUFBM0YsRUFBQTRCLElBQUFnSixFQUFBK2UsSUFBQXZkLEVBQUFwTSxFQUFBNEIsSUFBQSxFQUFBcTNCLEdBR0EsT0FBQXR6QixFQUdBLFlBQUFoRSxJQUFBdEIsRUFDQXVLLEVBQUE2ZSxNQUFBcmQsRUFBQXBNLEVBQUFLLEdBQ0F1SyxFQUFBK2UsSUFBQXZkLEVBQUFwTSxJQUNHQSxFQUFBSyxFQUFBZ00sVUFBQXhLLE9BQUEsTUFRSCtJLEVBQUF3dUIsU0FFQUEsR0FBQWw3QixVQUFBLENBQ0F5TixZQUFBeXRCLEdBQ0FydUIsS0FBQSxTQUFBcUIsRUFBQWxILEVBQUE4aUIsRUFBQXRiLEVBQUEyc0IsRUFBQS9PLEdBQ0EzZ0IsS0FBQXlDLE9BQ0F6QyxLQUFBcWUsT0FDQXJlLEtBQUEwdkIsVUFBQXp1QixFQUFBeXVCLE9BQUEzTixTQUNBL2hCLEtBQUF6RSxVQUNBeUUsS0FBQXdSLE1BQUF4UixLQUFBeUYsSUFBQXpGLEtBQUF3TSxNQUNBeE0sS0FBQStDLE1BQ0EvQyxLQUFBMmdCLFNBQUExZixFQUFBMmYsVUFBQXZDLEdBQUEsVUFFQTdSLElBQUEsV0FDQSxJQUFBMFMsRUFBQXVRLEdBQUErQixVQUFBeHhCLEtBQUFxZSxNQUVBLE9BQUFhLEtBQUExb0IsSUFDQTBvQixFQUFBMW9CLElBQUF3SixNQUNBeXZCLEdBQUErQixVQUFBelAsU0FBQXZyQixJQUFBd0osT0FFQXl4QixJQUFBLFNBQUFDLEdBQ0EsSUFBQUMsRUFDQXpTLEVBQUF1USxHQUFBK0IsVUFBQXh4QixLQUFBcWUsTUFvQkEsT0FsQkFyZSxLQUFBekUsUUFBQXEyQixTQUNBNXhCLEtBQUE2eEIsSUFBQUYsRUFBQTF3QixFQUFBeXVCLE9BQUExdkIsS0FBQTB2QixRQUNBZ0MsRUFBQTF4QixLQUFBekUsUUFBQXEyQixTQUFBRixFQUFBLElBQUExeEIsS0FBQXpFLFFBQUFxMkIsVUFHQTV4QixLQUFBNnhCLElBQUFGLEVBQUFELEVBRUExeEIsS0FBQXlGLEtBQUF6RixLQUFBK0MsSUFBQS9DLEtBQUF3UixPQUFBbWdCLEVBQUEzeEIsS0FBQXdSLE1BRUF4UixLQUFBekUsUUFBQXUyQixNQUNBOXhCLEtBQUF6RSxRQUFBdTJCLEtBQUFyOUIsS0FBQXVMLEtBQUF5QyxLQUFBekMsS0FBQXlGLElBQUF6RixNQUdBa2YsS0FBQXpvQixJQUNBeW9CLEVBQUF6b0IsSUFBQXVKLE1BRUF5dkIsR0FBQStCLFVBQUF6UCxTQUFBdHJCLElBQUF1SixNQUVBQSxPQUlBeXZCLEdBQUFsN0IsVUFBQTZNLEtBQUE3TSxVQUFBazdCLEdBQUFsN0IsVUFFQWs3QixHQUFBK0IsVUFBQSxDQUNBelAsU0FBQSxDQUNBdnJCLElBQUEsU0FBQTZwQixHQUNBLElBQUFobEIsRUFJQSxXQUFBZ2xCLEVBQUE1ZCxLQUFBNkgsVUFDQSxNQUFBK1YsRUFBQTVkLEtBQUE0ZCxFQUFBaEMsT0FBQSxNQUFBZ0MsRUFBQTVkLEtBQUFxZCxNQUFBTyxFQUFBaEMsTUFDQWdDLEVBQUE1ZCxLQUFBNGQsRUFBQWhDLE9BT0FoakIsRUFBQTRGLEVBQUErZSxJQUFBSyxFQUFBNWQsS0FBQTRkLEVBQUFoQyxLQUFBLE1BR0EsU0FBQWhqQixJQUFBLEdBRUE1RSxJQUFBLFNBQUE0cEIsR0FLQXBmLEVBQUE4d0IsR0FBQUQsS0FBQXpSLEVBQUFoQyxNQUNBcGQsRUFBQTh3QixHQUFBRCxLQUFBelIsRUFBQWhDLE1BQUFnQyxHQUNJLElBQUFBLEVBQUE1ZCxLQUFBNkgsVUFDSixNQUFBK1YsRUFBQTVkLEtBQUFxZCxNQUFBN2UsRUFBQTR0QixTQUFBeE8sRUFBQWhDLFNBQ0FwZCxFQUFBMHVCLFNBQUF0UCxFQUFBaEMsTUFHQWdDLEVBQUE1ZCxLQUFBNGQsRUFBQWhDLE1BQUFnQyxFQUFBNWEsSUFGQXhFLEVBQUE2ZSxNQUFBTyxFQUFBNWQsS0FBQTRkLEVBQUFoQyxLQUFBZ0MsRUFBQTVhLElBQUE0YSxFQUFBTSxTQVVBOE8sR0FBQStCLFVBQUFRLFVBQUF2QyxHQUFBK0IsVUFBQVMsV0FBQSxDQUNBeDdCLElBQUEsU0FBQTRwQixHQUNBQSxFQUFBNWQsS0FBQTZILFVBQUErVixFQUFBNWQsS0FBQTFCLGFBQ0FzZixFQUFBNWQsS0FBQTRkLEVBQUFoQyxNQUFBZ0MsRUFBQTVhLE9BS0F4RSxFQUFBeXVCLE9BQUEsQ0FDQXdDLE9BQUEsU0FBQW40QixHQUNBLE9BQUFBLEdBRUFvNEIsTUFBQSxTQUFBcDRCLEdBQ0EsU0FBQTZKLEtBQUF3dUIsSUFBQXI0QixFQUFBNkosS0FBQXl1QixJQUFBLEdBRUF0USxTQUFBLFNBR0E5Z0IsRUFBQTh3QixHQUFBdEMsR0FBQWw3QixVQUFBNk0sS0FHQUgsRUFBQTh3QixHQUFBRCxLQUFBLEdBS0EsSUFDQVEsR0FBQUMsR0FDQUMsR0FBQSx5QkFDQUMsR0FBQSxjQUVBLFNBQUFDLEtBQ0FILE1BQ0EsSUFBQTEzQixFQUFBODNCLFFBQUEzK0IsRUFBQTQrQixzQkFDQTUrQixFQUFBNCtCLHNCQUFBRixJQUVBMStCLEVBQUF5b0IsV0FBQWlXLEdBQUF6eEIsRUFBQTh3QixHQUFBYyxVQUdBNXhCLEVBQUE4d0IsR0FBQWUsUUFLQSxTQUFBQyxLQUlBLE9BSEEvK0IsRUFBQXlvQixXQUFBLFdBQ0E2VixRQUFBdDZCLElBRUFzNkIsR0FBQXJ4QixFQUFBd0UsTUFJQSxTQUFBdXRCLEdBQUE1MkIsRUFBQTYyQixHQUNBLElBQUE3SixFQUNBbnhCLEVBQUEsRUFDQW1VLEVBQUEsQ0FBVzhtQixPQUFBOTJCLEdBS1gsSUFEQTYyQixJQUFBLElBQ1FoN0IsRUFBQSxFQUFPQSxHQUFBLEVBQUFnN0IsRUFFZjdtQixFQUFBLFVBREFnZCxFQUFBeEosR0FBQTNuQixLQUNBbVUsRUFBQSxVQUFBZ2QsR0FBQWh0QixFQU9BLE9BSkE2MkIsSUFDQTdtQixFQUFBd2pCLFFBQUF4akIsRUFBQXVnQixNQUFBdndCLEdBR0FnUSxFQUdBLFNBQUErbUIsR0FBQXo4QixFQUFBMm5CLEVBQUErVSxHQUtBLElBSkEsSUFBQS9TLEVBQ0FxSyxHQUFBMkksR0FBQUMsU0FBQWpWLElBQUEsSUFBQTloQixPQUFBODJCLEdBQUFDLFNBQUEsTUFDQTdhLEVBQUEsRUFDQXZnQixFQUFBd3lCLEVBQUF4eUIsT0FDUXVnQixFQUFBdmdCLEVBQWdCdWdCLElBQ3hCLEdBQUE0SCxFQUFBcUssRUFBQWpTLEdBQUFoa0IsS0FBQTIrQixFQUFBL1UsRUFBQTNuQixHQUdBLE9BQUEycEIsRUFxTkEsU0FBQWdULEdBQUE1d0IsRUFBQTh3QixFQUFBaDRCLEdBQ0EsSUFBQUYsRUFDQW00QixFQUNBL2EsRUFBQSxFQUNBdmdCLEVBQUFtN0IsR0FBQUksV0FBQXY3QixPQUNBa0QsRUFBQTZGLEVBQUEyWixXQUFBSSxPQUFBLGtCQUdBOFgsRUFBQXJ3QixPQUVBcXdCLEVBQUEsV0FDQSxHQUFBVSxFQUNBLFNBWUEsSUFWQSxJQUFBRSxFQUFBcEIsSUFBQVMsS0FDQWxXLEVBQUFqWixLQUFBc3JCLElBQUEsRUFBQWtFLEVBQUFPLFVBQUFQLEVBQUF4QixTQUFBOEIsR0FLQWhDLEVBQUEsR0FEQTdVLEVBQUF1VyxFQUFBeEIsVUFBQSxHQUVBblosRUFBQSxFQUNBdmdCLEVBQUFrN0IsRUFBQVEsT0FBQTE3QixPQUVVdWdCLEVBQUF2Z0IsRUFBZ0J1Z0IsSUFDMUIyYSxFQUFBUSxPQUFBbmIsR0FBQWdaLElBQUFDLEdBTUEsT0FIQXQyQixFQUFBOGdCLFdBQUF6WixFQUFBLENBQUEyd0IsRUFBQTFCLEVBQUE3VSxJQUdBNlUsRUFBQSxHQUFBeDVCLEVBQ0Eya0IsR0FJQTNrQixHQUNBa0QsRUFBQThnQixXQUFBelosRUFBQSxDQUFBMndCLEVBQUEsTUFJQWg0QixFQUFBK2dCLFlBQUExWixFQUFBLENBQUEyd0IsS0FDQSxJQUVBQSxFQUFBaDRCLEVBQUFULFFBQUEsQ0FDQThILE9BQ0F5a0IsTUFBQWptQixFQUFBZ0MsT0FBQSxHQUEyQnN3QixHQUMzQk0sS0FBQTV5QixFQUFBZ0MsUUFBQSxHQUNBNndCLGNBQUEsR0FDQXBFLE9BQUF6dUIsRUFBQXl1QixPQUFBM04sVUFDSXhtQixHQUNKdzRCLG1CQUFBUixFQUNBUyxnQkFBQXo0QixFQUNBbzRCLFVBQUFyQixJQUFBUyxLQUNBbkIsU0FBQXIyQixFQUFBcTJCLFNBQ0FnQyxPQUFBLEdBQ0FULFlBQUEsU0FBQTlVLEVBQUF0YixHQUNBLElBQUFzZCxFQUFBcGYsRUFBQXd1QixNQUFBaHRCLEVBQUEyd0IsRUFBQVMsS0FBQXhWLEVBQUF0YixFQUNBcXdCLEVBQUFTLEtBQUFDLGNBQUF6VixJQUFBK1UsRUFBQVMsS0FBQW5FLFFBRUEsT0FEQTBELEVBQUFRLE9BQUE1OUIsS0FBQXFxQixHQUNBQSxHQUVBakIsS0FBQSxTQUFBNlUsR0FDQSxJQUFBeGIsRUFBQSxFQUlBdmdCLEVBQUErN0IsRUFBQWIsRUFBQVEsT0FBQTE3QixPQUFBLEVBQ0EsR0FBQXM3QixFQUNBLE9BQUF4ekIsS0FHQSxJQURBd3pCLEdBQUEsRUFDVy9hLEVBQUF2Z0IsRUFBZ0J1Z0IsSUFDM0IyYSxFQUFBUSxPQUFBbmIsR0FBQWdaLElBQUEsR0FVQSxPQU5Bd0MsR0FDQTc0QixFQUFBOGdCLFdBQUF6WixFQUFBLENBQUEyd0IsRUFBQSxNQUNBaDRCLEVBQUErZ0IsWUFBQTFaLEVBQUEsQ0FBQTJ3QixFQUFBYSxLQUVBNzRCLEVBQUFtaEIsV0FBQTlaLEVBQUEsQ0FBQTJ3QixFQUFBYSxJQUVBajBCLFFBR0FrbkIsRUFBQWtNLEVBQUFsTSxNQUlBLEtBL0hBLFNBQUFBLEVBQUE0TSxHQUNBLElBQUFyYixFQUFBcGlCLEVBQUFxNUIsRUFBQWg1QixFQUFBd29CLEVBR0EsSUFBQXpHLEtBQUF5TyxFQWVBLEdBYkF3SSxFQUFBb0UsRUFEQXo5QixFQUFBNEssRUFBQXdELFVBQUFnVSxJQUVBL2hCLEVBQUF3d0IsRUFBQXpPLEdBQ0FoVixNQUFBQyxRQUFBaE4sS0FDQWc1QixFQUFBaDVCLEVBQUEsR0FDQUEsRUFBQXd3QixFQUFBek8sR0FBQS9oQixFQUFBLElBR0EraEIsSUFBQXBpQixJQUNBNndCLEVBQUE3d0IsR0FBQUssU0FDQXd3QixFQUFBek8sS0FHQXlHLEVBQUFqZSxFQUFBMHVCLFNBQUF0NUIsS0FDQSxXQUFBNm9CLEVBTUEsSUFBQXpHLEtBTEEvaEIsRUFBQXdvQixFQUFBbVMsT0FBQTM2QixVQUNBd3dCLEVBQUE3d0IsR0FJQUssRUFDQStoQixLQUFBeU8sSUFDQUEsRUFBQXpPLEdBQUEvaEIsRUFBQStoQixHQUNBcWIsRUFBQXJiLEdBQUFpWCxRQUlBb0UsRUFBQXo5QixHQUFBcTVCLEVBNkZBd0UsQ0FBQWhOLEVBQUFrTSxFQUFBUyxLQUFBQyxlQUVRcmIsRUFBQXZnQixFQUFnQnVnQixJQUV4QixHQURBcGQsRUFBQWc0QixHQUFBSSxXQUFBaGIsR0FBQWhrQixLQUFBMitCLEVBQUEzd0IsRUFBQXlrQixFQUFBa00sRUFBQVMsTUFNQSxPQUpBNXlCLEVBQUFzQyxXQUFBbEksRUFBQStqQixRQUNBbmUsRUFBQWtlLFlBQUFpVSxFQUFBM3dCLEtBQUEyd0IsRUFBQVMsS0FBQS8zQixPQUFBc2pCLEtBQ0FuZSxFQUFBcUUsTUFBQWpLLEVBQUErakIsS0FBQS9qQixJQUVBQSxFQXlCQSxPQXJCQTRGLEVBQUFqRixJQUFBa3JCLEVBQUFpTSxHQUFBQyxHQUVBbnlCLEVBQUFzQyxXQUFBNnZCLEVBQUFTLEtBQUFyaUIsUUFDQTRoQixFQUFBUyxLQUFBcmlCLE1BQUEvYyxLQUFBZ08sRUFBQTJ3QixHQUlBQSxFQUNBN1gsU0FBQTZYLEVBQUFTLEtBQUF0WSxVQUNBdlUsS0FBQW9zQixFQUFBUyxLQUFBN3NCLEtBQUFvc0IsRUFBQVMsS0FBQU0sVUFDQXZhLEtBQUF3WixFQUFBUyxLQUFBamEsTUFDQW9CLE9BQUFvWSxFQUFBUyxLQUFBN1ksUUFFQS9aLEVBQUE4d0IsR0FBQXFDLE1BQ0FuekIsRUFBQWdDLE9BQUE2dkIsRUFBQSxDQUNBcndCLE9BQ0E0eEIsS0FBQWpCLEVBQ0F0M0IsTUFBQXMzQixFQUFBUyxLQUFBLzNCLFNBSUFzM0IsRUFHQW55QixFQUFBb3lCLFVBQUFweUIsRUFBQWdDLE9BQUFvd0IsR0FBQSxDQUVBQyxTQUFBLENBQ0FnQixJQUFBLFVBQUFqVyxFQUFBM25CLEdBQ0EsSUFBQTJwQixFQUFBcmdCLEtBQUFtekIsWUFBQTlVLEVBQUEzbkIsR0FFQSxPQURBeXBCLEdBQUFFLEVBQUE1ZCxLQUFBNGIsRUFBQXNCLEdBQUE1VSxLQUFBclUsR0FBQTJwQixHQUNBQSxLQUlBa1UsUUFBQSxTQUFBck4sRUFBQW52QixHQUNBa0osRUFBQXNDLFdBQUEyakIsSUFDQW52QixFQUFBbXZCLEVBQ0FBLEVBQUEsT0FFQUEsSUFBQXhjLE1BQUEwTyxHQU9BLElBSkEsSUFBQWlGLEVBQ0E1RixFQUFBLEVBQ0F2Z0IsRUFBQWd2QixFQUFBaHZCLE9BRVN1Z0IsRUFBQXZnQixFQUFnQnVnQixJQUN6QjRGLEVBQUE2SSxFQUFBek8sR0FDQTRhLEdBQUFDLFNBQUFqVixHQUFBZ1YsR0FBQUMsU0FBQWpWLElBQUEsR0FDQWdWLEdBQUFDLFNBQUFqVixHQUFBalAsUUFBQXJYLElBSUEwN0IsV0FBQSxDQTFXQSxTQUFBaHhCLEVBQUF5a0IsRUFBQTJNLEdBQ0EsSUFBQXhWLEVBQUEzbkIsRUFBQTJxQixFQUFBbkMsRUFBQXNWLEVBQUFDLEVBQUFDLEVBQUEzVSxFQUNBNFUsRUFBQSxVQUFBek4sR0FBQSxXQUFBQSxFQUNBbU4sRUFBQXIwQixLQUNBeXBCLEVBQUEsR0FDQTNKLEVBQUFyZCxFQUFBcWQsTUFDQTZTLEVBQUFsd0IsRUFBQTZILFVBQUF1VixHQUFBcGQsR0FDQW15QixFQUFBclcsRUFBQS9uQixJQUFBaU0sRUFBQSxVQTZCQSxJQUFBNGIsS0ExQkF3VixFQUFBLzNCLFFBRUEsT0FEQW9qQixFQUFBamUsRUFBQWtlLFlBQUExYyxFQUFBLE9BQ0FveUIsV0FDQTNWLEVBQUEyVixTQUFBLEVBQ0FMLEVBQUF0VixFQUFBaE0sTUFBQW1ILEtBQ0E2RSxFQUFBaE0sTUFBQW1ILEtBQUEsV0FDQTZFLEVBQUEyVixVQUNBTCxNQUlBdFYsRUFBQTJWLFdBRUFSLEVBQUFyWixPQUFBLFdBR0FxWixFQUFBclosT0FBQSxXQUNBa0UsRUFBQTJWLFdBQ0E1ekIsRUFBQW5GLE1BQUEyRyxFQUFBLE1BQUF2SyxRQUNBZ25CLEVBQUFoTSxNQUFBbUgsWUFPQTZNLEVBRUEsR0FEQXh3QixFQUFBd3dCLEVBQUE3SSxHQUNBbVUsR0FBQXBuQixLQUFBMVUsR0FBQSxDQUdBLFVBRkF3d0IsRUFBQTdJLEdBQ0FnRCxLQUFBLFdBQUEzcUIsRUFDQUEsS0FBQWk4QixFQUFBLGdCQUlBLFlBQUFqOEIsSUFBQWsrQixRQUFBNThCLElBQUE0OEIsRUFBQXZXLEdBS0EsU0FKQXNVLEdBQUEsRUFPQWxKLEVBQUFwTCxHQUFBdVcsS0FBQXZXLElBQUFwZCxFQUFBNmUsTUFBQXJkLEVBQUE0YixHQU1BLElBREFvVyxHQUFBeHpCLEVBQUFzRCxjQUFBMmlCLE1BQ0FqbUIsRUFBQXNELGNBQUFrbEIsR0E2REEsSUFBQXBMLEtBeERBc1csR0FBQSxJQUFBbHlCLEVBQUE2SCxXQUtBdXBCLEVBQUFpQixTQUFBLENBQUFoVixFQUFBZ1YsU0FBQWhWLEVBQUFpVixVQUFBalYsRUFBQWtWLFdBSUEsT0FEQU4sRUFBQUUsS0FBQTdVLFdBRUEyVSxFQUFBblcsRUFBQS9uQixJQUFBaU0sRUFBQSxZQUdBLFVBREFzZCxFQUFBOWUsRUFBQStlLElBQUF2ZCxFQUFBLGNBRUFpeUIsRUFDQTNVLEVBQUEyVSxHQUlBelQsR0FBQSxDQUFBeGUsSUFBQSxHQUNBaXlCLEVBQUFqeUIsRUFBQXFkLE1BQUFDLFNBQUEyVSxFQUNBM1UsRUFBQTllLEVBQUErZSxJQUFBdmQsRUFBQSxXQUNBd2UsR0FBQSxDQUFBeGUsT0FLQSxXQUFBc2QsR0FBQSxpQkFBQUEsR0FBQSxNQUFBMlUsSUFDQSxTQUFBenpCLEVBQUErZSxJQUFBdmQsRUFBQSxXQUdBZ3lCLElBQ0FKLEVBQUFydEIsS0FBQSxXQUNBOFksRUFBQUMsUUFBQTJVLElBRUEsTUFBQUEsSUFDQTNVLEVBQUFELEVBQUFDLFFBQ0EyVSxFQUFBLFNBQUEzVSxFQUFBLEdBQUFBLElBR0FELEVBQUFDLFFBQUEsaUJBS0E4VCxFQUFBaUIsV0FDQWhWLEVBQUFnVixTQUFBLFNBQ0FULEVBQUFyWixPQUFBLFdBQ0E4RSxFQUFBZ1YsU0FBQWpCLEVBQUFpQixTQUFBLEdBQ0FoVixFQUFBaVYsVUFBQWxCLEVBQUFpQixTQUFBLEdBQ0FoVixFQUFBa1YsVUFBQW5CLEVBQUFpQixTQUFBLE1BS0FMLEdBQUEsRUFDQWhMLEVBR0FnTCxJQUNBRyxFQUNBLFdBQUFBLElBQ0FqQyxFQUFBaUMsRUFBQWpDLFFBR0FpQyxFQUFBclcsRUFBQVgsT0FBQW5iLEVBQUEsVUFBaURzZCxRQUFBMlUsSUFJakRyVCxJQUNBdVQsRUFBQWpDLFdBSUFBLEdBQ0ExUixHQUFBLENBQUF4ZSxJQUFBLEdBS0E0eEIsRUFBQXJ0QixLQUFBLFdBU0EsSUFBQXFYLEtBSkFzVSxHQUNBMVIsR0FBQSxDQUFBeGUsSUFFQThiLEVBQUEvRCxPQUFBL1gsRUFBQSxVQUNBZ25CLEVBQ0F4b0IsRUFBQTZlLE1BQUFyZCxFQUFBNGIsRUFBQW9MLEVBQUFwTCxPQU1Bb1csRUFBQXRCLEdBQUFSLEVBQUFpQyxFQUFBdlcsR0FBQSxFQUFBQSxFQUFBZ1csR0FDQWhXLEtBQUF1VyxJQUNBQSxFQUFBdlcsR0FBQW9XLEVBQUFqakIsTUFDQW1oQixJQUNBOEIsRUFBQTF4QixJQUFBMHhCLEVBQUFqakIsTUFDQWlqQixFQUFBampCLE1BQUEsTUF1TUF5akIsVUFBQSxTQUFBbDlCLEVBQUF5ekIsR0FDQUEsRUFDQTZILEdBQUFJLFdBQUFya0IsUUFBQXJYLEdBRUFzN0IsR0FBQUksV0FBQXo5QixLQUFBK0IsTUFLQWtKLEVBQUFpMEIsTUFBQSxTQUFBQSxFQUFBeEYsRUFBQWg2QixHQUNBLElBQUF5L0IsRUFBQUQsR0FBQSxpQkFBQUEsRUFBQWowQixFQUFBZ0MsT0FBQSxHQUFpRWl5QixHQUFBLENBQ2pFZixTQUFBeitCLE9BQUFnNkIsR0FDQXp1QixFQUFBc0MsV0FBQTJ4QixNQUNBdEQsU0FBQXNELEVBQ0F4RixPQUFBaDZCLEdBQUFnNkIsT0FBQXp1QixFQUFBc0MsV0FBQW1zQixPQW9DQSxPQWhDQXp1QixFQUFBOHdCLEdBQUE1TixJQUNBZ1IsRUFBQXZELFNBQUEsRUFHQSxpQkFBQXVELEVBQUF2RCxXQUNBdUQsRUFBQXZELFlBQUEzd0IsRUFBQTh3QixHQUFBcUQsT0FDQUQsRUFBQXZELFNBQUEzd0IsRUFBQTh3QixHQUFBcUQsT0FBQUQsRUFBQXZELFVBR0F1RCxFQUFBdkQsU0FBQTN3QixFQUFBOHdCLEdBQUFxRCxPQUFBclQsVUFNQSxNQUFBb1QsRUFBQXI1QixRQUFBLElBQUFxNUIsRUFBQXI1QixRQUNBcTVCLEVBQUFyNUIsTUFBQSxNQUlBcTVCLEVBQUFqVixJQUFBaVYsRUFBQWhCLFNBRUFnQixFQUFBaEIsU0FBQSxXQUNBbHpCLEVBQUFzQyxXQUFBNHhCLEVBQUFqVixNQUNBaVYsRUFBQWpWLElBQUF6ckIsS0FBQXVMLE1BR0FtMUIsRUFBQXI1QixPQUNBbUYsRUFBQStkLFFBQUFoZixLQUFBbTFCLEVBQUFyNUIsUUFJQXE1QixHQUdBbDBCLEVBQUF2TCxHQUFBdU4sT0FBQSxDQUNBb3lCLE9BQUEsU0FBQUgsRUFBQUksRUFBQTVGLEVBQUEzM0IsR0FHQSxPQUFBaUksS0FBQStOLE9BQUE4UixJQUFBRyxJQUFBLGFBQUFrQixPQUdBbmUsTUFBQXd5QixRQUFBLENBQW9CM0YsUUFBQTBGLEdBQWNKLEVBQUF4RixFQUFBMzNCLElBRWxDdzlCLFFBQUEsU0FBQWxYLEVBQUE2VyxFQUFBeEYsRUFBQTMzQixHQUNBLElBQUFtYixFQUFBalMsRUFBQXNELGNBQUE4WixHQUNBbVgsRUFBQXYwQixFQUFBaTBCLFFBQUF4RixFQUFBMzNCLEdBQ0EwOUIsRUFBQSxXQUdBLElBQUFwQixFQUFBaEIsR0FBQXJ6QixLQUFBaUIsRUFBQWdDLE9BQUEsR0FBaURvYixHQUFBbVgsSUFHakR0aUIsR0FBQXFMLEVBQUEvbkIsSUFBQXdKLEtBQUEsWUFDQXEwQixFQUFBalYsTUFBQSxJQUtBLE9BRkFxVyxFQUFBQyxPQUFBRCxFQUVBdmlCLElBQUEsSUFBQXNpQixFQUFBMTVCLE1BQ0FrRSxLQUFBd0MsS0FBQWl6QixHQUNBejFCLEtBQUFsRSxNQUFBMDVCLEVBQUExNUIsTUFBQTI1QixJQUVBclcsS0FBQSxTQUFBaGpCLEVBQUFrakIsRUFBQTJVLEdBQ0EsSUFBQTBCLEVBQUEsU0FBQXpXLEdBQ0EsSUFBQUUsRUFBQUYsRUFBQUUsWUFDQUYsRUFBQUUsS0FDQUEsRUFBQTZVLElBWUEsTUFUQSxpQkFBQTczQixJQUNBNjNCLEVBQUEzVSxFQUNBQSxFQUFBbGpCLEVBQ0FBLE9BQUFwRSxHQUVBc25CLElBQUEsSUFBQWxqQixHQUNBNEQsS0FBQWxFLE1BQUFNLEdBQUEsU0FHQTRELEtBQUF3QyxLQUFBLFdBQ0EsSUFBQXdjLEdBQUEsRUFDQXZHLEVBQUEsTUFBQXJjLEtBQUEsYUFDQXc1QixFQUFBMzBCLEVBQUEyMEIsT0FDQTE4QixFQUFBcWxCLEVBQUEvbkIsSUFBQXdKLE1BRUEsR0FBQXlZLEVBQ0F2ZixFQUFBdWYsSUFBQXZmLEVBQUF1ZixHQUFBMkcsTUFDQXVXLEVBQUF6OEIsRUFBQXVmLFNBR0EsSUFBQUEsS0FBQXZmLEVBQ0FBLEVBQUF1ZixJQUFBdmYsRUFBQXVmLEdBQUEyRyxNQUFBcVQsR0FBQXJuQixLQUFBcU4sSUFDQWtkLEVBQUF6OEIsRUFBQXVmLElBS0EsSUFBQUEsRUFBQW1kLEVBQUExOUIsT0FBK0J1Z0IsS0FDL0JtZCxFQUFBbmQsR0FBQWhXLE9BQUF6QyxNQUNBLE1BQUE1RCxHQUFBdzVCLEVBQUFuZCxHQUFBM2MsUUFBQU0sSUFFQXc1QixFQUFBbmQsR0FBQTRiLEtBQUFqVixLQUFBNlUsR0FDQWpWLEdBQUEsRUFDQTRXLEVBQUFwOUIsT0FBQWlnQixFQUFBLEtBT0F1RyxHQUFBaVYsR0FDQWh6QixFQUFBK2QsUUFBQWhmLEtBQUE1RCxNQUlBczVCLE9BQUEsU0FBQXQ1QixHQUlBLE9BSEEsSUFBQUEsSUFDQUEsS0FBQSxNQUVBNEQsS0FBQXdDLEtBQUEsV0FDQSxJQUFBaVcsRUFDQXZmLEVBQUFxbEIsRUFBQS9uQixJQUFBd0osTUFDQWxFLEVBQUE1QyxFQUFBa0QsRUFBQSxTQUNBOGlCLEVBQUFobUIsRUFBQWtELEVBQUEsY0FDQXc1QixFQUFBMzBCLEVBQUEyMEIsT0FDQTE5QixFQUFBNEQsSUFBQTVELE9BQUEsRUFhQSxJQVZBZ0IsRUFBQXc4QixRQUFBLEVBR0F6MEIsRUFBQW5GLE1BQUFrRSxLQUFBNUQsRUFBQSxJQUVBOGlCLEtBQUFFLE1BQ0FGLEVBQUFFLEtBQUEzcUIsS0FBQXVMLE1BQUEsR0FJQXlZLEVBQUFtZCxFQUFBMTlCLE9BQStCdWdCLEtBQy9CbWQsRUFBQW5kLEdBQUFoVyxPQUFBekMsTUFBQTQxQixFQUFBbmQsR0FBQTNjLFFBQUFNLElBQ0F3NUIsRUFBQW5kLEdBQUE0YixLQUFBalYsTUFBQSxHQUNBd1csRUFBQXA5QixPQUFBaWdCLEVBQUEsSUFLQSxJQUFBQSxFQUFBLEVBQW1CQSxFQUFBdmdCLEVBQWdCdWdCLElBQ25DM2MsRUFBQTJjLElBQUEzYyxFQUFBMmMsR0FBQWlkLFFBQ0E1NUIsRUFBQTJjLEdBQUFpZCxPQUFBamhDLEtBQUF1TCxhQUtBOUcsRUFBQXc4QixZQUtBejBCLEVBQUF1QixLQUFBLGtDQUFBdkssRUFBQTVCLEdBQ0EsSUFBQXcvQixFQUFBNTBCLEVBQUF2TCxHQUFBVyxHQUNBNEssRUFBQXZMLEdBQUFXLEdBQUEsU0FBQTYrQixFQUFBeEYsRUFBQTMzQixHQUNBLGFBQUFtOUIsR0FBQSxrQkFBQUEsRUFDQVcsRUFBQWw5QixNQUFBcUgsS0FBQTBDLFdBQ0ExQyxLQUFBdTFCLFFBQUF2QyxHQUFBMzhCLEdBQUEsR0FBQTYrQixFQUFBeEYsRUFBQTMzQixNQUtBa0osRUFBQXVCLEtBQUEsQ0FDQXN6QixVQUFBOUMsR0FBQSxRQUNBK0MsUUFBQS9DLEdBQUEsUUFDQWdELFlBQUFoRCxHQUFBLFVBQ0FpRCxPQUFBLENBQVVyRyxRQUFBLFFBQ1ZzRyxRQUFBLENBQVd0RyxRQUFBLFFBQ1h1RyxXQUFBLENBQWN2RyxRQUFBLFdBQ2IsU0FBQXY1QixFQUFBNndCLEdBQ0RqbUIsRUFBQXZMLEdBQUFXLEdBQUEsU0FBQTYrQixFQUFBeEYsRUFBQTMzQixHQUNBLE9BQUFpSSxLQUFBdTFCLFFBQUFyTyxFQUFBZ08sRUFBQXhGLEVBQUEzM0IsTUFJQWtKLEVBQUEyMEIsT0FBQSxHQUNBMzBCLEVBQUE4d0IsR0FBQWUsS0FBQSxXQUNBLElBQUFzQixFQUNBbjhCLEVBQUEsRUFDQTI5QixFQUFBMzBCLEVBQUEyMEIsT0FJQSxJQUZBdEQsR0FBQXJ4QixFQUFBd0UsTUFFUXhOLEVBQUEyOUIsRUFBQTE5QixPQUFtQkQsS0FDM0JtOEIsRUFBQXdCLEVBQUEzOUIsT0FHQTI5QixFQUFBMzlCLEtBQUFtOEIsR0FDQXdCLEVBQUFwOUIsT0FBQVAsSUFBQSxHQUlBMjlCLEVBQUExOUIsUUFDQStJLEVBQUE4d0IsR0FBQTNTLE9BRUFrVCxRQUFBdDZCLEdBR0FpSixFQUFBOHdCLEdBQUFxQyxNQUFBLFNBQUFBLEdBQ0FuekIsRUFBQTIwQixPQUFBNS9CLEtBQUFvK0IsR0FDQW56QixFQUFBOHdCLEdBQUF2Z0IsU0FHQXZRLEVBQUE4d0IsR0FBQWMsU0FBQSxHQUNBNXhCLEVBQUE4d0IsR0FBQXZnQixNQUFBLFdBQ0ErZ0IsS0FJQUEsSUFBQSxFQUNBRyxPQUdBenhCLEVBQUE4d0IsR0FBQTNTLEtBQUEsV0FDQW1ULEdBQUEsTUFHQXR4QixFQUFBOHdCLEdBQUFxRCxPQUFBLENBQ0FnQixLQUFBLElBQ0FDLEtBQUEsSUFHQXRVLFNBQUEsS0FNQTlnQixFQUFBdkwsR0FBQTRnQyxNQUFBLFNBQUFDLEVBQUFuNkIsR0FJQSxPQUhBbTZCLEVBQUF0MUIsRUFBQTh3QixJQUFBOXdCLEVBQUE4d0IsR0FBQXFELE9BQUFtQixNQUNBbjZCLEtBQUEsS0FFQTRELEtBQUFsRSxNQUFBTSxFQUFBLFNBQUFnTyxFQUFBOFUsR0FDQSxJQUFBamxCLEVBQUFqRyxFQUFBeW9CLFdBQUFyUyxFQUFBbXNCLEdBQ0FyWCxFQUFBRSxLQUFBLFdBQ0FwckIsRUFBQXdpQyxhQUFBdjhCLE9BTUEsV0FDQSxJQUFBb1UsRUFBQXhULEVBQUFDLGNBQUEsU0FFQXE2QixFQURBdDZCLEVBQUFDLGNBQUEsVUFDQUksWUFBQUwsRUFBQUMsY0FBQSxXQUVBdVQsRUFBQWpTLEtBQUEsV0FJQXNFLEVBQUErMUIsUUFBQSxLQUFBcG9CLEVBQUEzWCxNQUlBZ0ssRUFBQWcyQixZQUFBdkIsRUFBQW5pQixVQUlBM0UsRUFBQXhULEVBQUFDLGNBQUEsVUFDQXBFLE1BQUEsSUFDQTJYLEVBQUFqUyxLQUFBLFFBQ0FzRSxFQUFBaTJCLFdBQUEsTUFBQXRvQixFQUFBM1gsTUFwQkEsR0F3QkEsSUFBQWtnQyxHQUNBdHFCLEdBQUFyTCxFQUFBb08sS0FBQS9DLFdBRUFyTCxFQUFBdkwsR0FBQXVOLE9BQUEsQ0FDQXNNLEtBQUEsU0FBQWxaLEVBQUFLLEdBQ0EsT0FBQWtuQixFQUFBNWQsS0FBQWlCLEVBQUFzTyxLQUFBbFosRUFBQUssRUFBQWdNLFVBQUF4SyxPQUFBLElBR0EyK0IsV0FBQSxTQUFBeGdDLEdBQ0EsT0FBQTJKLEtBQUF3QyxLQUFBLFdBQ0F2QixFQUFBNDFCLFdBQUE3MkIsS0FBQTNKLFFBS0E0SyxFQUFBZ0MsT0FBQSxDQUNBc00sS0FBQSxTQUFBOU0sRUFBQXBNLEVBQUFLLEdBQ0EsSUFBQTJMLEVBQUE2YyxFQUNBNFgsRUFBQXIwQixFQUFBNkgsU0FHQSxPQUFBd3NCLEdBQUEsSUFBQUEsR0FBQSxJQUFBQSxFQUtBLGdCQUFBcjBCLEVBQUE2SSxhQUNBckssRUFBQW9kLEtBQUE1YixFQUFBcE0sRUFBQUssSUFLQSxJQUFBb2dDLEdBQUE3MUIsRUFBQWtXLFNBQUExVSxLQUNBeWMsRUFBQWplLEVBQUE4MUIsVUFBQTFnQyxFQUFBd1AsaUJBQ0E1RSxFQUFBb08sS0FBQTNFLE1BQUEvQixLQUFBeUMsS0FBQS9VLEdBQUF1Z0MsUUFBQTUrQixTQUdBQSxJQUFBdEIsRUFDQSxPQUFBQSxPQUNBdUssRUFBQTQxQixXQUFBcDBCLEVBQUFwTSxHQUlBNm9CLEdBQUEsUUFBQUEsUUFDQWxuQixLQUFBcUssRUFBQTZjLEVBQUF6b0IsSUFBQWdNLEVBQUEvTCxFQUFBTCxJQUNBZ00sR0FHQUksRUFBQThJLGFBQUFsVixFQUFBSyxFQUFBLElBQ0FBLEdBR0F3b0IsR0FBQSxRQUFBQSxHQUFBLFFBQUE3YyxFQUFBNmMsRUFBQTFvQixJQUFBaU0sRUFBQXBNLElBQ0FnTSxFQU1BLE9BSEFBLEVBQUFwQixFQUFBZ04sS0FBQXNCLEtBQUE5TSxFQUFBcE0sU0FHQTJCLEVBQUFxSyxJQUdBMDBCLFVBQUEsQ0FDQTM2QixLQUFBLENBQ0EzRixJQUFBLFNBQUFnTSxFQUFBL0wsR0FDQSxJQUFBZ0ssRUFBQWkyQixZQUFBLFVBQUFqZ0MsR0FDQTJVLEVBQUE1SSxFQUFBLFVBQ0EsSUFBQStNLEVBQUEvTSxFQUFBL0wsTUFLQSxPQUpBK0wsRUFBQThJLGFBQUEsT0FBQTdVLEdBQ0E4WSxJQUNBL00sRUFBQS9MLE1BQUE4WSxHQUVBOVksTUFNQW1nQyxXQUFBLFNBQUFwMEIsRUFBQS9MLEdBQ0EsSUFBQUwsRUFDQTRCLEVBQUEsRUFJQSsrQixFQUFBdGdDLEtBQUFnVSxNQUFBME8sR0FFQSxHQUFBNGQsR0FBQSxJQUFBdjBCLEVBQUE2SCxTQUNBLEtBQUFqVSxFQUFBMmdDLEVBQUEvK0IsTUFDQXdLLEVBQUFtSixnQkFBQXZWLE1BT0F1Z0MsR0FBQSxDQUNBbmdDLElBQUEsU0FBQWdNLEVBQUEvTCxFQUFBTCxHQVFBLE9BUEEsSUFBQUssRUFHQXVLLEVBQUE0MUIsV0FBQXAwQixFQUFBcE0sR0FFQW9NLEVBQUE4SSxhQUFBbFYsS0FFQUEsSUFJQTRLLEVBQUF1QixLQUFBdkIsRUFBQW9PLEtBQUEzRSxNQUFBL0IsS0FBQStXLE9BQUFoVixNQUFBLGlCQUFBelMsRUFBQTVCLEdBQ0EsSUFBQXlJLEVBQUF3TixHQUFBalcsSUFBQTRLLEVBQUFnTixLQUFBc0IsS0FFQWpELEdBQUFqVyxHQUFBLFNBQUFvTSxFQUFBcE0sRUFBQTRQLEdBQ0EsSUFBQTVELEVBQUF1aUIsRUFDQXFTLEVBQUE1Z0MsRUFBQXdQLGNBWUEsT0FWQUksSUFHQTJlLEVBQUF0WSxHQUFBMnFCLEdBQ0EzcUIsR0FBQTJxQixHQUFBNTBCLEVBQ0FBLEVBQUEsTUFBQXZELEVBQUEyRCxFQUFBcE0sRUFBQTRQLEdBQ0FneEIsRUFDQSxLQUNBM3FCLEdBQUEycUIsR0FBQXJTLEdBRUF2aUIsS0FPQSxJQUFBNjBCLEdBQUEsc0NBQ0FDLEdBQUEsZ0JBeUlBLFNBQUFDLEdBQUExZ0MsR0FFQSxPQURBQSxFQUFBZ1UsTUFBQTBPLElBQUEsSUFDQWxjLEtBQUEsS0FJQSxTQUFBbTZCLEdBQUE1MEIsR0FDQSxPQUFBQSxFQUFBNkksY0FBQTdJLEVBQUE2SSxhQUFBLGFBOUlBckssRUFBQXZMLEdBQUF1TixPQUFBLENBQ0FvYixLQUFBLFNBQUFob0IsRUFBQUssR0FDQSxPQUFBa25CLEVBQUE1ZCxLQUFBaUIsRUFBQW9kLEtBQUFob0IsRUFBQUssRUFBQWdNLFVBQUF4SyxPQUFBLElBR0FvL0IsV0FBQSxTQUFBamhDLEdBQ0EsT0FBQTJKLEtBQUF3QyxLQUFBLGtCQUNBeEMsS0FBQWlCLEVBQUFzMkIsUUFBQWxoQyxZQUtBNEssRUFBQWdDLE9BQUEsQ0FDQW9iLEtBQUEsU0FBQTViLEVBQUFwTSxFQUFBSyxHQUNBLElBQUEyTCxFQUFBNmMsRUFDQTRYLEVBQUFyMEIsRUFBQTZILFNBR0EsT0FBQXdzQixHQUFBLElBQUFBLEdBQUEsSUFBQUEsRUFXQSxPQVBBLElBQUFBLEdBQUE3MUIsRUFBQWtXLFNBQUExVSxLQUdBcE0sRUFBQTRLLEVBQUFzMkIsUUFBQWxoQyxNQUNBNm9CLEVBQUFqZSxFQUFBdXdCLFVBQUFuN0IsU0FHQTJCLElBQUF0QixFQUNBd29CLEdBQUEsUUFBQUEsUUFDQWxuQixLQUFBcUssRUFBQTZjLEVBQUF6b0IsSUFBQWdNLEVBQUEvTCxFQUFBTCxJQUNBZ00sRUFHQUksRUFBQXBNLEdBQUFLLEVBR0F3b0IsR0FBQSxRQUFBQSxHQUFBLFFBQUE3YyxFQUFBNmMsRUFBQTFvQixJQUFBaU0sRUFBQXBNLElBQ0FnTSxFQUdBSSxFQUFBcE0sSUFHQW03QixVQUFBLENBQ0EzZSxTQUFBLENBQ0FyYyxJQUFBLFNBQUFpTSxHQU9BLElBQUErMEIsRUFBQXYyQixFQUFBZ04sS0FBQXNCLEtBQUE5TSxFQUFBLFlBRUEsT0FBQSswQixFQUNBQyxTQUFBRCxFQUFBLElBSUFOLEdBQUE5ckIsS0FBQTNJLEVBQUE0SSxXQUNBOHJCLEdBQUEvckIsS0FBQTNJLEVBQUE0SSxXQUNBNUksRUFBQW1RLEtBRUEsR0FHQSxLQUtBMmtCLFFBQUEsQ0FDQUcsSUFBQSxVQUNBQyxNQUFBLGVBWUFqM0IsRUFBQWcyQixjQUNBejFCLEVBQUF1d0IsVUFBQXhlLFNBQUEsQ0FDQXhjLElBQUEsU0FBQWlNLEdBSUEsSUFBQW5HLEVBQUFtRyxFQUFBMUIsV0FJQSxPQUhBekUsS0FBQXlFLFlBQ0F6RSxFQUFBeUUsV0FBQWtTLGNBRUEsTUFFQXhjLElBQUEsU0FBQWdNLEdBSUEsSUFBQW5HLEVBQUFtRyxFQUFBMUIsV0FDQXpFLElBQ0FBLEVBQUEyVyxjQUVBM1csRUFBQXlFLFlBQ0F6RSxFQUFBeUUsV0FBQWtTLGtCQU9BaFMsRUFBQXVCLEtBQUEsQ0FDQSxXQUNBLFdBQ0EsWUFDQSxjQUNBLGNBQ0EsVUFDQSxVQUNBLFNBQ0EsY0FDQSxtQkFDQSxXQUNBdkIsRUFBQXMyQixRQUFBdjNCLEtBQUE2RixlQUFBN0YsT0FrQkFpQixFQUFBdkwsR0FBQXVOLE9BQUEsQ0FDQTIwQixTQUFBLFNBQUFsaEMsR0FDQSxJQUFBbWhDLEVBQUFwMUIsRUFBQStKLEVBQUFzckIsRUFBQUMsRUFBQXQ4QixFQUFBdThCLEVBQ0EvL0IsRUFBQSxFQUVBLEdBQUFnSixFQUFBc0MsV0FBQTdNLEdBQ0EsT0FBQXNKLEtBQUF3QyxLQUFBLFNBQUEvRyxHQUNBd0YsRUFBQWpCLE1BQUE0M0IsU0FBQWxoQyxFQUFBakMsS0FBQXVMLEtBQUF2RSxFQUFBNDdCLEdBQUFyM0IsVUFJQSxvQkFBQXRKLEtBR0EsSUFGQW1oQyxFQUFBbmhDLEVBQUFnVSxNQUFBME8sSUFBQSxHQUVBM1csRUFBQXpDLEtBQUEvSCxNQUlBLEdBSEE2L0IsRUFBQVQsR0FBQTUwQixHQUNBK0osRUFBQSxJQUFBL0osRUFBQTZILFVBQUEsSUFBQThzQixHQUFBVSxHQUFBLElBRUEsQ0FFQSxJQURBcjhCLEVBQUEsRUFDQXM4QixFQUFBRixFQUFBcDhCLE1BQ0ErUSxFQUFBelcsUUFBQSxJQUFBZ2lDLEVBQUEsU0FDQXZyQixHQUFBdXJCLEVBQUEsS0FNQUQsS0FEQUUsRUFBQVosR0FBQTVxQixLQUVBL0osRUFBQThJLGFBQUEsUUFBQXlzQixHQU1BLE9BQUFoNEIsTUFHQWk0QixZQUFBLFNBQUF2aEMsR0FDQSxJQUFBbWhDLEVBQUFwMUIsRUFBQStKLEVBQUFzckIsRUFBQUMsRUFBQXQ4QixFQUFBdThCLEVBQ0EvL0IsRUFBQSxFQUVBLEdBQUFnSixFQUFBc0MsV0FBQTdNLEdBQ0EsT0FBQXNKLEtBQUF3QyxLQUFBLFNBQUEvRyxHQUNBd0YsRUFBQWpCLE1BQUFpNEIsWUFBQXZoQyxFQUFBakMsS0FBQXVMLEtBQUF2RSxFQUFBNDdCLEdBQUFyM0IsVUFJQSxJQUFBMEMsVUFBQXhLLE9BQ0EsT0FBQThILEtBQUF1UCxLQUFBLFlBR0Esb0JBQUE3WSxLQUdBLElBRkFtaEMsRUFBQW5oQyxFQUFBZ1UsTUFBQTBPLElBQUEsR0FFQTNXLEVBQUF6QyxLQUFBL0gsTUFNQSxHQUxBNi9CLEVBQUFULEdBQUE1MEIsR0FHQStKLEVBQUEsSUFBQS9KLEVBQUE2SCxVQUFBLElBQUE4c0IsR0FBQVUsR0FBQSxJQUVBLENBRUEsSUFEQXI4QixFQUFBLEVBQ0FzOEIsRUFBQUYsRUFBQXA4QixNQUdBLEtBQUErUSxFQUFBelcsUUFBQSxJQUFBZ2lDLEVBQUEsU0FDQXZyQixJQUFBMUksUUFBQSxJQUFBaTBCLEVBQUEsU0FNQUQsS0FEQUUsRUFBQVosR0FBQTVxQixLQUVBL0osRUFBQThJLGFBQUEsUUFBQXlzQixHQU1BLE9BQUFoNEIsTUFHQWs0QixZQUFBLFNBQUF4aEMsRUFBQXloQyxHQUNBLElBQUEvN0IsU0FBQTFGLEVBRUEsd0JBQUF5aEMsR0FBQSxXQUFBLzdCLEVBQ0ErN0IsRUFBQW40QixLQUFBNDNCLFNBQUFsaEMsR0FBQXNKLEtBQUFpNEIsWUFBQXZoQyxHQUdBdUssRUFBQXNDLFdBQUE3TSxHQUNBc0osS0FBQXdDLEtBQUEsU0FBQXZLLEdBQ0FnSixFQUFBakIsTUFBQWs0QixZQUNBeGhDLEVBQUFqQyxLQUFBdUwsS0FBQS9ILEVBQUFvL0IsR0FBQXIzQixNQUFBbTRCLEdBQ0FBLEtBS0FuNEIsS0FBQXdDLEtBQUEsV0FDQSxJQUFBbUwsRUFBQTFWLEVBQUE2ZixFQUFBc2dCLEVBRUEsY0FBQWg4QixFQU9BLElBSkFuRSxFQUFBLEVBQ0E2ZixFQUFBN1csRUFBQWpCLE1BQ0FvNEIsRUFBQTFoQyxFQUFBZ1UsTUFBQTBPLElBQUEsR0FFQXpMLEVBQUF5cUIsRUFBQW5nQyxNQUdBNmYsRUFBQXVnQixTQUFBMXFCLEdBQ0FtSyxFQUFBbWdCLFlBQUF0cUIsR0FFQW1LLEVBQUE4ZixTQUFBanFCLGFBS0kzVixJQUFBdEIsR0FBQSxZQUFBMEYsS0FDSnVSLEVBQUEwcEIsR0FBQXIzQixRQUlBdWUsRUFBQTluQixJQUFBdUosS0FBQSxnQkFBQTJOLEdBT0EzTixLQUFBdUwsY0FDQXZMLEtBQUF1TCxhQUFBLFFBQ0FvQyxJQUFBLElBQUFqWCxFQUNBLEdBQ0E2bkIsRUFBQS9uQixJQUFBd0osS0FBQSwwQkFPQXE0QixTQUFBLFNBQUFuM0IsR0FDQSxJQUFBeU0sRUFBQWxMLEVBQ0F4SyxFQUFBLEVBR0EsSUFEQTBWLEVBQUEsSUFBQXpNLEVBQUEsSUFDQXVCLEVBQUF6QyxLQUFBL0gsTUFDQSxPQUFBd0ssRUFBQTZILFdBQ0EsSUFBQThzQixHQUFBQyxHQUFBNTBCLElBQUEsS0FBQTFNLFFBQUE0WCxJQUFBLEVBQ0EsU0FJQSxZQU9BLElBQUEycUIsR0FBQSxNQUVBcjNCLEVBQUF2TCxHQUFBdU4sT0FBQSxDQUNBdU0sSUFBQSxTQUFBOVksR0FDQSxJQUFBd29CLEVBQUE3YyxFQUFBa0IsRUFDQWQsRUFBQXpDLEtBQUEsR0FFQSxPQUFBMEMsVUFBQXhLLFFBMEJBcUwsRUFBQXRDLEVBQUFzQyxXQUFBN00sR0FFQXNKLEtBQUF3QyxLQUFBLFNBQUF2SyxHQUNBLElBQUF1WCxFQUVBLElBQUF4UCxLQUFBc0ssV0FXQSxPQU5Ba0YsRUFEQWpNLEVBQ0E3TSxFQUFBakMsS0FBQXVMLEtBQUEvSCxFQUFBZ0osRUFBQWpCLE1BQUF3UCxPQUVBOVksR0FLQThZLEVBQUEsR0FFSSxpQkFBQUEsRUFDSkEsR0FBQSxHQUVJL0wsTUFBQUMsUUFBQThMLEtBQ0pBLEVBQUF2TyxFQUFBakYsSUFBQXdULEVBQUEsU0FBQTlZLEdBQ0EsYUFBQUEsRUFBQSxHQUFBQSxFQUFBLE9BSUF3b0IsRUFBQWplLEVBQUFzM0IsU0FBQXY0QixLQUFBNUQsT0FBQTZFLEVBQUFzM0IsU0FBQXY0QixLQUFBcUwsU0FBQXhGLGlCQUdBLFFBQUFxWixRQUFBbG5CLElBQUFrbkIsRUFBQXpvQixJQUFBdUosS0FBQXdQLEVBQUEsV0FDQXhQLEtBQUF0SixNQUFBOFksT0F6REEvTSxHQUNBeWMsRUFBQWplLEVBQUFzM0IsU0FBQTkxQixFQUFBckcsT0FDQTZFLEVBQUFzM0IsU0FBQTkxQixFQUFBNEksU0FBQXhGLGlCQUdBLFFBQUFxWixRQUNBbG5CLEtBQUFxSyxFQUFBNmMsRUFBQTFvQixJQUFBaU0sRUFBQSxVQUVBSixFQU1BLGlCQUhBQSxFQUFBSSxFQUFBL0wsT0FJQTJMLEVBQUF5QixRQUFBdzBCLEdBQUEsSUFJQSxNQUFBajJCLEVBQUEsR0FBQUEsT0FHQSxLQXlDQXBCLEVBQUFnQyxPQUFBLENBQ0FzMUIsU0FBQSxDQUNBN1csT0FBQSxDQUNBbHJCLElBQUEsU0FBQWlNLEdBRUEsSUFBQStNLEVBQUF2TyxFQUFBZ04sS0FBQXNCLEtBQUE5TSxFQUFBLFNBQ0EsYUFBQStNLEVBQ0FBLEVBTUE0bkIsR0FBQW4yQixFQUFBSCxLQUFBMkIsTUFHQTJELE9BQUEsQ0FDQTVQLElBQUEsU0FBQWlNLEdBQ0EsSUFBQS9MLEVBQUFnckIsRUFBQXpwQixFQUNBc0QsRUFBQWtILEVBQUFsSCxRQUNBa2QsRUFBQWhXLEVBQUF3USxjQUNBK1EsRUFBQSxlQUFBdmhCLEVBQUFyRyxLQUNBK2tCLEVBQUE2QyxFQUFBLFFBQ0FrTCxFQUFBbEwsRUFBQXZMLEVBQUEsRUFBQWxkLEVBQUFyRCxPQVVBLElBUEFELEVBREF3Z0IsRUFBQSxFQUNBeVcsRUFHQWxMLEVBQUF2TCxFQUFBLEVBSVd4Z0IsRUFBQWkzQixFQUFTajNCLElBS3BCLEtBSkF5cEIsRUFBQW5tQixFQUFBdEQsSUFJQSthLFVBQUEvYSxJQUFBd2dCLEtBR0FpSixFQUFBeFgsWUFDQXdYLEVBQUEzZ0IsV0FBQW1KLFdBQ0FtQixFQUFBcVcsRUFBQTNnQixXQUFBLGNBTUEsR0FIQXJLLEVBQUF1SyxFQUFBeWdCLEdBQUFsUyxNQUdBd1UsRUFDQSxPQUFBdHRCLEVBSUF5cUIsRUFBQW5yQixLQUFBVSxHQUlBLE9BQUF5cUIsR0FHQTFxQixJQUFBLFNBQUFnTSxFQUFBL0wsR0FNQSxJQUxBLElBQUE4aEMsRUFBQTlXLEVBQ0FubUIsRUFBQWtILEVBQUFsSCxRQUNBNGxCLEVBQUFsZ0IsRUFBQTJELFVBQUFsTyxHQUNBdUIsRUFBQXNELEVBQUFyRCxPQUVBRCxPQUNBeXBCLEVBQUFubUIsRUFBQXRELElBSUErYSxTQUNBL1IsRUFBQTZELFFBQUE3RCxFQUFBczNCLFNBQUE3VyxPQUFBbHJCLElBQUFrckIsR0FBQVAsSUFBQSxLQUVBcVgsR0FBQSxHQVVBLE9BSEFBLElBQ0EvMUIsRUFBQXdRLGVBQUEsR0FFQWtPLE9BT0FsZ0IsRUFBQXVCLEtBQUEsZ0NBQ0F2QixFQUFBczNCLFNBQUF2NEIsTUFBQSxDQUNBdkosSUFBQSxTQUFBZ00sRUFBQS9MLEdBQ0EsR0FBQStNLE1BQUFDLFFBQUFoTixHQUNBLE9BQUErTCxFQUFBc1EsUUFBQTlSLEVBQUE2RCxRQUFBN0QsRUFBQXdCLEdBQUErTSxNQUFBOVksSUFBQSxJQUlBZ0ssRUFBQSsxQixVQUNBeDFCLEVBQUFzM0IsU0FBQXY0QixNQUFBeEosSUFBQSxTQUFBaU0sR0FDQSxjQUFBQSxFQUFBNkksYUFBQSxjQUFBN0ksRUFBQS9MLFVBV0EsSUFBQStoQyxHQUFBLGtDQUVBeDNCLEVBQUFnQyxPQUFBaEMsRUFBQWlqQixNQUFBLENBRUEyQyxRQUFBLFNBQUEzQyxFQUFBaHJCLEVBQUF1SixFQUFBaTJCLEdBRUEsSUFBQXpnQyxFQUFBdVUsRUFBQWpILEVBQUFvekIsRUFBQUMsRUFBQWhVLEVBQUE5SSxFQUNBK2MsRUFBQSxDQUFBcDJCLEdBQUE1SCxHQUNBdUIsRUFBQW1FLEVBQUE5TCxLQUFBeXZCLEVBQUEsUUFBQUEsRUFBQTluQixLQUFBOG5CLEVBQ0FPLEVBQUFsa0IsRUFBQTlMLEtBQUF5dkIsRUFBQSxhQUFBQSxFQUFBZSxVQUFBcmYsTUFBQSxRQUtBLEdBSEE0RyxFQUFBakgsRUFBQTlDLEtBQUE1SCxFQUdBLElBQUE0SCxFQUFBNkgsVUFBQSxJQUFBN0gsRUFBQTZILFdBS0FtdUIsR0FBQXJ0QixLQUFBaFAsRUFBQTZFLEVBQUFpakIsTUFBQVcsYUFJQXpvQixFQUFBckcsUUFBQSxVQUdBMHVCLEVBQUFyb0IsRUFBQXdKLE1BQUEsS0FDQXhKLEVBQUFxb0IsRUFBQTFZLFFBQ0EwWSxFQUFBemhCLFFBRUE0MUIsRUFBQXg4QixFQUFBckcsUUFBQSxhQUFBcUcsR0FHQThuQixJQUFBampCLEVBQUEwQyxTQUNBdWdCLEVBQ0EsSUFBQWpqQixFQUFBdWxCLE1BQUFwcUIsRUFBQSxpQkFBQThuQixPQUdBNFUsVUFBQUosRUFBQSxJQUNBeFUsRUFBQWUsVUFBQVIsRUFBQXZuQixLQUFBLEtBQ0FnbkIsRUFBQThCLFdBQUE5QixFQUFBZSxVQUNBLElBQUFuZCxPQUFBLFVBQUEyYyxFQUFBdm5CLEtBQUEsNEJBQ0EsS0FHQWduQixFQUFBN29CLFlBQUFyRCxFQUNBa3NCLEVBQUE3Z0IsU0FDQTZnQixFQUFBN2dCLE9BQUFaLEdBSUF2SixFQUFBLE1BQUFBLEVBQ0EsQ0FBQWdyQixHQUNBampCLEVBQUEyRCxVQUFBMUwsRUFBQSxDQUFBZ3JCLElBR0FwSSxFQUFBN2EsRUFBQWlqQixNQUFBcEksUUFBQTFmLElBQUEsR0FDQXM4QixJQUFBNWMsRUFBQStLLFVBQUEsSUFBQS9LLEVBQUErSyxRQUFBbHVCLE1BQUE4SixFQUFBdkosSUFBQSxDQU1BLElBQUF3L0IsSUFBQTVjLEVBQUE4SyxXQUFBM2xCLEVBQUFhLFNBQUFXLEdBQUEsQ0FNQSxJQUpBazJCLEVBQUE3YyxFQUFBaUosY0FBQTNvQixFQUNBcThCLEdBQUFydEIsS0FBQXV0QixFQUFBdjhCLEtBQ0FvUSxJQUFBekwsWUFFVXlMLEVBQUtBLElBQUF6TCxXQUNmODNCLEVBQUE3aUMsS0FBQXdXLEdBQ0FqSCxFQUFBaUgsRUFJQWpILEtBQUE5QyxFQUFBcUksZUFBQWpRLElBQ0FnK0IsRUFBQTdpQyxLQUFBdVAsRUFBQWdJLGFBQUFoSSxFQUFBd3pCLGNBQUEva0MsR0FNQSxJQURBaUUsRUFBQSxHQUNBdVUsRUFBQXFzQixFQUFBNWdDLFFBQUFpc0IsRUFBQTJCLHdCQUVBM0IsRUFBQTluQixLQUFBbkUsRUFBQSxFQUNBMGdDLEVBQ0E3YyxFQUFBa0osVUFBQTVvQixHQUdBd29CLEdBQUFyRyxFQUFBL25CLElBQUFnVyxFQUFBLGVBQWlEMFgsRUFBQTluQixPQUNqRG1pQixFQUFBL25CLElBQUFnVyxFQUFBLFlBRUFvWSxFQUFBanNCLE1BQUE2VCxFQUFBdFQsSUFJQTByQixFQUFBZ1UsR0FBQXBzQixFQUFBb3NCLEtBQ0FoVSxFQUFBanNCLE9BQUFzbEIsRUFBQXpSLEtBQ0EwWCxFQUFBN29CLE9BQUF1cEIsRUFBQWpzQixNQUFBNlQsRUFBQXRULElBQ0EsSUFBQWdyQixFQUFBN29CLFFBQ0E2b0IsRUFBQStCLGtCQW9DQSxPQWhDQS9CLEVBQUE5bkIsT0FHQXM4QixHQUFBeFUsRUFBQWlELHNCQUVBckwsRUFBQWlHLFdBQ0EsSUFBQWpHLEVBQUFpRyxTQUFBcHBCLE1BQUFrZ0MsRUFBQTE4QixNQUFBakQsS0FDQStrQixFQUFBeGIsSUFJQW0yQixHQUFBMzNCLEVBQUFzQyxXQUFBZCxFQUFBckcsTUFBQTZFLEVBQUFhLFNBQUFXLE1BR0E4QyxFQUFBOUMsRUFBQW0yQixNQUdBbjJCLEVBQUFtMkIsR0FBQSxNQUlBMzNCLEVBQUFpakIsTUFBQVcsVUFBQXpvQixFQUNBcUcsRUFBQXJHLEtBQ0E2RSxFQUFBaWpCLE1BQUFXLGVBQUE3c0IsRUFFQXVOLElBQ0E5QyxFQUFBbTJCLEdBQUFyekIsSUFNQTJlLEVBQUE3b0IsU0FLQTI5QixTQUFBLFNBQUE1OEIsRUFBQXFHLEVBQUF5aEIsR0FDQSxJQUFBdHRCLEVBQUFxSyxFQUFBZ0MsT0FDQSxJQUFBaEMsRUFBQXVsQixNQUNBdEMsRUFDQSxDQUNBOW5CLE9BQ0FtckIsYUFBQSxJQUlBdG1CLEVBQUFpakIsTUFBQTJDLFFBQUFqd0IsRUFBQSxLQUFBNkwsTUFLQXhCLEVBQUF2TCxHQUFBdU4sT0FBQSxDQUVBNGpCLFFBQUEsU0FBQXpxQixFQUFBbEQsR0FDQSxPQUFBOEcsS0FBQXdDLEtBQUEsV0FDQXZCLEVBQUFpakIsTUFBQTJDLFFBQUF6cUIsRUFBQWxELEVBQUE4RyxTQUdBaTVCLGVBQUEsU0FBQTc4QixFQUFBbEQsR0FDQSxJQUFBdUosRUFBQXpDLEtBQUEsR0FDQSxHQUFBeUMsRUFDQSxPQUFBeEIsRUFBQWlqQixNQUFBMkMsUUFBQXpxQixFQUFBbEQsRUFBQXVKLEdBQUEsTUFNQXhCLEVBQUF1QixLQUFBLHdMQUVBb0QsTUFBQSxLQUNBLFNBQUEzTixFQUFBNUIsR0FHQTRLLEVBQUF2TCxHQUFBVyxHQUFBLFNBQUE2QyxFQUFBeEQsR0FDQSxPQUFBZ04sVUFBQXhLLE9BQUEsRUFDQThILEtBQUE4akIsR0FBQXp0QixFQUFBLEtBQUE2QyxFQUFBeEQsR0FDQXNLLEtBQUE2bUIsUUFBQXh3QixNQUlBNEssRUFBQXZMLEdBQUF1TixPQUFBLENBQ0FpMkIsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFwNUIsS0FBQXFwQixXQUFBOFAsR0FBQTdQLFdBQUE4UCxHQUFBRCxNQU9BejRCLEVBQUEyNEIsUUFBQSxjQUFBcmxDLEVBV0EwTSxFQUFBMjRCLFNBQ0FwNEIsRUFBQXVCLEtBQUEsQ0FBZWlRLE1BQUEsVUFBQXFVLEtBQUEsWUFBcUMsU0FBQTJDLEVBQUEvRCxHQUdwRCxJQUFBclosRUFBQSxTQUFBNlgsR0FDQWpqQixFQUFBaWpCLE1BQUE4VSxTQUFBdFQsRUFBQXhCLEVBQUE3Z0IsT0FBQXBDLEVBQUFpakIsTUFBQXdCLElBQUF4QixLQUdBampCLEVBQUFpakIsTUFBQXBJLFFBQUE0SixHQUFBLENBQ0FQLE1BQUEsV0FDQSxJQUFBdGtCLEVBQUFiLEtBQUE4SyxlQUFBOUssS0FDQXM1QixFQUFBL2EsRUFBQVgsT0FBQS9jLEVBQUE2a0IsR0FFQTRULEdBQ0F6NEIsRUFBQTRNLGlCQUFBZ2MsRUFBQXBkLEdBQUEsR0FFQWtTLEVBQUFYLE9BQUEvYyxFQUFBNmtCLEdBQUE0VCxHQUFBLE9BRUFoVSxTQUFBLFdBQ0EsSUFBQXprQixFQUFBYixLQUFBOEssZUFBQTlLLEtBQ0FzNUIsRUFBQS9hLEVBQUFYLE9BQUEvYyxFQUFBNmtCLEdBQUEsRUFFQTRULEVBS0EvYSxFQUFBWCxPQUFBL2MsRUFBQTZrQixFQUFBNFQsSUFKQXo0QixFQUFBMmMsb0JBQUFpTSxFQUFBcGQsR0FBQSxHQUNBa1MsRUFBQS9ELE9BQUEzWixFQUFBNmtCLFFBU0EsSUFBQW5ULEdBQUF2ZSxFQUFBdWUsU0FFQWduQixHQUFBdDRCLEVBQUF3RSxNQUVBK3pCLEdBQUEsS0FLQXY0QixFQUFBdzRCLFNBQUEsU0FBQXZnQyxHQUNBLElBQUFrWSxFQUNBLElBQUFsWSxHQUFBLGlCQUFBQSxFQUNBLFlBS0EsSUFDQWtZLEdBQUEsSUFBQXBkLEVBQUEwbEMsV0FBQUMsZ0JBQUF6Z0MsRUFBQSxZQUNFLE1BQUF0QyxHQUNGd2EsT0FBQXBaLEVBTUEsT0FIQW9aLE1BQUFuRyxxQkFBQSxlQUFBL1MsUUFDQStJLEVBQUE3QyxNQUFBLGdCQUFBbEYsR0FFQWtZLEdBSUEsSUFDQXdvQixHQUFBLFFBQ0FDLEdBQUEsU0FDQUMsR0FBQSx3Q0FDQUMsR0FBQSxxQ0FFQSxTQUFBQyxHQUFBN0ksRUFBQXR2QixFQUFBbzRCLEVBQUF0aEIsR0FDQSxJQUFBdGlCLEVBRUEsR0FBQW9OLE1BQUFDLFFBQUE3QixHQUdBWixFQUFBdUIsS0FBQVgsRUFBQSxTQUFBNUosRUFBQXFoQixHQUNBMmdCLEdBQUFMLEdBQUF4dUIsS0FBQStsQixHQUdBeFksRUFBQXdZLEVBQUE3WCxHQUtBMGdCLEdBQ0E3SSxFQUFBLHNCQUFBN1gsR0FBQSxNQUFBQSxFQUFBcmhCLEVBQUEsUUFDQXFoQixFQUNBMmdCLEVBQ0F0aEIsVUFLRSxHQUFBc2hCLEdBQUEsV0FBQWg1QixFQUFBN0UsS0FBQXlGLEdBVUY4VyxFQUFBd1ksRUFBQXR2QixRQVBBLElBQUF4TCxLQUFBd0wsRUFDQW00QixHQUFBN0ksRUFBQSxJQUFBOTZCLEVBQUEsSUFBQXdMLEVBQUF4TCxHQUFBNGpDLEVBQUF0aEIsR0FZQTFYLEVBQUFpNUIsTUFBQSxTQUFBejlCLEVBQUF3OUIsR0FDQSxJQUFBOUksRUFDQXh4QixFQUFBLEdBQ0FnWixFQUFBLFNBQUFyWixFQUFBNjZCLEdBR0EsSUFBQXpqQyxFQUFBdUssRUFBQXNDLFdBQUE0MkIsR0FDQUEsSUFDQUEsRUFFQXg2QixJQUFBekgsUUFBQWtpQyxtQkFBQTk2QixHQUFBLElBQ0E4NkIsbUJBQUEsTUFBQTFqQyxFQUFBLEdBQUFBLElBSUEsR0FBQStNLE1BQUFDLFFBQUFqSCxNQUFBc0YsU0FBQWQsRUFBQXVDLGNBQUEvRyxHQUdBd0UsRUFBQXVCLEtBQUEvRixFQUFBLFdBQ0FrYyxFQUFBM1ksS0FBQTNKLEtBQUEySixLQUFBdEosY0FPQSxJQUFBeTZCLEtBQUExMEIsRUFDQXU5QixHQUFBN0ksRUFBQTEwQixFQUFBMDBCLEdBQUE4SSxFQUFBdGhCLEdBS0EsT0FBQWhaLEVBQUF6QyxLQUFBLE1BR0ErRCxFQUFBdkwsR0FBQXVOLE9BQUEsQ0FDQW8zQixVQUFBLFdBQ0EsT0FBQXA1QixFQUFBaTVCLE1BQUFsNkIsS0FBQXM2QixtQkFFQUEsZUFBQSxXQUNBLE9BQUF0NkIsS0FBQWhFLElBQUEsV0FHQSxJQUFBc1QsRUFBQXJPLEVBQUFvZCxLQUFBcmUsS0FBQSxZQUNBLE9BQUFzUCxFQUFBck8sRUFBQTJELFVBQUEwSyxHQUFBdFAsT0FFQStOLE9BQUEsV0FDQSxJQUFBM1IsRUFBQTRELEtBQUE1RCxLQUdBLE9BQUE0RCxLQUFBM0osT0FBQTRLLEVBQUFqQixNQUFBdVgsR0FBQSxjQUNBd2lCLEdBQUEzdUIsS0FBQXBMLEtBQUFxTCxZQUFBeXVCLEdBQUExdUIsS0FBQWhQLEtBQ0E0RCxLQUFBK1MsVUFBQXVPLEdBQUFsVyxLQUFBaFAsTUFFQUosSUFBQSxTQUFBL0QsRUFBQXdLLEdBQ0EsSUFBQStNLEVBQUF2TyxFQUFBakIsTUFBQXdQLE1BRUEsYUFBQUEsRUFDQSxLQUdBL0wsTUFBQUMsUUFBQThMLEdBQ0F2TyxFQUFBakYsSUFBQXdULEVBQUEsU0FBQUEsR0FDQSxPQUFhblosS0FBQW9NLEVBQUFwTSxLQUFBSyxNQUFBOFksRUFBQTFMLFFBQUErMUIsR0FBQSxXQUliLENBQVd4akMsS0FBQW9NLEVBQUFwTSxLQUFBSyxNQUFBOFksRUFBQTFMLFFBQUErMUIsR0FBQSxXQUNScmpDLFNBS0gsSUFDQStqQyxHQUFBLE9BQ0FDLEdBQUEsT0FDQUMsR0FBQSxnQkFDQUMsR0FBQSw2QkFJQUMsR0FBQSxpQkFDQUMsR0FBQSxRQVdBbkgsR0FBQSxHQU9Bb0gsR0FBQSxHQUdBQyxHQUFBLEtBQUF2K0IsT0FBQSxLQUdBdytCLEdBQUFsZ0MsRUFBQUMsY0FBQSxLQUlBLFNBQUFrZ0MsR0FBQUMsR0FHQSxnQkFBQUMsRUFBQXJnQixHQUVBLGlCQUFBcWdCLElBQ0FyZ0IsRUFBQXFnQixFQUNBQSxFQUFBLEtBR0EsSUFBQUMsRUFDQWxqQyxFQUFBLEVBQ0FtakMsRUFBQUYsRUFBQXIxQixjQUFBNkUsTUFBQTBPLElBQUEsR0FFQSxHQUFBblksRUFBQXNDLFdBQUFzWCxHQUdBLEtBQUFzZ0IsRUFBQUMsRUFBQW5qQyxNQUdBLE1BQUFrakMsRUFBQSxJQUNBQSxJQUFBcC9CLE1BQUEsU0FDQWsvQixFQUFBRSxHQUFBRixFQUFBRSxJQUFBLElBQUEvckIsUUFBQXlMLEtBSUFvZ0IsRUFBQUUsR0FBQUYsRUFBQUUsSUFBQSxJQUFBbmxDLEtBQUE2a0IsSUFRQSxTQUFBd2dCLEdBQUFKLEVBQUExL0IsRUFBQXk0QixFQUFBc0gsR0FFQSxJQUFBQyxFQUFBLEdBQ0FDLEVBQUFQLElBQUFKLEdBRUEsU0FBQVksRUFBQU4sR0FDQSxJQUFBbm9CLEVBY0EsT0FiQXVvQixFQUFBSixJQUFBLEVBQ0FsNkIsRUFBQXVCLEtBQUF5NEIsRUFBQUUsSUFBQSxZQUFBL3hCLEVBQUFzeUIsR0FDQSxJQUFBQyxFQUFBRCxFQUFBbmdDLEVBQUF5NEIsRUFBQXNILEdBQ0EsdUJBQUFLLEdBQ0FILEdBQUFELEVBQUFJLEdBS0lILElBQ0p4b0IsRUFBQTJvQixRQURJLEdBSEpwZ0MsRUFBQTYvQixVQUFBaHNCLFFBQUF1c0IsR0FDQUYsRUFBQUUsSUFDQSxLQUtBM29CLEVBR0EsT0FBQXlvQixFQUFBbGdDLEVBQUE2L0IsVUFBQSxNQUFBRyxFQUFBLE1BQUFFLEVBQUEsS0FNQSxTQUFBRyxHQUFBdjRCLEVBQUFySSxHQUNBLElBQUFzRSxFQUFBZ0UsRUFDQXU0QixFQUFBNTZCLEVBQUE2NkIsYUFBQUQsYUFBQSxHQUVBLElBQUF2OEIsS0FBQXRFLE9BQ0FoRCxJQUFBZ0QsRUFBQXNFLE1BQ0F1OEIsRUFBQXY4QixHQUFBK0QsRUFBQUMsTUFBQSxLQUF3RGhFLEdBQUF0RSxFQUFBc0UsSUFPeEQsT0FKQWdFLEdBQ0FyQyxFQUFBZ0MsUUFBQSxFQUFBSSxFQUFBQyxHQUdBRCxFQS9FQTAzQixHQUFBbm9CLEtBQUFMLEdBQUFLLEtBZ1BBM1IsRUFBQWdDLE9BQUEsQ0FHQXBOLE9BQUEsRUFHQWttQyxhQUFBLEdBQ0FDLEtBQUEsR0FFQUYsYUFBQSxDQUNBRyxJQUFBMXBCLEdBQUFLLEtBQ0F4VyxLQUFBLE1BQ0E4L0IsUUF2UkEsNERBdVJBOXdCLEtBQUFtSCxHQUFBNHBCLFVBQ0F0OEIsUUFBQSxFQUNBdThCLGFBQUEsRUFDQUMsT0FBQSxFQUNBQyxZQUFBLG1EQWNBQyxRQUFBLENBQ0FqSSxJQUFBd0csR0FDQWg2QixLQUFBLGFBQ0ErcEIsS0FBQSxZQUNBelosSUFBQSw0QkFDQW9yQixLQUFBLHFDQUdBcGtCLFNBQUEsQ0FDQWhILElBQUEsVUFDQXlaLEtBQUEsU0FDQTJSLEtBQUEsWUFHQUMsZUFBQSxDQUNBcnJCLElBQUEsY0FDQXRRLEtBQUEsZUFDQTA3QixLQUFBLGdCQUtBRSxXQUFBLENBR0FDLFNBQUFuekIsT0FHQW96QixhQUFBLEVBR0FDLFlBQUF2aUMsS0FBQUMsTUFHQXVpQyxXQUFBNzdCLEVBQUF3NEIsVUFPQW9DLFlBQUEsQ0FDQUksS0FBQSxFQUNBOTZCLFNBQUEsSUFPQTQ3QixVQUFBLFNBQUExNUIsRUFBQTI1QixHQUNBLE9BQUFBLEVBR0FwQixNQUFBdjRCLEVBQUFwQyxFQUFBNjZCLGNBQUFrQixHQUdBcEIsR0FBQTM2QixFQUFBNjZCLGFBQUF6NEIsSUFHQTQ1QixjQUFBakMsR0FBQXZILElBQ0F5SixjQUFBbEMsR0FBQUgsSUFHQXNDLEtBQUEsU0FBQWxCLEVBQUExZ0MsR0FHQSxpQkFBQTBnQyxJQUNBMWdDLEVBQUEwZ0MsRUFDQUEsT0FBQWprQyxHQUlBdUQsS0FBQSxHQUVBLElBQUE2aEMsRUFHQUMsRUFHQUMsRUFDQUMsRUFHQUMsRUFHQUMsRUFHQWxnQixFQUdBbWdCLEVBR0F6bEMsRUFHQTBsQyxFQUdBaCtCLEVBQUFzQixFQUFBODdCLFVBQUEsR0FBMkJ4aEMsR0FHM0JxaUMsRUFBQWorQixFQUFBd0IsU0FBQXhCLEVBR0FrK0IsRUFBQWwrQixFQUFBd0IsVUFDQXk4QixFQUFBdHpCLFVBQUFzekIsRUFBQTc3QixRQUNBZCxFQUFBMjhCLEdBQ0EzOEIsRUFBQWlqQixNQUdBOW9CLEVBQUE2RixFQUFBMlosV0FDQWtqQixFQUFBNzhCLEVBQUE0WSxVQUFBLGVBR0Fra0IsRUFBQXArQixFQUFBbytCLFlBQUEsR0FHQUMsRUFBQSxHQUNBQyxFQUFBLEdBR0FDLEVBQUEsV0FHQTVDLEVBQUEsQ0FDQWxoQyxXQUFBLEVBR0ErakMsa0JBQUEsU0FBQTcrQixHQUNBLElBQUFvTCxFQUNBLEdBQUE2UyxFQUFBLENBQ0EsSUFBQWdnQixFQUVBLElBREFBLEVBQUEsR0FDQTd5QixFQUFBZ3dCLEdBQUEzdkIsS0FBQXV5QixJQUNBQyxFQUFBN3lCLEVBQUEsR0FBQTdFLGVBQUE2RSxFQUFBLEdBR0FBLEVBQUE2eUIsRUFBQWorQixFQUFBdUcsZUFFQSxhQUFBNkUsRUFBQSxLQUFBQSxHQUlBMHpCLHNCQUFBLFdBQ0EsT0FBQTdnQixFQUFBK2YsRUFBQSxNQUlBZSxpQkFBQSxTQUFBaG9DLEVBQUFLLEdBTUEsT0FMQSxNQUFBNm1CLElBQ0FsbkIsRUFBQTRuQyxFQUFBNW5DLEVBQUF3UCxlQUNBbzRCLEVBQUE1bkMsRUFBQXdQLGdCQUFBeFAsRUFDQTJuQyxFQUFBM25DLEdBQUFLLEdBRUFzSixNQUlBcytCLGlCQUFBLFNBQUFsaUMsR0FJQSxPQUhBLE1BQUFtaEIsSUFDQTVkLEVBQUE0K0IsU0FBQW5pQyxHQUVBNEQsTUFJQSs5QixXQUFBLFNBQUEvaEMsR0FDQSxJQUFBNEUsRUFDQSxHQUFBNUUsRUFDQSxHQUFBdWhCLEVBR0ErZCxFQUFBdGdCLE9BQUFoZixFQUFBcy9CLEVBQUF6aUMsY0FJQSxJQUFBK0gsS0FBQTVFLEVBQ0EraEMsRUFBQW45QixHQUFBLENBQUFtOUIsRUFBQW45QixHQUFBNUUsRUFBQTRFLElBSUEsT0FBQVosTUFJQXcrQixNQUFBLFNBQUFDLEdBQ0EsSUFBQUMsRUFBQUQsR0FBQVAsRUFLQSxPQUpBZCxHQUNBQSxFQUFBb0IsTUFBQUUsR0FFQTEzQixFQUFBLEVBQUEwM0IsR0FDQTErQixPQW9CQSxHQWZBNUUsRUFBQVQsUUFBQTJnQyxHQUtBMzdCLEVBQUFzOEIsU0FBQXQ4QixFQUFBczhCLEtBQUExcEIsR0FBQUssTUFBQSxJQUNBOU8sUUFBQTgyQixHQUFBcm9CLEdBQUE0cEIsU0FBQSxNQUdBeDhCLEVBQUF2RCxLQUFBYixFQUFBb2UsUUFBQXBlLEVBQUFhLE1BQUF1RCxFQUFBZ2EsUUFBQWhhLEVBQUF2RCxLQUdBdUQsRUFBQXk3QixXQUFBejdCLEVBQUF3N0IsVUFBQSxLQUFBdDFCLGNBQUE2RSxNQUFBME8sSUFBQSxLQUdBLE1BQUF6WixFQUFBZy9CLFlBQUEsQ0FDQWxCLEVBQUE1aUMsRUFBQUMsY0FBQSxLQUtBLElBQ0EyaUMsRUFBQTdxQixLQUFBalQsRUFBQXM4QixJQUlBd0IsRUFBQTdxQixLQUFBNnFCLEVBQUE3cUIsS0FDQWpULEVBQUFnL0IsWUFBQTVELEdBQUFvQixTQUFBLEtBQUFwQixHQUFBNkQsTUFDQW5CLEVBQUF0QixTQUFBLEtBQUFzQixFQUFBbUIsS0FDSSxNQUFBaG9DLEdBSUorSSxFQUFBZy9CLGFBQUEsR0FhQSxHQVJBaC9CLEVBQUF6RyxNQUFBeUcsRUFBQXk4QixhQUFBLGlCQUFBejhCLEVBQUF6RyxPQUNBeUcsRUFBQXpHLEtBQUErSCxFQUFBaTVCLE1BQUF2NkIsRUFBQXpHLEtBQUF5RyxFQUFBczZCLGNBSUFvQixHQUFBNUgsR0FBQTl6QixFQUFBcEUsRUFBQSsvQixHQUdBL2QsRUFDQSxPQUFBK2QsRUE2RUEsSUFBQXJqQyxLQXhFQXlsQyxFQUFBejhCLEVBQUFpakIsT0FBQXZrQixFQUFBRSxTQUdBLEdBQUFvQixFQUFBcEwsVUFDQW9MLEVBQUFpakIsTUFBQTJDLFFBQUEsYUFJQWxuQixFQUFBdkQsS0FBQXVELEVBQUF2RCxLQUFBdUYsY0FHQWhDLEVBQUFrL0IsWUFBQWxFLEdBQUF2dkIsS0FBQXpMLEVBQUF2RCxNQUtBaWhDLEVBQUExOUIsRUFBQXM4QixJQUFBbjRCLFFBQUEwMkIsR0FBQSxJQUdBNzZCLEVBQUFrL0IsV0F1QkdsL0IsRUFBQXpHLE1BQUF5RyxFQUFBeThCLGFBQ0gsS0FBQXo4QixFQUFBMjhCLGFBQUEsSUFBQXZtQyxRQUFBLHVDQUNBNEosRUFBQXpHLEtBQUF5RyxFQUFBekcsS0FBQTRLLFFBQUF5MkIsR0FBQSxPQXRCQW9ELEVBQUFoK0IsRUFBQXM4QixJQUFBbGdDLE1BQUFzaEMsRUFBQW5sQyxRQUdBeUgsRUFBQXpHLE9BQ0Fta0MsSUFBQTdELEdBQUFwdUIsS0FBQWl5QixHQUFBLFNBQUExOUIsRUFBQXpHLFlBR0F5RyxFQUFBekcsT0FJQSxJQUFBeUcsRUFBQWtNLFFBQ0F3eEIsSUFBQXY1QixRQUFBMjJCLEdBQUEsTUFDQWtELEdBQUFuRSxHQUFBcHVCLEtBQUFpeUIsR0FBQSxjQUFBOUQsS0FBQW9FLEdBSUFoK0IsRUFBQXM4QixJQUFBb0IsRUFBQU0sR0FTQWgrQixFQUFBbS9CLGFBQ0E3OUIsRUFBQTg2QixhQUFBc0IsSUFDQS9CLEVBQUErQyxpQkFBQSxvQkFBQXA5QixFQUFBODZCLGFBQUFzQixJQUVBcDhCLEVBQUErNkIsS0FBQXFCLElBQ0EvQixFQUFBK0MsaUJBQUEsZ0JBQUFwOUIsRUFBQSs2QixLQUFBcUIsTUFLQTE5QixFQUFBekcsTUFBQXlHLEVBQUFrL0IsYUFBQSxJQUFBbC9CLEVBQUEyOEIsYUFBQS9nQyxFQUFBK2dDLGNBQ0FoQixFQUFBK0MsaUJBQUEsZUFBQTErQixFQUFBMjhCLGFBSUFoQixFQUFBK0MsaUJBQ0EsU0FDQTErQixFQUFBeTdCLFVBQUEsSUFBQXo3QixFQUFBNDhCLFFBQUE1OEIsRUFBQXk3QixVQUFBLElBQ0F6N0IsRUFBQTQ4QixRQUFBNThCLEVBQUF5N0IsVUFBQSxLQUNBLE1BQUF6N0IsRUFBQXk3QixVQUFBLFFBQUFOLEdBQUEsV0FBc0QsSUFDdERuN0IsRUFBQTQ4QixRQUFBLE1BSUE1OEIsRUFBQW8vQixRQUNBekQsRUFBQStDLGlCQUFBcG1DLEVBQUEwSCxFQUFBby9CLFFBQUE5bUMsSUFJQSxHQUFBMEgsRUFBQXEvQixjQUNBLElBQUFyL0IsRUFBQXEvQixXQUFBdnFDLEtBQUFtcEMsRUFBQXRDLEVBQUEzN0IsSUFBQTRkLEdBR0EsT0FBQStkLEVBQUFrRCxRQWVBLEdBWEFOLEVBQUEsUUFHQUosRUFBQW5sQixJQUFBaFosRUFBQXcwQixVQUNBbUgsRUFBQXQwQixLQUFBckgsRUFBQXMvQixTQUNBM0QsRUFBQTFoQixLQUFBamEsRUFBQXZCLE9BR0FnL0IsRUFBQS9CLEdBQUFSLEdBQUFsN0IsRUFBQXBFLEVBQUErL0IsR0FLRyxDQVNILEdBUkFBLEVBQUFsaEMsV0FBQSxFQUdBc2pDLEdBQ0FHLEVBQUFoWCxRQUFBLFlBQUF5VSxFQUFBMzdCLElBSUE0ZCxFQUNBLE9BQUErZCxFQUlBMzdCLEVBQUEwOEIsT0FBQTE4QixFQUFBMUYsUUFBQSxJQUNBdWpDLEVBQUF4cEMsRUFBQXlvQixXQUFBLFdBQ0E2ZSxFQUFBa0QsTUFBQSxZQUNLNytCLEVBQUExRixVQUdMLElBQ0FzakIsR0FBQSxFQUNBNmYsRUFBQWxqQyxLQUFBOGpDLEVBQUFoM0IsR0FDSSxNQUFBcFEsR0FHSixHQUFBMm1CLEVBQ0EsTUFBQTNtQixFQUlBb1EsR0FBQSxFQUFBcFEsU0FoQ0FvUSxHQUFBLGtCQXFDQSxTQUFBQSxFQUFBbk8sRUFBQXFtQyxFQUFBQyxFQUFBSixHQUNBLElBQUFLLEVBQUFILEVBQUE3Z0MsRUFBQWloQyxFQUFBQyxFQUNBYixFQUFBUyxFQUdBM2hCLElBSUFBLEdBQUEsRUFHQWlnQixHQUNBeHBDLEVBQUF3aUMsYUFBQWdILEdBS0FKLE9BQUFwbEMsRUFHQXNsQyxFQUFBeUIsR0FBQSxHQUdBekQsRUFBQWxoQyxXQUFBdkIsRUFBQSxNQUdBdW1DLEVBQUF2bUMsR0FBQSxLQUFBQSxFQUFBLFdBQUFBLEVBR0FzbUMsSUFDQUUsRUExbEJBLFNBQUExL0IsRUFBQTI3QixFQUFBNkQsR0FPQSxJQUxBLElBQUFJLEVBQUFuakMsRUFBQW9qQyxFQUFBQyxFQUNBcm5CLEVBQUF6WSxFQUFBeVksU0FDQWdqQixFQUFBejdCLEVBQUF5N0IsVUFHQSxNQUFBQSxFQUFBLElBQ0FBLEVBQUFydkIsYUFDQS9ULElBQUF1bkMsSUFDQUEsRUFBQTUvQixFQUFBNCtCLFVBQUFqRCxFQUFBNkMsa0JBQUEsaUJBS0EsR0FBQW9CLEVBQ0EsSUFBQW5qQyxLQUFBZ2MsRUFDQSxHQUFBQSxFQUFBaGMsSUFBQWdjLEVBQUFoYyxHQUFBZ1AsS0FBQW0wQixHQUFBLENBQ0FuRSxFQUFBaHNCLFFBQUFoVCxHQUNBLE1BTUEsR0FBQWcvQixFQUFBLEtBQUErRCxFQUNBSyxFQUFBcEUsRUFBQSxPQUNFLENBR0YsSUFBQWgvQixLQUFBK2lDLEVBQUEsQ0FDQSxJQUFBL0QsRUFBQSxJQUFBejdCLEVBQUErOEIsV0FBQXRnQyxFQUFBLElBQUFnL0IsRUFBQSxLQUNBb0UsRUFBQXBqQyxFQUNBLE1BRUFxakMsSUFDQUEsRUFBQXJqQyxHQUtBb2pDLEtBQUFDLEVBTUEsR0FBQUQsRUFJQSxPQUhBQSxJQUFBcEUsRUFBQSxJQUNBQSxFQUFBaHNCLFFBQUFvd0IsR0FFQUwsRUFBQUssR0F1aUJBRSxDQUFBLy9CLEVBQUEyN0IsRUFBQTZELElBSUFFLEVBcGlCQSxTQUFBMS9CLEVBQUEwL0IsRUFBQS9ELEVBQUE4RCxHQUNBLElBQUFPLEVBQUFDLEVBQUFDLEVBQUF0NkIsRUFBQThTLEVBQ0Fxa0IsRUFBQSxHQUdBdEIsRUFBQXo3QixFQUFBeTdCLFVBQUFyL0IsUUFHQSxHQUFBcS9CLEVBQUEsR0FDQSxJQUFBeUUsS0FBQWxnQyxFQUFBKzhCLFdBQ0FBLEVBQUFtRCxFQUFBaDZCLGVBQUFsRyxFQUFBKzhCLFdBQUFtRCxHQU9BLElBSEFELEVBQUF4RSxFQUFBcnZCLFFBR0E2ekIsR0FjQSxHQVpBamdDLEVBQUE4OEIsZUFBQW1ELEtBQ0F0RSxFQUFBMzdCLEVBQUE4OEIsZUFBQW1ELElBQUFQLElBSUFobkIsR0FBQSttQixHQUFBei9CLEVBQUFtZ0MsYUFDQVQsRUFBQTEvQixFQUFBbWdDLFdBQUFULEVBQUExL0IsRUFBQXc3QixXQUdBOWlCLEVBQUF1bkIsRUFDQUEsRUFBQXhFLEVBQUFydkIsUUFLQSxTQUFBNnpCLEVBRUFBLEVBQUF2bkIsT0FHSSxTQUFBQSxPQUFBdW5CLEVBQUEsQ0FNSixLQUhBQyxFQUFBbkQsRUFBQXJrQixFQUFBLElBQUF1bkIsSUFBQWxELEVBQUEsS0FBQWtELElBSUEsSUFBQUQsS0FBQWpELEVBSUEsSUFEQW4zQixFQUFBbzZCLEVBQUEvNUIsTUFBQSxNQUNBLEtBQUFnNkIsSUFHQUMsRUFBQW5ELEVBQUFya0IsRUFBQSxJQUFBOVMsRUFBQSxLQUNBbTNCLEVBQUEsS0FBQW4zQixFQUFBLEtBQ0EsRUFHQSxJQUFBczZCLEVBQ0FBLEVBQUFuRCxFQUFBaUQsSUFHUyxJQUFBakQsRUFBQWlELEtBQ1RDLEVBQUFyNkIsRUFBQSxHQUNBNjFCLEVBQUFoc0IsUUFBQTdKLEVBQUEsS0FFQSxNQU9BLFFBQUFzNkIsRUFHQSxHQUFBQSxHQUFBbGdDLEVBQUFvZ0MsT0FDQVYsRUFBQVEsRUFBQVIsUUFFQSxJQUNBQSxFQUFBUSxFQUFBUixHQUNPLE1BQUF6b0MsR0FDUCxPQUNBbWtCLE1BQUEsY0FDQTNjLE1BQUF5aEMsRUFBQWpwQyxFQUFBLHNCQUFBeWhCLEVBQUEsT0FBQXVuQixJQVNBLE9BQVM3a0IsTUFBQSxVQUFBN2hCLEtBQUFtbUMsR0F1Y1RXLENBQUFyZ0MsRUFBQTAvQixFQUFBL0QsRUFBQThELEdBR0FBLEdBR0F6L0IsRUFBQW0vQixjQUNBUSxFQUFBaEUsRUFBQTZDLGtCQUFBLG9CQUVBbDlCLEVBQUE4NkIsYUFBQXNCLEdBQUFpQyxJQUVBQSxFQUFBaEUsRUFBQTZDLGtCQUFBLFdBRUFsOUIsRUFBQSs2QixLQUFBcUIsR0FBQWlDLElBS0EsTUFBQXptQyxHQUFBLFNBQUE4RyxFQUFBdkQsS0FDQXFpQyxFQUFBLFlBR0ssTUFBQTVsQyxFQUNMNGxDLEVBQUEsZUFJQUEsRUFBQVksRUFBQXRrQixNQUNBa2tCLEVBQUFJLEVBQUFubUMsS0FFQWttQyxJQURBaGhDLEVBQUFpaEMsRUFBQWpoQyxVQU1BQSxFQUFBcWdDLEdBQ0E1bEMsR0FBQTRsQyxJQUNBQSxFQUFBLFFBQ0E1bEMsRUFBQSxJQUNBQSxFQUFBLEtBTUF5aUMsRUFBQXppQyxTQUNBeWlDLEVBQUFtRCxZQUFBUyxHQUFBVCxHQUFBLEdBR0FXLEVBQ0Foa0MsRUFBQStnQixZQUFBeWhCLEVBQUEsQ0FBQXFCLEVBQUFSLEVBQUFuRCxJQUVBbGdDLEVBQUFtaEIsV0FBQXFoQixFQUFBLENBQUF0QyxFQUFBbUQsRUFBQXJnQyxJQUlBazlCLEVBQUF5QyxjQUNBQSxPQUFBL2xDLEVBRUEwbEMsR0FDQUcsRUFBQWhYLFFBQUF1WSxFQUFBLDBCQUNBLENBQUE5RCxFQUFBMzdCLEVBQUF5L0IsRUFBQUgsRUFBQTdnQyxJQUlBMC9CLEVBQUFuakIsU0FBQWlqQixFQUFBLENBQUF0QyxFQUFBbUQsSUFFQWYsSUFDQUcsRUFBQWhYLFFBQUEsZ0JBQUF5VSxFQUFBMzdCLE1BR0FzQixFQUFBcEwsUUFDQW9MLEVBQUFpakIsTUFBQTJDLFFBQUEsY0FLQSxPQUFBeVUsR0FHQTJFLFFBQUEsU0FBQWhFLEVBQUEvaUMsRUFBQW5CLEdBQ0EsT0FBQWtKLEVBQUF6SyxJQUFBeWxDLEVBQUEvaUMsRUFBQW5CLEVBQUEsU0FHQW1vQyxVQUFBLFNBQUFqRSxFQUFBbGtDLEdBQ0EsT0FBQWtKLEVBQUF6SyxJQUFBeWxDLE9BQUFqa0MsRUFBQUQsRUFBQSxhQUlBa0osRUFBQXVCLEtBQUEsd0JBQUF2SyxFQUFBMGhCLEdBQ0ExWSxFQUFBMFksR0FBQSxTQUFBc2lCLEVBQUEvaUMsRUFBQW5CLEVBQUFxRSxHQVVBLE9BUEE2RSxFQUFBc0MsV0FBQXJLLEtBQ0FrRCxLQUFBckUsRUFDQUEsRUFBQW1CLEVBQ0FBLE9BQUFsQixHQUlBaUosRUFBQWs4QixLQUFBbDhCLEVBQUFnQyxPQUFBLENBQ0FnNUIsTUFDQTcvQixLQUFBdWQsRUFDQXdoQixTQUFBLytCLEVBQ0FsRCxPQUNBK2xDLFFBQUFsbkMsR0FDR2tKLEVBQUF1QyxjQUFBeTRCLFdBS0hoN0IsRUFBQTZwQixTQUFBLFNBQUFtUixHQUNBLE9BQUFoN0IsRUFBQWs4QixLQUFBLENBQ0FsQixNQUdBNy9CLEtBQUEsTUFDQSsrQixTQUFBLFNBQ0F0dkIsT0FBQSxFQUNBd3dCLE9BQUEsRUFDQXg4QixRQUFBLEVBQ0FrZ0MsUUFBQSxLQUtBOStCLEVBQUF2TCxHQUFBdU4sT0FBQSxDQUNBazlCLFFBQUEsU0FBQXRWLEdBQ0EsSUFBQTlILEVBeUJBLE9BdkJBL2lCLEtBQUEsS0FDQWlCLEVBQUFzQyxXQUFBc25CLEtBQ0FBLElBQUFwMkIsS0FBQXVMLEtBQUEsS0FJQStpQixFQUFBOWhCLEVBQUE0cEIsRUFBQTdxQixLQUFBLEdBQUE4SyxlQUFBbEksR0FBQSxHQUFBUSxPQUFBLEdBRUFwRCxLQUFBLEdBQUFlLFlBQ0FnaUIsRUFBQTBJLGFBQUF6ckIsS0FBQSxJQUdBK2lCLEVBQUEvbUIsSUFBQSxXQUdBLElBRkEsSUFBQXlHLEVBQUF6QyxLQUVBeUMsRUFBQTI5QixtQkFDQTM5QixJQUFBMjlCLGtCQUdBLE9BQUEzOUIsSUFDSThvQixPQUFBdnJCLE9BR0pBLE1BR0FxZ0MsVUFBQSxTQUFBeFYsR0FDQSxPQUFBNXBCLEVBQUFzQyxXQUFBc25CLEdBQ0E3cUIsS0FBQXdDLEtBQUEsU0FBQXZLLEdBQ0FnSixFQUFBakIsTUFBQXFnQyxVQUFBeFYsRUFBQXAyQixLQUFBdUwsS0FBQS9ILE1BSUErSCxLQUFBd0MsS0FBQSxXQUNBLElBQUFzVixFQUFBN1csRUFBQWpCLE1BQ0FvWSxFQUFBTixFQUFBTSxXQUVBQSxFQUFBbGdCLE9BQ0FrZ0IsRUFBQStuQixRQUFBdFYsR0FHQS9TLEVBQUF5VCxPQUFBVixNQUtBOUgsS0FBQSxTQUFBOEgsR0FDQSxJQUFBdG5CLEVBQUF0QyxFQUFBc0MsV0FBQXNuQixHQUVBLE9BQUE3cUIsS0FBQXdDLEtBQUEsU0FBQXZLLEdBQ0FnSixFQUFBakIsTUFBQW1nQyxRQUFBNThCLEVBQUFzbkIsRUFBQXAyQixLQUFBdUwsS0FBQS9ILEdBQUE0eUIsTUFJQXlWLE9BQUEsU0FBQXAvQixHQUlBLE9BSEFsQixLQUFBMUQsT0FBQTRFLEdBQUE2USxJQUFBLFFBQUF2UCxLQUFBLFdBQ0F2QixFQUFBakIsTUFBQTRyQixZQUFBNXJCLEtBQUFxSyxjQUVBckssUUFLQWlCLEVBQUFvTyxLQUFBekgsUUFBQStxQixPQUFBLFNBQUFsd0IsR0FDQSxPQUFBeEIsRUFBQW9PLEtBQUF6SCxRQUFBMjRCLFFBQUE5OUIsSUFFQXhCLEVBQUFvTyxLQUFBekgsUUFBQTI0QixRQUFBLFNBQUE5OUIsR0FDQSxTQUFBQSxFQUFBKzlCLGFBQUEvOUIsRUFBQWcrQixjQUFBaCtCLEVBQUFvdUIsaUJBQUEzNEIsU0FNQStJLEVBQUE2NkIsYUFBQTRFLElBQUEsV0FDQSxJQUNBLFdBQUExc0MsRUFBQTZGLGVBQ0UsTUFBQWpELE1BR0YsSUFBQStwQyxHQUFBLENBR0FDLEVBQUEsSUFJQUMsS0FBQSxLQUVBQyxHQUFBNy9CLEVBQUE2NkIsYUFBQTRFLE1BRUFoZ0MsRUFBQXFnQyxPQUFBRCxJQUFBLG9CQUFBQSxHQUNBcGdDLEVBQUF5OEIsS0FBQTJELFFBRUE3L0IsRUFBQWk4QixjQUFBLFNBQUEzaEMsR0FDQSxJQUFBeEQsRUFBQWlwQyxFQUdBLEdBQUF0Z0MsRUFBQXFnQyxNQUFBRCxLQUFBdmxDLEVBQUFvakMsWUFDQSxPQUNBemtDLEtBQUEsU0FBQTZrQyxFQUFBNUssR0FDQSxJQUFBbDhCLEVBQ0F5b0MsRUFBQW5sQyxFQUFBbWxDLE1BV0EsR0FUQUEsRUFBQTFtQyxLQUNBdUIsRUFBQWEsS0FDQWIsRUFBQTBnQyxJQUNBMWdDLEVBQUE4Z0MsTUFDQTlnQyxFQUFBMGxDLFNBQ0ExbEMsRUFBQXFZLFVBSUFyWSxFQUFBMmxDLFVBQ0EsSUFBQWpwQyxLQUFBc0QsRUFBQTJsQyxVQUNBUixFQUFBem9DLEdBQUFzRCxFQUFBMmxDLFVBQUFqcEMsR0FtQkEsSUFBQUEsS0FkQXNELEVBQUFnakMsVUFBQW1DLEVBQUFwQyxrQkFDQW9DLEVBQUFwQyxpQkFBQS9pQyxFQUFBZ2pDLFVBUUFoakMsRUFBQW9qQyxhQUFBSSxFQUFBLHNCQUNBQSxFQUFBLHNDQUlBQSxFQUNBMkIsRUFBQXJDLGlCQUFBcG1DLEVBQUE4bUMsRUFBQTltQyxJQUlBRixFQUFBLFNBQUFxRSxHQUNBLGtCQUNBckUsSUFDQUEsRUFBQWlwQyxFQUFBTixFQUFBUyxPQUNBVCxFQUFBVSxRQUFBVixFQUFBVyxRQUFBWCxFQUFBdm1DLG1CQUFBLEtBRUEsVUFBQWlDLEVBQ0Fza0MsRUFBQWxDLFFBQ1EsVUFBQXBpQyxFQUtSLGlCQUFBc2tDLEVBQUE3bkMsT0FDQXM3QixFQUFBLFdBRUFBLEVBR0F1TSxFQUFBN25DLE9BQ0E2bkMsRUFBQWpDLFlBSUF0SyxFQUNBd00sR0FBQUQsRUFBQTduQyxTQUFBNm5DLEVBQUE3bkMsT0FDQTZuQyxFQUFBakMsV0FLQSxVQUFBaUMsRUFBQVksY0FBQSxTQUNBLGlCQUFBWixFQUFBbG1DLGFBQ0EsQ0FBVyttQyxPQUFBYixFQUFBckIsVUFDWCxDQUFXditCLEtBQUE0L0IsRUFBQWxtQyxjQUNYa21DLEVBQUF0Qyw0QkFRQXNDLEVBQUFTLE9BQUFwcEMsSUFDQWlwQyxFQUFBTixFQUFBVSxRQUFBcnBDLEVBQUEsY0FLQUMsSUFBQTBvQyxFQUFBVyxRQUNBWCxFQUFBVyxRQUFBTCxFQUVBTixFQUFBdm1DLG1CQUFBLFdBR0EsSUFBQXVtQyxFQUFBdG1DLFlBTUFwRyxFQUFBeW9CLFdBQUEsV0FDQTFrQixHQUNBaXBDLE9BUUFqcEMsSUFBQSxTQUVBLElBR0Eyb0MsRUFBQXhtQyxLQUFBcUIsRUFBQXNqQyxZQUFBdGpDLEVBQUFyQyxNQUFBLE1BQ0ssTUFBQXRDLEdBR0wsR0FBQW1CLEVBQ0EsTUFBQW5CLElBS0E0bkMsTUFBQSxXQUNBem1DLEdBQ0FBLFFBV0FrSixFQUFBZzhCLGNBQUEsU0FBQXQ5QixHQUNBQSxFQUFBZy9CLGNBQ0FoL0IsRUFBQXlZLFNBQUF4ZCxRQUFBLEtBS0FxRyxFQUFBODdCLFVBQUEsQ0FDQVIsUUFBQSxDQUNBM2hDLE9BQUEsNkZBR0F3ZCxTQUFBLENBQ0F4ZCxPQUFBLDJCQUVBOGhDLFdBQUEsQ0FDQThFLGNBQUEsU0FBQTFnQyxHQUVBLE9BREFHLEVBQUF1RCxXQUFBMUQsR0FDQUEsTUFNQUcsRUFBQWc4QixjQUFBLGtCQUFBdDlCLFFBQ0EzSCxJQUFBMkgsRUFBQWtNLFFBQ0FsTSxFQUFBa00sT0FBQSxHQUVBbE0sRUFBQWcvQixjQUNBaC9CLEVBQUF2RCxLQUFBLFNBS0E2RSxFQUFBaThCLGNBQUEsa0JBQUF2OUIsR0FJQSxJQUFBL0UsRUFBQTdDLEVBREEsR0FBQTRILEVBQUFnL0IsWUFFQSxPQUNBemtDLEtBQUEsU0FBQWtQLEVBQUErcUIsR0FDQXY1QixFQUFBcUcsRUFBQSxZQUFBb2QsS0FBQSxDQUNBdGpCLFFBQUE0RSxFQUFBOGhDLGNBQ0F6bUMsSUFBQTJFLEVBQUFzOEIsTUFDS25ZLEdBQ0wsYUFDQS9yQixFQUFBLFNBQUEycEMsR0FDQTltQyxFQUFBNGYsU0FDQXppQixFQUFBLEtBQ0EycEMsR0FDQXZOLEVBQUEsVUFBQXVOLEVBQUF0bEMsS0FBQSxRQUFBc2xDLEVBQUF0bEMsUUFNQXZCLEVBQUFJLEtBQUFDLFlBQUFOLEVBQUEsS0FFQTRqQyxNQUFBLFdBQ0F6bUMsR0FDQUEsUUFVQSxJQXFHQWlwQixHQXJHQTJnQixHQUFBLEdBQ0FDLEdBQUEsb0JBR0EzZ0MsRUFBQTg3QixVQUFBLENBQ0E4RSxNQUFBLFdBQ0FDLGNBQUEsV0FDQSxJQUFBL3BDLEVBQUE0cEMsR0FBQXhsQyxPQUFBOEUsRUFBQTBDLFFBQUEsSUFBQTQxQixLQUVBLE9BREF2NUIsS0FBQWpJLElBQUEsRUFDQUEsS0FLQWtKLEVBQUFnOEIsY0FBQSxzQkFBQXQ5QixFQUFBb2lDLEVBQUF6RyxHQUVBLElBQUEwRyxFQUFBQyxFQUFBQyxFQUNBQyxHQUFBLElBQUF4aUMsRUFBQWtpQyxRQUFBRCxHQUFBeDJCLEtBQUF6TCxFQUFBczhCLEtBQ0EsTUFDQSxpQkFBQXQ4QixFQUFBekcsTUFFQSxLQURBeUcsRUFBQTI4QixhQUFBLElBQ0F2bUMsUUFBQSxzQ0FDQTZyQyxHQUFBeDJCLEtBQUF6TCxFQUFBekcsT0FBQSxRQUlBLEdBQUFpcEMsR0FBQSxVQUFBeGlDLEVBQUF5N0IsVUFBQSxHQThEQSxPQTNEQTRHLEVBQUFyaUMsRUFBQW1pQyxjQUFBN2dDLEVBQUFzQyxXQUFBNUQsRUFBQW1pQyxlQUNBbmlDLEVBQUFtaUMsZ0JBQ0FuaUMsRUFBQW1pQyxjQUdBSyxFQUNBeGlDLEVBQUF3aUMsR0FBQXhpQyxFQUFBd2lDLEdBQUFyK0IsUUFBQTg5QixHQUFBLEtBQUFJLElBQ0csSUFBQXJpQyxFQUFBa2lDLFFBQ0hsaUMsRUFBQXM4QixNQUFBekMsR0FBQXB1QixLQUFBekwsRUFBQXM4QixLQUFBLFNBQUF0OEIsRUFBQWtpQyxNQUFBLElBQUFHLEdBSUFyaUMsRUFBQSs4QixXQUFBLDBCQUlBLE9BSEF3RixHQUNBamhDLEVBQUE3QyxNQUFBNGpDLEVBQUEsbUJBRUFFLEVBQUEsSUFJQXZpQyxFQUFBeTdCLFVBQUEsVUFHQTZHLEVBQUFqdUMsRUFBQWd1QyxHQUNBaHVDLEVBQUFndUMsR0FBQSxXQUNBRSxFQUFBeC9CLFdBSUE0NEIsRUFBQXRnQixPQUFBLGdCQUdBaGpCLElBQUFpcUMsRUFDQWhoQyxFQUFBak4sR0FBQXNqQyxXQUFBMEssR0FJQWh1QyxFQUFBZ3VDLEdBQUFDLEVBSUF0aUMsRUFBQXFpQyxLQUdBcmlDLEVBQUFtaUMsY0FBQUMsRUFBQUQsY0FHQUgsR0FBQTNyQyxLQUFBZ3NDLElBSUFFLEdBQUFqaEMsRUFBQXNDLFdBQUEwK0IsSUFDQUEsRUFBQUMsRUFBQSxJQUdBQSxFQUFBRCxPQUFBanFDLElBSUEsV0FZQTBJLEVBQUEwaEMscUJBQ0FwaEIsR0FBQW5tQixFQUFBd25DLGVBQUFELG1CQUFBLElBQUFwaEIsTUFDQTVTLFVBQUEsNkJBQ0EsSUFBQTRTLEdBQUEzVyxXQUFBblMsUUFRQStJLEVBQUErVyxVQUFBLFNBQUE5ZSxFQUFBaUksRUFBQW1oQyxHQUNBLHVCQUFBcHBDLEVBQ0EsSUFFQSxrQkFBQWlJLElBQ0FtaEMsRUFBQW5oQyxFQUNBQSxHQUFBLEdBS0FBLElBSUFULEVBQUEwaEMscUJBTUFsdUIsR0FMQS9TLEVBQUF0RyxFQUFBd25DLGVBQUFELG1CQUFBLEtBS0F0bkMsY0FBQSxTQUNBOFgsS0FBQS9YLEVBQUEwWCxTQUFBSyxLQUNBelIsRUFBQWxHLEtBQUFDLFlBQUFnWixJQUVBL1MsRUFBQXRHLEdBS0ErbkIsR0FBQTBmLEdBQUEsSUFEQUMsRUFBQTdxQixFQUFBM00sS0FBQTdSLElBS0EsQ0FBQWlJLEVBQUFyRyxjQUFBeW5DLEVBQUEsTUFHQUEsRUFBQTVmLEdBQUEsQ0FBQXpwQixHQUFBaUksRUFBQXloQixHQUVBQSxLQUFBMXFCLFFBQ0ErSSxFQUFBMmhCLEdBQUFwSSxTQUdBdlosRUFBQXFCLE1BQUEsR0FBQWlnQyxFQUFBbDRCLGNBbENBLElBQUE2SixFQUFBcXVCLEVBQUEzZixHQXlDQTNoQixFQUFBdkwsR0FBQWl4QixLQUFBLFNBQUFzVixFQUFBdUcsRUFBQXpxQyxHQUNBLElBQUFtSixFQUFBOUUsRUFBQWlqQyxFQUNBdm5CLEVBQUE5WCxLQUNBbWtCLEVBQUE4WCxFQUFBbG1DLFFBQUEsS0FzREEsT0FwREFvdUIsR0FBQSxJQUNBampCLEVBQUFrMkIsR0FBQTZFLEVBQUFsZ0MsTUFBQW9vQixJQUNBOFgsSUFBQWxnQyxNQUFBLEVBQUFvb0IsSUFJQWxqQixFQUFBc0MsV0FBQWkvQixJQUdBenFDLEVBQUF5cUMsRUFDQUEsT0FBQXhxQyxHQUdFd3FDLEdBQUEsaUJBQUFBLElBQ0ZwbUMsRUFBQSxRQUlBMGIsRUFBQTVmLE9BQUEsR0FDQStJLEVBQUFrOEIsS0FBQSxDQUNBbEIsTUFLQTcvQixRQUFBLE1BQ0ErK0IsU0FBQSxPQUNBamlDLEtBQUFzcEMsSUFDR3g3QixLQUFBLFNBQUF4TSxHQUdINmtDLEVBQUEzOEIsVUFFQW9WLEVBQUErUyxLQUFBM3BCLEVBSUFELEVBQUEsU0FBQXNxQixPQUFBdHFCLEVBQUErVyxVQUFBeGQsSUFBQXlULEtBQUEvTSxHQUdBMUcsS0FLR3dnQixPQUFBampCLEdBQUEsU0FBQXVqQyxFQUFBemlDLEdBQ0hpZixFQUFBdFYsS0FBQSxXQUNBekssRUFBQVksTUFBQXFILEtBQUFxL0IsR0FBQSxDQUFBL0QsRUFBQTlnQyxhQUFBM0IsRUFBQXlpQyxRQUtBdDdCLE1BT0FpQixFQUFBdUIsS0FBQSxDQUNBLFlBQ0EsV0FDQSxlQUNBLFlBQ0EsY0FDQSxZQUNBLFNBQUF2SyxFQUFBbUUsR0FDQTZFLEVBQUF2TCxHQUFBMEcsR0FBQSxTQUFBMUcsR0FDQSxPQUFBc0ssS0FBQThqQixHQUFBMW5CLEVBQUExRyxNQU9BdUwsRUFBQW9PLEtBQUF6SCxRQUFBNjZCLFNBQUEsU0FBQWhnQyxHQUNBLE9BQUF4QixFQUFBK0QsS0FBQS9ELEVBQUEyMEIsT0FBQSxTQUFBbGdDLEdBQ0EsT0FBQStNLElBQUEvTSxFQUFBK00sT0FDRXZLLFFBTUYrSSxFQUFBeWhDLE9BQUEsQ0FDQUMsVUFBQSxTQUFBbGdDLEVBQUFsSCxFQUFBdEQsR0FDQSxJQUFBMnFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQ0E1VSxFQUFBcHRCLEVBQUErZSxJQUFBdmQsRUFBQSxZQUNBeWdDLEVBQUFqaUMsRUFBQXdCLEdBQ0F5a0IsRUFBQSxHQUdBLFdBQUFtSCxJQUNBNXJCLEVBQUFxZCxNQUFBdU8sU0FBQSxZQUdBMlUsRUFBQUUsRUFBQVIsU0FDQUksRUFBQTdoQyxFQUFBK2UsSUFBQXZkLEVBQUEsT0FDQXdnQyxFQUFBaGlDLEVBQUErZSxJQUFBdmQsRUFBQSxTQUNBLGFBQUE0ckIsR0FBQSxVQUFBQSxLQUNBeVUsRUFBQUcsR0FBQWx0QyxRQUFBLFlBTUFndEMsR0FEQUgsRUFBQU0sRUFBQTdVLFlBQ0E3Z0IsSUFDQXExQixFQUFBRCxFQUFBN1IsT0FHQWdTLEVBQUEzK0IsV0FBQTArQixJQUFBLEVBQ0FELEVBQUF6K0IsV0FBQTYrQixJQUFBLEdBR0FoaUMsRUFBQXNDLFdBQUFoSSxLQUdBQSxJQUFBOUcsS0FBQWdPLEVBQUF4SyxFQUFBZ0osRUFBQWdDLE9BQUEsR0FBcUQrL0IsS0FHckQsTUFBQXpuQyxFQUFBaVMsTUFDQTBaLEVBQUExWixJQUFBalMsRUFBQWlTLElBQUF3MUIsRUFBQXgxQixJQUFBdTFCLEdBRUEsTUFBQXhuQyxFQUFBdzFCLE9BQ0E3SixFQUFBNkosS0FBQXgxQixFQUFBdzFCLEtBQUFpUyxFQUFBalMsS0FBQThSLEdBR0EsVUFBQXRuQyxFQUNBQSxFQUFBNG5DLE1BQUExdUMsS0FBQWdPLEVBQUF5a0IsR0FHQWdjLEVBQUFsakIsSUFBQWtILEtBS0FqbUIsRUFBQXZMLEdBQUF1TixPQUFBLENBQ0F5L0IsT0FBQSxTQUFBbm5DLEdBR0EsR0FBQW1ILFVBQUF4SyxPQUNBLFlBQUFGLElBQUF1RCxFQUNBeUUsS0FDQUEsS0FBQXdDLEtBQUEsU0FBQXZLLEdBQ0FnSixFQUFBeWhDLE9BQUFDLFVBQUEzaUMsS0FBQXpFLEVBQUF0RCxLQUlBLElBQUE0SSxFQUFBNEYsRUFBQTI4QixFQUFBQyxFQUNBNWdDLEVBQUF6QyxLQUFBLEdBRUEsT0FBQXlDLEVBUUFBLEVBQUFvdUIsaUJBQUEzNEIsUUFJQWtyQyxFQUFBM2dDLEVBQUFxdUIsd0JBR0FycUIsR0FEQTVGLEVBQUE0QixFQUFBcUksZUFDQXFDLGdCQUNBazJCLEVBQUF4aUMsRUFBQTBNLFlBRUEsQ0FDQUMsSUFBQTQxQixFQUFBNTFCLElBQUE2MUIsRUFBQUMsWUFBQTc4QixFQUFBODhCLFVBQ0F4UyxLQUFBcVMsRUFBQXJTLEtBQUFzUyxFQUFBRyxZQUFBLzhCLEVBQUFnOUIsYUFYQSxDQUFXajJCLElBQUEsRUFBQXVqQixLQUFBLFFBVFgsR0F3QkExQyxTQUFBLFdBQ0EsR0FBQXJ1QixLQUFBLElBSUEsSUFBQTBqQyxFQUFBaEIsRUFDQWpnQyxFQUFBekMsS0FBQSxHQUNBMmpDLEVBQUEsQ0FBbUJuMkIsSUFBQSxFQUFBdWpCLEtBQUEsR0E0Qm5CLE1BeEJBLFVBQUE5dkIsRUFBQStlLElBQUF2ZCxFQUFBLFlBR0FpZ0MsRUFBQWpnQyxFQUFBcXVCLHlCQUtBNFMsRUFBQTFqQyxLQUFBMGpDLGVBR0FoQixFQUFBMWlDLEtBQUEwaUMsU0FDQXIzQixFQUFBcTRCLEVBQUEsYUFDQUMsRUFBQUQsRUFBQWhCLFVBSUFpQixFQUFBLENBQ0FuMkIsSUFBQW0yQixFQUFBbjJCLElBQUF2TSxFQUFBK2UsSUFBQTBqQixFQUFBLHdCQUNBM1MsS0FBQTRTLEVBQUE1UyxLQUFBOXZCLEVBQUErZSxJQUFBMGpCLEVBQUEsMkJBS0EsQ0FDQWwyQixJQUFBazFCLEVBQUFsMUIsSUFBQW0yQixFQUFBbjJCLElBQUF2TSxFQUFBK2UsSUFBQXZkLEVBQUEsZ0JBQ0FzdUIsS0FBQTJSLEVBQUEzUixLQUFBNFMsRUFBQTVTLEtBQUE5dkIsRUFBQStlLElBQUF2ZCxFQUFBLG9CQWNBaWhDLGFBQUEsV0FDQSxPQUFBMWpDLEtBQUFoRSxJQUFBLFdBR0EsSUFGQSxJQUFBMG5DLEVBQUExakMsS0FBQTBqQyxhQUVBQSxHQUFBLFdBQUF6aUMsRUFBQStlLElBQUEwakIsRUFBQSxhQUNBQSxpQkFHQSxPQUFBQSxHQUFBdjJCLFFBTUFsTSxFQUFBdUIsS0FBQSxDQUFjeXZCLFdBQUEsY0FBQUQsVUFBQSxlQUFzRCxTQUFBclksRUFBQTBFLEdBQ3BFLElBQUE3USxFQUFBLGdCQUFBNlEsRUFFQXBkLEVBQUF2TCxHQUFBaWtCLEdBQUEsU0FBQW5LLEdBQ0EsT0FBQW9PLEVBQUE1ZCxLQUFBLFNBQUF5QyxFQUFBa1gsRUFBQW5LLEdBR0EsSUFBQTZ6QixFQU9BLEdBTkFwaUMsRUFBQWEsU0FBQVcsR0FDQTRnQyxFQUFBNWdDLEVBQ0ksSUFBQUEsRUFBQTZILFdBQ0orNEIsRUFBQTVnQyxFQUFBOEssa0JBR0F2VixJQUFBd1gsRUFDQSxPQUFBNnpCLElBQUFobEIsR0FBQTViLEVBQUFrWCxHQUdBMHBCLEVBQ0FBLEVBQUFPLFNBQ0FwMkIsRUFBQTYxQixFQUFBRyxZQUFBaDBCLEVBQ0FoQyxFQUFBZ0MsRUFBQTZ6QixFQUFBQyxhQUlBN2dDLEVBQUFrWCxHQUFBbkssR0FFR21LLEVBQUFuSyxFQUFBOU0sVUFBQXhLLFdBVUgrSSxFQUFBdUIsS0FBQSx3QkFBQXZLLEVBQUFvbUIsR0FDQXBkLEVBQUEwdUIsU0FBQXRSLEdBQUEyTyxHQUFBdHNCLEVBQUFxdEIsY0FDQSxTQUFBdHJCLEVBQUFpcUIsR0FDQSxHQUFBQSxFQUlBLE9BSEFBLEVBQUFELEdBQUFocUIsRUFBQTRiLEdBR0FnTyxHQUFBamhCLEtBQUFzaEIsR0FDQXpyQixFQUFBd0IsR0FBQTRyQixXQUFBaFEsR0FBQSxLQUNBcU8sTUFRQXpyQixFQUFBdUIsS0FBQSxDQUFjcWhDLE9BQUEsU0FBQUMsTUFBQSxTQUFtQyxTQUFBenRDLEVBQUErRixHQUNqRDZFLEVBQUF1QixLQUFBLENBQWV5dUIsUUFBQSxRQUFBNTZCLEVBQUE2aUIsUUFBQTljLEVBQUEybkMsR0FBQSxRQUFBMXRDLEdBQ2YsU0FBQTJ0QyxFQUFBQyxHQUdBaGpDLEVBQUF2TCxHQUFBdXVDLEdBQUEsU0FBQWpULEVBQUF0NkIsR0FDQSxJQUFBbW5CLEVBQUFuYixVQUFBeEssU0FBQThyQyxHQUFBLGtCQUFBaFQsR0FDQTVCLEVBQUE0VSxLQUFBLElBQUFoVCxJQUFBLElBQUF0NkIsRUFBQSxtQkFFQSxPQUFBa25CLEVBQUE1ZCxLQUFBLFNBQUF5QyxFQUFBckcsRUFBQTFGLEdBQ0EsSUFBQW1LLEVBRUEsT0FBQUksRUFBQWEsU0FBQVcsR0FHQSxJQUFBd2hDLEVBQUFsdUMsUUFBQSxTQUNBME0sRUFBQSxRQUFBcE0sR0FDQW9NLEVBQUE1SCxTQUFBc1MsZ0JBQUEsU0FBQTlXLEdBSUEsSUFBQW9NLEVBQUE2SCxVQUNBekosRUFBQTRCLEVBQUEwSyxnQkFJQXZKLEtBQUFzckIsSUFDQXpzQixFQUFBdWUsS0FBQSxTQUFBM3FCLEdBQUF3SyxFQUFBLFNBQUF4SyxHQUNBb00sRUFBQXVlLEtBQUEsU0FBQTNxQixHQUFBd0ssRUFBQSxTQUFBeEssR0FDQXdLLEVBQUEsU0FBQXhLLFVBSUEyQixJQUFBdEIsRUFHQXVLLEVBQUErZSxJQUFBdmQsRUFBQXJHLEVBQUFnekIsR0FHQW51QixFQUFBNmUsTUFBQXJkLEVBQUFyRyxFQUFBMUYsRUFBQTA0QixJQUNJaHpCLEVBQUF5aEIsRUFBQW1ULE9BQUFoNUIsRUFBQTZsQixRQU1KNWMsRUFBQXZMLEdBQUF1TixPQUFBLENBRUExRCxLQUFBLFNBQUF3a0IsRUFBQTdxQixFQUFBeEQsR0FDQSxPQUFBc0ssS0FBQThqQixHQUFBQyxFQUFBLEtBQUE3cUIsRUFBQXhELElBRUF3dUMsT0FBQSxTQUFBbmdCLEVBQUFydUIsR0FDQSxPQUFBc0ssS0FBQW1rQixJQUFBSixFQUFBLEtBQUFydUIsSUFHQXl1QyxTQUFBLFNBQUFqakMsRUFBQTZpQixFQUFBN3FCLEVBQUF4RCxHQUNBLE9BQUFzSyxLQUFBOGpCLEdBQUFDLEVBQUE3aUIsRUFBQWhJLEVBQUF4RCxJQUVBMHVDLFdBQUEsU0FBQWxqQyxFQUFBNmlCLEVBQUFydUIsR0FHQSxXQUFBZ04sVUFBQXhLLE9BQ0E4SCxLQUFBbWtCLElBQUFqakIsRUFBQSxNQUNBbEIsS0FBQW1rQixJQUFBSixFQUFBN2lCLEdBQUEsS0FBQXhMLE1BSUF1TCxFQUFBb2pDLFVBQUEsU0FBQUMsR0FDQUEsRUFDQXJqQyxFQUFBd2MsWUFFQXhjLEVBQUFnWCxPQUFBLElBR0FoWCxFQUFBeUMsUUFBQUQsTUFBQUMsUUFDQXpDLEVBQUFzakMsVUFBQWpxQyxLQUFBQyxNQUNBMEcsRUFBQW9LLGdCQXFCRXJULEtBRm1CNEgsRUFBQSxXQUNyQixPQUFBcUIsR0FDRXRJLE1BQUFnRyxFQUZpQixPQUVqQmpELEVBQUFpRCxRQUFBaUIsR0FNRixJQUdBNGtDLEdBQUF4d0MsRUFBQWlOLE9BR0F3akMsR0FBQXp3QyxFQUFBMHdDLEVBd0JBLE9BdEJBempDLEVBQUEwakMsV0FBQSxTQUFBcmhDLEdBU0EsT0FSQXRQLEVBQUEwd0MsSUFBQXpqQyxJQUNBak4sRUFBQTB3QyxFQUFBRCxJQUdBbmhDLEdBQUF0UCxFQUFBaU4sYUFDQWpOLEVBQUFpTixPQUFBdWpDLElBR0F2akMsR0FNQWhCLElBQ0FqTSxFQUFBaU4sT0FBQWpOLEVBQUEwd0MsRUFBQXpqQyxHQU1BQTs7Ozs7RUNuZ1VBLElBQUEyakMsRUFBQXR3QyxPQUFBc3dDLHNCQUNBcHdDLEVBQUFGLE9BQUFDLFVBQUFDLGVBQ0Fxd0MsRUFBQXZ3QyxPQUFBQyxVQUFBdXdDLHFCQXNEQXBwQyxFQUFBaUQsUUE1Q0EsV0FDQSxJQUNBLElBQUFySyxPQUFBeXdDLE9BQ0EsU0FNQSxJQUFBQyxFQUFBLElBQUF4N0IsT0FBQSxPQUVBLEdBREF3N0IsRUFBQSxRQUNBLE1BQUExd0MsT0FBQTJ3QyxvQkFBQUQsR0FBQSxHQUNBLFNBS0EsSUFEQSxJQUFBRSxFQUFBLEdBQ0FqdEMsRUFBQSxFQUFpQkEsRUFBQSxHQUFRQSxJQUN6Qml0QyxFQUFBLElBQUExN0IsT0FBQUMsYUFBQXhSLE1BS0Esa0JBSEEzRCxPQUFBMndDLG9CQUFBQyxHQUFBbHBDLElBQUEsU0FBQXdELEdBQ0EsT0FBQTBsQyxFQUFBMWxDLEtBRUF0QyxLQUFBLElBQ0EsU0FJQSxJQUFBaW9DLEVBQUEsR0FJQSxNQUhBLHVCQUFBdi9CLE1BQUEsSUFBQWhJLFFBQUEsU0FBQThELEdBQ0F5akMsRUFBQXpqQyxPQUdBLHlCQURBcE4sT0FBQXFKLEtBQUFySixPQUFBeXdDLE9BQUEsR0FBa0NJLElBQUFqb0MsS0FBQSxJQU1oQyxNQUFBakcsR0FFRixVQUlBbXVDLEdBQUE5d0MsT0FBQXl3QyxPQUFBLFNBQUExaEMsRUFBQXFjLEdBS0EsSUFKQSxJQUFBMmxCLEVBRUFDLEVBREFoUSxFQXREQSxTQUFBOWxCLEdBQ0EsR0FBQUEsUUFDQSxVQUFBeU0sVUFBQSx5REFHQSxPQUFBM25CLE9BQUFrYixHQWlEQSsxQixDQUFBbGlDLEdBR0ExRCxFQUFBLEVBQWdCQSxFQUFBK0MsVUFBQXhLLE9BQXNCeUgsSUFBQSxDQUd0QyxRQUFBTCxLQUZBK2xDLEVBQUEvd0MsT0FBQW9PLFVBQUEvQyxJQUdBbkwsRUFBQUMsS0FBQTR3QyxFQUFBL2xDLEtBQ0FnMkIsRUFBQWgyQixHQUFBK2xDLEVBQUEvbEMsSUFJQSxHQUFBc2xDLEVBQUEsQ0FDQVUsRUFBQVYsRUFBQVMsR0FDQSxRQUFBcHRDLEVBQUEsRUFBa0JBLEVBQUFxdEMsRUFBQXB0QyxPQUFvQkQsSUFDdEM0c0MsRUFBQXB3QyxLQUFBNHdDLEVBQUFDLEVBQUFydEMsTUFDQXE5QixFQUFBZ1EsRUFBQXJ0QyxJQUFBb3RDLEVBQUFDLEVBQUFydEMsTUFNQSxPQUFBcTlCLGtCQ3hGQSxJQUFBa1EsRUFHQUEsRUFBQSxXQUNBLE9BQUF4bEMsS0FEQSxHQUlBLElBRUF3bEMsS0FBQSxJQUFBQyxTQUFBLGlCQUNDLE1BQUE3dUMsR0FFRCxpQkFBQTVDLFNBQUF3eEMsRUFBQXh4QyxRQU9BMEgsRUFBQWlELFFBQUE2bUMsaUNDakJBLFNBQUFFLElBRUEsR0FDQSxvQkFBQUMsZ0NBQ0EsbUJBQUFBLCtCQUFBRCxTQWNBLElBRUFDLCtCQUFBRCxZQUNHLE1BQUF6dUMsR0FHSGYsUUFBQWtJLE1BQUFuSCxJQU9BeXVDLEdBQ0FocUMsRUFBQWlELFFBQW1CbEosRUFBUTs7Ozs7Ozs7R0N6QmQsSUFBQW13QyxFQUFNbndDLEVBQVEsR0FBZStKLEVBQUEsbUJBQUFQLGVBQUF5NEIsSUFBQTM5QixFQUFBeUYsRUFBQVAsT0FBQXk0QixJQUFBLHVCQUFBbU8sRUFBQXJtQyxFQUFBUCxPQUFBeTRCLElBQUEsc0JBQUExNEIsRUFBQVEsRUFBQVAsT0FBQXk0QixJQUFBLHdCQUFBdGdDLEVBQUFvSSxFQUFBUCxPQUFBeTRCLElBQUEsMkJBQUFvTyxFQUFBdG1DLEVBQUFQLE9BQUF5NEIsSUFBQSx3QkFBQXBlLEVBQUE5WixFQUFBUCxPQUFBeTRCLElBQUEsd0JBQUEzM0IsRUFBQVAsRUFBQVAsT0FBQXk0QixJQUFBLHVCQUFBcU8sRUFBQXZtQyxFQUFBUCxPQUFBeTRCLElBQUEsK0JBQUFzTyxFQUFBeG1DLEVBQUFQLE9BQUF5NEIsSUFBQSwyQkFBQXVPLEVBQUF6bUMsRUFBQVAsT0FBQXk0QixJQUFBLHdCQUFBd08sRUFBQTFtQyxFQUFBUCxPQUFBeTRCLElBQUEsY0FDMUMsTUFBQXlPLEVBQUEzbUMsRUFBQVAsT0FBQXk0QixJQUFBLG9CQUFBME8sRUFBQSxtQkFBQW5uQyxlQUFBMEcsU0FDQSxTQUFBMGdDLEVBQUE1cEMsR0FBYyxRQUFBQyxFQUFBZ0csVUFBQXhLLE9BQUEsRUFBQTJHLEVBQUEseURBQUFwQyxFQUFBaEMsRUFBQSxFQUE4RkEsRUFBQWlDLEVBQUlqQyxJQUFBb0UsR0FBQSxXQUFBdTdCLG1CQUFBMTNCLFVBQUFqSSxFQUFBLEtBRHhCLFNBQUFnQyxFQUFBQyxFQUFBbUMsRUFBQXBFLEVBQUE3RCxFQUFBNHVDLEVBQUE5cUMsRUFBQTRyQyxHQUE2QixJQUFBN3BDLEVBQUEsQ0FBZ0IsR0FBVEEsT0FBQSxPQUFTLElBQUFDLEVBQUFELEVBQUFqRCxNQUFBLHFJQUF1SixDQUFLLElBQUFWLEVBQUEsQ0FBQStGLEVBQUFwRSxFQUFBN0QsRUFBQTR1QyxFQUFBOXFDLEVBQUE0ckMsR0FBQTFuQyxFQUFBLEdBQXdCbkMsRUFBQWpELE1BQUFrRCxFQUFBb0gsUUFBQSxpQkFBbUMsT0FBQWhMLEVBQUE4RixTQUFpQnZJLEtBQUEsc0JBQTZDLE1BQWhCb0csRUFBQThwQyxZQUFBLEVBQWdCOXBDLEdBQ3JQK3BDLEVBQUEsMkJBQUEvcEMsRUFBQSw0SEFBbUNvQyxHQUE2SCxJQUFBNG5DLEVBQUEsQ0FBT0MsVUFBQSxXQUFxQixVQUFTQyxtQkFBQSxhQUFnQ0Msb0JBQUEsYUFBaUNDLGdCQUFBLGNBQThCQyxFQUFBLEdBQ3pjLFNBQUFDLEVBQUF0cUMsRUFBQUMsRUFBQW1DLEdBQWtCbUIsS0FBQWtuQixNQUFBenFCLEVBQWF1RCxLQUFBbUIsUUFBQXpFLEVBQWVzRCxLQUFBZ25DLEtBQUFGLEVBQVk5bUMsS0FBQWluQyxRQUFBcG9DLEdBQUE0bkMsRUFBc1MsU0FBQVMsS0FBc0MsU0FBQUMsRUFBQTFxQyxFQUFBQyxFQUFBbUMsR0FBa0JtQixLQUFBa25CLE1BQUF6cUIsRUFBYXVELEtBQUFtQixRQUFBekUsRUFBZXNELEtBQUFnbkMsS0FBQUYsRUFBWTltQyxLQUFBaW5DLFFBQUFwb0MsR0FBQTRuQyxFQUFwWE0sRUFBQXh5QyxVQUFBNnlDLGlCQUFBLEdBQWdDTCxFQUFBeHlDLFVBQUE4eUMsU0FBQSxTQUFBNXFDLEVBQUFDLEdBQW1DLGlCQUFBRCxHQUFBLG1CQUFBQSxHQUFBLE1BQUFBLEdBQUE0cEMsRUFBQSxNQUFtRXJtQyxLQUFBaW5DLFFBQUFKLGdCQUFBN21DLEtBQUF2RCxFQUFBQyxFQUFBLGFBQW1EcXFDLEVBQUF4eUMsVUFBQSt5QyxZQUFBLFNBQUE3cUMsR0FBb0N1RCxLQUFBaW5DLFFBQUFOLG1CQUFBM21DLEtBQUF2RCxFQUFBLGdCQUFxRXlxQyxFQUFBM3lDLFVBQUF3eUMsRUFBQXh5QyxVQUFvRyxJQUFBZ3pDLEVBQUFKLEVBQUE1eUMsVUFBQSxJQUFBMnlDLEVBQ2xkSyxFQUFBdmxDLFlBQUFtbEMsRUFBZ0J2QixFQUFBMkIsRUFBQVIsRUFBQXh5QyxXQUFpQmd6QyxFQUFBQyxzQkFBQSxFQUEwQixJQUFBQyxFQUFBLENBQU83SCxRQUFBLE1BQWE4SCxFQUFBLENBQUk5SCxRQUFBLE1BQWErSCxFQUFBcnpDLE9BQUFDLFVBQUFDLGVBQUFvekMsRUFBQSxDQUFzQ3RvQyxLQUFBLEVBQUF1b0MsS0FBQSxFQUFBQyxRQUFBLEVBQUFDLFVBQUEsR0FDdEksU0FBQUMsRUFBQXZyQyxFQUFBQyxFQUFBbUMsR0FBa0IsSUFBQXBFLE9BQUEsRUFBQTdELEVBQUEsR0FBaUI0dUMsRUFBQSxLQUFBOXFDLEVBQUEsS0FBZSxTQUFBZ0MsRUFBQSxJQUFBakMsVUFBQSxJQUFBaUMsRUFBQW1yQyxNQUFBbnRDLEVBQUFnQyxFQUFBbXJDLFVBQUEsSUFBQW5yQyxFQUFBNEMsTUFBQWttQyxFQUFBLEdBQUE5b0MsRUFBQTRDLEtBQUE1QyxFQUFBaXJDLEVBQUFsekMsS0FBQWlJLEVBQUFqQyxLQUFBbXRDLEVBQUFwekMsZUFBQWlHLEtBQUE3RCxFQUFBNkQsR0FBQWlDLEVBQUFqQyxJQUE0SCxJQUFBNnJDLEVBQUE1akMsVUFBQXhLLE9BQUEsRUFBeUIsT0FBQW91QyxFQUFBMXZDLEVBQUFYLFNBQUE0SSxPQUFzQixLQUFBeW5DLEVBQUEsQ0FBYSxRQUFBeHRDLEVBQUEySyxNQUFBNmlDLEdBQUExbkMsRUFBQSxFQUF1QkEsRUFBQTBuQyxFQUFJMW5DLElBQUE5RixFQUFBOEYsR0FBQThELFVBQUE5RCxFQUFBLEdBQXdCaEksRUFBQVgsU0FBQTZDLEVBQWEsR0FBQTJELEtBQUF3ckMsYUFBQSxJQUFBeHRDLEtBQUE2ckMsRUFBQTdwQyxFQUFBd3JDLGtCQUFBLElBQUFyeEMsRUFBQTZELEtBQUE3RCxFQUFBNkQsR0FBQTZyQyxFQUFBN3JDLElBQTRFLE9BQU95dEMsU0FBQW51QyxFQUFBcUMsS0FBQUssRUFBQTZDLElBQUFrbUMsRUFBQXFDLElBQUFudEMsRUFBQXdzQixNQUFBdHdCLEVBQUF1eEMsT0FBQVQsRUFBQTlILFNBQy9SLFNBQUF3SSxFQUFBM3JDLEdBQWMsdUJBQUFBLEdBQUEsT0FBQUEsS0FBQXlyQyxXQUFBbnVDLEVBQTRKLElBQUFzdUMsRUFBQSxPQUFBQyxFQUFBLEdBQWtCLFNBQUFDLEVBQUE5ckMsRUFBQUMsRUFBQW1DLEVBQUFwRSxHQUFvQixHQUFBNnRDLEVBQUFwd0MsT0FBQSxDQUFhLElBQUF0QixFQUFBMHhDLEVBQUFuc0MsTUFBc0UsT0FBeER2RixFQUFBeUUsT0FBQW9CLEVBQVc3RixFQUFBNHhDLFVBQUE5ckMsRUFBYzlGLEVBQUFpa0IsS0FBQWhjLEVBQVNqSSxFQUFBdUssUUFBQTFHLEVBQVk3RCxFQUFBMm9CLE1BQUEsRUFBVTNvQixFQUFTLE9BQU95RSxPQUFBb0IsRUFBQStyQyxVQUFBOXJDLEVBQUFtZSxLQUFBaGMsRUFBQXNDLFFBQUExRyxFQUFBOGtCLE1BQUEsR0FDalosU0FBQWtwQixFQUFBaHNDLEdBQWNBLEVBQUFwQixPQUFBLEtBQWNvQixFQUFBK3JDLFVBQUEsS0FBaUIvckMsRUFBQW9lLEtBQUEsS0FBWXBlLEVBQUEwRSxRQUFBLEtBQWUxRSxFQUFBOGlCLE1BQUEsRUFBVSxHQUFBK29CLEVBQUFwd0MsUUFBQW93QyxFQUFBdHlDLEtBQUF5RyxHQUVtRyxTQUFBaXNDLEVBQUFqc0MsRUFBQUMsRUFBQW1DLEdBQWtCLGFBQUFwQyxFQUFBLEVBRHZNLFNBQUFrc0MsRUFBQWxzQyxFQUFBQyxFQUFBbUMsRUFBQXBFLEdBQW9CLElBQUE3RCxTQUFBNkYsRUFBZSxjQUFBN0YsR0FBQSxZQUFBQSxJQUFBNkYsRUFBQSxNQUF5QyxJQUFBK29DLEdBQUEsRUFBUyxVQUFBL29DLEVBQUErb0MsR0FBQSxPQUFpQixPQUFBNXVDLEdBQWUsMEJBQUE0dUMsR0FBQSxFQUFpQyxNQUFNLG9CQUFBL29DLEVBQUF5ckMsVUFBaUMsS0FBQW51QyxFQUFBLEtBQUE4ckMsRUFBQUwsR0FBQSxHQUFvQixHQUFBQSxFQUFBLE9BQUEzbUMsRUFBQXBFLEVBQUFnQyxFQUFBLEtBQUFDLEVBQUEsSUFBQWtzQyxFQUFBbnNDLEVBQUEsR0FBQUMsR0FBQSxFQUFnRSxHQUF2QjhvQyxFQUFBLEVBQUk5b0MsRUFBQSxLQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBbUIrRyxNQUFBQyxRQUFBakgsR0FBQSxRQUFBL0IsRUFBQSxFQUFnQ0EsRUFBQStCLEVBQUF2RSxPQUFXd0MsSUFBQSxDQUFZLElBQUE0ckMsRUFBQTVwQyxFQUFBa3NDLEVBQVBoeUMsRUFBQTZGLEVBQUEvQixHQUFPQSxHQUFlOHFDLEdBQUFtRCxFQUFBL3hDLEVBQUEwdkMsRUFBQXpuQyxFQUFBcEUsUUFBYyxHQUFBNnJDLEVBQUEsT0FBQTdwQyxHQUFBLGlCQUFBQSxFQUFBLHdCQUFBNnBDLEVBQUFGLEdBQUEzcEMsRUFBQTJwQyxJQUFBM3BDLEVBQUEsZUFBQTZwQyxFQUFBLHdCQUFBQSxFQUFBLElBQUE3cEMsRUFBQTZwQyxFQUFBN3hDLEtBQUFnSSxHQUFBL0IsRUFDclcsSUFBRTlELEVBQUE2RixFQUFBMk4sUUFBQXBELE1BQW1CdytCLEdBQUFtRCxFQUFBL3hDLElBQUFGLE1BQUE0dkMsRUFBQTVwQyxFQUFBa3NDLEVBQUFoeUMsRUFBQThELEtBQUFtRSxFQUFBcEUsT0FBc0MsV0FBQTdELEdBQUF5dkMsRUFBQSx5QkFBQXhuQyxFQUFBLEdBQUFwQyxHQUFBLHFCQUEwRW5JLE9BQUFxSixLQUFBbEIsR0FBQVMsS0FBQSxVQUE4QjJCLEVBQUEsSUFBUyxPQUFBMm1DLEVBQTJCbUQsQ0FBQWxzQyxFQUFBLEdBQUFDLEVBQUFtQyxHQUE2QixTQUFBK3BDLEVBQUFuc0MsRUFBQUMsR0FBZ0IsdUJBQUFELEdBQUEsT0FBQUEsR0FBQSxNQUFBQSxFQUFBNkMsSUFIcEYsU0FBQTdDLEdBQW1CLElBQUFDLEVBQUEsQ0FBT21zQyxJQUFBLEtBQUFDLElBQUEsTUFBbUIsY0FBQXJzQyxHQUFBcUgsUUFBQSxpQkFBQXJILEdBQTZDLE9BQUFDLEVBQUFELEtBR05pVCxDQUFBalQsRUFBQTZDLEtBQUE1QyxFQUFBNEQsU0FBQSxJQUE4RSxTQUFBeW9DLEVBQUF0c0MsRUFBQUMsR0FBaUJELEVBQUFvZSxLQUFBcG1CLEtBQUFnSSxFQUFBMEUsUUFBQXpFLEVBQUFELEVBQUE4aUIsU0FDblYsU0FBQXlwQixFQUFBdnNDLEVBQUFDLEVBQUFtQyxHQUFtQixJQUFBcEUsRUFBQWdDLEVBQUFwQixPQUFBekUsRUFBQTZGLEVBQUErckMsVUFBNkIvckMsSUFBQW9lLEtBQUFwbUIsS0FBQWdJLEVBQUEwRSxRQUFBekUsRUFBQUQsRUFBQThpQixTQUFxQzliLE1BQUFDLFFBQUFqSCxHQUFBd3NDLEVBQUF4c0MsRUFBQWhDLEVBQUFvRSxFQUFBLFNBQUFwQyxHQUFxQyxPQUFBQSxJQUFTLE1BQUFBLElBQUEyckMsRUFBQTNyQyxPQUpuSSxTQUFBQSxFQUFBQyxHQUFpQixPQUFPd3JDLFNBQUFudUMsRUFBQXFDLEtBQUFLLEVBQUFMLEtBQUFrRCxJQUFBNUMsRUFBQW1yQyxJQUFBcHJDLEVBQUFvckMsSUFBQTNnQixNQUFBenFCLEVBQUF5cUIsTUFBQWloQixPQUFBMXJDLEVBQUEwckMsUUFJMkdlLENBQUF6c0MsRUFBQTdGLElBQUE2RixFQUFBNkMsS0FBQTVDLEtBQUE0QyxNQUFBN0MsRUFBQTZDLElBQUEsT0FBQTdDLEVBQUE2QyxLQUFBd0UsUUFBQXVrQyxFQUFBLFlBQUF4cEMsSUFBQXBFLEVBQUF6RSxLQUFBeUcsSUFBeUcsU0FBQXdzQyxFQUFBeHNDLEVBQUFDLEVBQUFtQyxFQUFBcEUsRUFBQTdELEdBQXNCLElBQUE0dUMsRUFBQSxHQUFTLE1BQUEzbUMsSUFBQTJtQyxHQUFBLEdBQUEzbUMsR0FBQWlGLFFBQUF1a0MsRUFBQSxZQUFzREssRUFBQWpzQyxFQUFBdXNDLEVBQWJ0c0MsRUFBQTZyQyxFQUFBN3JDLEVBQUE4b0MsRUFBQS9xQyxFQUFBN0QsSUFBdUI2eEMsRUFBQS9yQyxHQUFLLFNBQUF5c0MsSUFBYSxJQUFBMXNDLEVBQUFnckMsRUFBQTdILFFBQXlDLE9BQXpCLE9BQUFuakMsR0FBQTRwQyxFQUFBLE9BQXlCNXBDLEVBQ3RZLElBQUEyc0MsRUFBQSxDQUFPQyxTQUFBLENBQVVydEMsSUFBQSxTQUFBUyxFQUFBQyxFQUFBbUMsR0FBb0IsU0FBQXBDLEVBQUEsT0FBQUEsRUFBb0IsSUFBQWhDLEVBQUEsR0FBeUIsT0FBaEJ3dUMsRUFBQXhzQyxFQUFBaEMsRUFBQSxLQUFBaUMsRUFBQW1DLEdBQWdCcEUsR0FBU21ELFFBQUEsU0FBQW5CLEVBQUFDLEVBQUFtQyxHQUF5QixTQUFBcEMsRUFBQSxPQUFBQSxFQUF1Q2lzQyxFQUFBanNDLEVBQUFzc0MsRUFBbkJyc0MsRUFBQTZyQyxFQUFBLFVBQUE3ckMsRUFBQW1DLElBQTZCNHBDLEVBQUEvckMsSUFBSzZpQixNQUFBLFNBQUE5aUIsR0FBbUIsT0FBQWlzQyxFQUFBanNDLEVBQUEsV0FBc0IsYUFBWSxPQUFPd0YsUUFBQSxTQUFBeEYsR0FBcUIsSUFBQUMsRUFBQSxHQUEyQyxPQUFsQ3VzQyxFQUFBeHNDLEVBQUFDLEVBQUEsY0FBQUQsR0FBdUIsT0FBQUEsSUFBV0MsR0FBUzRzQyxLQUFBLFNBQUE3c0MsR0FBdUMsT0FBckIyckMsRUFBQTNyQyxJQUFBNHBDLEVBQUEsT0FBcUI1cEMsSUFBVThzQyxVQUFBLFdBQXNCLE9BQU8zSixRQUFBLE9BQWM0SixVQUFBekMsRUFBQTBDLGNBQUF0QyxFQUFBdUMsY0FBQSxTQUFBanRDLEVBQUFDLEdBQzNSLFlBRG9WLElBQUFBLE1BQUEsT0FBcUJELEVBQUEsQ0FBR3lyQyxTQUFBbm9DLEVBQUE0cEMsc0JBQUFqdEMsRUFDNWRrdEMsY0FBQW50QyxFQUFBb3RDLGVBQUFwdEMsRUFBQXF0QyxhQUFBLEVBQUFDLFNBQUEsS0FBQUMsU0FBQSxPQUE2RUQsU0FBQSxDQUFZN0IsU0FBQTV1QixFQUFBMndCLFNBQUF4dEMsR0FBdUJBLEVBQUF1dEMsU0FBQXZ0QyxHQUFvQnl0QyxXQUFBLFNBQUF6dEMsR0FBd0IsT0FBT3lyQyxTQUFBbEMsRUFBQW1FLE9BQUExdEMsSUFBcUIydEMsS0FBQSxTQUFBM3RDLEdBQWtCLE9BQU95ckMsU0FBQS9CLEVBQUFrRSxNQUFBNXRDLEVBQUE2dEMsU0FBQSxFQUFBQyxRQUFBLE9BQTZDQyxLQUFBLFNBQUEvdEMsRUFBQUMsR0FBb0IsT0FBT3dyQyxTQUFBaEMsRUFBQTlwQyxLQUFBSyxFQUFBc1MsYUFBQSxJQUFBclMsRUFBQSxLQUFBQSxJQUE4Qyt0QyxZQUFBLFNBQUFodUMsRUFBQUMsR0FBMkIsT0FBQXlzQyxJQUFBc0IsWUFBQWh1QyxFQUFBQyxJQUE0Qmd1QyxXQUFBLFNBQUFqdUMsRUFBQUMsR0FBMEIsT0FBQXlzQyxJQUFBdUIsV0FBQWp1QyxFQUFBQyxJQUEyQml1QyxVQUFBLFNBQUFsdUMsRUFBQUMsR0FBeUIsT0FBQXlzQyxJQUFBd0IsVUFBQWx1QyxFQUFBQyxJQUEwQmt1QyxvQkFBQSxTQUFBbnVDLEVBQ3RlQyxFQUFBbUMsR0FBSyxPQUFBc3FDLElBQUF5QixvQkFBQW51QyxFQUFBQyxFQUFBbUMsSUFBc0Nnc0MsY0FBQSxhQUEyQkMsZ0JBQUEsU0FBQXJ1QyxFQUFBQyxHQUErQixPQUFBeXNDLElBQUEyQixnQkFBQXJ1QyxFQUFBQyxJQUFnQ3F1QyxRQUFBLFNBQUF0dUMsRUFBQUMsR0FBdUIsT0FBQXlzQyxJQUFBNEIsUUFBQXR1QyxFQUFBQyxJQUF3QnN1QyxXQUFBLFNBQUF2dUMsRUFBQUMsRUFBQW1DLEdBQTRCLE9BQUFzcUMsSUFBQTZCLFdBQUF2dUMsRUFBQUMsRUFBQW1DLElBQTZCb3NDLE9BQUEsU0FBQXh1QyxHQUFvQixPQUFBMHNDLElBQUE4QixPQUFBeHVDLElBQXFCeXVDLFNBQUEsU0FBQXp1QyxHQUFzQixPQUFBMHNDLElBQUErQixTQUFBenVDLElBQXVCMHVDLFNBQUFuc0MsRUFBQW9zQyxXQUFBaDBDLEVBQUFpMEMsU0FBQXBGLEVBQUFuckMsY0FBQWt0QyxFQUFBc0QsYUFBQSxTQUFBN3VDLEVBQUFDLEVBQUFtQyxHQUFpRixNQUFBcEMsR0FBQTRwQyxFQUFBLE1BQUE1cEMsR0FBdUMsSUFBQWhDLE9BQUEsRUFBQTdELEVBQUFndkMsRUFBQSxHQUFtQm5wQyxFQUFBeXFCLE9BQUFzZSxFQUFBL29DLEVBQUE2QyxJQUFBNUUsRUFBQStCLEVBQUFvckMsSUFBQXZCLEVBQUE3cEMsRUFBQTByQyxPQUFxQyxTQUNuZnpyQyxFQUFBLE1BQUcsSUFBQUEsRUFBQW1yQyxNQUFBbnRDLEVBQUFnQyxFQUFBbXJDLElBQUF2QixFQUFBb0IsRUFBQTlILGNBQXNDLElBQUFsakMsRUFBQTRDLE1BQUFrbUMsRUFBQSxHQUFBOW9DLEVBQUE0QyxLQUE2QixJQUFBeEcsT0FBQSxFQUFrRSxJQUFBMkIsS0FBckRnQyxFQUFBTCxNQUFBSyxFQUFBTCxLQUFBNnJDLGVBQUFudkMsRUFBQTJELEVBQUFMLEtBQUE2ckMsY0FBcUR2ckMsRUFBQWlyQyxFQUFBbHpDLEtBQUFpSSxFQUFBakMsS0FBQW10QyxFQUFBcHpDLGVBQUFpRyxLQUFBN0QsRUFBQTZELFFBQUEsSUFBQWlDLEVBQUFqQyxTQUFBLElBQUEzQixJQUFBMkIsR0FBQWlDLEVBQUFqQyxJQUE4RyxRQUFyQkEsRUFBQWlJLFVBQUF4SyxPQUFBLEdBQXFCdEIsRUFBQVgsU0FBQTRJLE9BQXNCLEtBQUFwRSxFQUFBLENBQWEzQixFQUFBMkssTUFBQWhKLEdBQVcsUUFBQW1FLEVBQUEsRUFBWUEsRUFBQW5FLEVBQUltRSxJQUFBOUYsRUFBQThGLEdBQUE4RCxVQUFBOUQsRUFBQSxHQUF3QmhJLEVBQUFYLFNBQUE2QyxFQUFhLE9BQU9vdkMsU0FBQW51QyxFQUFBcUMsS0FBQUssRUFBQUwsS0FBQWtELElBQUFrbUMsRUFBQXFDLElBQUFudEMsRUFBQXdzQixNQUFBdHdCLEVBQUF1eEMsT0FBQTdCLElBQXFEaUYsY0FBQSxTQUFBOXVDLEdBQTJCLElBQUFDLEVBQUFzckMsRUFBQXpvQyxLQUFBLEtBQUE5QyxHQUE4QixPQUFUQyxFQUFBTixLQUFBSyxFQUFTQyxHQUFTOHVDLGVBQUFwRCxFQUFBcUQsUUFBQSxTQUN2ZEMsd0JBQUEzRixFQUFBNEYsa0JBQUE3RixFQUFBOEYsbURBQUEsQ0FBa0dDLHVCQUFBcEUsRUFBQXFFLGtCQUFBcEUsRUFBQTNDLE9BQUFhLElBQXVEbUcsRUFBQSxDQUFJQyxRQUFBNUMsR0FBVTZDLEVBQUFGLEdBQUEzQyxHQUFBMkMsRUFBV3J3QyxFQUFBaUQsUUFBQXN0QyxFQUFBRCxTQUFBQzs7Ozs7Ozs7R0NackssSUFBQS9GLEVBQU96d0MsRUFBUSxHQUFPK0osRUFBSS9KLEVBQVEsR0FBZXVKLEVBQUl2SixFQUFRLEdBQzFFLFNBQUFzd0MsRUFBQXRwQyxHQUFjLFFBQUFDLEVBQUFnRyxVQUFBeEssT0FBQSxFQUFBdUMsRUFBQSx5REFBQWdDLEVBQUFvQyxFQUFBLEVBQThGQSxFQUFBbkMsRUFBSW1DLElBQUFwRSxHQUFBLFdBQUEyL0IsbUJBQUExM0IsVUFBQTdELEVBQUEsS0FEekIsU0FBQXBDLEVBQUFDLEVBQUFqQyxFQUFBb0UsRUFBQWpJLEVBQUEwdkMsRUFBQWQsRUFBQTlxQyxHQUE2QixJQUFBK0IsRUFBQSxDQUFnQixHQUFUQSxPQUFBLE9BQVMsSUFBQUMsRUFBQUQsRUFBQWpELE1BQUEscUlBQXVKLENBQUssSUFBQVYsRUFBQSxDQUFBMkIsRUFBQW9FLEVBQUFqSSxFQUFBMHZDLEVBQUFkLEVBQUE5cUMsR0FBQWtyQyxFQUFBLEdBQXdCbnBDLEVBQUFqRCxNQUFBa0QsRUFBQW9ILFFBQUEsaUJBQW1DLE9BQUFoTCxFQUFBOHNDLFNBQWlCdnZDLEtBQUEsc0JBQTZDLE1BQWhCb0csRUFBQThwQyxZQUFBLEVBQWdCOXBDLEdBQ3BQMHBDLEVBQUEsMkJBQUExcEMsRUFBQSw0SEFBbUNoQyxHQUE2SHlyQyxHQUFBSCxFQUFBLE9BQ3JVLElBQUFtRCxHQUFBLEVBQUFILEVBQUEsS0FBQUMsR0FBQSxFQUFBa0QsRUFBQSxLQUFBQyxFQUFBLENBQW9DQyxRQUFBLFNBQUEzdkMsR0FBb0J5c0MsR0FBQSxFQUFNSCxFQUFBdHNDLElBQU8sU0FBQTR2QyxFQUFBNXZDLEVBQUFDLEVBQUFqQyxFQUFBb0UsRUFBQWpJLEVBQUEwdkMsRUFBQWQsRUFBQTlxQyxFQUFBNUIsR0FBK0Jvd0MsR0FBQSxFQUFNSCxFQUFBLEtBRDhPLFNBQUF0c0MsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBakksRUFBQTB2QyxFQUFBZCxFQUFBOXFDLEVBQUE1QixHQUErQixJQUFBOHNDLEVBQUFuaUMsTUFBQWxQLFVBQUF3SCxNQUFBdEgsS0FBQWlPLFVBQUEsR0FBOEMsSUFBSWhHLEVBQUEvRCxNQUFBOEIsRUFBQW1yQyxHQUFhLE1BQUFobkMsR0FBU29CLEtBQUFvc0MsUUFBQXh0QyxLQUM3VWpHLE1BQUF3ekMsRUFBQXpwQyxXQUE2SixJQUFBNHBDLEVBQUEsS0FBQUMsRUFBQSxHQUMvUSxTQUFBQyxJQUFjLEdBQUFGLEVBQUEsUUFBQTd2QyxLQUFBOHZDLEVBQUEsQ0FBdUIsSUFBQTd2QyxFQUFBNnZDLEVBQUE5dkMsR0FBQWhDLEVBQUE2eEMsRUFBQXYyQyxRQUFBMEcsR0FBa0QsSUFBdEIsRUFBQWhDLEdBQUFzckMsRUFBQSxLQUFBdHBDLElBQXNCZ3dDLEVBQUFoeUMsR0FBbUUsUUFBQW9FLEtBQXhEbkMsRUFBQWd3QyxlQUFBM0csRUFBQSxLQUFBdHBDLEdBQWlDZ3dDLEVBQUFoeUMsR0FBQWlDLEVBQVFqQyxFQUFBaUMsRUFBQWl3QyxXQUFlLENBQWdCLElBQUEvMUMsT0FBQSxFQUFhMHZDLEVBQUE3ckMsRUFBQW9FLEdBQUEybUMsRUFBQTlvQyxFQUFBaEMsRUFBQW1FLEVBQW1CK3RDLEVBQUFwNEMsZUFBQWtHLElBQUFxckMsRUFBQSxLQUFBcnJDLEdBQXNDa3lDLEVBQUFseUMsR0FBQTRyQyxFQUFRLElBQUF4dEMsRUFBQXd0QyxFQUFBdUcsd0JBQWdDLEdBQUEvekMsRUFBQSxDQUFNLElBQUFsQyxLQUFBa0MsSUFBQXRFLGVBQUFvQyxJQUFBazJDLEVBQUFoMEMsRUFBQWxDLEdBQUE0dUMsRUFBQTlxQyxHQUE2QzlELEdBQUEsT0FBSzB2QyxFQUFBeUcsa0JBQUFELEVBQUF4RyxFQUFBeUcsaUJBQUF2SCxFQUFBOXFDLEdBQUE5RCxHQUFBLEdBQUFBLEdBQUEsRUFBK0RBLEdBQUFtdkMsRUFBQSxLQUFBbG5DLEVBQUFwQyxLQUMvWSxTQUFBcXdDLEVBQUFyd0MsRUFBQUMsRUFBQWpDLEdBQW1CdXlDLEVBQUF2d0MsSUFBQXNwQyxFQUFBLE1BQUF0cEMsR0FBd0J1d0MsRUFBQXZ3QyxHQUFBQyxFQUFRdXdDLEVBQUF4d0MsR0FBQUMsRUFBQWl3QyxXQUFBbHlDLEdBQUF5eUMsYUFBbUMsSUFBQVQsRUFBQSxHQUFBRyxFQUFBLEdBQWVJLEVBQUEsR0FBTUMsRUFBQSxHQUFNRSxFQUFBLEtBQUFDLEVBQUEsS0FBQUMsRUFBQSxLQUF5QixTQUFBQyxFQUFBN3dDLEVBQUFDLEVBQUFqQyxHQUFtQixJQUFBb0UsRUFBQXBDLEVBQUFMLE1BQUEsZ0JBQThCSyxFQUFBcXBCLGNBQUF1bkIsRUFBQTV5QyxHQUZsRCxTQUFBZ0MsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBakksRUFBQTB2QyxFQUFBZCxFQUFBOXFDLEVBQUE1QixHQUF3RCxHQUF6QnV6QyxFQUFBMXpDLE1BQUFxSCxLQUFBMEMsV0FBeUJ3bUMsRUFBQSxDQUFPLEdBQUFBLEVBQUEsQ0FBTyxJQUFBdEQsRUFBQW1ELEVBQVNHLEdBQUEsRUFBTUgsRUFBQSxVQUFRaEQsRUFBQSxPQUFBSCxPQUFBLEVBQXVCb0QsT0FBQSxFQUFBa0QsRUFBQXRHLElBRTVDMkgsQ0FBQTF1QyxFQUFBbkMsT0FBQSxFQUFBRCxHQUFpQkEsRUFBQXFwQixjQUFBLEtBQXFCLFNBQUEwbkIsRUFBQS93QyxFQUFBQyxHQUF3QyxPQUF2QixNQUFBQSxHQUFBcXBDLEVBQUEsTUFBdUIsTUFBQXRwQyxFQUFBQyxFQUFvQitHLE1BQUFDLFFBQUFqSCxHQUFxQmdILE1BQUFDLFFBQUFoSCxJQUFBRCxFQUFBekcsS0FBQTJDLE1BQUE4RCxFQUFBQyxHQUFBRCxJQUErQ0EsRUFBQXpHLEtBQUEwRyxHQUFVRCxHQUFTZ0gsTUFBQUMsUUFBQWhILEdBQUEsQ0FBQUQsR0FBQUYsT0FBQUcsR0FBQSxDQUFBRCxFQUFBQyxHQUMxWSxTQUFBK3dDLEVBQUFoeEMsRUFBQUMsRUFBQWpDLEdBQW1CZ0osTUFBQUMsUUFBQWpILEtBQUFtQixRQUFBbEIsRUFBQWpDLEdBQUFnQyxHQUFBQyxFQUFBakksS0FBQWdHLEVBQUFnQyxHQUErQyxJQUFBaXhDLEVBQUEsS0FBWSxTQUFBQyxFQUFBbHhDLEdBQWUsR0FBQUEsRUFBQSxDQUFNLElBQUFDLEVBQUFELEVBQUFteEMsbUJBQUFuekMsRUFBQWdDLEVBQUFveEMsbUJBQWtELEdBQUFwcUMsTUFBQUMsUUFBQWhILEdBQUEsUUFBQW1DLEVBQUEsRUFBZ0NBLEVBQUFuQyxFQUFBeEUsU0FBQXVFLEVBQUFvcEIsdUJBQXNDaG5CLElBQUF5dUMsRUFBQTd3QyxFQUFBQyxFQUFBbUMsR0FBQXBFLEVBQUFvRSxTQUFvQm5DLEdBQUE0d0MsRUFBQTd3QyxFQUFBQyxFQUFBakMsR0FBa0JnQyxFQUFBbXhDLG1CQUFBLEtBQTBCbnhDLEVBQUFveEMsbUJBQUEsS0FBMEJweEMsRUFBQXF4QyxnQkFBQXJ4QyxFQUFBdUYsWUFBQStyQyxRQUFBdHhDLElBQ3JULElBQUF1eEMsRUFBQSxDQUFRQyx1QkFBQSxTQUFBeHhDLEdBQW1DNnZDLEdBQUF2RyxFQUFBLE9BQW1CdUcsRUFBQTdvQyxNQUFBbFAsVUFBQXdILE1BQUF0SCxLQUFBZ0ksR0FBaUMrdkMsS0FBSzBCLHlCQUFBLFNBQUF6eEMsR0FBc0MsSUFBQWhDLEVBQUFpQyxHQUFBLEVBQVcsSUFBQWpDLEtBQUFnQyxFQUFBLEdBQUFBLEVBQUFqSSxlQUFBaUcsR0FBQSxDQUFtQyxJQUFBb0UsRUFBQXBDLEVBQUFoQyxHQUFXOHhDLEVBQUEvM0MsZUFBQWlHLElBQUE4eEMsRUFBQTl4QyxLQUFBb0UsSUFBQTB0QyxFQUFBOXhDLElBQUFzckMsRUFBQSxNQUFBdHJDLEdBQUE4eEMsRUFBQTl4QyxHQUFBb0UsRUFBQW5DLEdBQUEsR0FBd0VBLEdBQUE4dkMsTUFDM1EsU0FBQTJCLEVBQUExeEMsRUFBQUMsR0FBaUIsSUFBQWpDLEVBQUFnQyxFQUFBMnhDLFVBQWtCLElBQUEzekMsRUFBQSxZQUFrQixJQUFBb0UsRUFBQXN1QyxFQUFBMXlDLEdBQVksSUFBQW9FLEVBQUEsWUFBa0JwRSxFQUFBb0UsRUFBQW5DLEdBQU9ELEVBQUEsT0FBQUMsR0FBWSxnTkFBQW1DLEtBQUFxTCxZQUFBckwsSUFBQSxZQUFBcEMsSUFBQUwsT0FBQSxVQUFBSyxHQUFBLFdBQUFBLEdBQUEsYUFBQUEsSUFBa1RBLEdBQUFvQyxFQUFLLE1BQUFwQyxFQUFRLFFBQUFBLEdBQUEsRUFBYSxPQUFBQSxFQUFBLE1BQWlCaEMsR0FBQSxtQkFBQUEsR0FBQXNyQyxFQUFBLE1BQUFycEMsU0FBQWpDLEdBQ25jQSxHQUFTLFNBQUE0ekMsRUFBQTV4QyxHQUFvRCxHQUFyQyxPQUFBQSxJQUFBaXhDLEVBQUFGLEVBQUFFLEVBQUFqeEMsSUFBd0JBLEVBQUFpeEMsRUFBS0EsRUFBQSxLQUFRanhDLElBQUFneEMsRUFBQWh4QyxFQUFBa3hDLEdBQUFELEdBQUEzSCxFQUFBLE1BQUFpRCxHQUFBLE1BQUF2c0MsRUFBQXl2QyxFQUFBbEQsR0FBQSxFQUFBa0QsRUFBQSxLQUFBenZDLEVBQWtFLElBQUE2eEMsRUFBQTFxQyxLQUFBQyxTQUFBdkQsU0FBQSxJQUFBdkUsTUFBQSxHQUFBd3lDLEVBQUEsMkJBQUFELEVBQUFFLEVBQUEsd0JBQUFGLEVBQTBHLFNBQUFHLEVBQUFoeUMsR0FBZSxHQUFBQSxFQUFBOHhDLEdBQUEsT0FBQTl4QyxFQUFBOHhDLEdBQXNCLE1BQUs5eEMsRUFBQTh4QyxJQUFPLEtBQUE5eEMsRUFBQXNFLFdBQWdDLFlBQWhDdEUsSUFBQXNFLFdBQXlELFlBQVJ0RSxJQUFBOHhDLElBQVFwZ0MsS0FBQSxJQUFBMVIsRUFBQTBSLElBQUExUixFQUFBLEtBQW1DLFNBQUFpeUMsRUFBQWp5QyxHQUF1QixRQUFSQSxJQUFBOHhDLEtBQVEsSUFBQTl4QyxFQUFBMFIsS0FBQSxJQUFBMVIsRUFBQTBSLElBQUEsS0FBQTFSLEVBQzdZLFNBQUFreUMsRUFBQWx5QyxHQUFlLE9BQUFBLEVBQUEwUixLQUFBLElBQUExUixFQUFBMFIsSUFBQSxPQUFBMVIsRUFBQTJ4QyxVQUEyQ3JJLEVBQUEsTUFBUSxTQUFBNkksRUFBQW55QyxHQUFlLE9BQUFBLEVBQUEreEMsSUFBQSxLQUFtQixTQUFBSyxFQUFBcHlDLEdBQWUsR0FBQUEsSUFBQXF5QyxhQUFjcnlDLEdBQUEsSUFBQUEsRUFBQTBSLEtBQW9CLE9BQUExUixHQUFBLEtBQWdCLFNBQUFzeUMsRUFBQXR5QyxFQUFBQyxFQUFBakMsSUFBbUJpQyxFQUFBeXhDLEVBQUExeEMsRUFBQWhDLEVBQUF1MEMsZUFBQW5DLHdCQUFBbndDLE9BQUFqQyxFQUFBbXpDLG1CQUFBSixFQUFBL3lDLEVBQUFtekMsbUJBQUFseEMsR0FBQWpDLEVBQUFvekMsbUJBQUFMLEVBQUEveUMsRUFBQW96QyxtQkFBQXB4QyxJQUN4TCxTQUFBd3lDLEVBQUF4eUMsR0FBZSxHQUFBQSxLQUFBdXlDLGVBQUFuQyx3QkFBQSxDQUFnRCxRQUFBbndDLEVBQUFELEVBQUF5eUMsWUFBQXowQyxFQUFBLEdBQTZCaUMsR0FBRWpDLEVBQUF6RSxLQUFBMEcsS0FBQW15QyxFQUFBbnlDLEdBQW1CLElBQUFBLEVBQUFqQyxFQUFBdkMsT0FBZSxFQUFBd0UsS0FBTXF5QyxFQUFBdDBDLEVBQUFpQyxHQUFBLFdBQUFELEdBQXVCLElBQUFDLEVBQUEsRUFBUUEsRUFBQWpDLEVBQUF2QyxPQUFXd0UsSUFBQXF5QyxFQUFBdDBDLEVBQUFpQyxHQUFBLFVBQUFELElBQTBCLFNBQUEweUMsRUFBQTF5QyxFQUFBQyxFQUFBakMsR0FBbUJnQyxHQUFBaEMsS0FBQXUwQyxlQUFBakMsbUJBQUFyd0MsRUFBQXl4QyxFQUFBMXhDLEVBQUFoQyxFQUFBdTBDLGVBQUFqQyxxQkFBQXR5QyxFQUFBbXpDLG1CQUFBSixFQUFBL3lDLEVBQUFtekMsbUJBQUFseEMsR0FBQWpDLEVBQUFvekMsbUJBQUFMLEVBQUEveUMsRUFBQW96QyxtQkFBQXB4QyxJQUF3TCxTQUFBMnlDLEVBQUEzeUMsR0FBZUEsS0FBQXV5QyxlQUFBakMsa0JBQUFvQyxFQUFBMXlDLEVBQUF5eUMsWUFBQSxLQUFBenlDLEdBQ3BhLFNBQUE0eUMsRUFBQTV5QyxHQUFlZ3hDLEVBQUFoeEMsRUFBQXd5QyxHQUFTLElBQUFLLElBQUEsb0JBQUF0N0MsZ0JBQUE2RyxXQUFBN0csT0FBQTZHLFNBQUFDLGVBQXdGLFNBQUF5MEMsRUFBQTl5QyxFQUFBQyxHQUFpQixJQUFBakMsRUFBQSxHQUF3RixPQUEvRUEsRUFBQWdDLEVBQUFvSixlQUFBbkosRUFBQW1KLGNBQW1DcEwsRUFBQSxTQUFBZ0MsR0FBQSxTQUFBQyxFQUF5QmpDLEVBQUEsTUFBQWdDLEdBQUEsTUFBQUMsRUFBbUJqQyxFQUFTLElBQUErMEMsRUFBQSxDQUFRQyxhQUFBRixFQUFBLDRCQUFBRyxtQkFBQUgsRUFBQSxrQ0FBQUksZUFBQUosRUFBQSw4QkFBQUssY0FBQUwsRUFBQSwrQkFBbU1NLEVBQUEsR0FBTUMsRUFBQSxHQUMvTCxTQUFBQyxFQUFBdHpDLEdBQWUsR0FBQW96QyxFQUFBcHpDLEdBQUEsT0FBQW96QyxFQUFBcHpDLEdBQXNCLElBQUEreUMsRUFBQS95QyxHQUFBLE9BQUFBLEVBQW1CLElBQUFoQyxFQUFBaUMsRUFBQTh5QyxFQUFBL3lDLEdBQWMsSUFBQWhDLEtBQUFpQyxFQUFBLEdBQUFBLEVBQUFsSSxlQUFBaUcsU0FBQXExQyxFQUFBLE9BQUFELEVBQUFwekMsR0FBQUMsRUFBQWpDLEdBQTZELE9BQUFnQyxFQUF2WDZ5QyxJQUFBUSxFQUFBajFDLFNBQUFDLGNBQUEsT0FBQWdsQixNQUFBLG1CQUFBOXJCLGdCQUFBdzdDLEVBQUFDLGFBQUFyYyxpQkFBQW9jLEVBQUFFLG1CQUFBdGMsaUJBQUFvYyxFQUFBRyxlQUFBdmMsV0FBQSxvQkFBQXAvQixlQUFBdzdDLEVBQUFJLGNBQUFJLFlBQ0EsSUFBQUMsRUFBQUYsRUFBQSxnQkFBQUcsRUFBQUgsRUFBQSxzQkFBQUksRUFBQUosRUFBQSxrQkFBQUssR0FBQUwsRUFBQSxpQkFBQU0sR0FBQSxzTkFBQXpxQyxNQUFBLEtBQUEwcUMsR0FBQSxLQUFBOTBDLEdBQUEsS0FBQSswQyxHQUFBLEtBQ0EsU0FBQUMsS0FBYyxHQUFBRCxHQUFBLE9BQUFBLEdBQWdCLElBQUE5ekMsRUFBQW9DLEVBQUFuQyxFQUFBbEIsR0FBQWYsRUFBQWlDLEVBQUF4RSxPQUFBdEIsRUFBQSxVQUFBMDVDLE1BQUE1NUMsTUFBQTQ1QyxHQUFBdGdDLFlBQUFzMkIsRUFBQTF2QyxFQUFBc0IsT0FBMEUsSUFBQXVFLEVBQUEsRUFBUUEsRUFBQWhDLEdBQUFpQyxFQUFBRCxLQUFBN0YsRUFBQTZGLEdBQWlCQSxLQUFLLElBQUErb0MsRUFBQS9xQyxFQUFBZ0MsRUFBVSxJQUFBb0MsRUFBQSxFQUFRQSxHQUFBMm1DLEdBQUE5b0MsRUFBQWpDLEVBQUFvRSxLQUFBakksRUFBQTB2QyxFQUFBem5DLEdBQXNCQSxLQUFLLE9BQUEweEMsR0FBQTM1QyxFQUFBbUYsTUFBQVUsRUFBQSxFQUFBb0MsRUFBQSxFQUFBQSxPQUFBLEdBQW9DLFNBQUE0eEMsS0FBYyxTQUFTLFNBQUFDLEtBQWMsU0FDNVAsU0FBQTFLLEdBQUF2cEMsRUFBQUMsRUFBQWpDLEVBQUFvRSxHQUE2RyxRQUFBakksS0FBekZvSixLQUFBZ3ZDLGVBQUF2eUMsRUFBc0J1RCxLQUFBa3ZDLFlBQUF4eUMsRUFBbUJzRCxLQUFBd2xCLFlBQUEvcUIsRUFBbUJnQyxFQUFBdUQsS0FBQWdDLFlBQUEydUMsVUFBNkJsMEMsRUFBQWpJLGVBQUFvQyxNQUFBOEYsRUFBQUQsRUFBQTdGLElBQUFvSixLQUFBcEosR0FBQThGLEVBQUFqQyxHQUFBLFdBQUE3RCxFQUFBb0osS0FBQXFELE9BQUF4RSxFQUFBbUIsS0FBQXBKLEdBQUE2RCxFQUFBN0QsSUFBZ08sT0FBNUhvSixLQUFBbW5CLG9CQUFBLE1BQUExc0IsRUFBQTJzQixpQkFBQTNzQixFQUFBMnNCLGtCQUFBLElBQUEzc0IsRUFBQXdzQixhQUFBd3BCLEdBQUFDLEdBQStGMXdDLEtBQUE2bEIscUJBQUE2cUIsR0FBNkIxd0MsS0FHOUUsU0FBQTR3QyxHQUFBbjBDLEVBQUFDLEVBQUFqQyxFQUFBb0UsR0FBcUIsR0FBQW1CLEtBQUE2d0MsVUFBQTM0QyxPQUFBLENBQTBCLElBQUF0QixFQUFBb0osS0FBQTZ3QyxVQUFBMTBDLE1BQWdELE9BQXJCNkQsS0FBQXZMLEtBQUFtQyxFQUFBNkYsRUFBQUMsRUFBQWpDLEVBQUFvRSxHQUFxQmpJLEVBQVMsV0FBQW9KLEtBQUF2RCxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQXlCLFNBQUFpeUMsR0FBQXIwQyxHQUFlQSxhQUFBdUQsTUFBQStsQyxFQUFBLE9BQWtDdHBDLEVBQUFzMEMsYUFBZSxHQUFBL3dDLEtBQUE2d0MsVUFBQTM0QyxRQUFBOEgsS0FBQTZ3QyxVQUFBNzZDLEtBQUF5RyxHQUNoYyxTQUFBdTBDLEdBQUF2MEMsR0FBZUEsRUFBQW8wQyxVQUFBLEdBQWVwMEMsRUFBQXcwQyxVQUFBTCxHQUFlbjBDLEVBQUFzeEMsUUFBQStDLEdBSDdDdHhDLEVBQUF3bUMsR0FBQXp4QyxVQUFBLENBQWUweEIsZUFBQSxXQUEwQmptQixLQUFBb25CLGtCQUFBLEVBQXlCLElBQUEzcUIsRUFBQXVELEtBQUF3bEIsWUFBdUIvb0IsTUFBQXdwQixlQUFBeHBCLEVBQUF3cEIsaUJBQUEsa0JBQUF4cEIsRUFBQXdxQixjQUFBeHFCLEVBQUF3cUIsYUFBQSxHQUFBam5CLEtBQUFtbkIsbUJBQUFzcEIsS0FBeUh2cUIsZ0JBQUEsV0FBNEIsSUFBQXpwQixFQUFBdUQsS0FBQXdsQixZQUF1Qi9vQixNQUFBeXBCLGdCQUFBenBCLEVBQUF5cEIsa0JBQUEsa0JBQUF6cEIsRUFBQXkwQyxlQUFBejBDLEVBQUF5MEMsY0FBQSxHQUFBbHhDLEtBQUE2bEIscUJBQUE0cUIsS0FBK0hVLFFBQUEsV0FBb0JueEMsS0FBQTh0QyxhQUFBMkMsSUFBcUIzQyxhQUFBNEMsR0FBQUssV0FBQSxXQUF1QyxJQUNwZHIwQyxFQURvZEQsRUFBQXVELEtBQUFnQyxZQUFBMnVDLFVBQ2xkLElBQUFqMEMsS0FBQUQsRUFBQXVELEtBQUF0RCxHQUFBLEtBQXdCc0QsS0FBQXdsQixZQUFBeGxCLEtBQUFrdkMsWUFBQWx2QyxLQUFBZ3ZDLGVBQUEsS0FBMkRodkMsS0FBQTZsQixxQkFBQTdsQixLQUFBbW5CLG1CQUFBdXBCLEdBQXFEMXdDLEtBQUE2dEMsbUJBQUE3dEMsS0FBQTR0QyxtQkFBQSxRQUF3RDVILEdBQUEySyxVQUFBLENBQWF2MEMsS0FBQSxLQUFBaUgsT0FBQSxLQUFBeWlCLGNBQUEsV0FBK0MsYUFBWWlDLFdBQUEsS0FBQUwsUUFBQSxLQUFBQyxXQUFBLEtBQUFMLFVBQUEsU0FBQTdxQixHQUFvRSxPQUFBQSxFQUFBNnFCLFdBQUE1aEIsS0FBQUQsT0FBK0IyaEIsaUJBQUEsS0FBQWdxQixVQUFBLE1BQzdXcEwsR0FBQS9pQyxPQUFBLFNBQUF4RyxHQUFxQixTQUFBQyxLQUFjLFNBQUFqQyxJQUFhLE9BQUFvRSxFQUFBbEcsTUFBQXFILEtBQUEwQyxXQUErQixJQUFBN0QsRUFBQW1CLEtBQVd0RCxFQUFBbkksVUFBQXNLLEVBQUF0SyxVQUF3QixJQUFBcUMsRUFBQSxJQUFBOEYsRUFBNkgsT0FBakg4QyxFQUFBNUksRUFBQTZELEVBQUFsRyxXQUFpQmtHLEVBQUFsRyxVQUFBcUMsRUFBYzZELEVBQUFsRyxVQUFBeU4sWUFBQXZILEVBQTBCQSxFQUFBazJDLFVBQUFueEMsRUFBQSxHQUFnQlgsRUFBQTh4QyxVQUFBbDBDLEdBQWdCaEMsRUFBQXdJLE9BQUFwRSxFQUFBb0UsT0FBa0IrdEMsR0FBQXYyQyxHQUFNQSxHQUFVdTJDLEdBQUFoTCxJQUMvTCxJQUFBcUwsR0FBQXJMLEdBQUEvaUMsT0FBQSxDQUFpQi9KLEtBQUEsT0FBVW80QyxHQUFBdEwsR0FBQS9pQyxPQUFBLENBQWUvSixLQUFBLE9BQVVxNEMsR0FBQSxhQUFBQyxHQUFBbEMsR0FBQSxxQkFBQXQ3QyxPQUFBeTlDLEdBQUEsS0FBNkRuQyxHQUFBLGlCQUFBejBDLFdBQUE0MkMsR0FBQTUyQyxTQUFBNjJDLGNBQzNLLElBQUFDLEdBQUFyQyxHQUFBLGNBQUF0N0MsU0FBQXk5QyxHQUFBRyxHQUFBdEMsS0FBQWtDLElBQUFDLElBQUEsRUFBQUEsSUFBQSxJQUFBQSxJQUFBSSxHQUFBcm9DLE9BQUFDLGFBQUEsSUFBQXFvQyxHQUFBLENBQW1HQyxZQUFBLENBQWFsRix3QkFBQSxDQUF5Qm1GLFFBQUEsZ0JBQUFDLFNBQUEsd0JBQXdEL0UsYUFBQSxtREFBZ0VnRixlQUFBLENBQWlCckYsd0JBQUEsQ0FBeUJtRixRQUFBLG1CQUFBQyxTQUFBLDJCQUE4RC9FLGFBQUEsdURBQUF0bkMsTUFBQSxNQUFnRnVzQyxpQkFBQSxDQUFtQnRGLHdCQUFBLENBQXlCbUYsUUFBQSxxQkFDcmVDLFNBQUEsNkJBQXFDL0UsYUFBQSx5REFBQXRuQyxNQUFBLE1BQWtGd3NDLGtCQUFBLENBQW9CdkYsd0JBQUEsQ0FBeUJtRixRQUFBLHNCQUFBQyxTQUFBLDhCQUFvRS9FLGFBQUEsMERBQUF0bkMsTUFBQSxPQUFvRnlzQyxJQUFBLEVBQzVULFNBQUFDLEdBQUE3MUMsRUFBQUMsR0FBaUIsT0FBQUQsR0FBVSx1QkFBQTgwQyxHQUFBeDdDLFFBQUEyRyxFQUFBNnJCLFNBQThDLDJCQUFBN3JCLEVBQUE2ckIsUUFBc0MsbURBQXNELGtCQUFrQixTQUFBZ3FCLEdBQUE5MUMsR0FBMEIsdUJBQVhBLElBQUFxckIsU0FBVyxTQUFBcnJCLElBQUF2RCxLQUFBLEtBQWtELElBQUFzNUMsSUFBQSxFQUVuUSxJQUFBQyxHQUFBLENBQVE5RixXQUFBbUYsR0FBQXBGLGNBQUEsU0FBQWp3QyxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQThDLElBQUFqSSxPQUFBLEVBQWEwdkMsT0FBQSxFQUFhLEdBQUFrTCxHQUFBOTBDLEVBQUEsQ0FBUyxPQUFBRCxHQUFVLHVCQUFBN0YsRUFBQWs3QyxHQUFBSyxpQkFBOEMsTUFBQXoxQyxFQUFRLHFCQUFBOUYsRUFBQWs3QyxHQUFBSSxlQUEwQyxNQUFBeDFDLEVBQVEsd0JBQUE5RixFQUFBazdDLEdBQUFNLGtCQUFnRCxNQUFBMTFDLEVBQVE5RixPQUFBLE9BQVM0N0MsR0FBQUYsR0FBQTcxQyxFQUFBaEMsS0FBQTdELEVBQUFrN0MsR0FBQUksZ0JBQUEsWUFBQXoxQyxHQUFBLE1BQUFoQyxFQUFBOHRCLFVBQUEzeEIsRUFBQWs3QyxHQUFBSyxrQkFDL0YsT0FEOEx2N0MsR0FBQWc3QyxJQUFBLE9BQUFuM0MsRUFBQWk0QyxTQUFBRixJQUFBNTdDLElBQUFrN0MsR0FBQUssaUJBQUF2N0MsSUFBQWs3QyxHQUFBSSxnQkFBQU0sS0FBQWxNLEVBQUFrSyxPQUFBaDFDLEdBQUEsVUFBQTgwQyxHQUFBenhDLEdBQUF5eEMsR0FBQTU1QyxNQUFBNDVDLEdBQUF0Z0MsWUFBQXdpQyxJQUMzVyxJQUFBNTdDLEVBQUF5NkMsR0FBQUosVUFBQXI2QyxFQUFBOEYsRUFBQWpDLEVBQUFvRSxHQUFBeW5DLEVBQUExdkMsRUFBQXNDLEtBQUFvdEMsRUFBQSxRQUFBQSxFQUFBaU0sR0FBQTkzQyxNQUFBN0QsRUFBQXNDLEtBQUFvdEMsR0FBQStJLEVBQUF6NEMsR0FBQTB2QyxFQUFBMXZDLEdBQUEwdkMsRUFBQSxNQUF5RjdwQyxFQUFBazFDLEdBSG9MLFNBQUFsMUMsRUFBQUMsR0FBaUIsT0FBQUQsR0FBVSw0QkFBQTgxQyxHQUFBNzFDLEdBQW1DLDJCQUFBQSxFQUFBMHNCLE1BQUEsTUFBNENpcEIsSUFBQSxFQUFNUixJQUFVLHVCQUFBcDFDLEVBQUFDLEVBQUF4RCxRQUFBMjRDLElBQUFRLEdBQUEsS0FBQTUxQyxFQUFtRCxxQkFHaldrMkMsQ0FBQWwyQyxFQUFBaEMsR0FGekYsU0FBQWdDLEVBQUFDLEdBQWlCLEdBQUE4MUMsR0FBQSx5QkFBQS8xQyxJQUFBKzBDLElBQUFjLEdBQUE3MUMsRUFBQUMsSUFBQUQsRUFBQSt6QyxLQUFBRCxHQUFBLzBDLEdBQUE4MEMsR0FBQSxLQUFBa0MsSUFBQSxFQUFBLzFDLEdBQUEsS0FBbUYsT0FBQUEsR0FBVSx3QkFBeUIsb0JBQUFDLEVBQUFtckIsU0FBQW5yQixFQUFBK3FCLFFBQUEvcUIsRUFBQXNyQixVQUFBdHJCLEVBQUFtckIsU0FBQW5yQixFQUFBK3FCLE9BQUEsQ0FBMkUsR0FBQS9xQixFQUFBMnJCLE1BQUEsRUFBQTNyQixFQUFBMnJCLEtBQUFud0IsT0FBQSxPQUFBd0UsRUFBQTJyQixLQUF5QyxHQUFBM3JCLEVBQUEwc0IsTUFBQSxPQUFBNWYsT0FBQUMsYUFBQS9NLEVBQUEwc0IsT0FBK0MsWUFBWSw0QkFBQXdvQixJQUFBLE9BQUFsMUMsRUFBQWcyQyxPQUFBLEtBQUFoMkMsRUFBQXhELEtBQTZELHFCQUUxUjA1QyxDQUFBbjJDLEVBQUFoQyxNQUFBaUMsRUFBQTQwQyxHQUFBTCxVQUFBYSxHQUFBQyxZQUFBcjFDLEVBQUFqQyxFQUFBb0UsSUFBQTNGLEtBQUF1RCxFQUFBNHlDLEVBQUEzeUMsTUFBQSxLQUFvRixPQUFBNHBDLEVBQUE1cEMsRUFBQSxPQUFBQSxFQUFBNHBDLEVBQUEsQ0FBQUEsRUFBQTVwQyxLQUFvQ20yQyxHQUFBLEtBQUFDLEdBQUEsS0FBQUMsR0FBQSxLQUF5QixTQUFBQyxHQUFBdjJDLEdBQWUsR0FBQUEsRUFBQTJ3QyxFQUFBM3dDLEdBQUEsQ0FBWSxtQkFBQW8yQyxJQUFBOU0sRUFBQSxPQUF1QyxJQUFBcnBDLEVBQUF5d0MsRUFBQTF3QyxFQUFBMnhDLFdBQXNCeUUsR0FBQXAyQyxFQUFBMnhDLFVBQUEzeEMsRUFBQUwsS0FBQU0sSUFBMEIsU0FBQXUyQyxHQUFBeDJDLEdBQWVxMkMsR0FBQUMsTUFBQS84QyxLQUFBeUcsR0FBQXMyQyxHQUFBLENBQUF0MkMsR0FBQXEyQyxHQUFBcjJDLEVBQTZCLFNBQUF5MkMsS0FBYyxHQUFBSixHQUFBLENBQU8sSUFBQXIyQyxFQUFBcTJDLEdBQUFwMkMsRUFBQXEyQyxHQUErQixHQUFqQkEsR0FBQUQsR0FBQSxLQUFXRSxHQUFBdjJDLEdBQU1DLEVBQUEsSUFBQUQsRUFBQSxFQUFhQSxFQUFBQyxFQUFBeEUsT0FBV3VFLElBQUF1MkMsR0FBQXQyQyxFQUFBRCxLQUNwZCxTQUFBMDJDLEdBQUExMkMsRUFBQUMsR0FBaUIsT0FBQUQsRUFBQUMsR0FBWSxTQUFBMDJDLEdBQUEzMkMsRUFBQUMsRUFBQWpDLEdBQW1CLE9BQUFnQyxFQUFBQyxFQUFBakMsR0FBYyxTQUFBNDRDLE1BQWUsSUFBQUMsSUFBQSxFQUFVLFNBQUFDLEdBQUE5MkMsRUFBQUMsR0FBaUIsR0FBQTQyQyxHQUFBLE9BQUE3MkMsRUFBQUMsR0FBa0I0MkMsSUFBQSxFQUFNLElBQUksT0FBQUgsR0FBQTEyQyxFQUFBQyxHQUFlLFFBQVE0MkMsSUFBQSxVQUFBUixJQUFBLE9BQUFDLE1BQUFNLEtBQUFILE9BQXlDLElBQUFNLEdBQUEsQ0FBUUMsT0FBQSxFQUFBQyxNQUFBLEVBQUFDLFVBQUEsRUFBQUMsa0JBQUEsRUFBQUMsT0FBQSxFQUFBQyxPQUFBLEVBQUFDLFFBQUEsRUFBQW5nQyxVQUFBLEVBQUFvZ0MsT0FBQSxFQUFBQyxRQUFBLEVBQUFDLEtBQUEsRUFBQXB6QyxNQUFBLEVBQUF5MUIsTUFBQSxFQUFBMEYsS0FBQSxFQUFBa1ksTUFBQSxHQUFtSixTQUFBQyxHQUFBMzNDLEdBQWUsSUFBQUMsRUFBQUQsS0FBQTRPLFVBQUE1TyxFQUFBNE8sU0FBQXhGLGNBQThDLGdCQUFBbkosSUFBQTgyQyxHQUFBLzJDLEVBQUFMLE1BQUEsYUFBQU0sRUFDNVosU0FBQTIzQyxHQUFBNTNDLEdBQXlHLE9BQTFGQSxJQUFBNEcsUUFBQTVHLEVBQUE2M0MsWUFBQXRnRCxRQUFpQ3VnRCwwQkFBQTkzQyxJQUFBODNDLHlCQUF5RCxJQUFBOTNDLEVBQUE2TixTQUFBN04sRUFBQXNFLFdBQUF0RSxFQUFxQyxTQUFBKzNDLEdBQUEvM0MsR0FBZSxJQUFBNnlDLEVBQUEsU0FBeUIsSUFBQTV5QyxHQUFURCxFQUFBLEtBQUFBLEtBQVM1QixTQUFnSCxPQUE1RjZCLE9BQUE3QixTQUFBQyxjQUFBLFFBQUF5USxhQUFBOU8sRUFBQSxXQUE2REMsRUFBQSxtQkFBQUEsRUFBQUQsSUFBK0JDLEVBQVMsU0FBQSszQyxHQUFBaDRDLEdBQWUsSUFBQUMsRUFBQUQsRUFBQUwsS0FBYSxPQUFBSyxJQUFBNE8sV0FBQSxVQUFBNU8sRUFBQW9KLGdCQUFBLGFBQUFuSixHQUFBLFVBQUFBLEdBRXZULFNBQUFnNEMsR0FBQWo0QyxHQUFlQSxFQUFBazRDLGdCQUFBbDRDLEVBQUFrNEMsY0FEbkMsU0FBQWw0QyxHQUFlLElBQUFDLEVBQUErM0MsR0FBQWg0QyxHQUFBLGtCQUFBaEMsRUFBQW5HLE9BQUFzZ0QseUJBQUFuNEMsRUFBQXVGLFlBQUF6TixVQUFBbUksR0FBQW1DLEVBQUEsR0FBQXBDLEVBQUFDLEdBQXFHLElBQUFELEVBQUFqSSxlQUFBa0ksU0FBQSxJQUFBakMsR0FBQSxtQkFBQUEsRUFBQWpFLEtBQUEsbUJBQUFpRSxFQUFBaEUsSUFBQSxDQUF1RyxJQUFBRyxFQUFBNkQsRUFBQWpFLElBQUE4dkMsRUFBQTdyQyxFQUFBaEUsSUFBaU0sT0FBN0tuQyxPQUFBcUMsZUFBQThGLEVBQUFDLEVBQUEsQ0FBMkJwRyxjQUFBLEVBQUFFLElBQUEsV0FBK0IsT0FBQUksRUFBQW5DLEtBQUF1TCxPQUFvQnZKLElBQUEsU0FBQWdHLEdBQWlCb0MsRUFBQSxHQUFBcEMsRUFBTzZwQyxFQUFBN3hDLEtBQUF1TCxLQUFBdkQsTUFBa0JuSSxPQUFBcUMsZUFBQThGLEVBQUFDLEVBQUEsQ0FBMkJuRyxXQUFBa0UsRUFBQWxFLGFBQTBCLENBQU9zK0MsU0FBQSxXQUFvQixPQUFBaDJDLEdBQVNpMkMsU0FBQSxTQUFBcjRDLEdBQXNCb0MsRUFBQSxHQUFBcEMsR0FBT3M0QyxhQUFBLFdBQXlCdDRDLEVBQUFrNEMsY0FDdGYsWUFBS2w0QyxFQUFBQyxNQUE4QnM0QyxDQUFBdjRDLElBQXlDLFNBQUF3NEMsR0FBQXg0QyxHQUFlLElBQUFBLEVBQUEsU0FBZSxJQUFBQyxFQUFBRCxFQUFBazRDLGNBQXNCLElBQUFqNEMsRUFBQSxTQUFlLElBQUFqQyxFQUFBaUMsRUFBQW00QyxXQUFtQmgyQyxFQUFBLEdBQTJELE9BQWxEcEMsSUFBQW9DLEVBQUE0MUMsR0FBQWg0QyxLQUFBc1csUUFBQSxlQUFBdFcsRUFBQS9GLFFBQThDK0YsRUFBQW9DLEtBQUlwRSxJQUFBaUMsRUFBQW80QyxTQUFBcjRDLElBQUEsR0FBbUMsSUFBQXk0QyxHQUFBaFAsRUFBQTBGLG1EQUE2RHNKLEdBQUExZ0QsZUFBQSw0QkFBQTBnRCxHQUFBckosdUJBQUEsQ0FBeUVqTSxRQUFBLE9BQ3RZLElBQUF1VixHQUFBLGNBQUFsUCxHQUFBLG1CQUFBaG5DLGVBQUF5NEIsSUFBQTBkLEdBQUFuUCxHQUFBaG5DLE9BQUF5NEIsSUFBQSx1QkFBQTJkLEdBQUFwUCxHQUFBaG5DLE9BQUF5NEIsSUFBQSxzQkFBQTRkLEdBQUFyUCxHQUFBaG5DLE9BQUF5NEIsSUFBQSx3QkFBQTZkLEdBQUF0UCxHQUFBaG5DLE9BQUF5NEIsSUFBQSwyQkFBQThkLEdBQUF2UCxHQUFBaG5DLE9BQUF5NEIsSUFBQSx3QkFBQStkLEdBQUF4UCxHQUFBaG5DLE9BQUF5NEIsSUFBQSx3QkFBQWdlLEdBQUF6UCxHQUFBaG5DLE9BQUF5NEIsSUFBQSx1QkFBQWllLEdBQUExUCxHQUFBaG5DLE9BQUF5NEIsSUFBQSwrQkFBQWtlLEdBQUEzUCxHQUFBaG5DLE9BQUF5NEIsSUFBQSwyQkFBQW1lLEdBQUE1UCxHQUFBaG5DLE9BQUF5NEIsSUFBQSx3QkFBQW9lLEdBQUE3UCxHQUFBaG5DLE9BQUF5NEIsSUFBQSxjQUNBLE1BQUFxZSxHQUFBOVAsR0FBQWhuQyxPQUFBeTRCLElBQUEsb0JBQUFzZSxHQUFBLG1CQUFBLzJDLGVBQUEwRyxTQUF5RixTQUFBc3dDLEdBQUF4NUMsR0FBZSxjQUFBQSxHQUFBLGlCQUFBQSxFQUFBLEtBQTBFLG1CQUE3QkEsRUFBQXU1QyxJQUFBdjVDLEVBQUF1NUMsS0FBQXY1QyxFQUFBLGVBQTZCQSxFQUFBLEtBQ2xMLFNBQUF5NUMsR0FBQXo1QyxHQUFlLFNBQUFBLEVBQUEsWUFBdUIsc0JBQUFBLEVBQUEsT0FBQUEsRUFBQTA1QyxhQUFBMTVDLEVBQUFwRyxNQUFBLEtBQTRELG9CQUFBb0csRUFBQSxPQUFBQSxFQUFnQyxPQUFBQSxHQUFVLEtBQUFrNUMsR0FBQSx1QkFBK0IsS0FBQUwsR0FBQSxpQkFBeUIsS0FBQUQsR0FBQSxlQUF1QixLQUFBRyxHQUFBLGlCQUF5QixLQUFBRCxHQUFBLG1CQUEyQixLQUFBTSxHQUFBLGlCQUF5QixvQkFBQXA1QyxFQUFBLE9BQUFBLEVBQUF5ckMsVUFBMEMsS0FBQXdOLEdBQUEseUJBQWlDLEtBQUFELEdBQUEseUJBQWlDLEtBQUFHLEdBQUEsSUFBQWw1QyxFQUFBRCxFQUFBMHRDLE9BQW1ELE9BQTVCenRDLElBQUF5NUMsYUFBQXo1QyxFQUFBckcsTUFBQSxHQUE0Qm9HLEVBQUEwNUMsY0FBQSxLQUFBejVDLEVBQUEsY0FBQUEsRUFDdmMsa0JBQWtCLEtBQUFvNUMsR0FBQSxPQUFBSSxHQUFBejVDLEVBQUFMLE1BQTBCLEtBQUEyNUMsR0FBQSxHQUFBdDVDLEVBQUEsSUFBQUEsRUFBQTZ0QyxRQUFBN3RDLEVBQUE4dEMsUUFBQSxZQUFBMkwsR0FBQXo1QyxHQUF1RCxZQUFZLFNBQUEyNUMsR0FBQTM1QyxHQUFlLElBQUFDLEVBQUEsR0FBUyxHQUFHRCxFQUFBLE9BQUFBLEVBQUEwUixLQUFnQiwrQ0FBQTFULEVBQUEsR0FBb0QsTUFBQWdDLEVBQVEsWUFBQW9DLEVBQUFwQyxFQUFBNDVDLFlBQUF6L0MsRUFBQTZGLEVBQUE2NUMsYUFBQWhRLEVBQUE0UCxHQUFBejVDLEVBQUFMLE1BQTBEM0IsRUFBQSxLQUFPb0UsSUFBQXBFLEVBQUF5N0MsR0FBQXIzQyxFQUFBekMsT0FBa0J5QyxFQUFBeW5DLEVBQUlBLEVBQUEsR0FBSzF2QyxFQUFBMHZDLEVBQUEsUUFBQTF2QyxFQUFBMi9DLFNBQUF6eUMsUUFBQXF4QyxHQUFBLFFBQUF2K0MsRUFBQTQvQyxXQUFBLElBQUEvN0MsSUFBQTZyQyxFQUFBLGdCQUFBN3JDLEVBQUEsS0FBd0ZBLEVBQUEsYUFBQW9FLEdBQUEsV0FBQXluQyxFQUErQjVwQyxHQUFBakMsRUFBS2dDLElBQUFxeUMsYUFBV3J5QyxHQUFTLE9BQUFDLEVBQ2xjLElBQUErNUMsR0FBQSw4VkFBQUMsR0FBQXBpRCxPQUFBQyxVQUFBQyxlQUFBbWlELEdBQUEsR0FBNllDLEdBQUEsR0FFckwsU0FBQW5RLEdBQUFocUMsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBakksR0FBc0JvSixLQUFBNjJDLGdCQUFBLElBQUFuNkMsR0FBQSxJQUFBQSxHQUFBLElBQUFBLEVBQXlDc0QsS0FBQTgyQyxjQUFBajRDLEVBQXFCbUIsS0FBQSsyQyxtQkFBQW5nRCxFQUEwQm9KLEtBQUFnM0MsZ0JBQUF2OEMsRUFBdUJ1RixLQUFBaTNDLGFBQUF4NkMsRUFBb0J1RCxLQUFBNUQsS0FBQU0sRUFBWSxJQUFBb3FDLEdBQUEsR0FDN1gsdUlBQUFsaEMsTUFBQSxLQUFBaEksUUFBQSxTQUFBbkIsR0FBc0txcUMsR0FBQXJxQyxHQUFBLElBQUFncUMsR0FBQWhxQyxFQUFBLEtBQUFBLEVBQUEsUUFBNEIsd0dBQUFtQixRQUFBLFNBQUFuQixHQUE0SCxJQUFBQyxFQUFBRCxFQUFBLEdBQVdxcUMsR0FBQXBxQyxHQUFBLElBQUErcEMsR0FBQS9wQyxFQUFBLEtBQUFELEVBQUEsV0FBK0IscURBQUFtQixRQUFBLFNBQUFuQixHQUF5RXFxQyxHQUFBcnFDLEdBQUEsSUFBQWdxQyxHQUFBaHFDLEVBQUEsS0FBQUEsRUFBQW9KLGNBQUEsUUFDamIsd0VBQUFqSSxRQUFBLFNBQUFuQixHQUE0RnFxQyxHQUFBcnFDLEdBQUEsSUFBQWdxQyxHQUFBaHFDLEVBQUEsS0FBQUEsRUFBQSxRQUE0QixnTUFBQW1KLE1BQUEsS0FBQWhJLFFBQUEsU0FBQW5CLEdBQStOcXFDLEdBQUFycUMsR0FBQSxJQUFBZ3FDLEdBQUFocUMsRUFBQSxLQUFBQSxFQUFBb0osY0FBQSxRQUEwQywwQ0FBQWpJLFFBQUEsU0FBQW5CLEdBQThEcXFDLEdBQUFycUMsR0FBQSxJQUFBZ3FDLEdBQUFocUMsRUFBQSxLQUFBQSxFQUFBLFFBQy9iLHVCQUFBbUIsUUFBQSxTQUFBbkIsR0FBMkNxcUMsR0FBQXJxQyxHQUFBLElBQUFncUMsR0FBQWhxQyxFQUFBLEtBQUFBLEVBQUEsUUFBNEIsOEJBQUFtQixRQUFBLFNBQUFuQixHQUFrRHFxQyxHQUFBcnFDLEdBQUEsSUFBQWdxQyxHQUFBaHFDLEVBQUEsS0FBQUEsRUFBQSxRQUE0QixvQkFBQW1CLFFBQUEsU0FBQW5CLEdBQXdDcXFDLEdBQUFycUMsR0FBQSxJQUFBZ3FDLEdBQUFocUMsRUFBQSxLQUFBQSxFQUFBb0osY0FBQSxRQUEwQyxJQUFBcXhDLEdBQUEsZ0JBQXVCLFNBQUFDLEdBQUExNkMsR0FBZSxPQUFBQSxFQUFBLEdBQUFrRixjQUc3USxTQUFBeTFDLEdBQUEzNkMsRUFBQUMsRUFBQWpDLEVBQUFvRSxHQUFxQixJQUFBakksRUFBQWt3QyxHQUFBdHlDLGVBQUFrSSxHQUFBb3FDLEdBQUFwcUMsR0FBQSxNQUFvQyxPQUFBOUYsRUFBQSxJQUFBQSxFQUFBd0YsTUFBQXlDLElBQUEsRUFBQW5DLEVBQUF4RSxTQUFBLE1BQUF3RSxFQUFBLFVBQUFBLEVBQUEsWUFBQUEsRUFBQSxVQUFBQSxFQUFBLFFBTnpELFNBQUFELEVBQUFDLEVBQUFqQyxFQUFBb0UsR0FBcUIsU0FBQW5DLEdBRDhGLFNBQUFELEVBQUFDLEVBQUFqQyxFQUFBb0UsR0FBcUIsVUFBQXBFLEdBQUEsSUFBQUEsRUFBQTJCLEtBQUEsU0FBaUMsY0FBQU0sR0FBaUIscUNBQXVDLHFCQUFBbUMsSUFBNkIsT0FBQXBFLEtBQUFvOEMsZ0JBQWtFLFdBQTdCcDZDLElBQUFvSixjQUFBOUosTUFBQSxPQUE2QixVQUFBVSxHQUErQixrQkFDMVU0NkMsQ0FBQTU2QyxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQUEsU0FBMEQsR0FBQUEsRUFBQSxTQUFjLFVBQUFwRSxFQUFBLE9BQUFBLEVBQUEyQixNQUEyQixjQUFBTSxFQUFnQixrQkFBQUEsRUFBb0IsY0FBQXlILE1BQUF6SCxHQUF1QixjQUFBeUgsTUFBQXpILElBQUEsRUFBQUEsRUFBNEIsU0FNbkQ0NkMsQ0FBQTU2QyxFQUFBakMsRUFBQTdELEVBQUFpSSxLQUFBcEUsRUFBQSxNQUFBb0UsR0FBQSxPQUFBakksRUFQNUosU0FBQTZGLEdBQWUsUUFBQWk2QyxHQUFBamlELEtBQUFtaUQsR0FBQW42QyxLQUEwQmk2QyxHQUFBamlELEtBQUFraUQsR0FBQWw2QyxLQUEwQmc2QyxHQUFBcnJDLEtBQUEzTyxHQUFBbTZDLEdBQUFuNkMsSUFBQSxHQUE4Qms2QyxHQUFBbDZDLElBQUEsR0FBUyxJQU9rRDg2QyxDQUFBNzZDLEtBQUEsT0FBQWpDLEVBQUFnQyxFQUFBbVAsZ0JBQUFsUCxHQUFBRCxFQUFBOE8sYUFBQTdPLEVBQUEsR0FBQWpDLElBQUE3RCxFQUFBb2dELGdCQUFBdjZDLEVBQUE3RixFQUFBcWdELGNBQUEsT0FBQXg4QyxFQUFBLElBQUE3RCxFQUFBd0YsTUFBQSxHQUFBM0IsR0FBQWlDLEVBQUE5RixFQUFBa2dELGNBQUFqNEMsRUFBQWpJLEVBQUFtZ0QsbUJBQUEsT0FBQXQ4QyxFQUFBZ0MsRUFBQW1QLGdCQUFBbFAsSUFBQWpDLEVBQUEsS0FBQTdELElBQUF3RixPQUFBLElBQUF4RixJQUFBLElBQUE2RCxFQUFBLE1BQUFBLEVBQUFvRSxFQUFBcEMsRUFBQSs2QyxlQUFBMzRDLEVBQUFuQyxFQUFBakMsR0FBQWdDLEVBQUE4TyxhQUFBN08sRUFBQWpDLE1BQzVKLFNBQUFnOUMsR0FBQWg3QyxHQUFlLGNBQUFBLEdBQWlCLDRFQUFBQSxFQUFtRixrQkFBa0IsU0FBQWk3QyxHQUFBajdDLEVBQUFDLEdBQWlCLElBQUFqQyxFQUFBaUMsRUFBQXFXLFFBQWdCLE9BQUF2VCxFQUFBLEdBQVc5QyxFQUFBLENBQUlpN0Msb0JBQUEsRUFBQTFnQyxrQkFBQSxFQUFBdmdCLFdBQUEsRUFBQXFjLFFBQUEsTUFBQXRZLElBQUFnQyxFQUFBbTdDLGNBQUFDLGlCQUNyTCxTQUFBQyxHQUFBcjdDLEVBQUFDLEdBQWlCLElBQUFqQyxFQUFBLE1BQUFpQyxFQUFBdWEsYUFBQSxHQUFBdmEsRUFBQXVhLGFBQUFwWSxFQUFBLE1BQUFuQyxFQUFBcVcsUUFBQXJXLEVBQUFxVyxRQUFBclcsRUFBQWk3QyxlQUEwRmw5QyxFQUFBZzlDLEdBQUEsTUFBQS82QyxFQUFBaEcsTUFBQWdHLEVBQUFoRyxNQUFBK0QsR0FBOEJnQyxFQUFBbTdDLGNBQUEsQ0FBaUJDLGVBQUFoNUMsRUFBQWs1QyxhQUFBdDlDLEVBQUF1OUMsV0FBQSxhQUFBdDdDLEVBQUFOLE1BQUEsVUFBQU0sRUFBQU4sS0FBQSxNQUFBTSxFQUFBcVcsUUFBQSxNQUFBclcsRUFBQWhHLE9BQWdILFNBQUF1aEQsR0FBQXg3QyxFQUFBQyxHQUE2QixPQUFaQSxJQUFBcVcsVUFBWXFrQyxHQUFBMzZDLEVBQUEsVUFBQUMsR0FBQSxHQUN2UyxTQUFBdzdDLEdBQUF6N0MsRUFBQUMsR0FBaUJ1N0MsR0FBQXg3QyxFQUFBQyxHQUFRLElBQUFqQyxFQUFBZzlDLEdBQUEvNkMsRUFBQWhHLE9BQUFtSSxFQUFBbkMsRUFBQU4sS0FBMkIsU0FBQTNCLEVBQUEsV0FBQW9FLEdBQTRCLElBQUFwRSxHQUFBLEtBQUFnQyxFQUFBL0YsT0FBQStGLEVBQUEvRixPQUFBK0QsS0FBQWdDLEVBQUEvRixNQUFBLEdBQUErRCxHQUFnRGdDLEVBQUEvRixRQUFBLEdBQUErRCxJQUFBZ0MsRUFBQS9GLE1BQUEsR0FBQStELFFBQW9DLGNBQUFvRSxHQUFBLFVBQUFBLEVBQThELFlBQTNCcEMsRUFBQW1QLGdCQUFBLFNBQWtDbFAsRUFBQWxJLGVBQUEsU0FBQTJqRCxHQUFBMTdDLEVBQUFDLEVBQUFOLEtBQUEzQixHQUFBaUMsRUFBQWxJLGVBQUEsaUJBQUEyakQsR0FBQTE3QyxFQUFBQyxFQUFBTixLQUFBcTdDLEdBQUEvNkMsRUFBQXVhLGVBQTJHLE1BQUF2YSxFQUFBcVcsU0FBQSxNQUFBclcsRUFBQWk3QyxpQkFBQWw3QyxFQUFBazdDLGlCQUFBajdDLEVBQUFpN0MsZ0JBQ3BWLFNBQUFTLEdBQUEzN0MsRUFBQUMsRUFBQWpDLEdBQW1CLEdBQUFpQyxFQUFBbEksZUFBQSxVQUFBa0ksRUFBQWxJLGVBQUEsaUJBQWdFLElBQUFxSyxFQUFBbkMsRUFBQU4sS0FBYSxnQkFBQXlDLEdBQUEsVUFBQUEsUUFBQSxJQUFBbkMsRUFBQWhHLE9BQUEsT0FBQWdHLEVBQUFoRyxPQUFBLE9BQXlFZ0csRUFBQSxHQUFBRCxFQUFBbTdDLGNBQUFHLGFBQWtDdDlDLEdBQUFpQyxJQUFBRCxFQUFBL0YsUUFBQStGLEVBQUEvRixNQUFBZ0csR0FBNEJELEVBQUF3YSxhQUFBdmEsRUFBMEIsTUFBVGpDLEVBQUFnQyxFQUFBcEcsUUFBU29HLEVBQUFwRyxLQUFBLElBQW9Cb0csRUFBQWs3QyxnQkFBQWw3QyxFQUFBazdDLGVBQW1DbDdDLEVBQUFrN0MsaUJBQUFsN0MsRUFBQW03QyxjQUFBQyxlQUFrRCxLQUFBcDlDLElBQUFnQyxFQUFBcEcsS0FBQW9FLEdBQzFXLFNBQUEwOUMsR0FBQTE3QyxFQUFBQyxFQUFBakMsR0FBbUIsV0FBQWlDLEdBQUFELEVBQUFxTyxjQUFBNEgsZ0JBQUFqVyxJQUFBLE1BQUFoQyxFQUFBZ0MsRUFBQXdhLGFBQUEsR0FBQXhhLEVBQUFtN0MsY0FBQUcsYUFBQXQ3QyxFQUFBd2EsZUFBQSxHQUFBeGMsSUFBQWdDLEVBQUF3YSxhQUFBLEdBQUF4YyxJQVBuQiwwakNBQUFtTCxNQUFBLEtBQUFoSSxRQUFBLFNBQUFuQixHQUF5bEMsSUFBQUMsRUFBQUQsRUFBQXFILFFBQUFvekMsR0FDemxDQyxJQUFJclEsR0FBQXBxQyxHQUFBLElBQUErcEMsR0FBQS9wQyxFQUFBLEtBQUFELEVBQUEsUUFBNEIsc0ZBQUFtSixNQUFBLEtBQUFoSSxRQUFBLFNBQUFuQixHQUFxSCxJQUFBQyxFQUFBRCxFQUFBcUgsUUFBQW96QyxHQUFBQyxJQUF1QnJRLEdBQUFwcUMsR0FBQSxJQUFBK3BDLEdBQUEvcEMsRUFBQSxLQUFBRCxFQUFBLGtDQUFzRCxvQ0FBQW1CLFFBQUEsU0FBQW5CLEdBQXdELElBQUFDLEVBQUFELEVBQUFxSCxRQUFBb3pDLEdBQUFDLElBQXVCclEsR0FBQXBxQyxHQUFBLElBQUErcEMsR0FBQS9wQyxFQUFBLEtBQUFELEVBQUEsMENBQThELDJCQUFBbUIsUUFBQSxTQUFBbkIsR0FBK0NxcUMsR0FBQXJxQyxHQUFBLElBQUFncUMsR0FBQWhxQyxFQUFBLEtBQUFBLEVBQUFvSixjQUFBLFFBTXBQLElBQUF3eUMsR0FBQSxDQUFRQyxPQUFBLENBQVF6TCx3QkFBQSxDQUF5Qm1GLFFBQUEsV0FBQUMsU0FBQSxtQkFBOEMvRSxhQUFBLDhEQUFBdG5DLE1BQUEsT0FBeUYsU0FBQTJ5QyxHQUFBOTdDLEVBQUFDLEVBQUFqQyxHQUE4RSxPQUEzRGdDLEVBQUF1cEMsR0FBQWlMLFVBQUFvSCxHQUFBQyxPQUFBNzdDLEVBQUFDLEVBQUFqQyxJQUErQjJCLEtBQUEsU0FBZ0I2MkMsR0FBQXg0QyxHQUFNNDBDLEVBQUE1eUMsR0FBTUEsRUFBUyxJQUFBKzdDLEdBQUEsS0FBQUMsR0FBQSxLQUFvQixTQUFBQyxHQUFBajhDLEdBQWU0eEMsRUFBQTV4QyxHQUNwZCxTQUFBazhDLEdBQUFsOEMsR0FBMkIsR0FBQXc0QyxHQUFadEcsRUFBQWx5QyxJQUFZLE9BQUFBLEVBQWtCLFNBQUFtOEMsR0FBQW44QyxFQUFBQyxHQUFpQixjQUFBRCxFQUFBLE9BQUFDLEVBQXlCLElBQUFtOEMsSUFBQSxFQUFrRixTQUFBQyxLQUFjTixRQUFBTyxZQUFBLG1CQUFBQyxJQUFBUCxHQUFBRCxHQUFBLE1BQXVELFNBQUFRLEdBQUF2OEMsR0FBZSxVQUFBQSxFQUFBdzZDLGNBQUEwQixHQUFBRixLQUFBbEYsR0FBQW1GLEdBQUFqOEMsRUFBQTg3QyxHQUFBRSxHQUFBaDhDLEVBQUE0M0MsR0FBQTUzQyxLQUE4RCxTQUFBdzhDLEdBQUF4OEMsRUFBQUMsRUFBQWpDLEdBQW1CLFVBQUFnQyxHQUFBcThDLEtBQUFMLEdBQUFoK0MsR0FBQSs5QyxHQUFBOTdDLEdBQUFnUixZQUFBLG1CQUFBc3JDLEtBQUEsU0FBQXY4QyxHQUFBcThDLEtBQW9GLFNBQUFJLEdBQUF6OEMsR0FBZSx1QkFBQUEsR0FBQSxVQUFBQSxHQUFBLFlBQUFBLEVBQUEsT0FBQWs4QyxHQUFBRixJQUNqYixTQUFBVSxHQUFBMThDLEVBQUFDLEdBQWlCLGFBQUFELEVBQUEsT0FBQWs4QyxHQUFBajhDLEdBQTRCLFNBQUEwOEMsR0FBQTM4QyxFQUFBQyxHQUFpQixhQUFBRCxHQUFBLFdBQUFBLEVBQUEsT0FBQWs4QyxHQUFBajhDLEdBRG1DNHlDLElBQUF1SixHQUFBckUsR0FBQSxZQUFBMzVDLFNBQUE2MkMsY0FBQSxFQUFBNzJDLFNBQUE2MkMsZUFFakcsSUFBQTJILEdBQUEsQ0FBUTFNLFdBQUEwTCxHQUFBaUIsdUJBQUFULEdBQUFuTSxjQUFBLFNBQUFqd0MsRUFBQUMsRUFBQWpDLEVBQUFvRSxHQUF3RSxJQUFBakksRUFBQThGLEVBQUFpeUMsRUFBQWp5QyxHQUFBMUksT0FBQXN5QyxPQUFBLEVBQUFkLE9BQUEsRUFBQTlxQyxFQUFBOUQsRUFBQXlVLFVBQUF6VSxFQUFBeVUsU0FBQXhGLGNBQW1QLEdBQXJLLFdBQUFuTCxHQUFBLFVBQUFBLEdBQUEsU0FBQTlELEVBQUF3RixLQUFBa3FDLEVBQUFzUyxHQUFBeEUsR0FBQXg5QyxHQUFBaWlELEdBQUF2UyxFQUFBOFMsSUFBQTlTLEVBQUE0UyxHQUFBMVQsRUFBQXlULEtBQUF2K0MsRUFBQTlELEVBQUF5VSxXQUFBLFVBQUEzUSxFQUFBbUwsZ0JBQUEsYUFBQWpQLEVBQUF3RixNQUFBLFVBQUF4RixFQUFBd0YsUUFBQWtxQyxFQUFBNlMsSUFBcUs3UyxRQUFBN3BDLEVBQUFDLElBQUEsT0FBQTY3QyxHQUFBalMsRUFBQTdyQyxFQUFBb0UsR0FBa0MybUMsS0FBQS9vQyxFQUFBN0YsRUFBQThGLEdBQVksU0FBQUQsTUFBQTdGLEVBQUFnaEQsZ0JBQUFuN0MsRUFBQXU3QyxZQUFBLFdBQUFwaEQsRUFBQXdGLE1BQUErN0MsR0FBQXZoRCxFQUFBLFNBQUFBLEVBQUFGLFNBQTBGNmlELEdBQUF2VCxHQUFBL2lDLE9BQUEsQ0FBY21sQixLQUFBLEtBQUFOLE9BQUEsT0FBc0IweEIsR0FBQSxDQUFNQyxJQUFBLFNBQ3JmQyxRQUFBLFVBQUFDLEtBQUEsVUFBQUMsTUFBQSxZQUFtRCxTQUFBQyxHQUFBcDlDLEdBQWUsSUFBQUMsRUFBQXNELEtBQUF3bEIsWUFBdUIsT0FBQTlvQixFQUFBbzlDLGlCQUFBcDlDLEVBQUFvOUMsaUJBQUFyOUMsUUFBQSs4QyxHQUFBLzhDLE9BQUFDLEVBQUFELEdBQW9FLFNBQUFzOUMsS0FBYyxPQUFBRixHQUMzSyxJQUFBRyxHQUFBLEVBQUFDLEdBQUEsRUFBQUMsSUFBQSxFQUFBQyxJQUFBLEVBQUFDLEdBQUFiLEdBQUF0MkMsT0FBQSxDQUF3QzhsQixRQUFBLEtBQUFDLFFBQUEsS0FBQVAsUUFBQSxLQUFBQyxRQUFBLEtBQUFULE1BQUEsS0FBQUMsTUFBQSxLQUFBTCxRQUFBLEtBQUFNLFNBQUEsS0FBQVYsT0FBQSxLQUFBTyxRQUFBLEtBQUE4eEIsaUJBQUFDLEdBQUEzbUMsT0FBQSxLQUFBb1YsUUFBQSxLQUFBbkIsY0FBQSxTQUFBNXFCLEdBQXFNLE9BQUFBLEVBQUE0cUIsZ0JBQUE1cUIsRUFBQTQ5QyxjQUFBNTlDLEVBQUE2M0MsV0FBQTczQyxFQUFBeXNCLFVBQUF6c0IsRUFBQTQ5QyxjQUFpRkMsVUFBQSxTQUFBNzlDLEdBQXVCLGlCQUFBQSxFQUFBLE9BQUFBLEVBQUE2OUMsVUFBc0MsSUFBQTU5QyxFQUFBczlDLEdBQXNCLE9BQWJBLEdBQUF2OUMsRUFBQXNzQixRQUFhbXhCLEdBQUEsY0FBQXo5QyxFQUFBTCxLQUFBSyxFQUFBc3NCLFFBQUFyc0IsRUFBQSxHQUFBdzlDLElBQUEsTUFBdURLLFVBQUEsU0FBQTk5QyxHQUF1QixpQkFBQUEsRUFBQSxPQUFBQSxFQUFBODlDLFVBQy9kLElBQUE3OUMsRUFBQXU5QyxHQUFzQixPQUFiQSxHQUFBeDlDLEVBQUF1c0IsUUFBYW14QixHQUFBLGNBQUExOUMsRUFBQUwsS0FBQUssRUFBQXVzQixRQUFBdHNCLEVBQUEsR0FBQXk5QyxJQUFBLFFBQXdESyxHQUFBSixHQUFBbjNDLE9BQUEsQ0FBZ0I0bEIsVUFBQSxLQUFBOEQsTUFBQSxLQUFBdUcsT0FBQSxLQUFBdW5CLFNBQUEsS0FBQUMsbUJBQUEsS0FBQUMsTUFBQSxLQUFBQyxNQUFBLEtBQUFDLE1BQUEsS0FBQS94QixZQUFBLEtBQUFneUIsVUFBQSxPQUE2SUMsR0FBQSxDQUFNQyxXQUFBLENBQVlqTyxpQkFBQSxlQUFBRyxhQUFBLDBCQUFzRStOLFdBQUEsQ0FBYWxPLGlCQUFBLGVBQUFHLGFBQUEsMEJBQXNFZ08sYUFBQSxDQUFlbk8saUJBQUEsaUJBQUFHLGFBQUEsOEJBQTRFaU8sYUFBQSxDQUFlcE8saUJBQUEsaUJBQ2hnQkcsYUFBQSwrQkFBMkNrTyxHQUFBLENBQUt6TyxXQUFBb08sR0FBQXJPLGNBQUEsU0FBQWp3QyxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQThDLElBQUFqSSxFQUFBLGNBQUE2RixHQUFBLGdCQUFBQSxFQUFBNnBDLEVBQUEsYUFBQTdwQyxHQUFBLGVBQUFBLEVBQTRFLEdBQUE3RixJQUFBNkQsRUFBQTRzQixlQUFBNXNCLEVBQUE0L0MsZUFBQS9ULElBQUExdkMsRUFBQSxZQUFrTSxHQUF2SUEsRUFBQWlJLEVBQUE3SyxTQUFBNkssS0FBQWpJLEVBQUFpSSxFQUFBaU0sZUFBQWxVLEVBQUEyVyxhQUFBM1csRUFBQW1pQyxhQUFBL2tDLE9BQTBFc3lDLEtBQUE1cEMsT0FBQWpDLEVBQUE0c0IsZUFBQTVzQixFQUFBeXVCLFdBQUF1bEIsRUFBQS94QyxHQUFBLE1BQUE0cEMsRUFBQSxLQUE2REEsSUFBQTVwQyxFQUFBLFlBQXFCLElBQUE4b0MsT0FBQSxFQUFBOXFDLE9BQUEsRUFBQTVCLE9BQUEsRUFBQThzQyxPQUFBLEVBQXdDLGFBQUFucEMsR0FBQSxjQUFBQSxHQUFBK29DLEVBQUE0VSxHQUFBMS9DLEVBQUFxZ0QsR0FBQUUsV0FBQW5pRCxFQUFBaWlELEdBQUFDLFdBQUFwVixFQUFBLFNBQ3phLGVBQUFucEMsR0FBQSxnQkFBQUEsSUFBQStvQyxFQUFBZ1YsR0FBQTkvQyxFQUFBcWdELEdBQUFJLGFBQUFyaUQsRUFBQWlpRCxHQUFBRyxhQUFBdFYsRUFBQSxXQUFpRyxJQUFBaG5DLEVBQUEsTUFBQTBuQyxFQUFBMXZDLEVBQUErM0MsRUFBQXJJLEdBQXNMLEdBQWhLMXZDLEVBQUEsTUFBQThGLEVBQUE5RixFQUFBKzNDLEVBQUFqeUMsSUFBa0JELEVBQUErb0MsRUFBQXlMLFVBQUF2MkMsRUFBQTRyQyxFQUFBN3JDLEVBQUFvRSxJQUF1QnpDLEtBQUF3cEMsRUFBQSxRQUFpQm5wQyxFQUFBNEcsT0FBQXpFLEVBQVduQyxFQUFBNHFCLGNBQUF6d0IsR0FBa0I2RCxFQUFBK3FDLEVBQUF5TCxVQUFBbjRDLEVBQUE0RCxFQUFBakMsRUFBQW9FLElBQXVCekMsS0FBQXdwQyxFQUFBLFFBQWlCbnJDLEVBQUE0SSxPQUFBek0sRUFBVzZELEVBQUE0c0IsY0FBQXpvQixFQUFrQkMsRUFBQW5DLEVBQUk0cEMsR0FBQXpuQyxFQUFBcEMsRUFBQSxDQUF1QixJQUFSN0YsRUFBQWlJLEVBQUkrbUMsRUFBQSxFQUFJSixFQUFaOW9DLEVBQUE0cEMsRUFBb0JkLEVBQUVBLEVBQUFxSixFQUFBckosR0FBQUksSUFBZ0IsSUFBSkosRUFBQSxFQUFJMXNDLEVBQUFsQyxFQUFRa0MsRUFBRUEsRUFBQSsxQyxFQUFBLzFDLEdBQUEwc0MsSUFBWSxLQUFLLEVBQUFJLEVBQUFKLEdBQU05b0MsRUFBQW15QyxFQUFBbnlDLEdBQUFrcEMsSUFBYSxLQUFLLEVBQUFKLEVBQUFJLEdBQU1odkMsRUFBQWk0QyxFQUFBajRDLEdBQUE0dUMsSUFBYSxLQUFLSSxLQUFJLENBQUUsR0FBQWxwQyxJQUFBOUYsR0FBQThGLElBQUE5RixFQUFBeWtELFVBQUEsTUFBQTUrQyxFQUFrQ0MsRUFBQW15QyxFQUFBbnlDLEdBQVE5RixFQUFBaTRDLEVBQUFqNEMsR0FBUThGLEVBQUEsVUFBT0EsRUFBQSxLQUFnQixJQUFKOUYsRUFBQThGLEVBQUlBLEVBQUEsR0FBUzRwQyxPQUFBMXZDLElBQy9kLFFBRDBlZ3ZDLEVBQ3RmVSxFQUFBK1UsWUFBWXpWLElBQUFodkMsSUFBeUI4RixFQUFBMUcsS0FBQXN3QyxHQUFVQSxFQUFBdUksRUFBQXZJLEdBQVEsSUFBQUEsRUFBQSxHQUFTem5DLE9BQUFqSSxJQUF5QixRQUFkZ3ZDLEVBQUEvbUMsRUFBQXc4QyxZQUFjelYsSUFBQWh2QyxJQUF5QjB2QyxFQUFBdHdDLEtBQUE2SSxHQUFVQSxFQUFBZ3dDLEVBQUFod0MsR0FBUSxJQUFBQSxFQUFBLEVBQVFBLEVBQUFuQyxFQUFBeEUsT0FBVzJHLElBQUFzd0MsRUFBQXp5QyxFQUFBbUMsR0FBQSxVQUFBcEMsR0FBeUIsSUFBQW9DLEVBQUF5bkMsRUFBQXB1QyxPQUFlLEVBQUEyRyxLQUFNc3dDLEVBQUE3SSxFQUFBem5DLEdBQUEsV0FBQXBFLEdBQXVCLE9BQUFnQyxFQUFBaEMsS0FBYyxTQUFBNmdELEdBQUE3K0MsRUFBQUMsR0FBaUIsT0FBQUQsSUFBQUMsSUFBQSxJQUFBRCxHQUFBLEVBQUFBLEdBQUEsRUFBQUMsSUFBQUQsTUFBQUMsS0FBK0MsSUFBQTYrQyxHQUFBam5ELE9BQUFDLFVBQUFDLGVBQzFTLFNBQUFnbkQsR0FBQS8rQyxFQUFBQyxHQUFpQixHQUFBNCtDLEdBQUE3K0MsRUFBQUMsR0FBQSxTQUFvQixvQkFBQUQsR0FBQSxPQUFBQSxHQUFBLGlCQUFBQyxHQUFBLE9BQUFBLEVBQUEsU0FBeUUsSUFBQWpDLEVBQUFuRyxPQUFBcUosS0FBQWxCLEdBQUFvQyxFQUFBdkssT0FBQXFKLEtBQUFqQixHQUFzQyxHQUFBakMsRUFBQXZDLFNBQUEyRyxFQUFBM0csT0FBQSxTQUFnQyxJQUFBMkcsRUFBQSxFQUFRQSxFQUFBcEUsRUFBQXZDLE9BQVcyRyxJQUFBLElBQUEwOEMsR0FBQTltRCxLQUFBaUksRUFBQWpDLEVBQUFvRSxNQUFBeThDLEdBQUE3K0MsRUFBQWhDLEVBQUFvRSxJQUFBbkMsRUFBQWpDLEVBQUFvRSxLQUFBLFNBQXVELFNBQVMsU0FBQTQ4QyxHQUFBaC9DLEdBQWUsSUFBQUMsRUFBQUQsRUFBUSxHQUFBQSxFQUFBNCtDLFVBQUEsS0FBb0IzK0MsRUFBQW95QyxRQUFTcHlDLElBQUFveUMsV0FBWSxDQUFLLFNBQUFweUMsRUFBQWcvQyxXQUFBLFNBQWdDLEtBQUtoL0MsRUFBQW95QyxRQUFTLFVBQUFweUMsSUFBQW95QyxRQUFBNE0sV0FBQSxTQUE0QyxXQUFBaC9DLEVBQUF5UixJQUFBLElBQXFCLFNBQUF3dEMsR0FBQWwvQyxHQUFlLElBQUFnL0MsR0FBQWgvQyxJQUFBc3BDLEVBQUEsT0FFNVYsU0FBQTZWLEdBQUFuL0MsR0FBdUIsS0FBUkEsRUFEN0gsU0FBQUEsR0FBZSxJQUFBQyxFQUFBRCxFQUFBNCtDLFVBQWtCLElBQUEzK0MsRUFBQSxZQUFBQSxFQUFBKytDLEdBQUFoL0MsS0FBQXNwQyxFQUFBLFdBQUFycEMsRUFBQSxLQUFBRCxFQUF3RCxRQUFBaEMsRUFBQWdDLEVBQUFvQyxFQUFBbkMsSUFBaUIsQ0FBRSxJQUFBOUYsRUFBQTZELEVBQUFxMEMsT0FBQXhJLEVBQUExdkMsSUFBQXlrRCxVQUFBLEtBQW9DLElBQUF6a0QsSUFBQTB2QyxFQUFBLE1BQWdCLEdBQUExdkMsRUFBQXNILFFBQUFvb0MsRUFBQXBvQyxNQUFBLENBQXNCLFFBQUFzbkMsRUFBQTV1QyxFQUFBc0gsTUFBa0JzbkMsR0FBRSxDQUFFLEdBQUFBLElBQUEvcUMsRUFBQSxPQUFBa2hELEdBQUEva0QsR0FBQTZGLEVBQXdCLEdBQUErb0MsSUFBQTNtQyxFQUFBLE9BQUE4OEMsR0FBQS9rRCxHQUFBOEYsRUFBd0I4b0MsSUFBQWx0QixRQUFZeXRCLEVBQUEsT0FBUyxHQUFBdHJDLEVBQUFxMEMsU0FBQWp3QyxFQUFBaXdDLE9BQUFyMEMsRUFBQTdELEVBQUFpSSxFQUFBeW5DLE1BQStCLENBQUtkLEdBQUEsRUFBSyxRQUFBOXFDLEVBQUE5RCxFQUFBc0gsTUFBa0J4RCxHQUFFLENBQUUsR0FBQUEsSUFBQUQsRUFBQSxDQUFVK3FDLEdBQUEsRUFBSy9xQyxFQUFBN0QsRUFBSWlJLEVBQUF5bkMsRUFBSSxNQUFNLEdBQUE1ckMsSUFBQW1FLEVBQUEsQ0FBVTJtQyxHQUFBLEVBQUszbUMsRUFBQWpJLEVBQUk2RCxFQUFBNnJDLEVBQUksTUFBTTVyQyxJQUFBNGQsUUFBWSxJQUFBa3RCLEVBQUEsQ0FBTyxJQUFBOXFDLEVBQUE0ckMsRUFBQXBvQyxNQUFjeEQsR0FBRSxDQUFFLEdBQUFBLElBQUFELEVBQUEsQ0FBVStxQyxHQUFBLEVBQUsvcUMsRUFBQTZyQyxFQUFJem5DLEVBQUFqSSxFQUFJLE1BQU0sR0FBQThELElBQUFtRSxFQUFBLENBQVUybUMsR0FBQSxFQUFLM21DLEVBQUF5bkMsRUFBSTdyQyxFQUFBN0QsRUFBSSxNQUFNOEQsSUFBQTRkLFFBQVlrdEIsR0FDcmZPLEVBQUEsUUFBaUJ0ckMsRUFBQTRnRCxZQUFBeDhDLEdBQUFrbkMsRUFBQSxPQUEwRCxPQUExQixJQUFBdHJDLEVBQUEwVCxLQUFBNDNCLEVBQUEsT0FBMEJ0ckMsRUFBQTJ6QyxVQUFBeE8sVUFBQW5sQyxFQUFBZ0MsRUFBQUMsRUFBa0RtL0MsQ0FBQXAvQyxJQUFRLFlBQWtCLFFBQUFDLEVBQUFELElBQWEsQ0FBRSxPQUFBQyxFQUFBeVIsS0FBQSxJQUFBelIsRUFBQXlSLElBQUEsT0FBQXpSLEVBQWlDLEdBQUFBLEVBQUF3QixNQUFBeEIsRUFBQXdCLE1BQUE0d0MsT0FBQXB5QyxNQUFBd0IsVUFBc0MsQ0FBSyxHQUFBeEIsSUFBQUQsRUFBQSxNQUFlLE1BQUtDLEVBQUE0YixTQUFXLENBQUUsSUFBQTViLEVBQUFveUMsUUFBQXB5QyxFQUFBb3lDLFNBQUFyeUMsRUFBQSxZQUF1Q0MsSUFBQW95QyxPQUFXcHlDLEVBQUE0YixRQUFBdzJCLE9BQUFweUMsRUFBQW95QyxPQUEwQnB5QyxJQUFBNGIsU0FBYSxZQUM1VyxJQUFBL2UsR0FBQXlzQyxHQUFBL2lDLE9BQUEsQ0FBaUI2NEMsY0FBQSxLQUFBQyxZQUFBLEtBQUFDLGNBQUEsT0FBdURDLEdBQUFqVyxHQUFBL2lDLE9BQUEsQ0FBZWk1QyxjQUFBLFNBQUF6L0MsR0FBMEIsd0JBQUFBLElBQUF5L0MsY0FBQWxvRCxPQUFBa29ELGlCQUFnRUMsR0FBQTVDLEdBQUF0MkMsT0FBQSxDQUFnQm9rQixjQUFBLE9BQXFCLFNBQUErMEIsR0FBQTMvQyxHQUFlLElBQUFDLEVBQUFELEVBQUE4ckIsUUFBdUYsTUFBdkUsYUFBQTlyQixFQUFBLEtBQUFBLElBQUE2ckIsV0FBQSxLQUFBNXJCLElBQUFELEVBQUEsSUFBQUEsRUFBQUMsRUFBd0QsS0FBQUQsTUFBQSxJQUFlLElBQUFBLEdBQUEsS0FBQUEsSUFBQSxFQUM1VCxJQUFBNC9DLEdBQUEsQ0FBUUMsSUFBQSxTQUFBQyxTQUFBLElBQUFDLEtBQUEsWUFBQUMsR0FBQSxVQUFBQyxNQUFBLGFBQUFDLEtBQUEsWUFBQUMsSUFBQSxTQUFBQyxJQUFBLEtBQUFDLEtBQUEsY0FBQUMsS0FBQSxjQUFBQyxPQUFBLGFBQUFDLGdCQUFBLGdCQUEyTUMsR0FBQSxDQUFLQyxFQUFBLFlBQUFDLEVBQUEsTUFBQUMsR0FBQSxRQUFBQyxHQUFBLFFBQUFDLEdBQUEsUUFBQUMsR0FBQSxVQUFBQyxHQUFBLE1BQUFDLEdBQUEsUUFBQUMsR0FBQSxXQUFBQyxHQUFBLFNBQUFDLEdBQUEsSUFBQUMsR0FBQSxTQUFBQyxHQUFBLFdBQUFDLEdBQUEsTUFBQUMsR0FBQSxPQUFBQyxHQUFBLFlBQUFDLEdBQUEsVUFBQUMsR0FBQSxhQUFBQyxHQUFBLFlBQUFDLEdBQUEsU0FBQUMsR0FBQSxTQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ3hOQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxLQUFBQyxJQUFBLEtBQUFDLElBQUEsS0FBQUMsSUFBQSxNQUFBQyxJQUFBLE1BQUFDLElBQUEsTUFBQUMsSUFBQSxVQUFBQyxJQUFBLGFBQUFDLElBQUEsUUFBcUhDLEdBQUFoRyxHQUFBdDJDLE9BQUEsQ0FBZTNELElBQUEsU0FBQTdDLEdBQWdCLEdBQUFBLEVBQUE2QyxJQUFBLENBQVUsSUFBQTVDLEVBQUEyL0MsR0FBQTUvQyxFQUFBNkMsTUFBQTdDLEVBQUE2QyxJQUF1QixvQkFBQTVDLEVBQUEsT0FBQUEsRUFBK0IsbUJBQUFELEVBQUFMLEtBQUEsTUFBQUssRUFBQTIvQyxHQUFBMy9DLElBQUEsUUFBQStNLE9BQUFDLGFBQUFoTixHQUFBLFlBQUFBLEVBQUFMLE1BQUEsVUFBQUssRUFBQUwsS0FBQThnRCxHQUFBemdELEVBQUE4ckIsVUFBQSxtQkFBZ0poVyxTQUFBLEtBQUFzVixRQUFBLEtBQUFNLFNBQUEsS0FBQVYsT0FBQSxLQUFBTyxRQUFBLEtBQUF3M0IsT0FBQSxLQUFBOU0sT0FBQSxLQUFBb0gsaUJBQUFDLEdBQUF6eEIsU0FBQSxTQUFBN3JCLEdBQW9JLG1CQUN4ZUEsRUFBQUwsS0FBQWdnRCxHQUFBMy9DLEdBQUEsR0FBZThyQixRQUFBLFNBQUE5ckIsR0FBcUIsa0JBQUFBLEVBQUFMLE1BQUEsVUFBQUssRUFBQUwsS0FBQUssRUFBQThyQixRQUFBLEdBQXVEYSxNQUFBLFNBQUEzc0IsR0FBbUIsbUJBQUFBLEVBQUFMLEtBQUFnZ0QsR0FBQTMvQyxHQUFBLFlBQUFBLEVBQUFMLE1BQUEsVUFBQUssRUFBQUwsS0FBQUssRUFBQThyQixRQUFBLEtBQWtGazNCLEdBQUFyRixHQUFBbjNDLE9BQUEsQ0FBZ0J5OEMsYUFBQSxPQUFrQkMsR0FBQXBHLEdBQUF0MkMsT0FBQSxDQUFnQmttQixRQUFBLEtBQUFGLGNBQUEsS0FBQXJCLGVBQUEsS0FBQUgsT0FBQSxLQUFBTyxRQUFBLEtBQUFILFFBQUEsS0FBQU0sU0FBQSxLQUFBMnhCLGlCQUFBQyxLQUE0SDZGLEdBQUE1WixHQUFBL2lDLE9BQUEsQ0FBZWcwQyxhQUFBLEtBQUE4RSxZQUFBLEtBQUFDLGNBQUEsT0FBc0Q2RCxHQUFBekYsR0FBQW4zQyxPQUFBLENBQWdCNjhDLE9BQUEsU0FBQXJqRCxHQUFtQixpQkFBQUEsSUFBQXFqRCxPQUFBLGdCQUN0ZHJqRCxLQUFBc2pELFlBQUEsR0FBbUJDLE9BQUEsU0FBQXZqRCxHQUFvQixpQkFBQUEsSUFBQXVqRCxPQUFBLGdCQUFBdmpELEtBQUF3akQsWUFBQSxlQUFBeGpELEtBQUF5akQsV0FBQSxHQUE4RkMsT0FBQSxLQUFBQyxVQUFBLE9BQTRCdCtCLEdBQUEsb0JBQUFtdUIsRUFBQSxpQkFBQUMsRUFBQSx1QkFBQUMsRUFBQSxvUkFDakssc2ZBQ0EsaUdBQUFDLEdBQUEsMERBQUFpUSxHQUFBLEdBQW1LQyxHQUFBLEdBQU8sU0FBQUMsR0FBQTlqRCxFQUFBQyxHQUFpQixJQUFBakMsRUFBQWdDLEVBQUEsR0FBa0JvQyxFQUFBLE9BQVBwQyxJQUFBLElBQU8sR0FBQWtGLGNBQUFsRixFQUFBVixNQUFBLElBQTJDVyxFQUFBLENBQUdtd0Msd0JBQUEsQ0FBeUJtRixRQUFBbnpDLEVBQUFvekMsU0FBQXB6QyxFQUFBLFdBQStCcXVDLGFBQUEsQ0FBQXp5QyxHQUFBK2xELGNBQUE5akQsR0FBbUMyakQsR0FBQTVqRCxHQUFBQyxFQUFRNGpELEdBQUE3bEQsR0FBQWlDLEVBQzlWLHdmQUNBLGlRQUFBa0IsUUFBQSxTQUFBbkIsR0FBcVI4akQsR0FBQTlqRCxHQUFBLEtBQVdxbEIsR0FBQWxrQixRQUFBLFNBQUFuQixHQUF1QjhqRCxHQUFBOWpELEdBQUEsS0FDdlQsSUFBQWdrRCxHQUFBLENBQVE5VCxXQUFBMFQsR0FBQUssK0JBQUEsU0FBQWprRCxHQUFpRSxpQkFBUkEsRUFBQTZqRCxHQUFBN2pELE1BQVEsSUFBQUEsRUFBQStqRCxlQUF3QzlULGNBQUEsU0FBQWp3QyxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQWlDLElBQUFqSSxFQUFBMHBELEdBQUE3akQsR0FBWSxJQUFBN0YsRUFBQSxZQUFrQixPQUFBNkYsR0FBVSxzQkFBQTIvQyxHQUFBM2hELEdBQUEsWUFBeUMsMEJBQUFnQyxFQUFBOGlELEdBQWlDLE1BQU0sdUJBQUE5aUQsRUFBQTAvQyxHQUE4QixNQUFNLG1CQUFBMWhELEVBQUEyWSxPQUFBLFlBQXlDLDZIQUFBM1csRUFBQTI5QyxHQUEwSSxNQUFNLGtIQUFBMzlDLEVBQ3ZlZ2pELEdBQUcsTUFBTSxrRUFBQWhqRCxFQUFBa2pELEdBQTJFLE1BQU0sS0FBQTFQLEVBQUEsS0FBQUMsRUFBQSxLQUFBQyxFQUFBMXpDLEVBQUFsRCxHQUE2QixNQUFNLEtBQUE2MkMsR0FBQTN6QyxFQUFBbWpELEdBQWEsTUFBTSxhQUFBbmpELEVBQUE4OEMsR0FBbUIsTUFBTSxZQUFBOThDLEVBQUFvakQsR0FBa0IsTUFBTSxpQ0FBQXBqRCxFQUFBdy9DLEdBQXlDLE1BQU0sNEpBQUF4L0MsRUFBQSs5QyxHQUF5SyxNQUFNLFFBQUEvOUMsRUFBQXVwQyxHQUF5QyxPQUFOcUosRUFBdkIzeUMsRUFBQUQsRUFBQXcwQyxVQUFBcjZDLEVBQUE4RixFQUFBakMsRUFBQW9FLElBQTZCbkMsSUFBVWlrRCxHQUFBRixHQUFBQywrQkFDbGRFLEdBQUEsR0FBTSxTQUFBQyxHQUFBcGtELEdBQWUsSUFBQUMsRUFBQUQsRUFBQXFrRCxXQUFBcm1ELEVBQUFpQyxFQUF1QixHQUFHLElBQUFqQyxFQUFBLENBQU9nQyxFQUFBc2tELFVBQUEvcUQsS0FBQXlFLEdBQW9CLE1BQU0sSUFBQW9FLEVBQU0sSUFBQUEsRUFBQXBFLEVBQVFvRSxFQUFBaXdDLFFBQVNqd0MsSUFBQWl3QyxPQUF1RCxLQUEzQ2p3QyxFQUFBLElBQUFBLEVBQUFzUCxJQUFBLEtBQUF0UCxFQUFBdXZDLFVBQUE0UyxlQUEyQyxNQUFZdmtELEVBQUFza0QsVUFBQS9xRCxLQUFBeUUsR0FBb0JBLEVBQUFnMEMsRUFBQTV2QyxTQUFRcEUsR0FBUyxJQUFBQSxFQUFBLEVBQVFBLEVBQUFnQyxFQUFBc2tELFVBQUE3b0QsT0FBcUJ1QyxJQUFBLENBQUtpQyxFQUFBRCxFQUFBc2tELFVBQUF0bUQsR0FBaUIsSUFBQTdELEVBQUF5OUMsR0FBQTUzQyxFQUFBK29CLGFBQXdCM21CLEVBQUFwQyxFQUFBd2tELGFBQWlCLFFBQUEzYSxFQUFBN3BDLEVBQUErb0IsWUFBQWdnQixFQUFBLEtBQUE5cUMsRUFBQSxFQUFtQ0EsRUFBQSt4QyxFQUFBdjBDLE9BQVl3QyxJQUFBLENBQUssSUFBQTVCLEVBQUEyekMsRUFBQS94QyxHQUFZNUIsUUFBQTR6QyxjQUFBN3RDLEVBQUFuQyxFQUFBNHBDLEVBQUExdkMsTUFBQTR1QyxFQUFBZ0ksRUFBQWhJLEVBQUExc0MsSUFBNkN1MUMsRUFBQTdJLElBQU8sSUFBQTBiLElBQUEsRUFDL1osU0FBQW5hLEdBQUF0cUMsRUFBQUMsR0FBZ0IsSUFBQUEsRUFBQSxZQUFrQixJQUFBakMsR0FBQWttRCxHQUFBbGtELEdBQUEwa0QsR0FBQUMsSUFBQTdoRCxLQUFBLEtBQUE5QyxHQUFpQ0MsRUFBQStRLGlCQUFBaFIsRUFBQWhDLEdBQUEsR0FBMkIsU0FBQTRtRCxHQUFBNWtELEVBQUFDLEdBQWlCLElBQUFBLEVBQUEsWUFBa0IsSUFBQWpDLEdBQUFrbUQsR0FBQWxrRCxHQUFBMGtELEdBQUFDLElBQUE3aEQsS0FBQSxLQUFBOUMsR0FBaUNDLEVBQUErUSxpQkFBQWhSLEVBQUFoQyxHQUFBLEdBQTJCLFNBQUEwbUQsR0FBQTFrRCxFQUFBQyxHQUFpQjAyQyxHQUFBZ08sR0FBQTNrRCxFQUFBQyxHQUM5TSxTQUFBMGtELEdBQUEza0QsRUFBQUMsR0FBaUIsR0FBQXdrRCxHQUFBLENBQU8sSUFBQXptRCxFQUFBNDVDLEdBQUEzM0MsR0FBMkUsR0FBdkQsUUFBUmpDLEVBQUFnMEMsRUFBQWgwQyxLQUFRLGlCQUFBQSxFQUFBMFQsS0FBQSxJQUFBc3RDLEdBQUFoaEQsT0FBQSxNQUF1RG1tRCxHQUFBMW9ELE9BQUEsQ0FBYyxJQUFBMkcsRUFBQStoRCxHQUFBemtELE1BQWUwQyxFQUFBb2lELGFBQUF4a0QsRUFBaUJvQyxFQUFBMm1CLFlBQUE5b0IsRUFBZ0JtQyxFQUFBaWlELFdBQUFybUQsRUFBZWdDLEVBQUFvQyxPQUFJcEMsRUFBQSxDQUFRd2tELGFBQUF4a0QsRUFBQStvQixZQUFBOW9CLEVBQUFva0QsV0FBQXJtRCxFQUFBc21ELFVBQUEsSUFBd0QsSUFBSXhOLEdBQUFzTixHQUFBcGtELEdBQVMsUUFBUUEsRUFBQXdrRCxhQUFBLEtBQUF4a0QsRUFBQStvQixZQUFBLEtBQUEvb0IsRUFBQXFrRCxXQUFBLEtBQUFya0QsRUFBQXNrRCxVQUFBN29ELE9BQUEsS0FBQTBvRCxHQUFBMW9ELFFBQUEwb0QsR0FBQTVxRCxLQUFBeUcsS0FBeUcsSUFBQTZrRCxHQUFBLEdBQVNDLEdBQUEsRUFBQUMsR0FBQSx3QkFBQTU5QyxLQUFBQyxVQUFBOUgsTUFBQSxHQUMzWCxTQUFBMGxELEdBQUFobEQsR0FBcUYsT0FBdEVuSSxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBZ0ksRUFBQStrRCxNQUFBL2tELEVBQUEra0QsSUFBQUQsS0FBQUQsR0FBQTdrRCxFQUFBK2tELEtBQUEsSUFBc0VGLEdBQUE3a0QsRUFBQStrRCxLQUFpQixTQUFBRSxHQUFBamxELEdBQW9FLGFBQXJEQSxNQUFBLG9CQUFBNUIsdUJBQUEsSUFBcUQsWUFBc0MsSUFBSSxPQUFBNEIsRUFBQWlXLGVBQUFqVyxFQUFBdWtCLEtBQStCLE1BQUF0a0IsR0FBUyxPQUFBRCxFQUFBdWtCLE1BQWUsU0FBQTJnQyxHQUFBbGxELEdBQWUsS0FBS0EsS0FBQXdULFlBQWdCeFQsSUFBQXdULFdBQWdCLE9BQUF4VCxFQUMvVCxTQUFBbWxELEdBQUFubEQsRUFBQUMsR0FBaUIsSUFBZ0JtQyxFQUFoQnBFLEVBQUFrbkQsR0FBQWxsRCxHQUFnQixJQUFKQSxFQUFBLEVBQWNoQyxHQUFFLENBQUUsT0FBQUEsRUFBQTZQLFNBQUEsQ0FBNEMsR0FBekJ6TCxFQUFBcEMsRUFBQWhDLEVBQUF1VixZQUFBOVgsT0FBeUJ1RSxHQUFBQyxHQUFBbUMsR0FBQW5DLEVBQUEsT0FBcUIwUSxLQUFBM1MsRUFBQWlvQyxPQUFBaG1DLEVBQUFELEdBQW1CQSxFQUFBb0MsRUFBSXBDLEVBQUEsQ0FBRyxLQUFLaEMsR0FBRSxDQUFFLEdBQUFBLEVBQUFrUyxZQUFBLENBQWtCbFMsSUFBQWtTLFlBQWdCLE1BQUFsUSxFQUFRaEMsSUFBQXNHLFdBQWV0RyxPQUFBLEVBQVNBLEVBQUFrbkQsR0FBQWxuRCxJQUNyTixTQUFBb25ELEtBQWMsUUFBQXBsRCxFQUFBekksT0FBQTBJLEVBQUFnbEQsS0FBd0JobEQsYUFBQUQsRUFBQXFsRCxtQkFBaUMsQ0FBRSxJQUFJcmxELEVBQUFDLEVBQUF1YyxnQkFBQTFMLFlBQWdDLE1BQUE5UyxHQUFTLE1BQU1pQyxFQUFBZ2xELEdBQUFqbEQsRUFBQTVCLFVBQWlCLE9BQUE2QixFQUFTLFNBQUFxbEQsR0FBQXRsRCxHQUFlLElBQUFDLEVBQUFELEtBQUE0TyxVQUFBNU8sRUFBQTRPLFNBQUF4RixjQUE4QyxPQUFBbkosSUFBQSxVQUFBQSxJQUFBLFNBQUFELEVBQUFMLE1BQUEsV0FBQUssRUFBQUwsTUFBQSxRQUFBSyxFQUFBTCxNQUFBLFFBQUFLLEVBQUFMLE1BQUEsYUFBQUssRUFBQUwsT0FBQSxhQUFBTSxHQUFBLFNBQUFELEVBQUF1bEQsaUJBR25OLFNBQUFDLEdBQUF4bEQsR0FBZSxJQUFBQyxFQUFBbWxELEtBQUFwbkQsRUFBQWdDLEVBQUF5bEQsWUFBQXJqRCxFQUFBcEMsRUFBQTBsRCxlQUE4QyxHQUFBemxELElBQUFqQyxRQUFBcVEsZUFKaUssU0FBQXMzQyxFQUFBM2xELEVBQUFDLEdBQWlCLFNBQUFELElBQUFDLEtBQUFELElBQUFDLEtBQUFELEdBQUEsSUFBQUEsRUFBQTZOLFlBQUE1TixHQUFBLElBQUFBLEVBQUE0TixTQUFBODNDLEVBQUEzbEQsRUFBQUMsRUFBQXFFLFlBQUEsYUFBQXRFLElBQUFvSyxTQUFBbkssS0FBQUQsRUFBQW1TLDRCQUFBLEdBQUFuUyxFQUFBbVMsd0JBQUFsUyxNQUlsTDBsRCxDQUFBM25ELEVBQUFxUSxjQUFBcUMsZ0JBQUExUyxHQUFBLENBQXFFLFVBQUFvRSxHQUFBa2pELEdBQUF0bkQsR0FBQSxHQUFBaUMsRUFBQW1DLEVBQUEyUyxXQUFBLEtBQUEvVSxFQUFBb0MsRUFBQWtFLE9BQUF0RyxFQUFBQyxHQUFBLG1CQUFBakMsSUFBQTRuRCxlQUFBM2xELEVBQUFqQyxFQUFBNm5ELGFBQUExK0MsS0FBQTIrQyxJQUFBOWxELEVBQUFoQyxFQUFBL0QsTUFBQXdCLGFBQTRJLElBQUF1RSxHQUFBQyxFQUFBakMsRUFBQXFRLGVBQUFqUSxXQUFBNkIsRUFBQTZRLGFBQUF2WixRQUFBd3VELGFBQUEsQ0FBK0UvbEQsSUFBQStsRCxlQUFtQixJQUFBNXJELEVBQUE2RCxFQUFBdVYsWUFBQTlYLE9BQUFvdUMsRUFBQTFpQyxLQUFBMitDLElBQUExakQsRUFBQTJTLE1BQUE1YSxHQUFpRGlJLE9BQUEsSUFBQUEsRUFBQWtFLElBQUF1akMsRUFBQTFpQyxLQUFBMitDLElBQUExakQsRUFBQWtFLElBQUFuTSxJQUFxQzZGLEVBQUF3RyxRQUFBcWpDLEVBQUF6bkMsSUFBQWpJLEVBQUFpSSxJQUFBeW5DLElBQUExdkMsR0FBOEJBLEVBQUFnckQsR0FBQW5uRCxFQUFBNnJDLEdBQVUsSUFBQWQsRUFBQW9jLEdBQUFubkQsRUFDOWVvRSxHQUFHakksR0FBQTR1QyxJQUFBLElBQUEvb0MsRUFBQWdtRCxZQUFBaG1ELEVBQUFpbUQsYUFBQTlyRCxFQUFBd1csTUFBQTNRLEVBQUFrbUQsZUFBQS9yRCxFQUFBOHJDLFFBQUFqbUMsRUFBQW1tRCxZQUFBcGQsRUFBQXA0QixNQUFBM1EsRUFBQW9tRCxjQUFBcmQsRUFBQTlDLFdBQUFobUMsSUFBQW9tRCxlQUFBQyxTQUFBbnNELEVBQUF3VyxLQUFBeFcsRUFBQThyQyxRQUFBam1DLEVBQUF1bUQsa0JBQUExYyxFQUFBem5DLEdBQUFwQyxFQUFBd21ELFNBQUF2bUQsR0FBQUQsRUFBQXdHLE9BQUF1aUMsRUFBQXA0QixLQUFBbzRCLEVBQUE5QyxVQUFBaG1DLEVBQUF3bUQsT0FBQTFkLEVBQUFwNEIsS0FBQW80QixFQUFBOUMsUUFBQWptQyxFQUFBd21ELFNBQUF2bUQsS0FBNlIsSUFBTEEsRUFBQSxHQUFLRCxFQUFBaEMsRUFBUWdDLElBQUFzRSxZQUFlLElBQUF0RSxFQUFBNk4sVUFBQTVOLEVBQUExRyxLQUFBLENBQXlCbXRELFFBQUExbUQsRUFBQXMwQixLQUFBdDBCLEVBQUF3MUIsV0FBQXprQixJQUFBL1EsRUFBQXUxQixZQUFxRixJQUF2QyxtQkFBQXYzQixFQUFBZ1ksT0FBQWhZLEVBQUFnWSxRQUF1Q2hZLEVBQUEsRUFBUUEsRUFBQWlDLEVBQUF4RSxPQUFXdUMsS0FBQWdDLEVBQUFDLEVBQUFqQyxJQUFBMG9ELFFBQUFseEIsV0FBQXgxQixFQUFBczBCLEtBQUF0MEIsRUFBQTBtRCxRQUFBbnhCLFVBQUF2MUIsRUFBQStRLEtBQ3hiLElBQUE0MUMsR0FBQTlULEdBQUEsaUJBQUF6MEMsVUFBQSxJQUFBQSxTQUFBNjJDLGFBQUEyUixHQUFBLENBQW9FajlDLE9BQUEsQ0FBUXltQyx3QkFBQSxDQUF5Qm1GLFFBQUEsV0FBQUMsU0FBQSxtQkFBOEMvRSxhQUFBLGlGQUFBdG5DLE1BQUEsT0FBMkcwOUMsR0FBQSxLQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FBQUMsSUFBQSxFQUM5UCxTQUFBQyxHQUFBam5ELEVBQUFDLEdBQWlCLElBQUFqQyxFQUFBaUMsRUFBQTFJLFNBQUEwSSxJQUFBN0IsU0FBQSxJQUFBNkIsRUFBQTROLFNBQUE1TixJQUFBb08sY0FBK0QsT0FBQTI0QyxJQUFBLE1BQUFILFNBQUE1QixHQUFBam5ELEdBQUEsTUFBNkMsbUJBQUxBLEVBQUE2b0QsS0FBS3ZCLEdBQUF0bkQsS0FBQSxDQUErQitXLE1BQUEvVyxFQUFBNG5ELGVBQUF0L0MsSUFBQXRJLEVBQUE2bkQsY0FBMEM3bkQsRUFBQSxDQUE2RWlvRCxZQUE3RWpvRCxLQUFBcVEsZUFBQXJRLEVBQUFxUSxjQUFBeUMsYUFBQXZaLFFBQUF3dUQsZ0JBQTZFRSxXQUFBQyxhQUFBbG9ELEVBQUFrb0QsYUFBQUMsVUFBQW5vRCxFQUFBbW9ELFVBQUFDLFlBQUFwb0QsRUFBQW9vRCxhQUFzR1csSUFBQWhJLEdBQUFnSSxHQUFBL29ELEdBQUEsTUFBQStvRCxHQUFBL29ELEdBQUFnQyxFQUFBdXBDLEdBQUFpTCxVQUFBb1MsR0FBQWo5QyxPQUFBbTlDLEdBQUE5bUQsRUFBQUMsSUFBQU4sS0FBQSxTQUFBSyxFQUFBNEcsT0FBQWlnRCxHQUFBalUsRUFBQTV5QyxPQUN6WCxJQUFBa25ELEdBQUEsQ0FBUWhYLFdBQUEwVyxHQUFBM1csY0FBQSxTQUFBandDLEVBQUFDLEVBQUFqQyxFQUFBb0UsR0FBOEMsSUFBQXluQyxFQUFBMXZDLEVBQUFpSSxFQUFBN0ssU0FBQTZLLElBQUFoRSxTQUFBLElBQUFnRSxFQUFBeUwsU0FBQXpMLElBQUFpTSxjQUFpRSxLQUFBdzdCLEdBQUExdkMsR0FBQSxDQUFZNkYsRUFBQSxDQUFHN0YsRUFBQTZxRCxHQUFBN3FELEdBQVEwdkMsRUFBQTJHLEVBQUEyVyxTQUFjLFFBQUFwZSxFQUFBLEVBQVlBLEVBQUFjLEVBQUFwdUMsT0FBV3N0QyxJQUFBLENBQUssSUFBQTlxQyxFQUFBNHJDLEVBQUFkLEdBQVcsSUFBQTV1QyxFQUFBcEMsZUFBQWtHLEtBQUE5RCxFQUFBOEQsR0FBQSxDQUFnQzlELEdBQUEsRUFBSyxNQUFBNkYsR0FBUzdGLEdBQUEsRUFBSzB2QyxHQUFBMXZDLEVBQUssR0FBQTB2QyxFQUFBLFlBQWtDLE9BQWpCMXZDLEVBQUE4RixFQUFBaXlDLEVBQUFqeUMsR0FBQTFJLE9BQWlCeUksR0FBVSxhQUFBMjNDLEdBQUF4OUMsSUFBQSxTQUFBQSxFQUFBb3JELG1CQUFBc0IsR0FBQTFzRCxFQUFBMnNELEdBQUE3bUQsRUFBQThtRCxHQUFBLE1BQW9FLE1BQU0sV0FBQUEsR0FBQUQsR0FBQUQsR0FBQSxLQUEwQixNQUFNLGdCQUFBRyxJQUFBLEVBQXVCLE1BQU0scURBQUFBLElBQUEsRUFBQUMsR0FBQWpwRCxFQUFBb0UsR0FBc0UseUJBQUF1a0QsR0FBQSxNQUNwZixpQ0FBQU0sR0FBQWpwRCxFQUFBb0UsR0FBMkMsY0FDM0MsU0FBQWdsRCxHQUFBcG5ELEVBQUFDLEdBQTJFLE9BQTFERCxFQUFBK0MsRUFBQSxDQUFLdkosY0FBQSxHQUFnQnlHLElBQUlBLEVBRGtWLFNBQUFELEdBQWUsSUFBQUMsRUFBQSxHQUE2RCxPQUFwRHdwQyxFQUFBbUQsU0FBQXpyQyxRQUFBbkIsRUFBQSxTQUFBQSxHQUFrQyxNQUFBQSxJQUFBQyxHQUFBRCxLQUFrQkMsRUFDOVpvbkQsQ0FBQXBuRCxFQUFBekcsYUFBQXdHLEVBQUF4RyxTQUFBeUcsR0FBaUNELEVBQVMsU0FBQXNuRCxHQUFBdG5ELEVBQUFDLEVBQUFqQyxFQUFBb0UsR0FBaUMsR0FBWnBDLElBQUFsQixRQUFZbUIsRUFBQSxDQUFNQSxFQUFBLEdBQUssUUFBQTlGLEVBQUEsRUFBWUEsRUFBQTZELEVBQUF2QyxPQUFXdEIsSUFBQThGLEVBQUEsSUFBQWpDLEVBQUE3RCxLQUFBLEVBQW1CLElBQUE2RCxFQUFBLEVBQVFBLEVBQUFnQyxFQUFBdkUsT0FBV3VDLElBQUE3RCxFQUFBOEYsRUFBQWxJLGVBQUEsSUFBQWlJLEVBQUFoQyxHQUFBL0QsT0FBQStGLEVBQUFoQyxHQUFBdVksV0FBQXBjLElBQUE2RixFQUFBaEMsR0FBQXVZLFNBQUFwYyxNQUFBaUksSUFBQXBDLEVBQUFoQyxHQUFBdXBELGlCQUFBLE9BQTRHLENBQXVCLElBQWxCdnBELEVBQUEsR0FBQWc5QyxHQUFBaDlDLEdBQVdpQyxFQUFBLEtBQU85RixFQUFBLEVBQVFBLEVBQUE2RixFQUFBdkUsT0FBV3RCLElBQUEsQ0FBSyxHQUFBNkYsRUFBQTdGLEdBQUFGLFFBQUErRCxFQUFpRSxPQUE5Q2dDLEVBQUE3RixHQUFBb2MsVUFBQSxPQUFpQm5VLElBQUFwQyxFQUFBN0YsR0FBQW90RCxpQkFBQSxJQUFvQyxPQUFBdG5ELEdBQUFELEVBQUE3RixHQUFBc1QsV0FBQXhOLEVBQUFELEVBQUE3RixJQUFrQyxPQUFBOEYsTUFBQXNXLFVBQUEsSUFDbGMsU0FBQWl4QyxHQUFBeG5ELEVBQUFDLEdBQWdFLE9BQS9DLE1BQUFBLEVBQUF3bkQseUJBQUFuZSxFQUFBLE1BQStDdm1DLEVBQUEsR0FBVzlDLEVBQUEsQ0FBSWhHLFdBQUEsRUFBQXVnQixrQkFBQSxFQUFBaGhCLFNBQUEsR0FBQXdHLEVBQUFtN0MsY0FBQUcsZUFBNEUsU0FBQW9NLEdBQUExbkQsRUFBQUMsR0FBaUIsSUFBQWpDLEVBQUFpQyxFQUFBaEcsTUFBYyxNQUFBK0QsTUFBQWlDLEVBQUF1YSxhQUFBLE9BQUF2YSxJQUFBekcsWUFBQSxNQUFBd0UsR0FBQXNyQyxFQUFBLE1BQUF0aUMsTUFBQUMsUUFBQWhILEtBQUEsR0FBQUEsRUFBQXhFLFFBQUE2dEMsRUFBQSxNQUFBcnBDLElBQUEsSUFBQWpDLEVBQUFpQyxHQUFBLE1BQUFqQyxNQUFBLEtBQXFKZ0MsRUFBQW03QyxjQUFBLENBQWlCRyxhQUFBTixHQUFBaDlDLElBQ2hXLFNBQUEycEQsR0FBQTNuRCxFQUFBQyxHQUFpQixJQUFBakMsRUFBQWc5QyxHQUFBLzZDLEVBQUFoRyxPQUFBbUksRUFBQTQ0QyxHQUFBLzZDLEVBQUF1YSxjQUF1QyxNQUFBeGMsT0FBQSxHQUFBQSxLQUFBZ0MsRUFBQS9GLFFBQUErRixFQUFBL0YsTUFBQStELEdBQUEsTUFBQWlDLEVBQUF1YSxjQUFBeGEsRUFBQXdhLGVBQUF4YyxJQUFBZ0MsRUFBQXdhLGFBQUF4YyxJQUF3RyxNQUFBb0UsSUFBQXBDLEVBQUF3YSxhQUFBLEdBQUFwWSxHQUErQixTQUFBd2xELEdBQUE1bkQsR0FBZSxJQUFBQyxFQUFBRCxFQUFBdVQsWUFBb0J0VCxJQUFBRCxFQUFBbTdDLGNBQUFHLGVBQUF0N0MsRUFBQS9GLE1BQUFnRyxHQUh6S3N4QyxFQUFBQyx1QkFBQSwwSEFBQXJvQyxNQUFBLE1BQWdLdW5DLEVBQUF5QixFQUFNeEIsRUFBQXNCLEVBQU1yQixFQUFBc0IsRUFBTVgsRUFBQUUseUJBQUEsQ0FBNkJvVyxrQkFBQTdELEdBQUE4RCxzQkFBQW5KLEdBQUFvSixrQkFBQW5MLEdBQUFvTCxrQkFBQWQsR0FBQWUsdUJBQUFqUyxLQUdRLElBQUFrUyxHQUFBLENBQVE5NUIsS0FBQSwrQkFBQSs1QixPQUFBLHFDQUFBQyxJQUFBLDhCQUN4UixTQUFBQyxHQUFBcm9ELEdBQWUsT0FBQUEsR0FBVSw2Q0FBOEMsc0RBQXVELDhDQUE4QyxTQUFBc29ELEdBQUF0b0QsRUFBQUMsR0FBaUIsYUFBQUQsR0FBQSxpQ0FBQUEsRUFBQXFvRCxHQUFBcG9ELEdBQUEsK0JBQUFELEdBQUEsa0JBQUFDLEVBQUEsK0JBQUFELEVBQzdMLElBQUFBLEdBQUF1b0QsUUFBQSxFQUFBQyxJQUFBeG9ELEdBQStLLFNBQUFBLEVBQUFDLEdBQWUsR0FBQUQsRUFBQXlvRCxlQUFBUCxHQUFBRSxLQUFBLGNBQUFwb0QsSUFBQTJSLFVBQUExUixNQUEwRCxDQUEwRSxLQUFyRXNvRCxPQUFBbnFELFNBQUFDLGNBQUEsUUFBcUNzVCxVQUFBLFFBQUExUixFQUFBLFNBQWdDQSxFQUFBc29ELEdBQUEvMEMsV0FBb0J4VCxFQUFBd1QsWUFBYXhULEVBQUF1RSxZQUFBdkUsRUFBQXdULFlBQTZCLEtBQUt2VCxFQUFBdVQsWUFBYXhULEVBQUF2QixZQUFBd0IsRUFBQXVULGNBQXJYLG9CQUFBazFDLGFBQUFDLHdCQUFBLFNBQUExb0QsRUFBQWpDLEVBQUFvRSxFQUFBakksR0FBa0Z1dUQsTUFBQUMsd0JBQUEsV0FBeUMsT0FBQTNvRCxHQUFBQyxFQUFBakMsTUFBb0JnQyxJQUM1SyxTQUFBNG9ELEdBQUE1b0QsRUFBQUMsR0FBaUIsR0FBQUEsRUFBQSxDQUFNLElBQUFqQyxFQUFBZ0MsRUFBQXdULFdBQW1CLEdBQUF4VixPQUFBZ0MsRUFBQWlWLFdBQUEsSUFBQWpYLEVBQUE2UCxTQUFxRCxZQUFkN1AsRUFBQXlWLFVBQUF4VCxHQUFzQkQsRUFBQXVULFlBQUF0VCxFQUN2RyxJQUFBNG9ELEdBQUEsQ0FBUXoxQix5QkFBQSxFQUFBMDFCLG1CQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLFNBQUEsRUFBQUMsY0FBQSxFQUFBQyxpQkFBQSxFQUFBOTFCLGFBQUEsRUFBQSsxQixTQUFBLEVBQUFDLE1BQUEsRUFBQTkxQixVQUFBLEVBQUErMUIsY0FBQSxFQUFBOTFCLFlBQUEsRUFBQSsxQixjQUFBLEVBQUFDLFdBQUEsRUFBQUMsVUFBQSxFQUFBQyxTQUFBLEVBQUFDLFlBQUEsRUFBQUMsYUFBQSxFQUFBQyxjQUFBLEVBQUFDLFlBQUEsRUFBQUMsZUFBQSxFQUFBQyxnQkFBQSxFQUFBQyxpQkFBQSxFQUFBajRCLFlBQUEsRUFBQWs0QixXQUFBLEVBQUF6MkIsWUFBQSxFQUFBTixTQUFBLEVBQUFPLE9BQUEsRUFBQUMsU0FBQSxFQUFBdzJCLFNBQUEsRUFBQXYyQixRQUFBLEVBQUFDLFFBQUEsRUFBQUMsTUFBQSxFQUFBUixhQUFBLEVBQ1I4MkIsY0FBQSxFQUFBQyxhQUFBLEVBQUFDLGlCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGVBQUEsRUFBQUMsYUFBQSxHQUEwSDV4RCxHQUFBLDBCQUFzSixTQUFBNnhELEdBQUEzcUQsRUFBQUMsRUFBQWpDLEdBQW1CLGFBQUFpQyxHQUFBLGtCQUFBQSxHQUFBLEtBQUFBLEVBQUEsR0FBQWpDLEdBQUEsaUJBQUFpQyxHQUFBLElBQUFBLEdBQUE0b0QsR0FBQTl3RCxlQUFBaUksSUFBQTZvRCxHQUFBN29ELElBQUEsR0FBQUMsR0FBQWlJLE9BQUFqSSxFQUFBLEtBQ25TLFNBQUEycUQsR0FBQTVxRCxFQUFBQyxHQUEyQixRQUFBakMsS0FBVmdDLElBQUFxakIsTUFBVXBqQixFQUFBLEdBQUFBLEVBQUFsSSxlQUFBaUcsR0FBQSxDQUF1QyxJQUFBb0UsRUFBQSxJQUFBcEUsRUFBQTFFLFFBQUEsTUFBQWEsRUFBQXd3RCxHQUFBM3NELEVBQUFpQyxFQUFBakMsR0FBQW9FLEdBQXlDLFVBQUFwRSxNQUFBLFlBQTRCb0UsRUFBQXBDLEVBQUFrMEIsWUFBQWwyQixFQUFBN0QsR0FBQTZGLEVBQUFoQyxHQUFBN0QsR0FEaUJ0QyxPQUFBcUosS0FBQTJuRCxJQUFBMW5ELFFBQUEsU0FBQW5CLEdBQW9DbEgsR0FBQXFJLFFBQUEsU0FBQWxCLEdBQXVCQSxJQUFBRCxFQUFBNnFELE9BQUEsR0FBQTNsRCxjQUFBbEYsRUFBQThxRCxVQUFBLEdBQTZDakMsR0FBQTVvRCxHQUFBNG9ELEdBQUE3b0QsT0FDNUYsSUFBQStxRCxHQUFBaG9ELEVBQUEsQ0FBVWlvRCxVQUFBLEdBQVksQ0FBRUMsTUFBQSxFQUFBeHpDLE1BQUEsRUFBQXl6QyxJQUFBLEVBQUEvbEMsS0FBQSxFQUFBZ21DLE9BQUEsRUFBQUMsSUFBQSxFQUFBQyxLQUFBLEVBQUF6NUMsT0FBQSxFQUFBMDVDLFFBQUEsRUFBQUMsTUFBQSxFQUFBQyxNQUFBLEVBQUEvdEIsT0FBQSxFQUFBeGEsUUFBQSxFQUFBd29DLE9BQUEsRUFBQUMsS0FBQSxJQUM1TCxTQUFBQyxHQUFBM3JELEVBQUFDLEdBQWlCQSxJQUFBOHFELEdBQUEvcUQsS0FBQSxNQUFBQyxFQUFBekcsVUFBQSxNQUFBeUcsRUFBQXduRCwwQkFBQW5lLEVBQUEsTUFBQXRwQyxFQUFBLFVBQUFDLEVBQUF3bkQsMEJBQUEsTUFBQXhuRCxFQUFBekcsVUFBQTh2QyxFQUFBLHVCQUFBcnBDLEVBQUF3bkQseUJBQUEsV0FBQXhuRCxFQUFBd25ELHlCQUFBbmUsRUFBQSxhQUFBcnBDLEVBQUFvakIsT0FBQSxpQkFBQXBqQixFQUFBb2pCLE9BQUFpbUIsRUFBQSxVQUNqQixTQUFBc2lCLEdBQUE1ckQsRUFBQUMsR0FBaUIsUUFBQUQsRUFBQTFHLFFBQUEsNEJBQUEyRyxFQUFBNmEsR0FBb0QsT0FBQTlhLEdBQVUsMEtBQWtMLGtCQUNqUSxTQUFBNnJELEdBQUE3ckQsRUFBQUMsR0FBcUUsSUFBQWpDLEVBQUFnbkQsR0FBcERobEQsRUFBQSxJQUFBQSxFQUFBNk4sVUFBQSxLQUFBN04sRUFBQTZOLFNBQUE3TixJQUFBcU8sZUFBZ0VwTyxFQUFBdXdDLEVBQUF2d0MsR0FBUSxRQUFBbUMsRUFBQSxFQUFZQSxFQUFBbkMsRUFBQXhFLE9BQVcyRyxJQUFBLENBQUssSUFBQWpJLEVBQUE4RixFQUFBbUMsR0FBVyxJQUFBcEUsRUFBQWpHLGVBQUFvQyxLQUFBNkQsRUFBQTdELEdBQUEsQ0FBZ0MsT0FBQUEsR0FBVSxhQUFBeXFELEdBQUEsU0FBQTVrRCxHQUE2QixNQUFNLHVCQUFBNGtELEdBQUEsUUFBQTVrRCxHQUF1QzRrRCxHQUFBLE9BQUE1a0QsR0FBYWhDLEVBQUFxc0IsTUFBQSxFQUFVcnNCLEVBQUFnWSxPQUFBLEVBQVcsTUFBTSx5QkFBQStoQyxHQUFBNTlDLElBQUF5cUQsR0FBQXpxRCxFQUFBNkYsR0FBMEMsTUFBTSw2Q0FBZ0QsYUFBQTR6QyxHQUFBdDZDLFFBQUFhLElBQUFtd0MsR0FBQW53QyxFQUFBNkYsR0FBbUNoQyxFQUFBN0QsSUFBQSxJQUFVLFNBQUEyeEQsTUFBZSxJQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FDeGIsU0FBQUMsR0FBQWpzRCxFQUFBQyxHQUFpQixPQUFBRCxHQUFVLDZEQUFBQyxFQUFBaXNELFVBQTZFLFNBQVMsU0FBQUMsR0FBQW5zRCxFQUFBQyxHQUFpQixtQkFBQUQsR0FBQSxXQUFBQSxHQUFBLGFBQUFBLEdBQUEsaUJBQUFDLEVBQUF6RyxVQUFBLGlCQUFBeUcsRUFBQXpHLFVBQUEsaUJBQUF5RyxFQUFBd25ELHlCQUFBLE9BQUF4bkQsRUFBQXduRCx5QkFBQSxNQUFBeG5ELEVBQUF3bkQsd0JBQUEyRSxPQUNsSSxJQUFBQyxHQUFBLG1CQUFBcnNDLDJCQUFBLEVBQUFzc0MsR0FBQSxtQkFBQXZ5QiwrQkFBQSxFQUFBd3lCLEdBQUFocUQsRUFBQWlxRCwwQkFBQUMsR0FBQWxxRCxFQUFBbXFELHdCQUU2QyxTQUFBQyxHQUFBM3NELEdBQWUsSUFBQUEsSUFBQWtRLFlBQW9CbFEsR0FBQSxJQUFBQSxFQUFBNk4sVUFBQSxJQUFBN04sRUFBQTZOLFVBQWtDN04sSUFBQWtRLFlBQWlCLE9BQUFsUSxFQUFTLFNBQUE0c0QsR0FBQTVzRCxHQUFlLElBQUFBLElBQUF3VCxXQUFtQnhULEdBQUEsSUFBQUEsRUFBQTZOLFVBQUEsSUFBQTdOLEVBQUE2TixVQUFrQzdOLElBQUFrUSxZQUFpQixPQUFBbFEsRUFBUyxJQUFBNnNELElBQVEsSUFBQUMsR0FBQSxHQUFBQyxJQUFBLEVBQWdCLFNBQUF0aUIsR0FBQXpxQyxHQUFjLEVBQUErc0QsS0FBQS9zRCxFQUFBbWpDLFFBQUEycEIsR0FBQUMsSUFBQUQsR0FBQUMsSUFBQSxLQUFBQSxNQUEwQyxTQUFBcmlCLEdBQUExcUMsRUFBQUMsR0FBcUI2c0QsS0FBTEMsSUFBSy9zRCxFQUFBbWpDLFFBQWlCbmpDLEVBQUFtakMsUUFBQWxqQyxFQUFZLElBQUErc0QsR0FBQSxHQUFTbGlCLEdBQUEsQ0FBSTNILFFBQUE2cEIsSUFBV2hpQixHQUFBLENBQUk3SCxTQUFBLEdBQVc4cEIsR0FBQUQsR0FDblosU0FBQUUsR0FBQWx0RCxFQUFBQyxHQUFpQixJQUFBakMsRUFBQWdDLEVBQUFMLEtBQUF3dEQsYUFBMEIsSUFBQW52RCxFQUFBLE9BQUFndkQsR0FBZ0IsSUFBQTVxRCxFQUFBcEMsRUFBQTJ4QyxVQUFrQixHQUFBdnZDLEtBQUFnckQsOENBQUFudEQsRUFBQSxPQUFBbUMsRUFBQWlyRCwwQ0FBMkcsSUFBUXhqQixFQUFSMXZDLEVBQUEsR0FBVyxJQUFBMHZDLEtBQUE3ckMsRUFBQTdELEVBQUEwdkMsR0FBQTVwQyxFQUFBNHBDLEdBQXNJLE9BQWpIem5DLEtBQUFwQyxJQUFBMnhDLFdBQUF5Yiw0Q0FBQW50RCxFQUFBRCxFQUFBcXRELDBDQUFBbHpELEdBQWlIQSxFQUFTLFNBQUE4d0MsR0FBQWpyQyxHQUFvQyxjQUF0QkEsSUFBQXN0RCxtQkFBa0QsU0FBQUMsR0FBQXZ0RCxHQUFleXFDLEdBQUFPLElBQU9QLEdBQUFLLElBQU8sU0FBQTBpQixHQUFBeHRELEdBQWV5cUMsR0FBQU8sSUFBT1AsR0FBQUssSUFDcmMsU0FBQTJpQixHQUFBenRELEVBQUFDLEVBQUFqQyxHQUFtQjhzQyxHQUFBM0gsVUFBQTZwQixJQUFBMWpCLEVBQUEsT0FBK0JvQixHQUFBSSxHQUFBN3FDLEdBQVN5cUMsR0FBQU0sR0FBQWh0QyxHQUFTLFNBQUEwdkQsR0FBQTF0RCxFQUFBQyxFQUFBakMsR0FBbUIsSUFBQW9FLEVBQUFwQyxFQUFBMnhDLFVBQXdDLEdBQXRCM3hDLEVBQUFDLEVBQUFxdEQsa0JBQXNCLG1CQUFBbHJELEVBQUF1ckQsZ0JBQUEsT0FBQTN2RCxFQUF3RSxRQUFBN0QsS0FBdEJpSSxJQUFBdXJELGtCQUFzQnh6RCxLQUFBNkYsR0FBQXNwQyxFQUFBLE1BQUFtUSxHQUFBeDVDLElBQUEsVUFBQTlGLEdBQXlELE9BQUE0SSxFQUFBLEdBQVcvRSxFQUFBb0UsR0FBTSxTQUFBd3JELEdBQUE1dEQsR0FBZSxJQUFBQyxFQUFBRCxFQUFBMnhDLFVBQThHLE9BQTVGMXhDLE9BQUE0dEQsMkNBQUFiLEdBQXFEQyxHQUFBbmlCLEdBQUEzSCxRQUFhdUgsR0FBQUksR0FBQTdxQyxHQUFTeXFDLEdBQUFNLE1BQUE3SCxVQUFpQixFQUM5WSxTQUFBMnFCLEdBQUE5dEQsRUFBQUMsRUFBQWpDLEdBQW1CLElBQUFvRSxFQUFBcEMsRUFBQTJ4QyxVQUFrQnZ2QyxHQUFBa25DLEVBQUEsT0FBa0J0ckMsR0FBQWlDLEVBQUF5dEQsR0FBQTF0RCxFQUFBQyxFQUFBZ3RELElBQUE3cUQsRUFBQXlyRCwwQ0FBQTV0RCxFQUFBd3FDLEdBQUFPLElBQUFQLEdBQUFLLElBQUFKLEdBQUFJLEdBQUE3cUMsSUFBQXdxQyxHQUFBTyxJQUE2Rk4sR0FBQU0sR0FBQWh0QyxHQUFTLElBQUErdkQsR0FBQSxLQUFBQyxHQUFBLEtBQW9CLFNBQUFDLEdBQUFqdUQsR0FBZSxnQkFBQUMsR0FBbUIsSUFBSSxPQUFBRCxFQUFBQyxHQUFZLE1BQUFqQyxNQUVuTyxTQUFBa3dELEdBQUFsdUQsRUFBQUMsRUFBQWpDLEVBQUFvRSxHQUFxQm1CLEtBQUFtTyxJQUFBMVIsRUFBV3VELEtBQUFWLElBQUE3RSxFQUFXdUYsS0FBQXNZLFFBQUF0WSxLQUFBOUIsTUFBQThCLEtBQUE4dUMsT0FBQTl1QyxLQUFBb3VDLFVBQUFwdUMsS0FBQTVELEtBQUE0RCxLQUFBNHFELFlBQUEsS0FBbUY1cUQsS0FBQXlZLE1BQUEsRUFBYXpZLEtBQUE2bkMsSUFBQSxLQUFjN25DLEtBQUE2cUQsYUFBQW51RCxFQUFvQnNELEtBQUE4cUQsb0JBQUE5cUQsS0FBQStxRCxjQUFBL3FELEtBQUFnckQsWUFBQWhyRCxLQUFBaXJELGNBQUEsS0FBcUZqckQsS0FBQTNJLEtBQUF3SCxFQUFZbUIsS0FBQTA3QyxVQUFBLEVBQWlCMTdDLEtBQUFrckQsV0FBQWxyRCxLQUFBbXJELFlBQUFuckQsS0FBQW9yRCxXQUFBLEtBQXNEcHJELEtBQUFxckQsb0JBQUFyckQsS0FBQXNyRCxlQUFBLEVBQStDdHJELEtBQUFxN0MsVUFBQSxLQUFvQixTQUFBMVQsR0FBQWxyQyxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQW9CLFdBQUE4ckQsR0FBQWx1RCxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQzVhLFNBQUEwc0QsR0FBQTl1RCxHQUE2QixVQUFkQSxJQUFBbEksYUFBY2tJLEVBQUEycUMsa0JBQzdCLFNBQUFva0IsR0FBQS91RCxFQUFBQyxHQUFpQixJQUFBakMsRUFBQWdDLEVBQUE0K0MsVUFDVyxPQURPLE9BQUE1Z0QsTUFBQWt0QyxHQUFBbHJDLEVBQUEwUixJQUFBelIsRUFBQUQsRUFBQTZDLElBQUE3QyxFQUFBcEYsT0FBQXV6RCxZQUFBbnVELEVBQUFtdUQsWUFBQW53RCxFQUFBMkIsS0FBQUssRUFBQUwsS0FBQTNCLEVBQUEyekMsVUFBQTN4QyxFQUFBMnhDLFVBQUEzekMsRUFBQTRnRCxVQUFBNStDLElBQUE0K0MsVUFBQTVnRCxNQUFBb3dELGFBQUFudUQsRUFBQWpDLEVBQUFpaEQsVUFBQSxFQUFBamhELEVBQUEyd0QsV0FBQSxLQUFBM3dELEVBQUEwd0QsWUFBQSxLQUFBMXdELEVBQUF5d0QsV0FBQSxNQUEyTnp3RCxFQUFBNHdELG9CQUFBNXVELEVBQUE0dUQsb0JBQTRDNXdELEVBQUE2d0QsZUFBQTd1RCxFQUFBNnVELGVBQWtDN3dELEVBQUF5RCxNQUFBekIsRUFBQXlCLE1BQWdCekQsRUFBQXd3RCxjQUFBeHVELEVBQUF3dUQsY0FBZ0N4d0QsRUFBQXN3RCxjQUFBdHVELEVBQUFzdUQsY0FBZ0N0d0QsRUFBQXV3RCxZQUFBdnVELEVBQUF1dUQsWUFBNEJ2d0QsRUFBQXF3RCxvQkFBQXJ1RCxFQUFBcXVELG9CQUE0Q3J3RCxFQUFBNmQsUUFBQTdiLEVBQUE2YixRQUNwZTdkLEVBQUFnZSxNQUFBaGMsRUFBQWdjLE1BQWdCaGUsRUFBQW90QyxJQUFBcHJDLEVBQUFvckMsSUFBWXB0QyxFQUM1QixTQUFBZ3hELEdBQUFodkQsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBakksRUFBQTB2QyxHQUF5QixJQUFBZCxFQUFBLEVBQVksR0FBSjNtQyxFQUFBcEMsRUFBSSxtQkFBQUEsRUFBQTh1RCxHQUFBOXVELEtBQUErb0MsRUFBQSxRQUFzQyxvQkFBQS9vQyxFQUFBK29DLEVBQUEsT0FBZ0Mvb0MsRUFBQSxPQUFBQSxHQUFpQixLQUFBNjRDLEdBQUEsT0FBQW9XLEdBQUFqeEQsRUFBQXhFLFNBQUFXLEVBQUEwdkMsRUFBQTVwQyxHQUFvQyxLQUFBaTVDLEdBQUEsT0FBQWdXLEdBQUFseEQsRUFBQSxFQUFBN0QsRUFBQTB2QyxFQUFBNXBDLEdBQTZCLEtBQUE2NEMsR0FBQSxPQUFBb1csR0FBQWx4RCxFQUFBLEVBQUE3RCxFQUFBMHZDLEVBQUE1cEMsR0FBNkIsS0FBQTg0QyxHQUFBLE9BQUEvNEMsRUFBQWtyQyxHQUFBLEdBQUFsdEMsRUFBQWlDLEVBQUEsRUFBQTlGLElBQUFnMEQsWUFBQXBWLEdBQUEvNEMsRUFBQUwsS0FBQW81QyxHQUFBLzRDLEVBQUE2dUQsZUFBQWhsQixFQUFBN3BDLEVBQStFLEtBQUFvNUMsR0FBQSxPQUFBcDVDLEVBQUFrckMsR0FBQSxHQUFBbHRDLEVBQUFpQyxFQUFBOUYsSUFBQWcwRCxZQUFBL1UsR0FBQXA1QyxFQUFBTCxLQUFBeTVDLEdBQUFwNUMsRUFBQTZ1RCxlQUFBaGxCLEVBQUE3cEMsRUFBNkUsNEJBQUFBLEdBQUEsT0FBQUEsRUFBQSxPQUFBQSxFQUFBeXJDLFVBQTRELEtBQUF1TixHQUFBalEsRUFBQSxHQUFhLE1BQUEvb0MsRUFBUSxLQUFBaTVDLEdBQUFsUSxFQUFBLEVBQVksTUFBQS9vQyxFQUFRLEtBQUFtNUMsR0FBQXBRLEVBQUEsR0FBYSxNQUFBL29DLEVBQVEsS0FBQXE1QyxHQUFBdFEsRUFDaGYsR0FBRyxNQUFBL29DLEVBQVEsS0FBQXM1QyxHQUFBdlEsRUFBQSxHQUFhM21DLEVBQUEsS0FBTyxNQUFBcEMsRUFBUXNwQyxFQUFBLFlBQUF0cEMsYUFBQSxJQUF3RixPQUF6REMsRUFBQWlyQyxHQUFBbkMsRUFBQS9xQyxFQUFBaUMsRUFBQTlGLElBQWFnMEQsWUFBQW51RCxFQUFnQkMsRUFBQU4sS0FBQXlDLEVBQVNuQyxFQUFBNHVELGVBQUFobEIsRUFBbUI1cEMsRUFBUyxTQUFBZ3ZELEdBQUFqdkQsRUFBQUMsRUFBQWpDLEVBQUFvRSxHQUFxRCxPQUFoQ3BDLEVBQUFrckMsR0FBQSxFQUFBbHJDLEVBQUFvQyxFQUFBbkMsSUFBYTR1RCxlQUFBN3dELEVBQW1CZ0MsRUFBUyxTQUFBa3ZELEdBQUFsdkQsRUFBQUMsRUFBQWpDLEVBQUFvRSxHQUFnRyxPQUEzRXBDLEVBQUFrckMsR0FBQSxFQUFBbHJDLEVBQUFvQyxFQUFBbkMsR0FBYUEsRUFBQSxNQUFBQSxHQUFBNjRDLEdBQUFJLEdBQWtCbDVDLEVBQUFtdUQsWUFBQWx1RCxFQUFnQkQsRUFBQUwsS0FBQU0sRUFBU0QsRUFBQTZ1RCxlQUFBN3dELEVBQW1CZ0MsRUFBUyxTQUFBbXZELEdBQUFudkQsRUFBQUMsRUFBQWpDLEdBQXNELE9BQW5DZ0MsRUFBQWtyQyxHQUFBLEVBQUFsckMsRUFBQSxLQUFBQyxJQUFnQjR1RCxlQUFBN3dELEVBQW1CZ0MsRUFDclcsU0FBQW92RCxHQUFBcHZELEVBQUFDLEVBQUFqQyxHQUFzTCxPQUFuS2lDLEVBQUFpckMsR0FBQSxTQUFBbHJDLEVBQUF4RyxTQUFBd0csRUFBQXhHLFNBQUEsR0FBQXdHLEVBQUE2QyxJQUFBNUMsSUFBK0M0dUQsZUFBQTd3RCxFQUFtQmlDLEVBQUEweEMsVUFBQSxDQUFhNFMsY0FBQXZrRCxFQUFBdWtELGNBQUE4SyxnQkFBQSxLQUFBenBCLGVBQUE1bEMsRUFBQTRsQyxnQkFBb0YzbEMsRUFBUyxTQUFBcXZELEdBQUF0dkQsRUFBQUMsR0FBaUJELEVBQUF1dkQsVUFBQSxFQUFjLElBQUF2eEQsRUFBQWdDLEVBQUF3dkQsb0JBQTRCLElBQUF4eEQsRUFBQWdDLEVBQUF3dkQsb0JBQUF4dkQsRUFBQXl2RCxrQkFBQXh2RCxFQUFBakMsRUFBQWlDLEVBQUFELEVBQUF3dkQsb0JBQUF2dkQsRUFBQUQsRUFBQXl2RCxrQkFBQXh2RCxJQUFBRCxFQUFBeXZELGtCQUFBeHZELEdBQTZIeXZELEdBQUF6dkQsRUFBQUQsR0FFbFcsU0FBQTJ2RCxHQUFBM3ZELEVBQUFDLEdBQWlCRCxFQUFBdXZELFVBQUEsRUFBY3Z2RCxFQUFBNHZELGtCQUFBM3ZELElBQUFELEVBQUE0dkQsaUJBQUEsR0FBOEMsSUFBQTV4RCxFQUFBZ0MsRUFBQXd2RCxvQkFBQXB0RCxFQUFBcEMsRUFBQXl2RCxrQkFBa0R6eEQsSUFBQWlDLEVBQUFELEVBQUF3dkQsb0JBQUFwdEQsSUFBQW5DLEVBQUFELEVBQUF5dkQsa0JBQUEsRUFBQXJ0RCxNQUFBbkMsSUFBQUQsRUFBQXl2RCxrQkFBQXp4RCxHQUF5RkEsRUFBQWdDLEVBQUE2dkQsc0JBQTBCenRELEVBQUFwQyxFQUFBOHZELG9CQUF3QixJQUFBOXhELEVBQUFnQyxFQUFBNnZELHNCQUFBN3ZELEVBQUE4dkQsb0JBQUE3dkQsRUFBQWpDLEVBQUFpQyxFQUFBRCxFQUFBNnZELHNCQUFBNXZELEVBQUFtQyxFQUFBbkMsSUFBQUQsRUFBQTh2RCxvQkFBQTd2RCxHQUFtSHl2RCxHQUFBenZELEVBQUFELEdBQ2xaLFNBQUErdkQsR0FBQS92RCxFQUFBQyxHQUFpQixJQUFBakMsRUFBQWdDLEVBQUF3dkQsb0JBQTRFLE9BQXRCeHhELEVBQUFpQyxNQUFBakMsSUFBMUJnQyxJQUFBNnZELHVCQUFxQzV2RCxNQUFBRCxHQUFXQyxFQUFTLFNBQUF5dkQsR0FBQTF2RCxFQUFBQyxHQUFpQixJQUFBakMsRUFBQWlDLEVBQUE0dkQsc0JBQUF6dEQsRUFBQW5DLEVBQUE2dkQsb0JBQUEzMUQsRUFBQThGLEVBQUF1dkQsb0JBQUEzbEIsRUFBQTVwQyxFQUFBMnZELGlCQUErRyxLQUFaejFELEVBQUEsSUFBQUEsSUFBQTB2QyxLQUFZLElBQUE3cEMsR0FBQW9DLEVBQUFwQyxLQUFBN0YsRUFBQWlJLEdBQStCLEtBQUpwQyxFQUFBN0YsSUFBSTZELEVBQUFnQyxNQUFBaEMsR0FBa0JpQyxFQUFBK3ZELDJCQUFBNzFELEVBQStCOEYsRUFBQTR1RCxlQUFBN3VELEVBQW1CLFNBQUFtckMsR0FBQW5yQyxFQUFBQyxHQUFnQixHQUFBRCxLQUFBd3JDLGFBQWlELFFBQUF4dEMsS0FBM0JpQyxFQUFBOEMsRUFBQSxHQUFNOUMsR0FBSUQsSUFBQXdyQyxrQkFBaUIsSUFBQXZyQyxFQUFBakMsS0FBQWlDLEVBQUFqQyxHQUFBZ0MsRUFBQWhDLElBQTBDLE9BQUFpQyxFQUN6RixJQUFBZ3dELElBQUEsSUFBQXhtQixFQUFBc0QsV0FBQXhDLEtBQzNWLFNBQUEybEIsR0FBQWx3RCxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQWdEcEUsRUFBQSxPQUFUQSxJQUFBb0UsRUFBbEJuQyxFQUFBRCxFQUFBc3VELGdCQUEyQnJ1RCxFQUFBOEMsRUFBQSxHQUE2QjlDLEVBQUFqQyxHQUFNZ0MsRUFBQXN1RCxjQUFBdHdELEVBQWtDLFFBQWhCb0UsRUFBQXBDLEVBQUF1dUQsY0FBZ0IsSUFBQXZ1RCxFQUFBNnVELGlCQUFBenNELEVBQUErdEQsVUFBQW55RCxHQUNySCxJQUFBb3lELEdBQUEsQ0FBUW5tQixVQUFBLFNBQUFqcUMsR0FBc0IsU0FBQUEsSUFBQXF3RCxzQkFBQSxJQUFBclIsR0FBQWgvQyxJQUE2Q29xQyxnQkFBQSxTQUFBcHFDLEVBQUFDLEVBQUFqQyxHQUFpQ2dDLElBQUFxd0Qsb0JBQXdCLElBQUFqdUQsRUFBQWt1RCxLQUFxQm4yRCxFQUFBbzJELEdBQVZudUQsRUFBQW91RCxHQUFBcHVELEVBQUFwQyxJQUFzQjdGLEVBQUFzMkQsUUFBQXh3RCxFQUFZLE1BQUFqQyxJQUFBN0QsRUFBQW1CLFNBQUEwQyxHQUFxQzB5RCxLQUFLQyxHQUFBM3dELEVBQUE3RixHQUFReTJELEdBQUE1d0QsRUFBQW9DLElBQVErbkMsb0JBQUEsU0FBQW5xQyxFQUFBQyxFQUFBakMsR0FBcUNnQyxJQUFBcXdELG9CQUF3QixJQUFBanVELEVBQUFrdUQsS0FBcUJuMkQsRUFBQW8yRCxHQUFWbnVELEVBQUFvdUQsR0FBQXB1RCxFQUFBcEMsSUFBc0I3RixFQUFBdVgsSUFBQW0vQyxHQUFTMTJELEVBQUFzMkQsUUFBQXh3RCxFQUFZLE1BQUFqQyxJQUFBN0QsRUFBQW1CLFNBQUEwQyxHQUFxQzB5RCxLQUFLQyxHQUFBM3dELEVBQUE3RixHQUFReTJELEdBQUE1d0QsRUFBQW9DLElBQVE4bkMsbUJBQUEsU0FBQWxxQyxFQUFBQyxHQUFrQ0QsSUFBQXF3RCxvQkFBd0IsSUFBQXJ5RCxFQUFBc3lELEtBQXFCbHVELEVBQUFtdUQsR0FBVnZ5RCxFQUFBd3lELEdBQUF4eUQsRUFBQWdDLElBQXNCb0MsRUFBQXNQLElBQ25mby9DLEdBQUcsTUFBQTd3RCxJQUFBbUMsRUFBQTlHLFNBQUEyRSxHQUFxQ3l3RCxLQUFLQyxHQUFBM3dELEVBQUFvQyxHQUFRd3VELEdBQUE1d0QsRUFBQWhDLEtBQVUsU0FBQSt5RCxHQUFBL3dELEVBQUFDLEVBQUFqQyxFQUFBb0UsRUFBQWpJLEVBQUEwdkMsRUFBQWQsR0FBeUMseUJBQWQvb0MsSUFBQTJ4QyxXQUFjcWYsc0JBQUFoeEQsRUFBQWd4RCxzQkFBQTV1RCxFQUFBeW5DLEVBQUFkLElBQUE5b0MsRUFBQW5JLFlBQUFtSSxFQUFBbkksVUFBQWl6Qyx3QkFBQWdVLEdBQUEvZ0QsRUFBQW9FLEtBQUEyOEMsR0FBQTVrRCxFQUFBMHZDLElBQ3hHLFNBQUFvbkIsR0FBQWp4RCxFQUFBQyxFQUFBakMsR0FBbUIsSUFBQW9FLEdBQUEsRUFBQWpJLEVBQUE2eUQsR0FBY25qQixFQUFBNXBDLEVBQUFpeEQsWUFBcVgsTUFBalcsaUJBQUFybkIsR0FBQSxPQUFBQSxJQUFBMEIsR0FBQTFCLElBQUExdkMsRUFBQTh3QyxHQUFBaHJDLEdBQUFndEQsR0FBQW5pQixHQUFBM0gsUUFBQTBHLEdBQUF6bkMsRUFBQSxPQUFBQSxFQUFBbkMsRUFBQWt0RCxlQUFBRCxHQUFBbHRELEVBQUE3RixHQUFBNnlELElBQWtIL3NELEVBQUEsSUFBQUEsRUFBQWpDLEVBQUE2ckMsR0FBYTdwQyxFQUFBc3VELGNBQUEsT0FBQXJ1RCxFQUFBcWUsWUFBQSxJQUFBcmUsRUFBQXFlLE1BQUFyZSxFQUFBcWUsTUFBQSxLQUE4RHJlLEVBQUF1cUMsUUFBQTRsQixHQUFhcHdELEVBQUEyeEMsVUFBQTF4QyxFQUFjQSxFQUFBb3dELG9CQUFBcndELEVBQXdCb0MsS0FBQXBDLElBQUEyeEMsV0FBQXliLDRDQUFBanpELEVBQUE2RixFQUFBcXRELDBDQUFBeGpCLEdBQWlINXBDLEVBQ3RaLFNBQUFreEQsR0FBQW54RCxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQXFCcEMsRUFBQUMsRUFBQXFlLE1BQVUsbUJBQUFyZSxFQUFBbXhELDJCQUFBbnhELEVBQUFteEQsMEJBQUFwekQsRUFBQW9FLEdBQWtGLG1CQUFBbkMsRUFBQW94RCxrQ0FBQXB4RCxFQUFBb3hELGlDQUFBcnpELEVBQUFvRSxHQUFnR25DLEVBQUFxZSxRQUFBdGUsR0FBQW93RCxHQUFBam1CLG9CQUFBbHFDLElBQUFxZSxNQUFBLE1BQ2pOLFNBQUFnekMsR0FBQXR4RCxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQXFCLElBQUFqSSxFQUFBNkYsRUFBQTJ4QyxVQUFrQngzQyxFQUFBc3dCLE1BQUF6c0IsRUFBVTdELEVBQUFta0IsTUFBQXRlLEVBQUFzdUQsY0FBd0JuMEQsRUFBQW93QyxLQUFBMGxCLEdBQVUsSUFBQXBtQixFQUFBNXBDLEVBQUFpeEQsWUFBb0IsaUJBQUFybkIsR0FBQSxPQUFBQSxFQUFBMXZDLEVBQUF1SyxRQUFBNm1DLEdBQUExQixNQUFBb0IsR0FBQWhyQyxHQUFBZ3RELEdBQUFuaUIsR0FBQTNILFFBQUFocEMsRUFBQXVLLFFBQUF3b0QsR0FBQWx0RCxFQUFBNnBDLElBQXFHLFFBQWhCQSxFQUFBN3BDLEVBQUF1dUQsZUFBZ0JnRCxHQUFBdnhELEVBQUE2cEMsRUFBQTdyQyxFQUFBN0QsRUFBQWlJLEdBQUFqSSxFQUFBbWtCLE1BQUF0ZSxFQUFBc3VELGVBQStFLG1CQUE3QnprQixFQUFBNXBDLEVBQUF1eEQsNEJBQTZCdEIsR0FBQWx3RCxFQUFBQyxFQUFBNHBDLEVBQUE3ckMsR0FBQTdELEVBQUFta0IsTUFBQXRlLEVBQUFzdUQsZUFBNkQsbUJBQUFydUQsRUFBQXV4RCwwQkFBQSxtQkFBQXIzRCxFQUFBczNELHlCQUFBLG1CQUFBdDNELEVBQUF1M0QsMkJBQUEsbUJBQ3hWdjNELEVBQUF3M0QscUJBQUExeEQsRUFBQTlGLEVBQUFta0IsTUFBQSxtQkFBQW5rQixFQUFBdzNELG9CQUFBeDNELEVBQUF3M0QscUJBQUEsbUJBQUF4M0QsRUFBQXUzRCwyQkFBQXYzRCxFQUFBdTNELDRCQUFBenhELElBQUE5RixFQUFBbWtCLE9BQUE4eEMsR0FBQWptQixvQkFBQWh3QyxJQUFBbWtCLE1BQUEsY0FBQXVyQixFQUFBN3BDLEVBQUF1dUQsZUFBQWdELEdBQUF2eEQsRUFBQTZwQyxFQUFBN3JDLEVBQUE3RCxFQUFBaUksR0FBQWpJLEVBQUFta0IsTUFBQXRlLEVBQUFzdUQsZ0JBQStTLG1CQUFBbjBELEVBQUF5M0Qsb0JBQUE1eEQsRUFBQWkvQyxXQUFBLEdBQTBELElBQUE0UyxHQUFBN3FELE1BQUFDLFFBQ3pXLFNBQUE2cUQsR0FBQTl4RCxFQUFBQyxFQUFBakMsR0FBMkIsV0FBUmdDLEVBQUFoQyxFQUFBb3RDLE1BQVEsbUJBQUFwckMsR0FBQSxpQkFBQUEsRUFBQSxDQUF5RCxHQUFBaEMsRUFBQTB0QyxPQUFBLENBQWExdEMsSUFBQTB0QyxPQUFXLElBQUF0cEMsT0FBQSxFQUFhcEUsSUFBQSxJQUFBQSxFQUFBMFQsS0FBQTQzQixFQUFBLE9BQUFsbkMsRUFBQXBFLEVBQUEyekMsV0FBNkN2dkMsR0FBQWtuQyxFQUFBLE1BQUF0cEMsR0FBb0IsSUFBQTdGLEVBQUEsR0FBQTZGLEVBQVcsY0FBQUMsR0FBQSxPQUFBQSxFQUFBbXJDLEtBQUEsbUJBQUFuckMsRUFBQW1yQyxLQUFBbnJDLEVBQUFtckMsSUFBQTJtQixhQUFBNTNELEVBQUE4RixFQUFBbXJDLE1BQXdGbnJDLEVBQUEsU0FBQUQsR0FBYyxJQUFBQyxFQUFBbUMsRUFBQW1vQyxLQUFhdHFDLElBQUFnd0QsS0FBQWh3RCxFQUFBbUMsRUFBQW1vQyxLQUFBLElBQXNCLE9BQUF2cUMsU0FBQUMsRUFBQTlGLEdBQUE4RixFQUFBOUYsR0FBQTZGLElBQTZCK3hELFdBQUE1M0QsRUFBZThGLEdBQVMsaUJBQUFELEdBQUFzcEMsRUFBQSxPQUFvQ3RyQyxFQUFBMHRDLFFBQUFwQyxFQUFBLE1BQUF0cEMsR0FBMkIsT0FBQUEsRUFDbGMsU0FBQWd5RCxHQUFBaHlELEVBQUFDLEdBQWlCLGFBQUFELEVBQUFMLE1BQUEycEMsRUFBQSx5QkFBQXp4QyxPQUFBQyxVQUFBK0wsU0FBQTdMLEtBQUFpSSxHQUFBLHFCQUFxR3BJLE9BQUFxSixLQUFBakIsR0FBQVEsS0FBQSxVQUE4QlIsRUFBQSxJQUNwSixTQUFBZ3lELEdBQUFqeUQsR0FBZSxTQUFBQyxJQUFBakMsR0FBZ0IsR0FBQWdDLEVBQUEsQ0FBTSxJQUFBb0MsRUFBQW5DLEVBQUF3dUQsV0FBbUIsT0FBQXJzRCxLQUFBdXNELFdBQUEzd0QsRUFBQWlDLEVBQUF3dUQsV0FBQXp3RCxHQUFBaUMsRUFBQXl1RCxZQUFBenVELEVBQUF3dUQsV0FBQXp3RCxFQUFzRUEsRUFBQTJ3RCxXQUFBLEtBQWtCM3dELEVBQUFpaEQsVUFBQSxHQUFlLFNBQUFqaEQsSUFBQW9FLEdBQWdCLElBQUFwQyxFQUFBLFlBQWtCLEtBQUssT0FBQW9DLEdBQVNuQyxFQUFBakMsRUFBQW9FLE9BQUF5WixRQUFvQixZQUFZLFNBQUF6WixFQUFBcEMsRUFBQUMsR0FBZ0IsSUFBQUQsRUFBQSxJQUFBa3lELElBQWMsT0FBQWp5RCxHQUFTLE9BQUFBLEVBQUE0QyxJQUFBN0MsRUFBQWhHLElBQUFpRyxFQUFBNEMsSUFBQTVDLEdBQUFELEVBQUFoRyxJQUFBaUcsRUFBQStiLE1BQUEvYixPQUFBNGIsUUFBMEQsT0FBQTdiLEVBQVMsU0FBQTdGLEVBQUE2RixFQUFBQyxFQUFBakMsR0FBdUQsT0FBckNnQyxFQUFBK3VELEdBQUEvdUQsRUFBQUMsSUFBWStiLE1BQUEsRUFBVWhjLEVBQUE2YixRQUFBLEtBQWU3YixFQUFTLFNBQUE2cEMsRUFBQTVwQyxFQUFBakMsRUFBQW9FLEdBQTRCLE9BQVZuQyxFQUFBK2IsTUFBQTVaLEVBQVVwQyxFQUE2QixRQUFkb0MsRUFBQW5DLEVBQUEyK0MsWUFBY3g4QyxJQUFBNFosT0FBQWhlLEdBQUFpQyxFQUFBZy9DLFVBQ2xkLEVBQUFqaEQsR0FBQW9FLEdBQU9uQyxFQUFBZy9DLFVBQUEsRUFBY2poRCxHQURnYUEsRUFDdlosU0FBQStxQyxFQUFBOW9DLEdBQXFELE9BQXZDRCxHQUFBLE9BQUFDLEVBQUEyK0MsWUFBQTMrQyxFQUFBZy9DLFVBQUEsR0FBdUNoL0MsRUFBUyxTQUFBaEMsRUFBQStCLEVBQUFDLEVBQUFqQyxFQUFBb0UsR0FBb0IsY0FBQW5DLEdBQUEsSUFBQUEsRUFBQXlSLE1BQUF6UixFQUFBa3ZELEdBQUFueEQsRUFBQWdDLEVBQUFwRixLQUFBd0gsSUFBQWl3QyxPQUFBcnlDLEVBQUFDLEtBQTREQSxFQUFBOUYsRUFBQThGLEVBQUFqQyxJQUFXcTBDLE9BQUFyeUMsRUFBV0MsR0FBUyxTQUFBNUQsRUFBQTJELEVBQUFDLEVBQUFqQyxFQUFBb0UsR0FBb0IsY0FBQW5DLEtBQUFrdUQsY0FBQW53RCxFQUFBMkIsT0FBQXlDLEVBQUFqSSxFQUFBOEYsRUFBQWpDLEVBQUF5c0IsUUFBQTJnQixJQUFBMG1CLEdBQUE5eEQsRUFBQUMsRUFBQWpDLEdBQUFvRSxFQUFBaXdDLE9BQUFyeUMsRUFBQW9DLEtBQXlGQSxFQUFBNHNELEdBQUFoeEQsRUFBQTJCLEtBQUEzQixFQUFBNkUsSUFBQTdFLEVBQUF5c0IsTUFBQSxLQUFBenFCLEVBQUFwRixLQUFBd0gsSUFBeUNncEMsSUFBQTBtQixHQUFBOXhELEVBQUFDLEVBQUFqQyxHQUFnQm9FLEVBQUFpd0MsT0FBQXJ5QyxFQUFXb0MsR0FBUyxTQUFBK21DLEVBQUFucEMsRUFBQUMsRUFBQWpDLEVBQUFvRSxHQUFvQixjQUFBbkMsR0FBQSxJQUFBQSxFQUFBeVIsS0FBQXpSLEVBQUEweEMsVUFBQTRTLGdCQUFBdm1ELEVBQUF1bUQsZUFBQXRrRCxFQUFBMHhDLFVBQUEvTCxpQkFDelo1bkMsRUFBQTRuQyxpQkFBQTNsQyxFQUFBbXZELEdBQUFweEQsRUFBQWdDLEVBQUFwRixLQUFBd0gsSUFBQWl3QyxPQUFBcnlDLEVBQUFDLEtBQXNEQSxFQUFBOUYsRUFBQThGLEVBQUFqQyxFQUFBeEUsVUFBQSxLQUF3QjY0QyxPQUFBcnlDLEVBQVdDLEdBQVMsU0FBQWtDLEVBQUFuQyxFQUFBQyxFQUFBakMsRUFBQW9FLEVBQUF5bkMsR0FBc0IsY0FBQTVwQyxHQUFBLElBQUFBLEVBQUF5UixNQUFBelIsRUFBQWd2RCxHQUFBanhELEVBQUFnQyxFQUFBcEYsS0FBQXdILEVBQUF5bkMsSUFBQXdJLE9BQUFyeUMsRUFBQUMsS0FBOERBLEVBQUE5RixFQUFBOEYsRUFBQWpDLElBQVdxMEMsT0FBQXJ5QyxFQUFXQyxHQUFTLFNBQUEzQyxFQUFBMEMsRUFBQUMsRUFBQWpDLEdBQWtCLG9CQUFBaUMsR0FBQSxpQkFBQUEsRUFBQSxPQUFBQSxFQUFBa3ZELEdBQUEsR0FBQWx2RCxFQUFBRCxFQUFBcEYsS0FBQW9ELElBQUFxMEMsT0FBQXJ5QyxFQUFBQyxFQUFvRixvQkFBQUEsR0FBQSxPQUFBQSxFQUFBLENBQWtDLE9BQUFBLEVBQUF3ckMsVUFBbUIsS0FBQWtOLEdBQUEsT0FBQTM2QyxFQUFBZ3hELEdBQUEvdUQsRUFBQU4sS0FBQU0sRUFBQTRDLElBQUE1QyxFQUFBd3FCLE1BQUEsS0FBQXpxQixFQUFBcEYsS0FBQW9ELElBQUFvdEMsSUFBQTBtQixHQUFBOXhELEVBQUEsS0FBQUMsR0FBQWpDLEVBQUFxMEMsT0FBQXJ5QyxFQUFBaEMsRUFBd0YsS0FBQTQ2QyxHQUFBLE9BQUEzNEMsRUFBQW12RCxHQUFBbnZELEVBQUFELEVBQUFwRixLQUFBb0QsSUFBQXEwQyxPQUFBcnlDLEVBQUFDLEVBQTZDLEdBQUE0eEQsR0FBQTV4RCxJQUNyZnU1QyxHQUFBdjVDLEdBQUEsT0FBQUEsRUFBQWd2RCxHQUFBaHZELEVBQUFELEVBQUFwRixLQUFBb0QsRUFBQSxPQUFBcTBDLE9BQUFyeUMsRUFBQUMsRUFBZ0QreEQsR0FBQWh5RCxFQUFBQyxHQUFRLFlBQVksU0FBQXRGLEVBQUFxRixFQUFBQyxFQUFBakMsRUFBQW9FLEdBQW9CLElBQUFqSSxFQUFBLE9BQUE4RixJQUFBNEMsSUFBQSxLQUEwQixvQkFBQTdFLEdBQUEsaUJBQUFBLEVBQUEsY0FBQTdELEVBQUEsS0FBQThELEVBQUErQixFQUFBQyxFQUFBLEdBQUFqQyxFQUFBb0UsR0FBK0Usb0JBQUFwRSxHQUFBLE9BQUFBLEVBQUEsQ0FBa0MsT0FBQUEsRUFBQXl0QyxVQUFtQixLQUFBa04sR0FBQSxPQUFBMzZDLEVBQUE2RSxNQUFBMUksRUFBQTZELEVBQUEyQixPQUFBazVDLEdBQUExMkMsRUFBQW5DLEVBQUFDLEVBQUFqQyxFQUFBeXNCLE1BQUFqeEIsU0FBQTRJLEVBQUFqSSxHQUFBa0MsRUFBQTJELEVBQUFDLEVBQUFqQyxFQUFBb0UsR0FBQSxLQUFpRixLQUFBdzJDLEdBQUEsT0FBQTU2QyxFQUFBNkUsTUFBQTFJLEVBQUFndkMsRUFBQW5wQyxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQUEsS0FBeUMsR0FBQXl2RCxHQUFBN3pELElBQUF3N0MsR0FBQXg3QyxHQUFBLGNBQUE3RCxFQUFBLEtBQUFnSSxFQUFBbkMsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBLE1BQXFENHZELEdBQUFoeUQsRUFBQWhDLEdBQVEsWUFBWSxTQUFBMnJDLEVBQUEzcEMsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBakksR0FBc0Isb0JBQUFpSSxHQUFBLGlCQUFBQSxFQUFBLE9BQy9jbkUsRUFBQWdDLEVBRCtjRCxFQUMvY0EsRUFBQWpHLElBQUFpRSxJQUFBLFFBQUFvRSxFQUFBakksR0FBNkIsb0JBQUFpSSxHQUFBLE9BQUFBLEVBQUEsQ0FBa0MsT0FBQUEsRUFBQXFwQyxVQUFtQixLQUFBa04sR0FBQSxPQUFBMzRDLElBQUFqRyxJQUFBLE9BQUFxSSxFQUFBUyxJQUFBN0UsRUFBQW9FLEVBQUFTLE1BQUEsS0FBQVQsRUFBQXpDLE9BQUFrNUMsR0FBQTEyQyxFQUFBbEMsRUFBQUQsRUFBQW9DLEVBQUFxb0IsTUFBQWp4QixTQUFBVyxFQUFBaUksRUFBQVMsS0FBQXhHLEVBQUE0RCxFQUFBRCxFQUFBb0MsRUFBQWpJLEdBQTBHLEtBQUF5K0MsR0FBQSxPQUFBelAsRUFBQWxwQyxFQUFBRCxJQUFBakcsSUFBQSxPQUFBcUksRUFBQVMsSUFBQTdFLEVBQUFvRSxFQUFBUyxNQUFBLEtBQUFULEVBQUFqSSxHQUE4RCxHQUFBMDNELEdBQUF6dkQsSUFBQW8zQyxHQUFBcDNDLEdBQUEsT0FBQUQsRUFBQWxDLEVBQUFELElBQUFqRyxJQUFBaUUsSUFBQSxLQUFBb0UsRUFBQWpJLEVBQUEsTUFBd0Q2M0QsR0FBQS94RCxFQUFBbUMsR0FBUSxZQUFZLFNBQUF5YSxFQUFBMWlCLEVBQUE0dUMsRUFBQTlxQyxFQUFBa3JDLEdBQW9CLFFBQUE5c0MsRUFBQSxLQUFBOEYsRUFBQSxLQUFBaW5DLEVBQUFMLEVBQUFNLEVBQUFOLEVBQUEsRUFBQWEsRUFBQSxLQUF1QyxPQUFBUixHQUFBQyxFQUFBcHJDLEVBQUF4QyxPQUFxQjR0QyxJQUFBLENBQUtELEVBQUFwdEIsTUFBQXF0QixHQUFBTyxFQUFBUixJQUFBLE1BQUFRLEVBQUFSLEVBQUF2dEIsUUFBbUMsSUFBQXZZLEVBQUEzSSxFQUFBUixFQUFBaXZDLEVBQUFuckMsRUFBQW9yQyxHQUFBRixHQUFvQixVQUFBN2xDLEVBQUEsQ0FBYSxPQUFBOGxDLE1BQUFRLEdBQWdCLE1BQU01cEMsR0FDcmZvcEMsR0FBQSxPQUFBOWxDLEVBQUFzN0MsV0FBQTMrQyxFQUFBOUYsRUFBQWl2QyxHQUE4QkwsRUFBQWMsRUFBQXZtQyxFQUFBeWxDLEVBQUFNLEdBQVcsT0FBQWxuQyxFQUFBOUYsRUFBQWlILEVBQUFuQixFQUFBMFosUUFBQXZZLEVBQXlCbkIsRUFBQW1CLEVBQUk4bEMsRUFBQVEsRUFBSSxHQUFBUCxJQUFBcHJDLEVBQUF4QyxPQUFBLE9BQUF1QyxFQUFBN0QsRUFBQWl2QyxHQUFBL3NDLEVBQWdDLFVBQUErc0MsRUFBQSxDQUFhLEtBQUtDLEVBQUFwckMsRUFBQXhDLE9BQVc0dEMsS0FBQUQsRUFBQTlyQyxFQUFBbkQsRUFBQThELEVBQUFvckMsR0FBQUYsTUFBQUosRUFBQWMsRUFBQVQsRUFBQUwsRUFBQU0sR0FBQSxPQUFBbG5DLEVBQUE5RixFQUFBK3NDLEVBQUFqbkMsRUFBQTBaLFFBQUF1dEIsRUFBQWpuQyxFQUFBaW5DLEdBQTZELE9BQUEvc0MsRUFBUyxJQUFBK3NDLEVBQUFobkMsRUFBQWpJLEVBQUFpdkMsR0FBYUMsRUFBQXByQyxFQUFBeEMsT0FBVzR0QyxLQUFBTyxFQUFBRCxFQUFBUCxFQUFBanZDLEVBQUFrdkMsRUFBQXByQyxFQUFBb3JDLEdBQUFGLE1BQUFucEMsR0FBQSxPQUFBNHBDLEVBQUFnVixXQUFBeFYsRUFBQStvQixPQUFBLE9BQUF2b0IsRUFBQS9tQyxJQUFBd21DLEVBQUFPLEVBQUEvbUMsS0FBQWttQyxFQUFBYyxFQUFBRCxFQUFBYixFQUFBTSxHQUFBLE9BQUFsbkMsRUFBQTlGLEVBQUF1dEMsRUFBQXpuQyxFQUFBMFosUUFBQSt0QixFQUFBem5DLEVBQUF5bkMsR0FBZ0ssT0FBekM1cEMsR0FBQW9wQyxFQUFBam9DLFFBQUEsU0FBQW5CLEdBQXlCLE9BQUFDLEVBQUE5RixFQUFBNkYsS0FBZ0IzRCxFQUFTLFNBQUEydkMsRUFBQTd4QyxFQUFBNHVDLEVBQUE5cUMsRUFBQWtyQyxHQUFvQixJQUFBOXNDLEVBQUFtOUMsR0FBQXY3QyxHQUFZLG1CQUFBNUIsR0FBQWl0QyxFQUFBLE9BQWtELE9BQVpyckMsRUFBQTVCLEVBQUFyRSxLQUFBaUcsS0FBWXFyQyxFQUFBLE9BQ2hlLFFBQUFubkMsRUFBQTlGLEVBQUEsS0FBQStzQyxFQUFBTCxFQUFBTSxFQUFBTixFQUFBLEVBQUFhLEVBQUEsS0FBQXRtQyxFQUFBckYsRUFBQTBQLE9BQTZDLE9BQUF5N0IsSUFBQTlsQyxFQUFBaUgsS0FBa0I4K0IsSUFBQS9sQyxFQUFBckYsRUFBQTBQLE9BQUEsQ0FBZ0J5N0IsRUFBQXB0QixNQUFBcXRCLEdBQUFPLEVBQUFSLElBQUEsTUFBQVEsRUFBQVIsRUFBQXZ0QixRQUFtQyxJQUFBZ0IsRUFBQWxpQixFQUFBUixFQUFBaXZDLEVBQUE5bEMsRUFBQXJKLE1BQUFrdkMsR0FBdUIsVUFBQXRzQixFQUFBLENBQWF1c0IsTUFBQVEsR0FBUyxNQUFNNXBDLEdBQUFvcEMsR0FBQSxPQUFBdnNCLEVBQUEraEMsV0FBQTMrQyxFQUFBOUYsRUFBQWl2QyxHQUFpQ0wsRUFBQWMsRUFBQWh0QixFQUFBa3NCLEVBQUFNLEdBQVcsT0FBQWxuQyxFQUFBOUYsRUFBQXdnQixFQUFBMWEsRUFBQTBaLFFBQUFnQixFQUF5QjFhLEVBQUEwYSxFQUFJdXNCLEVBQUFRLEVBQUksR0FBQXRtQyxFQUFBaUgsS0FBQSxPQUFBdk0sRUFBQTdELEVBQUFpdkMsR0FBQS9zQyxFQUEwQixVQUFBK3NDLEVBQUEsQ0FBYSxNQUFLOWxDLEVBQUFpSCxLQUFROCtCLElBQUEvbEMsRUFBQXJGLEVBQUEwUCxPQUFBLFFBQUFySyxFQUFBaEcsRUFBQW5ELEVBQUFtSixFQUFBckosTUFBQWt2QyxNQUFBSixFQUFBYyxFQUFBdm1DLEVBQUF5bEMsRUFBQU0sR0FBQSxPQUFBbG5DLEVBQUE5RixFQUFBaUgsRUFBQW5CLEVBQUEwWixRQUFBdlksRUFBQW5CLEVBQUFtQixHQUFvRixPQUFBakgsRUFBUyxJQUFBK3NDLEVBQUFobkMsRUFBQWpJLEVBQUFpdkMsSUFBYTlsQyxFQUFBaUgsS0FBUTgrQixJQUFBL2xDLEVBQUFyRixFQUFBMFAsT0FBQSxRQUFBckssRUFBQXFtQyxFQUFBUCxFQUFBanZDLEVBQUFrdkMsRUFBQS9sQyxFQUFBckosTUFBQWt2QyxNQUFBbnBDLEdBQUEsT0FBQXNELEVBQUFzN0MsV0FBQXhWLEVBQUErb0IsT0FBQSxPQUFBN3VELEVBQUFULElBQUF3bUMsRUFDeFovbEMsRUFBQVQsS0FBQWttQyxFQUFBYyxFQUFBdm1DLEVBQUF5bEMsRUFBQU0sR0FBQSxPQUFBbG5DLEVBQUE5RixFQUFBaUgsRUFBQW5CLEVBQUEwWixRQUFBdlksRUFBQW5CLEVBQUFtQixHQUF5RixPQUF6Q3RELEdBQUFvcEMsRUFBQWpvQyxRQUFBLFNBQUFuQixHQUF5QixPQUFBQyxFQUFBOUYsRUFBQTZGLEtBQWdCM0QsRUFBUyxnQkFBQTJELEVBQUFvQyxFQUFBeW5DLEVBQUE1ckMsR0FBeUIsSUFBQWtyQyxFQUFBLGlCQUFBVSxHQUFBLE9BQUFBLEtBQUFscUMsT0FBQWs1QyxJQUFBLE9BQUFoUCxFQUFBaG5DLElBQStEc21DLElBQUFVLElBQUFwZixNQUFBanhCLFVBQXdCLElBQUE2QyxFQUFBLGlCQUFBd3RDLEdBQUEsT0FBQUEsRUFBb0MsR0FBQXh0QyxFQUFBLE9BQUF3dEMsRUFBQTRCLFVBQXdCLEtBQUFrTixHQUFBMzRDLEVBQUEsQ0FBbUIsSUFBUjNELEVBQUF3dEMsRUFBQWhuQyxJQUFRc21DLEVBQUEvbUMsRUFBUSxPQUFBK21DLEdBQVMsQ0FBRSxHQUFBQSxFQUFBdG1DLE1BQUF4RyxFQUFBLFFBQUE4c0MsRUFBQXozQixJQUFBbTRCLEVBQUFscUMsT0FBQWs1QyxHQUFBMVAsRUFBQWdsQixjQUFBdGtCLEVBQUFscUMsS0FBQSxDQUE4RDNCLEVBQUFnQyxFQUFBbXBDLEVBQUF0dEIsVUFBZXpaLEVBQUFqSSxFQUFBZ3ZDLEVBQUFVLEVBQUFscUMsT0FBQWs1QyxHQUFBaFAsRUFBQXBmLE1BQUFqeEIsU0FBQXF3QyxFQUFBcGYsUUFBOEMyZ0IsSUFBQTBtQixHQUFBOXhELEVBQUFtcEMsRUFBQVUsR0FBZ0J6bkMsRUFBQWl3QyxPQUFBcnlDLEVBQVdBLEVBQUFvQyxFQUFJLE1BQUFwQyxFQUFhaEMsRUFBQWdDLEVBQUFtcEMsR0FBTyxNQUFNbHBDLEVBQUFELEVBQUFtcEMsR0FBWUEsRUFDcGZBLEVBQUF0dEIsUUFBVWd1QixFQUFBbHFDLE9BQUFrNUMsS0FBQXoyQyxFQUFBNnNELEdBQUFwbEIsRUFBQXBmLE1BQUFqeEIsU0FBQXdHLEVBQUFwRixLQUFBcUQsRUFBQTRyQyxFQUFBaG5DLE1BQUF3dkMsT0FBQXJ5QyxJQUFBb0MsS0FBQW5FLEVBQUErd0QsR0FBQW5sQixFQUFBbHFDLEtBQUFrcUMsRUFBQWhuQyxJQUFBZ25DLEVBQUFwZixNQUFBLEtBQUF6cUIsRUFBQXBGLEtBQUFxRCxJQUFBbXRDLElBQUEwbUIsR0FBQTl4RCxFQUFBb0MsRUFBQXluQyxHQUFBNXJDLEVBQUFvMEMsT0FBQXJ5QyxJQUFBL0IsR0FBNkksT0FBQThxQyxFQUFBL29DLEdBQVksS0FBQTQ0QyxHQUFBNTRDLEVBQUEsQ0FBVyxJQUFBbXBDLEVBQUFVLEVBQUFobkMsSUFBWSxPQUFBVCxHQUFTLENBQUUsR0FBQUEsRUFBQVMsTUFBQXNtQyxFQUFBLFFBQUEvbUMsRUFBQXNQLEtBQUF0UCxFQUFBdXZDLFVBQUE0UyxnQkFBQTFhLEVBQUEwYSxlQUFBbmlELEVBQUF1dkMsVUFBQS9MLGlCQUFBaUUsRUFBQWpFLGVBQUEsQ0FBdUg1bkMsRUFBQWdDLEVBQUFvQyxFQUFBeVosVUFBZXpaLEVBQUFqSSxFQUFBaUksRUFBQXluQyxFQUFBcndDLFVBQUEsS0FBd0I2NEMsT0FBQXJ5QyxFQUFXQSxFQUFBb0MsRUFBSSxNQUFBcEMsRUFBYWhDLEVBQUFnQyxFQUFBb0MsR0FBTyxNQUFNbkMsRUFBQUQsRUFBQW9DLEdBQVlBLElBQUF5WixTQUFZelosRUFBQWd0RCxHQUFBdmxCLEVBQUE3cEMsRUFBQXBGLEtBQUFxRCxJQUFpQm8wQyxPQUFBcnlDLEVBQVdBLEVBQUFvQyxFQUFJLE9BQUEybUMsRUFBQS9vQyxHQUFZLG9CQUFBNnBDLEdBQUEsaUJBQUFBLEVBQUEsT0FBQUEsRUFDaGQsR0FBQUEsRUFBQSxPQUFBem5DLEdBQUEsSUFBQUEsRUFBQXNQLEtBQUExVCxFQUFBZ0MsRUFBQW9DLEVBQUF5WixVQUFBelosRUFBQWpJLEVBQUFpSSxFQUFBeW5DLElBQUF3SSxPQUFBcnlDLElBQUFvQyxJQUFBcEUsRUFBQWdDLEVBQUFvQyxNQUFBK3NELEdBQUF0bEIsRUFBQTdwQyxFQUFBcEYsS0FBQXFELElBQUFvMEMsT0FBQXJ5QyxJQUFBb0MsR0FBQTJtQyxFQUFBL29DLEdBQWtILEdBQUE2eEQsR0FBQWhvQixHQUFBLE9BQUFodEIsRUFBQTdjLEVBQUFvQyxFQUFBeW5DLEVBQUE1ckMsR0FBMkIsR0FBQXU3QyxHQUFBM1AsR0FBQSxPQUFBbUMsRUFBQWhzQyxFQUFBb0MsRUFBQXluQyxFQUFBNXJDLEdBQXNDLEdBQVg1QixHQUFBMjFELEdBQUFoeUQsRUFBQTZwQyxRQUFXLElBQUFBLElBQUFWLEVBQUEsT0FBQW5wQyxFQUFBMFIsS0FBNEMsY0FBQTQzQixFQUFBLE9BQUFyckMsRUFBQStCLEVBQUFMLE1BQUErNUMsYUFBQXo3QyxFQUFBckUsTUFBQSxhQUFtRSxPQUFBb0UsRUFBQWdDLEVBQUFvQyxJQUFlLElBQUFnd0QsR0FBQUgsSUFBQSxHQUFBSSxHQUFBSixJQUFBLEdBQUFLLEdBQUEsR0FBNkIzbUIsR0FBQSxDQUFJeEksUUFBQW12QixJQUFXQyxHQUFBLENBQUtwdkIsUUFBQW12QixJQUFXRSxHQUFBLENBQUtydkIsUUFBQW12QixJQUFZLFNBQUFHLEdBQUF6eUQsR0FBc0MsT0FBdkJBLElBQUFzeUQsSUFBQWhwQixFQUFBLE9BQXVCdHBDLEVBQ3BhLFNBQUEweUQsR0FBQTF5RCxFQUFBQyxHQUFpQnlxQyxHQUFBOG5CLEdBQUF2eUQsR0FBVXlxQyxHQUFBNm5CLEdBQUF2eUQsR0FBVTBxQyxHQUFBaUIsR0FBQTJtQixJQUFVLElBQUF0MEQsRUFBQWlDLEVBQUE0TixTQUFpQixPQUFBN1AsR0FBVSxlQUFBaUMsT0FBQXlRLGlCQUFBelEsRUFBQXdvRCxhQUFBSCxHQUFBLFNBQWtFLE1BQU0sUUFBQXJvRCxFQUFBcW9ELEdBQUFyb0QsR0FBQWpDLEVBQUEsSUFBQUEsRUFBQWlDLEVBQUFxRSxXQUFBckUsR0FBQXdvRCxjQUFBLEtBQUF6cUQsSUFBQTIwRCxTQUE0RWxvQixHQUFBa0IsSUFBT2pCLEdBQUFpQixHQUFBMXJDLEdBQVMsU0FBQTJ5RCxHQUFBNXlELEdBQWV5cUMsR0FBQWtCLElBQU9sQixHQUFBOG5CLElBQVE5bkIsR0FBQStuQixJQUFRLFNBQUFLLEdBQUE3eUQsR0FBZXl5RCxHQUFBRCxHQUFBcnZCLFNBQWUsSUFBQWxqQyxFQUFBd3lELEdBQUE5bUIsR0FBQXhJLFNBQW9CbmxDLEVBQUFzcUQsR0FBQXJvRCxFQUFBRCxFQUFBTCxNQUFtQk0sSUFBQWpDLElBQUEwc0MsR0FBQTZuQixHQUFBdnlELEdBQUEwcUMsR0FBQWlCLEdBQUEzdEMsSUFBNEIsU0FBQTgwRCxHQUFBOXlELEdBQWV1eUQsR0FBQXB2QixVQUFBbmpDLElBQUF5cUMsR0FBQWtCLElBQUFsQixHQUFBOG5CLEtBQ3BZLElBQUFRLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxHQUFBLEVBQUFDLEdBQUEsRUFBQUMsR0FBQSxHQUFBQyxHQUFBLEdBQUFDLEdBQUEsR0FBQUMsR0FBQSxJQUFBQyxHQUFBOWEsR0FBQXJKLHVCQUFBb2tCLEdBQUEsRUFBQUMsR0FBQSxLQUFBN25CLEdBQUEsS0FBQUMsR0FBQSxLQUFBNm5CLEdBQUEsS0FBQTVuQixHQUFBLEtBQUE2bkIsR0FBQSxLQUFBQyxHQUFBLEVBQUFDLEdBQUEsS0FBQUMsR0FBQSxFQUFBQyxJQUFBLEVBQUFDLEdBQUEsS0FBQUMsR0FBQSxFQUFxSyxTQUFBQyxLQUFjNXFCLEVBQUEsT0FBUyxTQUFBNnFCLEdBQUFuMEQsRUFBQUMsR0FBaUIsVUFBQUEsRUFBQSxTQUFxQixRQUFBakMsRUFBQSxFQUFZQSxFQUFBaUMsRUFBQXhFLFFBQUF1QyxFQUFBZ0MsRUFBQXZFLE9BQXVCdUMsSUFBQSxJQUFBNmdELEdBQUE3K0MsRUFBQWhDLEdBQUFpQyxFQUFBakMsSUFBQSxTQUErQixTQUNwUyxTQUFBbzJELEdBQUFwMEQsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBakksRUFBQTB2QyxHQUFzRyxHQUE3RTJwQixHQUFBM3BCLEVBQUs0cEIsR0FBQXh6RCxFQUFLNHJDLEdBQUEsT0FBQTdyQyxJQUFBc3VELGNBQUEsS0FBZ0NpRixHQUFBcHdCLFFBQUEsT0FBQTBJLEdBQUF3b0IsR0FBQUMsR0FBMEJyMEQsRUFBQWpDLEVBQUFvRSxFQUFBakksR0FBUzQ1RCxHQUFBLENBQU8sR0FBQUEsSUFBQSxFQUFBRSxJQUFBLEVBQUFwb0IsR0FBQSxPQUFBN3JDLElBQUFzdUQsY0FBQSxLQUFBcUYsR0FBQUQsR0FBQUcsR0FBQS9uQixHQUFBRixHQUFBLEtBQUEybkIsR0FBQXB3QixRQUFBbXhCLEdBQUFyMEQsRUFBQWpDLEVBQUFvRSxFQUFBakksU0FBd0Y0NUQsSUFBVUMsR0FBQSxLQUFRQyxHQUFBLEVBQXVMLE9BQWxMVixHQUFBcHdCLFFBQUFveEIsSUFBY3YwRCxFQUFBeXpELElBQUtuRixjQUFBb0YsR0FBbUIxekQsRUFBQTZ1RCxlQUFBK0UsR0FBb0I1ekQsRUFBQXV1RCxZQUFBc0YsR0FBaUI3ekQsRUFBQWkvQyxXQUFBNlUsR0FBZ0I5ekQsRUFBQSxPQUFBNHJDLElBQUEsT0FBQUEsR0FBQWorQixLQUEwQjZsRCxHQUFBLEVBQUtHLEdBQUE3bkIsR0FBQTRuQixHQUFBN25CLEdBQUFELEdBQUE2bkIsR0FBQSxLQUFvQkcsR0FBQSxFQUFLQyxHQUFBLEtBQVFDLEdBQUEsRUFBSzl6RCxHQUFBc3BDLEVBQUEsT0FBa0JycEMsRUFBUyxTQUFBdTBELEtBQWNqQixHQUFBcHdCLFFBQUFveEIsR0FBY2YsR0FBQSxFQUFLRyxHQUFBN25CLEdBQUE0bkIsR0FBQTduQixHQUFBRCxHQUFBNm5CLEdBQUEsS0FBb0JHLEdBQUEsRUFBS0MsR0FBQSxLQUFRQyxHQUFBLEVBQUtDLElBQUEsRUFBTUMsR0FBQSxLQUFRQyxHQUFBLEVBQzVlLFNBQUFRLEtBQWMsSUFBQXowRCxFQUFBLENBQU9zdUQsY0FBQSxLQUFBNkIsVUFBQSxLQUFBOXdELE1BQUEsS0FBQXExRCxXQUFBLEtBQUEvbUQsS0FBQSxNQUFtRyxPQUEzQixPQUFBbStCLEdBQUE0bkIsR0FBQTVuQixHQUFBOXJDLEVBQUE4ckMsTUFBQW4rQixLQUFBM04sRUFBMkI4ckMsR0FBUyxTQUFBNm9CLEtBQWMsVUFBQWhCLE9BQUE3bkIsR0FBQTZuQixJQUFBaG1ELEtBQUFrK0IsR0FBQSxRQUFBRCxHQUFBQyxJQUFBRCxHQUFBaitCLEtBQUEsU0FBdUQsQ0FBSyxPQUFBaytCLElBQUF2QyxFQUFBLE9BQTZCLElBQUF0cEMsRUFBQSxDQUFPc3VELGVBQVgxaUIsR0FBQUMsSUFBV3lpQixjQUFBNkIsVUFBQXZrQixHQUFBdWtCLFVBQUE5d0QsTUFBQXVzQyxHQUFBdnNDLE1BQUFxMUQsV0FBQTlvQixHQUFBOG9CLFdBQUEvbUQsS0FBQSxNQUFxR20rQixHQUFBLE9BQUFBLEdBQUE0bkIsR0FBQTF6RCxFQUFBOHJDLEdBQUFuK0IsS0FBQTNOLEVBQXlCNnJDLEdBQUFELEdBQUFqK0IsS0FBUyxPQUFBbStCLEdBQVMsU0FBQThvQixHQUFBNTBELEVBQUFDLEdBQWlCLHlCQUFBQSxJQUFBRCxHQUFBQyxFQUNoWixTQUFBNDBELEdBQUE3MEQsR0FBZSxJQUFBQyxFQUFBMDBELEtBQUEzMkQsRUFBQWlDLEVBQUFaLE1BQThDLEdBQXpCLE9BQUFyQixHQUFBc3JDLEVBQUEsT0FBeUIsRUFBQTJxQixHQUFBLENBQVMsSUFBQTd4RCxFQUFBcEUsRUFBQXFxQixTQUFpQixVQUFBMnJDLEdBQUEsQ0FBYyxJQUFBNzVELEVBQUE2NUQsR0FBQWo2RCxJQUFBaUUsR0FBZ0IsWUFBQTdELEVBQUEsQ0FBZTY1RCxHQUFBN0IsT0FBQW4wRCxHQUFhLElBQUE2ckMsRUFBQTVwQyxFQUFBcXVELGNBQXNCLEdBQUF6a0IsRUFBQTdwQyxFQUFBNnBDLEVBQUExdkMsRUFBQTI2RCxRQUFBMzZELElBQUF3VCxXQUE0QixPQUFBeFQsR0FBd0csT0FBeEYwa0QsR0FBQWhWLEVBQUE1cEMsRUFBQXF1RCxpQkFBQXlHLElBQUEsR0FBK0I5MEQsRUFBQXF1RCxjQUFBemtCLEVBQWtCNXBDLEVBQUF5MEQsYUFBQTEyRCxFQUFBb0ksT0FBQW5HLEVBQUFrd0QsVUFBQXRtQixHQUF1QyxDQUFBQSxFQUFBem5DLElBQWEsT0FBQW5DLEVBQUFxdUQsY0FBQWxzRCxHQUEwQkEsRUFBQXBFLEVBQUFvSSxLQUFTLElBQUEyaUMsRUFBQTlvQyxFQUFBeTBELFdBQW9HLEdBQWpGN3FCLEVBQUE1cEMsRUFBQWt3RCxVQUFjLE9BQUFwbkIsR0FBQSxPQUFBM21DLE1BQUF1TCxLQUFBLE1BQUF2TCxFQUFBMm1DLEVBQUFwN0IsTUFBQXZMLEVBQUEsT0FBQUEsSUFBQXVMLEtBQUEsS0FBbUUsT0FBQXZMLEVBQUEsQ0FBYSxJQUFBbkUsRUFBQTlELEVBQUEsS0FBQWtDLEVBQUErRixFQUFBK21DLEdBQUEsRUFBc0IsR0FBRyxJQUFBaG5DLEVBQUE5RixFQUFBd3lELGVBQ3JlMXNELEVBQUFxeEQsSUFBQXJxQixPQUFBLEVBQUFsckMsRUFBQThxQyxFQUFBNXVDLEVBQUEwdkMsR0FBQTFuQyxFQUFBeXhELFFBQUF6eEQsSUFBQTBuQyxFQUFBeHRDLEVBQUEyNEQsZUFBQWgxRCxFQUFBM0QsRUFBQTQ0RCxXQUFBajFELEVBQUE2cEMsRUFBQXh0QyxFQUFBeTRELFFBQXNGL3JCLEVBQUExc0MsRUFBSUEsSUFBQXNSLFdBQVMsT0FBQXRSLE9BQUErRixHQUF1QittQyxJQUFBbHJDLEVBQUE4cUMsRUFBQTV1QyxFQUFBMHZDLEdBQWFnVixHQUFBaFYsRUFBQTVwQyxFQUFBcXVELGlCQUFBeUcsSUFBQSxHQUErQjkwRCxFQUFBcXVELGNBQUF6a0IsRUFBa0I1cEMsRUFBQXkwRCxXQUFBejJELEVBQWVnQyxFQUFBa3dELFVBQUFoMkQsRUFBYzZELEVBQUFnM0QsYUFBQWgxRCxFQUFpQmhDLEVBQUFpM0QsV0FBQXByQixFQUFlLE9BQUE1cEMsRUFBQXF1RCxjQUFBdHdELEVBQUFxcUIsVUFDclAsU0FBQTZzQyxHQUFBbDFELEVBQUFDLEVBQUFqQyxFQUFBb0UsR0FBME4sT0FBck1wQyxFQUFBLENBQUcwUixJQUFBMVIsRUFBQTRDLE9BQUEzQyxFQUFBazFELFFBQUFuM0QsRUFBQW8zRCxLQUFBaHpELEVBQUF1TCxLQUFBLE1BQTJDLE9BQUFrbUQsT0FBQSxDQUFlcEYsV0FBQSxPQUFnQkEsV0FBQXp1RCxFQUFBMk4sS0FBQTNOLEVBQUEsUUFBQUMsRUFBQTR6RCxHQUFBcEYsWUFBQW9GLEdBQUFwRixXQUFBenVELEVBQUEyTixLQUFBM04sR0FBQWhDLEVBQUFpQyxFQUFBME4sS0FBQTFOLEVBQUEwTixLQUFBM04sSUFBQTJOLEtBQUEzUCxFQUFBNjFELEdBQUFwRixXQUFBenVELEdBQXdIQSxFQUFTLFNBQUFxMUQsR0FBQXIxRCxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQXFCLElBQUFqSSxFQUFBczZELEtBQVdYLElBQUE5ekQsRUFBTTdGLEVBQUFtMEQsY0FBQTRHLEdBQUFqMUQsRUFBQWpDLE9BQUEsV0FBQW9FLEVBQUEsS0FBQUEsR0FDelEsU0FBQWt6RCxHQUFBdDFELEVBQUFDLEVBQUFqQyxFQUFBb0UsR0FBcUIsSUFBQWpJLEVBQUF3NkQsS0FBV3Z5RCxPQUFBLElBQUFBLEVBQUEsS0FBQUEsRUFBb0IsSUFBQXluQyxPQUFBLEVBQWEsVUFBQStCLEdBQUEsQ0FBYSxJQUFBN0MsRUFBQTZDLEdBQUEwaUIsY0FBa0MsR0FBWnprQixFQUFBZCxFQUFBb3NCLFFBQVksT0FBQS95RCxHQUFBK3hELEdBQUEveEQsRUFBQTJtQyxFQUFBcXNCLE1BQXdDLFlBQWJGLEdBQUFuQyxHQUFBLzBELEVBQUE2ckMsRUFBQXpuQyxHQUFxQjB4RCxJQUFBOXpELEVBQU03RixFQUFBbTBELGNBQUE0RyxHQUFBajFELEVBQUFqQyxFQUFBNnJDLEVBQUF6bkMsR0FBNEIsU0FBQW16RCxHQUFBdjFELEVBQUFDLEdBQWlCLHlCQUFBQSxHQUFBRCxNQUFBQyxFQUFBRCxHQUFBLFdBQXNEQyxFQUFBLFFBQVMsTUFBQUEsR0FBQUQsTUFBQUMsRUFBQWtqQyxRQUFBbmpDLEVBQUEsV0FBNERDLEVBQUFrakMsUUFBQSxZQUE1RCxFQUE0RSxTQUFBcXlCLE1BQzlWLFNBQUFDLEdBQUF6MUQsRUFBQUMsRUFBQWpDLEdBQW1CLEdBQUFpMkQsSUFBQTNxQixFQUFBLE9BQXNCLElBQUFsbkMsRUFBQXBDLEVBQUE0K0MsVUFBa0IsR0FBQTUrQyxJQUFBeXpELElBQUEsT0FBQXJ4RCxPQUFBcXhELEdBQUEsR0FBQU0sSUFBQSxFQUFBL3pELEVBQUEsQ0FBd0M2dUQsZUFBQTJFLEdBQUFzQixPQUFBOTJELEVBQUFnM0QsYUFBQSxLQUFBQyxXQUFBLEtBQUF0bkQsS0FBQSxNQUF1RSxPQUFBcW1ELFFBQUEsSUFBQTlCLFVBQUEsS0FBQWwwRCxFQUFBZzJELEdBQUFqNkQsSUFBQWtHLElBQUErekQsR0FBQWg2RCxJQUFBaUcsRUFBQUQsT0FBNEQsQ0FBSyxJQUFBQyxFQUFBakMsRUFBUSxPQUFBaUMsRUFBQTBOLE1BQWMxTixJQUFBME4sS0FBVTFOLEVBQUEwTixLQUFBM04sTUFBUyxDQUFLMHdELEtBQUssSUFBQXYyRCxFQUFBbTJELEtBQXFCem1CLEVBQUEsQ0FBT2dsQixlQUFqQjEwRCxFQUFBcTJELEdBQUFyMkQsRUFBQTZGLEdBQWlCODBELE9BQUE5MkQsRUFBQWczRCxhQUFBLEtBQUFDLFdBQUEsS0FBQXRuRCxLQUFBLE1BQXNFbzdCLEVBQUE5b0MsRUFBQW1HLEtBQVUsVUFBQTJpQyxFQUFBYyxFQUFBbDhCLEtBQUFrOEIsTUFBcUIsQ0FBSyxJQUFBNXJDLEVBQUE4cUMsRUFBQXA3QixLQUFhLE9BQUExUCxJQUFBNHJDLEVBQUFsOEIsS0FBQTFQLEdBQXFCOHFDLEVBQUFwN0IsS0FBQWs4QixFQUFrQixHQUFUNXBDLEVBQUFtRyxLQUFBeWpDLEVBQVMsSUFBQTdwQyxFQUFBNnVELGlCQUFBLE9BQ3hkenNELEdBQUEsSUFBQUEsRUFBQXlzRCxpQkFBQSxRQUFBenNELEVBQUFuQyxFQUFBKzBELGNBQUEsSUFBMEQsSUFBQTM0RCxFQUFBNEQsRUFBQWcxRCxXQUFBOXJCLEVBQUEvbUMsRUFBQS9GLEVBQUEyQixHQUE0RCxHQUFoQzZyQyxFQUFBbXJCLGFBQUE1eUQsRUFBaUJ5bkMsRUFBQW9yQixXQUFBOXJCLEVBQWUwVixHQUFBMVYsRUFBQTlzQyxHQUFBLE9BQWtCLE1BQUE4RixJQUFtQnl1RCxHQUFBNXdELEVBQUE3RixJQUMzSixJQUFBbzZELEdBQUEsQ0FBUW1CLFlBQUFucUIsR0FBQXlDLFlBQUFrbUIsR0FBQWptQixXQUFBaW1CLEdBQUFobUIsVUFBQWdtQixHQUFBL2xCLG9CQUFBK2xCLEdBQUE3bEIsZ0JBQUE2bEIsR0FBQTVsQixRQUFBNGxCLEdBQUEzbEIsV0FBQTJsQixHQUFBMWxCLE9BQUEwbEIsR0FBQXpsQixTQUFBeWxCLEdBQUE5bEIsY0FBQThsQixJQUFrS0csR0FBQSxDQUFLcUIsWUFBQW5xQixHQUFBeUMsWUFBQSxTQUFBaHVDLEVBQUFDLEdBQWlGLE9BQXpDdzBELEtBQUFuRyxjQUFBLENBQUF0dUQsT0FBQSxJQUFBQyxFQUFBLEtBQUFBLEdBQXlDRCxHQUFTaXVDLFdBQUExQyxHQUFBMkMsVUFBQSxTQUFBbHVDLEVBQUFDLEdBQXNDLE9BQUFvMUQsR0FBQSxJQUFBL0IsR0FBQUQsR0FBQXJ6RCxFQUFBQyxJQUF5Qmt1QyxvQkFBQSxTQUFBbnVDLEVBQUFDLEVBQUFqQyxHQUErRSxPQUExQ0EsRUFBQSxNQUFBQSxJQUFBOEIsT0FBQSxDQUFBRSxJQUFBLEtBQTBDcTFELEdBQUEsRUFBQXBDLEdBQUFHLEdBQUFtQyxHQUFBenlELEtBQUEsS0FBQTdDLEVBQUFELEdBQUFoQyxJQUF1Q3F3QyxnQkFBQSxTQUFBcnVDLEVBQUFDLEdBQStCLE9BQUFvMUQsR0FBQSxFQUFBcEMsR0FBQUcsR0FBQXB6RCxFQUFBQyxJQUM3ZHF1QyxRQUFBLFNBQUF0dUMsRUFBQUMsR0FBc0IsSUFBQWpDLEVBQUF5MkQsS0FBMkQsT0FBaER4MEQsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLEVBQW9CRCxNQUFNaEMsRUFBQXN3RCxjQUFBLENBQUF0dUQsRUFBQUMsR0FBc0JELEdBQVN1dUMsV0FBQSxTQUFBdnVDLEVBQUFDLEVBQUFqQyxHQUE0QixJQUFBb0UsRUFBQXF5RCxLQUE2SixPQUFsSngwRCxPQUFBLElBQUFqQyxJQUFBaUMsS0FBb0JtQyxFQUFBa3NELGNBQUFsc0QsRUFBQSt0RCxVQUFBbHdELEVBQThGRCxHQUFoRUEsRUFBQW9DLEVBQUEvQyxNQUFBLENBQVcrRyxLQUFBLEtBQUFpaUIsU0FBQSxLQUFBMnNDLGFBQUFoMUQsRUFBQWkxRCxXQUFBaDFELElBQXFEb29CLFNBQUFvdEMsR0FBQTN5RCxLQUFBLEtBQUEyd0QsR0FBQXp6RCxHQUFnQyxDQUFBb0MsRUFBQWtzRCxjQUFBdHVELElBQTBCd3VDLE9BQUEsU0FBQXh1QyxHQUE2QyxPQUFkQSxFQUFBLENBQUdtakMsUUFBQW5qQyxHQUFkeTBELEtBQXlCbkcsY0FBQXR1RCxHQUF5Qnl1QyxTQUFBLFNBQUF6dUMsR0FBc0IsSUFBQUMsRUFBQXcwRCxLQUMzVixNQURzVyxtQkFBQXowRCxXQUErQkMsRUFBQXF1RCxjQUFBcnVELEVBQUFrd0QsVUFBQW53RCxFQUNyYUEsR0FEbWNBLEVBQUFDLEVBQUFaLE1BQUEsQ0FBVytHLEtBQUEsS0FBQWlpQixTQUFBLEtBQUEyc0MsYUFBQUosR0FDNWRLLFdBQUFqMUQsSUFBY3FvQixTQUFBb3RDLEdBQUEzeUQsS0FBQSxLQUFBMndELEdBQUF6ekQsR0FBZ0MsQ0FBQUMsRUFBQXF1RCxjQUFBdHVELElBQTBCb3VDLGNBQUFvbkIsSUFBa0JsQixHQUFBLENBQUtvQixZQUFBbnFCLEdBQUF5QyxZQUFBLFNBQUFodUMsRUFBQUMsR0FBd0MsSUFBQWpDLEVBQUEyMkQsS0FBVzEwRCxPQUFBLElBQUFBLEVBQUEsS0FBQUEsRUFBb0IsSUFBQW1DLEVBQUFwRSxFQUFBc3dELGNBQXNCLGNBQUFsc0QsR0FBQSxPQUFBbkMsR0FBQWswRCxHQUFBbDBELEVBQUFtQyxFQUFBLElBQUFBLEVBQUEsSUFBOENwRSxFQUFBc3dELGNBQUEsQ0FBQXR1RCxFQUFBQyxHQUFzQkQsSUFBU2l1QyxXQUFBMUMsR0FBQTJDLFVBQUEsU0FBQWx1QyxFQUFBQyxHQUFzQyxPQUFBcTFELEdBQUEsSUFBQWhDLEdBQUFELEdBQUFyekQsRUFBQUMsSUFBeUJrdUMsb0JBQUEsU0FBQW51QyxFQUFBQyxFQUFBakMsR0FBK0UsT0FBMUNBLEVBQUEsTUFBQUEsSUFBQThCLE9BQUEsQ0FBQUUsSUFBQSxLQUEwQ3MxRCxHQUFBLEVBQUFyQyxHQUFBRyxHQUFBbUMsR0FBQXp5RCxLQUFBLEtBQUE3QyxFQUFBRCxHQUFBaEMsSUFBdUNxd0MsZ0JBQUEsU0FBQXJ1QyxFQUFBQyxHQUErQixPQUFBcTFELEdBQUEsRUFBQXJDLEdBQUFHLEdBQUFwekQsRUFBQUMsSUFDN2RxdUMsUUFBQSxTQUFBdHVDLEVBQUFDLEdBQXNCLElBQUFqQyxFQUFBMjJELEtBQVcxMEQsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLEVBQW9CLElBQUFtQyxFQUFBcEUsRUFBQXN3RCxjQUFzQixjQUFBbHNELEdBQUEsT0FBQW5DLEdBQUFrMEQsR0FBQWwwRCxFQUFBbUMsRUFBQSxJQUFBQSxFQUFBLElBQThDcEMsTUFBTWhDLEVBQUFzd0QsY0FBQSxDQUFBdHVELEVBQUFDLEdBQXNCRCxJQUFTdXVDLFdBQUFzbUIsR0FBQXJtQixPQUFBLFdBQWlDLE9BQUFtbUIsS0FBQXJHLGVBQTBCN2YsU0FBQSxTQUFBenVDLEdBQXNCLE9BQUE2MEQsR0FBQUQsS0FBZ0J4bUIsY0FBQW9uQixJQUFrQkcsR0FBQSxLQUFBQyxHQUFBLEtBQUFDLElBQUEsRUFDalIsU0FBQUMsR0FBQTkxRCxFQUFBQyxHQUFpQixJQUFBakMsRUFBQWt0QyxHQUFBLGVBQXVCbHRDLEVBQUFtd0QsWUFBQSxVQUF3Qm53RCxFQUFBMkIsS0FBQSxVQUFpQjNCLEVBQUEyekMsVUFBQTF4QyxFQUFjakMsRUFBQXEwQyxPQUFBcnlDLEVBQVdoQyxFQUFBaWhELFVBQUEsRUFBYyxPQUFBai9DLEVBQUF5dUQsWUFBQXp1RCxFQUFBeXVELFdBQUFFLFdBQUEzd0QsRUFBQWdDLEVBQUF5dUQsV0FBQXp3RCxHQUFBZ0MsRUFBQTB1RCxZQUFBMXVELEVBQUF5dUQsV0FBQXp3RCxFQUE0RixTQUFBKzNELEdBQUEvMUQsRUFBQUMsR0FBaUIsT0FBQUQsRUFBQTBSLEtBQWMsV0FBQTFULEVBQUFnQyxFQUFBTCxLQUF3RixlQUFwRU0sRUFBQSxJQUFBQSxFQUFBNE4sVUFBQTdQLEVBQUFvTCxnQkFBQW5KLEVBQUEyTyxTQUFBeEYsY0FBQSxLQUFBbkosS0FBb0VELEVBQUEyeEMsVUFBQTF4QyxHQUFBLEdBQXNDLHNCQUFBQSxFQUFBLEtBQUFELEVBQUFvdUQsY0FBQSxJQUFBbnVELEVBQUE0TixTQUFBLEtBQUE1TixLQUFBRCxFQUFBMnhDLFVBQUExeEMsR0FBQSxHQUEwRixRQUFpQixrQkFDNWQsU0FBQSsxRCxHQUFBaDJELEdBQWUsR0FBQTYxRCxHQUFBLENBQU8sSUFBQTUxRCxFQUFBMjFELEdBQVMsR0FBQTMxRCxFQUFBLENBQU0sSUFBQWpDLEVBQUFpQyxFQUFRLElBQUE4MUQsR0FBQS8xRCxFQUFBQyxHQUFBLENBQXFCLEtBQVJBLEVBQUEwc0QsR0FBQTN1RCxNQUFRKzNELEdBQUEvMUQsRUFBQUMsR0FBMkMsT0FBMUJELEVBQUFpL0MsV0FBQSxFQUFlNFcsSUFBQSxPQUFNRixHQUFBMzFELEdBQVk4MUQsR0FBQUgsR0FBQTMzRCxHQUFTMjNELEdBQUEzMUQsRUFBSzQxRCxHQUFBaEosR0FBQTNzRCxRQUFTRCxFQUFBaS9DLFdBQUEsRUFBQTRXLElBQUEsRUFBQUYsR0FBQTMxRCxHQUFnQyxTQUFBaTJELEdBQUFqMkQsR0FBZSxJQUFBQSxJQUFBcXlDLE9BQWUsT0FBQXJ5QyxHQUFBLElBQUFBLEVBQUEwUixLQUFBLElBQUExUixFQUFBMFIsS0FBQSxLQUFBMVIsRUFBQTBSLEtBQTJDMVIsSUFBQXF5QyxPQUFZc2pCLEdBQUEzMUQsRUFBSyxTQUFBazJELEdBQUFsMkQsR0FBZSxHQUFBQSxJQUFBMjFELEdBQUEsU0FBbUIsSUFBQUUsR0FBQSxPQUFBSSxHQUFBajJELEdBQUE2MUQsSUFBQSxLQUE2QixJQUFBNTFELEVBQUFELEVBQUFMLEtBQWEsT0FBQUssRUFBQTBSLEtBQUEsU0FBQXpSLEdBQUEsU0FBQUEsSUFBQWtzRCxHQUFBbHNELEVBQUFELEVBQUF3dUQsZUFBQSxJQUFBdnVELEVBQUEyMUQsR0FBc0UzMUQsR0FBRTYxRCxHQUFBOTFELEVBQUFDLEtBQUEwc0QsR0FBQTFzRCxHQUFrRCxPQUFqQ2cyRCxHQUFBajJELEdBQU00MUQsR0FBQUQsR0FBQWhKLEdBQUEzc0QsRUFBQTJ4QyxXQUFBLE1BQTJCLEVBQVMsU0FBQXdrQixLQUFjUCxHQUFBRCxHQUFBLEtBQVdFLElBQUEsRUFDN2UsSUFBQU8sR0FBQTNkLEdBQUFwSixrQkFBQTBsQixJQUFBLEVBQWtDLFNBQUE3b0IsR0FBQWxzQyxFQUFBQyxFQUFBakMsRUFBQW9FLEdBQW9CbkMsRUFBQXdCLE1BQUEsT0FBQXpCLEVBQUFxeUQsR0FBQXB5RCxFQUFBLEtBQUFqQyxFQUFBb0UsR0FBQWd3RCxHQUFBbnlELEVBQUFELEVBQUF5QixNQUFBekQsRUFBQW9FLEdBQWtELFNBQUFpMEQsR0FBQXIyRCxFQUFBQyxFQUFBakMsRUFBQW9FLEVBQUFqSSxHQUF1QjZELElBQUEwdkMsT0FBVyxJQUFBN0QsRUFBQTVwQyxFQUFBbXJDLElBQXNDLE9BQTFCa3JCLEdBQUFyMkQsRUFBQTlGLEdBQVFpSSxFQUFBZ3lELEdBQUFwMEQsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBeW5DLEVBQUExdkMsR0FBa0IsT0FBQTZGLEdBQUErMEQsSUFBMEg5MEQsRUFBQWcvQyxXQUFBLEVBQWUvUyxHQUFBbHNDLEVBQUFDLEVBQUFtQyxFQUFBakksR0FBVzhGLEVBQUF3QixRQUFwSnhCLEVBQUFzdUQsWUFBQXZ1RCxFQUFBdXVELFlBQUF0dUQsRUFBQWcvQyxZQUFBLElBQUFqL0MsRUFBQTZ1RCxnQkFBQTEwRCxJQUFBNkYsRUFBQTZ1RCxlQUFBLEdBQUEwSCxHQUFBdjJELEVBQUFDLEVBQUE5RixJQUNoTCxTQUFBcThELEdBQUF4MkQsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBakksRUFBQTB2QyxHQUF5QixVQUFBN3BDLEVBQUEsQ0FBYSxJQUFBK29DLEVBQUEvcUMsRUFBQTJCLEtBQWEseUJBQUFvcEMsR0FBQStsQixHQUFBL2xCLFNBQUEsSUFBQUEsRUFBQXlDLGNBQUEsT0FBQXh0QyxFQUFBc1UsY0FBQSxJQUFBdFUsRUFBQXd0QyxlQUE4SXhyQyxFQUFBZ3ZELEdBQUFoeEQsRUFBQTJCLEtBQUEsS0FBQXlDLEVBQUEsS0FBQW5DLEVBQUFyRixLQUFBaXZDLElBQWtDdUIsSUFBQW5yQyxFQUFBbXJDLElBQVlwckMsRUFBQXF5QyxPQUFBcHlDLEVBQVdBLEVBQUF3QixNQUFBekIsSUFBdk1DLEVBQUF5UixJQUFBLEdBQUF6UixFQUFBTixLQUFBb3BDLEVBQUEwdEIsR0FBQXoyRCxFQUFBQyxFQUFBOG9DLEVBQUEzbUMsRUFBQWpJLEVBQUEwdkMsSUFBa08sT0FBVmQsRUFBQS9vQyxFQUFBeUIsTUFBVXRILEVBQUEwdkMsSUFBQTF2QyxFQUFBNHVDLEVBQUF5bEIsZUFBQXh3RCxFQUFBLFFBQUFBLElBQUFzVSxTQUFBdFUsRUFBQStnRCxJQUFBNWtELEVBQUFpSSxJQUFBcEMsRUFBQW9yQyxNQUFBbnJDLEVBQUFtckMsS0FBQW1yQixHQUFBdjJELEVBQUFDLEVBQUE0cEMsSUFBK0Y1cEMsRUFBQWcvQyxXQUFBLEdBQWVqL0MsRUFBQSt1RCxHQUFBaG1CLEVBQUEzbUMsSUFBWWdwQyxJQUFBbnJDLEVBQUFtckMsSUFBWXByQyxFQUFBcXlDLE9BQUFweUMsRUFBV0EsRUFBQXdCLE1BQUF6QixHQUN0YSxTQUFBeTJELEdBQUF6MkQsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBakksRUFBQTB2QyxHQUF5QixjQUFBN3BDLEdBQUErK0MsR0FBQS8rQyxFQUFBd3VELGNBQUFwc0QsSUFBQXBDLEVBQUFvckMsTUFBQW5yQyxFQUFBbXJDLE1BQUEycEIsSUFBQSxFQUFBNTZELEVBQUEwdkMsR0FBQTBzQixHQUFBdjJELEVBQUFDLEVBQUE0cEMsR0FBQTZzQixHQUFBMTJELEVBQUFDLEVBQUFqQyxFQUFBb0UsRUFBQXluQyxHQUEyRixTQUFBOHNCLEdBQUEzMkQsRUFBQUMsR0FBaUIsSUFBQWpDLEVBQUFpQyxFQUFBbXJDLEtBQVksT0FBQXByQyxHQUFBLE9BQUFoQyxHQUFBLE9BQUFnQyxLQUFBb3JDLE1BQUFwdEMsS0FBQWlDLEVBQUFnL0MsV0FBQSxLQUE0RCxTQUFBeVgsR0FBQTEyRCxFQUFBQyxFQUFBakMsRUFBQW9FLEVBQUFqSSxHQUF1QixJQUFBMHZDLEVBQUFvQixHQUFBanRDLEdBQUFpdkQsR0FBQW5pQixHQUFBM0gsUUFBNEQsT0FBcEMwRyxFQUFBcWpCLEdBQUFqdEQsRUFBQTRwQyxHQUFVeXNCLEdBQUFyMkQsRUFBQTlGLEdBQVE2RCxFQUFBbzJELEdBQUFwMEQsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBeW5DLEVBQUExdkMsR0FBa0IsT0FBQTZGLEdBQUErMEQsSUFBMEg5MEQsRUFBQWcvQyxXQUFBLEVBQWUvUyxHQUFBbHNDLEVBQUFDLEVBQUFqQyxFQUFBN0QsR0FBVzhGLEVBQUF3QixRQUFwSnhCLEVBQUFzdUQsWUFBQXZ1RCxFQUFBdXVELFlBQUF0dUQsRUFBQWcvQyxZQUFBLElBQUFqL0MsRUFBQTZ1RCxnQkFBQTEwRCxJQUFBNkYsRUFBQTZ1RCxlQUFBLEdBQUEwSCxHQUFBdjJELEVBQUFDLEVBQUE5RixJQUNoUyxTQUFBeThELEdBQUE1MkQsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBakksR0FBdUIsR0FBQTh3QyxHQUFBanRDLEdBQUEsQ0FBUyxJQUFBNnJDLEdBQUEsRUFBUytqQixHQUFBM3RELFFBQU00cEMsR0FBQSxFQUFrQixHQUFSeXNCLEdBQUFyMkQsRUFBQTlGLEdBQVEsT0FBQThGLEVBQUEweEMsVUFBQSxPQUFBM3hDLE1BQUE0K0MsVUFBQSxLQUFBMytDLEVBQUEyK0MsVUFBQSxLQUFBMytDLEVBQUFnL0MsV0FBQSxHQUFBZ1MsR0FBQWh4RCxFQUFBakMsRUFBQW9FLEdBQUFrdkQsR0FBQXJ4RCxFQUFBakMsRUFBQW9FLEVBQUFqSSxHQUFBaUksR0FBQSxPQUFnSCxVQUFBcEMsRUFBQSxDQUFrQixJQUFBK29DLEVBQUE5b0MsRUFBQTB4QyxVQUFBMXpDLEVBQUFnQyxFQUFBdXVELGNBQW9DemxCLEVBQUF0ZSxNQUFBeHNCLEVBQVUsSUFBQTVCLEVBQUEwc0MsRUFBQXJrQyxRQUFBeWtDLEVBQUFuckMsRUFBQWt6RCxZQUFnQyxpQkFBQS9uQixHQUFBLE9BQUFBLElBQUFvQyxHQUFBcEMsS0FBQStqQixHQUFBanRELEVBQUFrcEMsRUFBQThCLEdBQUFqdEMsR0FBQWl2RCxHQUFBbmlCLEdBQUEzSCxTQUFxRSxJQUFBaGhDLEVBQUFuRSxFQUFBd3pELHlCQUFBbDBELEVBQUEsbUJBQUE2RSxHQUFBLG1CQUFBNG1DLEVBQUEwb0Isd0JBQXdHbjBELEdBQUEsbUJBQUF5ckMsRUFBQXNvQixrQ0FDOWIsbUJBQUF0b0IsRUFBQXFvQiw0QkFBQW56RCxJQUFBbUUsR0FBQS9GLElBQUE4c0MsSUFBQWdvQixHQUFBbHhELEVBQUE4b0MsRUFBQTNtQyxFQUFBK21DLEdBQTZFMHRCLElBQUEsRUFBTSxJQUFBbDhELEVBQUFzRixFQUFBcXVELGNBQXNCanlELEVBQUEwc0MsRUFBQXpxQixNQUFBM2pCLEVBQVksSUFBQWd2QyxFQUFBMXBDLEVBQUFzdUQsWUFBb0IsT0FBQTVrQixJQUFBNG5CLEdBQUF0eEQsRUFBQTBwQyxFQUFBdm5DLEVBQUEybUMsRUFBQTV1QyxHQUFBa0MsRUFBQTRELEVBQUFxdUQsZUFBNENyd0QsSUFBQW1FLEdBQUF6SCxJQUFBMEIsR0FBQTJ1QyxHQUFBN0gsU0FBQTB6QixJQUFBLG1CQUFBMTBELElBQUErdEQsR0FBQWp3RCxFQUFBakMsRUFBQW1FLEVBQUFDLEdBQUEvRixFQUFBNEQsRUFBQXF1RCxnQkFBQXJ3RCxFQUFBNDRELElBQUE5RixHQUFBOXdELEVBQUFqQyxFQUFBQyxFQUFBbUUsRUFBQXpILEVBQUEwQixFQUFBOHNDLEtBQUE3ckMsR0FBQSxtQkFBQXlyQyxFQUFBMm9CLDJCQUFBLG1CQUFBM29CLEVBQUE0b0IscUJBQUEsbUJBQUE1b0IsRUFBQTRvQixvQkFBQTVvQixFQUFBNG9CLHFCQUFBLG1CQUFBNW9CLEVBQUEyb0IsMkJBQ3JMM29CLEVBQUEyb0IsNkJBQUEsbUJBQUEzb0IsRUFBQTZvQixvQkFBQTN4RCxFQUFBZy9DLFdBQUEsd0JBQUFsVyxFQUFBNm9CLG9CQUFBM3hELEVBQUFnL0MsV0FBQSxHQUFBaC9DLEVBQUF1dUQsY0FBQXBzRCxFQUFBbkMsRUFBQXF1RCxjQUFBanlELEdBQUEwc0MsRUFBQXRlLE1BQUFyb0IsRUFBQTJtQyxFQUFBenFCLE1BQUFqaUIsRUFBQTBzQyxFQUFBcmtDLFFBQUF5a0MsRUFBQS9tQyxFQUFBbkUsSUFBQSxtQkFBQThxQyxFQUFBNm9CLG9CQUFBM3hELEVBQUFnL0MsV0FBQSxHQUFBNzhDLEdBQUEsUUFBZ1MybUMsRUFBQTlvQyxFQUFBMHhDLFVBQUExekMsRUFBQWdDLEVBQUF1dUQsY0FBQXpsQixFQUFBdGUsTUFBQXhxQixFQUFBTixPQUFBTSxFQUFBa3VELFlBQUFsd0QsRUFBQWt0QyxHQUFBbHJDLEVBQUFOLEtBQUExQixHQUFBNUIsRUFBQTBzQyxFQUFBcmtDLFFBQUEsaUJBQUF5a0MsRUFBQW5yQyxFQUFBa3pELGNBQUEsT0FBQS9uQixJQUFBb0MsR0FBQXBDLEtBQUErakIsR0FBQWp0RCxFQUFBa3BDLEVBQUE4QixHQUFBanRDLEdBQUFpdkQsR0FBQW5pQixHQUFBM0gsVUFBQTdsQyxFQUFBLG1CQUFBNkUsRUFBQW5FLEVBQUF3ekQsMkJBQ2hTLG1CQUFBem9CLEVBQUEwb0IsMEJBQUEsbUJBQUExb0IsRUFBQXNvQixrQ0FBQSxtQkFBQXRvQixFQUFBcW9CLDRCQUFBbnpELElBQUFtRSxHQUFBL0YsSUFBQThzQyxJQUFBZ29CLEdBQUFseEQsRUFBQThvQyxFQUFBM21DLEVBQUErbUMsR0FBQTB0QixJQUFBLEVBQUF4NkQsRUFBQTRELEVBQUFxdUQsY0FBQTN6RCxFQUFBb3VDLEVBQUF6cUIsTUFBQWppQixFQUFBLFFBQUFzdEMsRUFBQTFwQyxFQUFBc3VELGVBQUFnRCxHQUFBdHhELEVBQUEwcEMsRUFBQXZuQyxFQUFBMm1DLEVBQUE1dUMsR0FBQVEsRUFBQXNGLEVBQUFxdUQsZUFBQXJ3RCxJQUFBbUUsR0FBQS9GLElBQUExQixHQUFBcXdDLEdBQUE3SCxTQUFBMHpCLElBQUEsbUJBQUExMEQsSUFBQSt0RCxHQUFBandELEVBQUFqQyxFQUFBbUUsRUFBQUMsR0FBQXpILEVBQUFzRixFQUFBcXVELGdCQUFBbnNELEVBQUEwMEQsSUFBQTlGLEdBQUE5d0QsRUFBQWpDLEVBQUFDLEVBQUFtRSxFQUFBL0YsRUFBQTFCLEVBQUF3dUMsS0FBQTdyQyxHQUFBLG1CQUFBeXJDLEVBQUErdEIsNEJBQUEsbUJBQUEvdEIsRUFBQWd1QixzQkFBQSxtQkFDQWh1QixFQUFBZ3VCLHFCQUFBaHVCLEVBQUFndUIsb0JBQUEzMEQsRUFBQXpILEVBQUF3dUMsR0FBQSxtQkFBQUosRUFBQSt0Qiw0QkFBQS90QixFQUFBK3RCLDJCQUFBMTBELEVBQUF6SCxFQUFBd3VDLElBQUEsbUJBQUFKLEVBQUFpdUIscUJBQUEvMkQsRUFBQWcvQyxXQUFBLHNCQUFBbFcsRUFBQTBvQiwwQkFBQXh4RCxFQUFBZy9DLFdBQUEsMEJBQUFsVyxFQUFBaXVCLG9CQUFBLzRELElBQUErQixFQUFBd3VELGVBQUFueUQsSUFBQTJELEVBQUFzdUQsZ0JBQUFydUQsRUFBQWcvQyxXQUFBLHNCQUFBbFcsRUFBQTBvQix5QkFBQXh6RCxJQUFBK0IsRUFBQXd1RCxlQUFBbnlELElBQUEyRCxFQUFBc3VELGdCQUFBcnVELEVBQUFnL0MsV0FBQSxLQUFBaC9DLEVBQUF1dUQsY0FBQXBzRCxFQUFBbkMsRUFBQXF1RCxjQUNBM3pELEdBQUFvdUMsRUFBQXRlLE1BQUFyb0IsRUFBQTJtQyxFQUFBenFCLE1BQUEzakIsRUFBQW91QyxFQUFBcmtDLFFBQUF5a0MsRUFBQS9tQyxFQUFBRCxJQUFBLG1CQUFBNG1DLEVBQUFpdUIsb0JBQUEvNEQsSUFBQStCLEVBQUF3dUQsZUFBQW55RCxJQUFBMkQsRUFBQXN1RCxnQkFBQXJ1RCxFQUFBZy9DLFdBQUEsc0JBQUFsVyxFQUFBMG9CLHlCQUFBeHpELElBQUErQixFQUFBd3VELGVBQUFueUQsSUFBQTJELEVBQUFzdUQsZ0JBQUFydUQsRUFBQWcvQyxXQUFBLEtBQUE3OEMsR0FBQSxHQUFnUSxPQUFBNjBELEdBQUFqM0QsRUFBQUMsRUFBQWpDLEVBQUFvRSxFQUFBeW5DLEVBQUExdkMsR0FDaFEsU0FBQTg4RCxHQUFBajNELEVBQUFDLEVBQUFqQyxFQUFBb0UsRUFBQWpJLEVBQUEwdkMsR0FBeUI4c0IsR0FBQTMyRCxFQUFBQyxHQUFRLElBQUE4b0MsRUFBQSxPQUFBOW9DLEVBQUFnL0MsV0FBMkIsSUFBQTc4QyxJQUFBMm1DLEVBQUEsT0FBQTV1QyxHQUFBMnpELEdBQUE3dEQsRUFBQWpDLEdBQUEsR0FBQXU0RCxHQUFBdjJELEVBQUFDLEVBQUE0cEMsR0FBeUN6bkMsRUFBQW5DLEVBQUEweEMsVUFBY3lrQixHQUFBanpCLFFBQUFsakMsRUFBYSxJQUFBaEMsRUFBQThxQyxHQUFBLG1CQUFBL3FDLEVBQUFrNUQseUJBQUEsS0FBQTkwRCxFQUFBc3JDLFNBQTBNLE9BQWxJenRDLEVBQUFnL0MsV0FBQSxFQUFlLE9BQUFqL0MsR0FBQStvQyxHQUFBOW9DLEVBQUF3QixNQUFBMndELEdBQUFueUQsRUFBQUQsRUFBQXlCLE1BQUEsS0FBQW9vQyxHQUFBNXBDLEVBQUF3QixNQUFBMndELEdBQUFueUQsRUFBQSxLQUFBaEMsRUFBQTRyQyxJQUFBcUMsR0FBQWxzQyxFQUFBQyxFQUFBaEMsRUFBQTRyQyxHQUE2RTVwQyxFQUFBcXVELGNBQUFsc0QsRUFBQWtjLE1BQXdCbmtCLEdBQUEyekQsR0FBQTd0RCxFQUFBakMsR0FBQSxHQUFjaUMsRUFBQXdCLE1BQWUsU0FBQTAxRCxHQUFBbjNELEdBQWUsSUFBQUMsRUFBQUQsRUFBQTJ4QyxVQUFrQjF4QyxFQUFBbTNELGVBQUEzSixHQUFBenRELEVBQUFDLEVBQUFtM0QsZUFBQW4zRCxFQUFBbTNELGlCQUFBbjNELEVBQUF5RSxTQUFBekUsRUFBQXlFLFNBQUErb0QsR0FBQXp0RCxFQUFBQyxFQUFBeUUsU0FBQSxHQUFtR2d1RCxHQUFBMXlELEVBQUFDLEVBQUFza0QsZUFDN2QsU0FBQThTLEdBQUFyM0QsRUFBQUMsRUFBQWpDLEdBQW1CLElBQUFvRSxFQUFBbkMsRUFBQXJGLEtBQUFULEVBQUE4RixFQUFBbXVELGFBQUF2a0IsRUFBQTVwQyxFQUFBcXVELGNBQWdELFVBQUFydUQsRUFBQWcvQyxXQUFBLENBQXlCcFYsRUFBQSxLQUFPLElBQUFkLEdBQUEsT0FBU2MsRUFBQSxDQUFReXRCLFdBQUEsT0FBQXp0QixJQUFBeXRCLFdBQUEsR0FBbUN2dUIsR0FBQSxFQUFBOW9DLEVBQUFnL0MsWUFBQSxHQUF1QixVQUFBai9DLEVBQUEsR0FBQStvQyxFQUFBLENBQWtCLElBQUE5cUMsRUFBQTlELEVBQUFvOUQsU0FBaUJ2M0QsRUFBQWl2RCxHQUFBLEtBQUE3c0QsRUFBQSxRQUFvQixNQUFBbkMsRUFBQXJGLFFBQUFvRixFQUFBeUIsTUFBQSxPQUFBeEIsRUFBQXF1RCxjQUFBcnVELEVBQUF3QixZQUFBeEIsRUFBQXdCLE9BQXVFVyxFQUFBNnNELEdBQUFoeEQsRUFBQW1FLEVBQUFwRSxFQUFBLE1BQWlCZ0MsRUFBQTZiLFFBQUF6WixHQUFZcEUsRUFBQWdDLEdBQUlxeUMsT0FBQWp3QyxFQUFBaXdDLE9BQUFweUMsT0FBb0JqQyxFQUFBb0UsRUFBQWl3RCxHQUFBcHlELEVBQUEsS0FBQTlGLEVBQUFYLFNBQUF3RSxRQUFpQyxPQUFBZ0MsRUFBQXN1RCxlQUFBcndELEdBQUFtRSxFQUFBcEMsRUFBQXlCLE9BQUFvYSxRQUFBa3RCLEdBQUEvcUMsRUFBQTdELEVBQUFvOUQsU0FBQXA5RCxFQUFBNDBELEdBQUEzc0QsSUFBQWdzRCxjQUFBLE1BQUFudUQsRUFBQXJGLFNBQUFtdUMsRUFBQSxPQUNsWTlvQyxFQUFBcXVELGNBQUFydUQsRUFBQXdCLFlBQUF4QixFQUFBd0IsU0FBQVcsRUFBQVgsUUFBQXRILEVBQUFzSCxNQUFBc25DLElBQUEzbUMsRUFBQWpJLEVBQUEwaEIsUUFBQWt6QyxHQUFBOXdELEVBQUFELEVBQUFDLEVBQUE0d0QsZ0JBQUE3d0QsRUFBQTdELElBQUF5MEQsb0JBQUEsRUFBQTV3RCxFQUFBcTBDLE9BQUFqd0MsRUFBQWl3QyxPQUFBcHlDLEdBQUFqQyxFQUFBb0UsRUFBQWd3RCxHQUFBbnlELEVBQUFtQyxFQUFBWCxNQUFBdEgsRUFBQVgsU0FBQXdFLEtBQUFDLEVBQUErQixFQUFBeUIsTUFBQXNuQyxLQUFBNXVDLEVBQUFvOUQsVUFBQXA5RCxFQUFBODBELEdBQUEsS0FBQTdzRCxFQUFBLFNBQUFYLE1BQUF4RCxFQUFBLE1BQUFnQyxFQUFBckYsUUFBQVQsRUFBQXNILE1BQUEsT0FBQXhCLEVBQUFxdUQsY0FBQXJ1RCxFQUFBd0IsWUFBQXhCLEVBQUF3QixRQUFBVyxFQUFBakksRUFBQTBoQixRQUFBb3pDLEdBQUFsbUIsRUFBQTNtQyxFQUFBcEUsRUFBQSxPQUFBaWhELFdBQUEsRUFBQWpoRCxFQUFBN0QsSUFBQXkwRCxvQkFBQSxFQUFBNXdELEVBQUFxMEMsT0FBQWp3QyxFQUFBaXdDLE9BQUFweUMsR0FBQW1DLEVBQUFwRSxFQUFBbzBELEdBQUFueUQsRUFBQWhDLEVBQUE5RCxFQUFBWCxTQUFBd0UsSUFBQWlDLEVBQUEweEMsVUFBQTN4QyxFQUFBMnhDLFVBQStkLE9BQTVCMXhDLEVBQUFxdUQsY0FBQXprQixFQUFrQjVwQyxFQUFBd0IsTUFBQXpELEVBQVVvRSxFQUMvZCxTQUFBbTBELEdBQUF2MkQsRUFBQUMsRUFBQWpDLEdBQTJFLEdBQXhELE9BQUFnQyxJQUFBQyxFQUFBb3VELG9CQUFBcnVELEVBQUFxdUQscUJBQXdEcHVELEVBQUEydUQsb0JBQUE1d0QsRUFBQSxZQUFtRixHQUE1QyxPQUFBZ0MsR0FBQUMsRUFBQXdCLFFBQUF6QixFQUFBeUIsT0FBQTZuQyxFQUFBLE9BQTRDLE9BQUFycEMsRUFBQXdCLE1BQUEsQ0FBK0UsSUFBbER6RCxFQUFBK3dELEdBQVYvdUQsRUFBQUMsRUFBQXdCLE1BQVV6QixFQUFBb3VELGFBQUFwdUQsRUFBQTZ1RCxnQkFBd0M1dUQsRUFBQXdCLE1BQUF6RCxFQUFVQSxFQUFBcTBDLE9BQUFweUMsRUFBZSxPQUFBRCxFQUFBNmIsU0FBaUI3YixJQUFBNmIsU0FBQTdkLElBQUE2ZCxRQUFBa3pDLEdBQUEvdUQsSUFBQW91RCxhQUFBcHVELEVBQUE2dUQsaUJBQUF4YyxPQUFBcHlDLEVBQTBFakMsRUFBQTZkLFFBQUEsS0FBZSxPQUFBNWIsRUFBQXdCLE1BQ3RXLFNBQUErMUQsR0FBQXgzRCxFQUFBQyxFQUFBakMsR0FBbUIsSUFBQW9FLEVBQUFuQyxFQUFBNHVELGVBQXVCLFVBQUE3dUQsR0FBQSxHQUFBQSxFQUFBd3VELGdCQUFBdnVELEVBQUFtdUQsY0FBQXBqQixHQUFBN0gsUUFBQTR4QixJQUFBLE9BQXNFLEdBQUEzeUQsRUFBQXBFLEVBQUEsQ0FBYyxPQUFOKzJELElBQUEsRUFBTTkwRCxFQUFBeVIsS0FBYyxPQUFBeWxELEdBQUFsM0QsR0FBYWsyRCxLQUFLLE1BQU0sT0FBQXRELEdBQUE1eUQsR0FBYSxNQUFNLE9BQUFnckMsR0FBQWhyQyxFQUFBTixPQUFBaXVELEdBQUEzdEQsR0FBd0IsTUFBTSxPQUFBeXlELEdBQUF6eUQsSUFBQTB4QyxVQUFBNFMsZUFBdUMsTUFBTSxRQUFBa1QsR0FBQXgzRCxJQUFBdXVELGNBQUF2MEQsT0FBb0MsTUFBTSxrQkFBQWdHLEVBQUFxdUQsY0FBaUUsWUFBOUJsc0QsRUFBQW5DLEVBQUF3QixNQUFBbXRELHNCQUE4QnhzRCxHQUFBcEUsRUFBQXE1RCxHQUFBcjNELEVBQUFDLEVBQUFqQyxHQUE0QyxRQUFaaUMsRUFBQXMyRCxHQUFBdjJELEVBQUFDLEVBQUFqQyxJQUFZaUMsRUFBQTRiLFFBQUEsS0FBZ0MsT0FBQTA2QyxHQUFBdjJELEVBQUFDLEVBQUFqQyxTQUFrQisyRCxJQUFBLEVBQThCLE9BQW5COTBELEVBQUE0dUQsZUFBQSxFQUFtQjV1RCxFQUFBeVIsS0FBYyxPQUFBdFAsRUFDdmZuQyxFQUFBa3VELFlBQWMsT0FBQW51RCxNQUFBNCtDLFVBQUEsS0FBQTMrQyxFQUFBMitDLFVBQUEsS0FBQTMrQyxFQUFBZy9DLFdBQUEsR0FBNkRqL0MsRUFBQUMsRUFBQW11RCxhQUFpQixJQUFBajBELEVBQUEreUQsR0FBQWp0RCxFQUFBNnFDLEdBQUEzSCxTQUFrRSxHQUE1Q216QixHQUFBcjJELEVBQUFqQyxHQUFRN0QsRUFBQWk2RCxHQUFBLEtBQUFuMEQsRUFBQW1DLEVBQUFwQyxFQUFBN0YsRUFBQTZELEdBQXFCaUMsRUFBQWcvQyxXQUFBLEVBQWUsaUJBQUE5a0QsR0FBQSxPQUFBQSxHQUFBLG1CQUFBQSxFQUFBdXpDLGFBQUEsSUFBQXZ6QyxFQUFBc3hDLFNBQUEsQ0FBa0csR0FBYnhyQyxFQUFBeVIsSUFBQSxFQUFROGlELEtBQUt2cEIsR0FBQTdvQyxHQUFBLENBQVMsSUFBQXluQyxHQUFBLEVBQVMrakIsR0FBQTN0RCxRQUFNNHBDLEdBQUEsRUFBVTVwQyxFQUFBcXVELGNBQUEsT0FBQW4wRCxFQUFBbWtCLFlBQUEsSUFBQW5rQixFQUFBbWtCLE1BQUFua0IsRUFBQW1rQixNQUFBLEtBQThELElBQUF5cUIsRUFBQTNtQyxFQUFBb3ZELHlCQUFpQyxtQkFBQXpvQixHQUFBbW5CLEdBQUFqd0QsRUFBQW1DLEVBQUEybUMsRUFBQS9vQyxHQUFtQzdGLEVBQUFxd0MsUUFBQTRsQixHQUFhbndELEVBQUEweEMsVUFBQXgzQyxFQUFjQSxFQUFBazJELG9CQUFBcHdELEVBQXdCcXhELEdBQUFyeEQsRUFBQW1DLEVBQUFwQyxFQUFBaEMsR0FBWWlDLEVBQUFnM0QsR0FBQSxLQUFBaDNELEVBQUFtQyxHQUFBLEVBQUF5bkMsRUFDbmU3ckMsUUFBR2lDLEVBQUF5UixJQUFBLEVBQUF3NkIsR0FBQSxLQUFBanNDLEVBQUE5RixFQUFBNkQsR0FBQWlDLElBQUF3QixNQUFxQyxPQUFBeEIsRUFBUyxRQUF1SixPQUF2SjlGLEVBQUE4RixFQUFBa3VELFlBQXdCLE9BQUFudUQsTUFBQTQrQyxVQUFBLEtBQUEzK0MsRUFBQTIrQyxVQUFBLEtBQUEzK0MsRUFBQWcvQyxXQUFBLEdBQTZEcFYsRUFBQTVwQyxFQUFBbXVELGFBQWlCcHVELEVBbkR2SixTQUFBQSxHQUFlLElBQUFDLEVBQUFELEVBQUE4dEMsUUFBZ0IsT0FBQTl0QyxFQUFBNnRDLFNBQWtCLGNBQUE1dEMsRUFBZ0IsT0FBZSxhQUFBQSxFQUFlLFFBQW9LLE9BQXBLRCxFQUFBNnRDLFFBQUEsR0FBOEI1dEMsR0FBVkEsRUFBQUQsRUFBQTR0QyxVQUFnQnR6QyxLQUFBLFNBQUEyRixHQUFtQixJQUFBRCxFQUFBNnRDLFVBQUE1dEMsSUFBQXN2QyxRQUFBdnZDLEVBQUE2dEMsUUFBQSxFQUFBN3RDLEVBQUE4dEMsUUFBQTd0QyxJQUFxRCxTQUFBQSxHQUFhLElBQUFELEVBQUE2dEMsVUFBQTd0QyxFQUFBNnRDLFFBQUEsRUFBQTd0QyxFQUFBOHRDLFFBQUE3dEMsS0FBMkNELEVBQUE2dEMsU0FBa0IsY0FBQTd0QyxFQUFBOHRDLFFBQXdCLGFBQUE5dEMsRUFBQTh0QyxRQUFvQyxNQUFaOXRDLEVBQUE4dEMsUUFBQTd0QyxFQUFZQSxHQW1EMUx5M0QsQ0FBQXY5RCxHQUFROEYsRUFBQU4sS0FBQUssRUFBUzdGLEVBQUE4RixFQUFBeVIsSUE1RDFHLFNBQUExUixHQUFlLHNCQUFBQSxFQUFBLE9BQUE4dUQsR0FBQTl1RCxHQUFBLElBQTBDLFNBQUFBLEVBQUEsQ0FBc0MsSUFBYkEsSUFBQXlyQyxZQUFhME4sR0FBQSxVQUFvQixHQUFBbjVDLElBQUFxNUMsR0FBQSxVQUFvQixTQTREN0JzZSxDQUFBMzNELEdBQWM2cEMsRUFBQXNCLEdBQUFuckMsRUFBQTZwQyxHQUFTZCxPQUFBLEVBQVM1dUMsR0FBVSxPQUFBNHVDLEVBQUEydEIsR0FBQSxLQUFBejJELEVBQUFELEVBQUE2cEMsRUFBQTdyQyxHQUEwQixNQUFNLE9BQUErcUMsRUFBQTZ0QixHQUFBLEtBQUEzMkQsRUFBQUQsRUFBQTZwQyxFQUFBN3JDLEdBQTBCLE1BQU0sUUFBQStxQyxFQUFBc3RCLEdBQUEsS0FBQXAyRCxFQUFBRCxFQUFBNnBDLEVBQUE3ckMsR0FBMkIsTUFBTSxRQUFBK3FDLEVBQUF5dEIsR0FBQSxLQUFBdjJELEVBQUFELEVBQUFtckMsR0FBQW5yQyxFQUFBTCxLQUFBa3FDLEdBQUF6bkMsRUFBQXBFLEdBQXVDLE1BQU0sUUFBQXNyQyxFQUFBLE1BQUF0cEMsRUFBQSxJQUFzQixPQUFBK29DLEVBQVMsY0FBQTNtQyxFQUFBbkMsRUFBQU4sS0FBQXhGLEVBQUE4RixFQUFBbXVELGFBQUFzSSxHQUFBMTJELEVBQUFDLEVBQUFtQyxFQUFBakksRUFBQThGLEVBQUFrdUQsY0FBQS9yRCxFQUFBakksRUFBQWd4QyxHQUFBL29DLEVBQUFqSSxHQUFBNkQsR0FBbUYsY0FBQW9FLEVBQUFuQyxFQUFBTixLQUFBeEYsRUFBQThGLEVBQUFtdUQsYUFDbGR3SSxHQUFBNTJELEVBQUFDLEVBQUFtQyxFQUFBakksRUFBQThGLEVBQUFrdUQsY0FBQS9yRCxFQUFBakksRUFBQWd4QyxHQUFBL29DLEVBQUFqSSxHQUFBNkQsR0FBMkMsT0FBc1csT0FBdFdtNUQsR0FBQWwzRCxHQUE2QixRQUFoQm1DLEVBQUFuQyxFQUFBc3VELGNBQWdCamxCLEVBQUEsT0FBMkNudkMsRUFBQSxRQUFsQkEsRUFBQThGLEVBQUFxdUQsZUFBa0JuMEQsRUFBQXVzRCxRQUFBLEtBQTBCNkssR0FBQXR4RCxFQUFBbUMsRUFBQW5DLEVBQUFtdUQsYUFBQSxLQUFBcHdELElBQThCb0UsRUFBQW5DLEVBQUFxdUQsY0FBQTVILFdBQTBCdnNELEdBQUFnOEQsS0FBQWwyRCxFQUFBczJELEdBQUF2MkQsRUFBQUMsRUFBQWpDLEtBQStCN0QsRUFBQThGLEVBQUEweEMsV0FBY3gzQyxHQUFBLE9BQUE2RixHQUFBLE9BQUFBLEVBQUF5QixRQUFBdEgsRUFBQXk5RCxXQUFBaEMsR0FBQWhKLEdBQUEzc0QsRUFBQTB4QyxVQUFBNFMsZUFBQW9SLEdBQUExMUQsRUFBQTlGLEVBQUEwN0QsSUFBQSxHQUF5RjE3RCxHQUFBOEYsRUFBQWcvQyxXQUFBLEVBQUFoL0MsRUFBQXdCLE1BQUE0d0QsR0FBQXB5RCxFQUFBLEtBQUFtQyxFQUFBcEUsS0FBQWt1QyxHQUFBbHNDLEVBQUFDLEVBQUFtQyxFQUFBcEUsR0FBQW00RCxNQUE0RGwyRCxJQUFBd0IsT0FBVXhCLEVBQVMsY0FBQTR5RCxHQUFBNXlELEdBQUEsT0FBQUQsR0FBQWcyRCxHQUFBLzFELEdBQUFtQyxFQUFBbkMsRUFBQU4sS0FBQXhGLEVBQUE4RixFQUFBbXVELGFBQUF2a0IsRUFBQSxPQUFBN3BDLElBQUF3dUQsY0FBQSxLQUMxWnpsQixFQUFBNXVDLEVBQUFYLFNBQUEyeUQsR0FBQS9wRCxFQUFBakksR0FBQTR1QyxFQUFBLFlBQUFjLEdBQUFzaUIsR0FBQS9wRCxFQUFBeW5DLEtBQUE1cEMsRUFBQWcvQyxXQUFBLElBQUEwWCxHQUFBMzJELEVBQUFDLEdBQUEsSUFBQWpDLEdBQUEsRUFBQWlDLEVBQUFyRixNQUFBVCxFQUFBKzdCLFFBQUFqMkIsRUFBQTR1RCxlQUFBNXVELEVBQUEydUQsb0JBQUEsRUFBQTN1RCxFQUFBLE9BQUFpc0MsR0FBQWxzQyxFQUFBQyxFQUFBOG9DLEVBQUEvcUMsR0FBQWlDLElBQUF3QixPQUFBeEIsRUFBOEsscUJBQUFELEdBQUFnMkQsR0FBQS8xRCxHQUFBLEtBQW1DLGVBQUFvM0QsR0FBQXIzRCxFQUFBQyxFQUFBakMsR0FBeUIsY0FBQTAwRCxHQUFBenlELElBQUEweEMsVUFBQTRTLGVBQUFuaUQsRUFBQW5DLEVBQUFtdUQsYUFBQSxPQUFBcHVELEVBQUFDLEVBQUF3QixNQUFBMndELEdBQUFueUQsRUFBQSxLQUFBbUMsRUFBQXBFLEdBQUFrdUMsR0FBQWxzQyxFQUFBQyxFQUFBbUMsRUFBQXBFLEdBQUFpQyxFQUFBd0IsTUFBa0gsZUFBQVcsRUFBQW5DLEVBQUFOLEtBQUF4RixFQUFBOEYsRUFBQW11RCxhQUFBaUksR0FBQXIyRCxFQUFBQyxFQUFBbUMsRUFBQWpJLEVBQUE4RixFQUFBa3VELGNBQUEvckQsRUFBQWpJLEVBQUFneEMsR0FBQS9vQyxFQUFBakksR0FBQTZELEdBQW9GLGNBQUFrdUMsR0FBQWxzQyxFQUFBQyxJQUFBbXVELGFBQUFwd0QsR0FBQWlDLEVBQUF3QixNQUE4QyxPQUNuZCxlQUFBeXFDLEdBQUFsc0MsRUFBQUMsSUFBQW11RCxhQUFBNTBELFNBQUF3RSxHQUFBaUMsRUFBQXdCLE1BQXdELFFBQUF6QixFQUFBLENBQWtGLEdBQXZFb0MsRUFBQW5DLEVBQUFOLEtBQUE2dEMsU0FBa0JyekMsRUFBQThGLEVBQUFtdUQsYUFBaUJybEIsRUFBQTlvQyxFQUFBdXVELGNBQTRCaUosR0FBQXgzRCxFQUFWNHBDLEVBQUExdkMsRUFBQUYsT0FBa0IsT0FBQTh1QyxFQUFBLENBQWEsSUFBQTlxQyxFQUFBOHFDLEVBQUE5dUMsTUFBa0gsUUFBcEc0dkMsRUFBQWdWLEdBQUE1Z0QsRUFBQTRyQyxHQUFBLHdCQUFBem5DLEVBQUE4cUMsc0JBQUE5cUMsRUFBQThxQyxzQkFBQWp2QyxFQUFBNHJDLEdBQUEsY0FBOEcsR0FBQWQsRUFBQXZ2QyxXQUFBVyxFQUFBWCxXQUFBd3hDLEdBQUE3SCxRQUFBLENBQXdDbGpDLEVBQUFzMkQsR0FBQXYyRCxFQUFBQyxFQUFBakMsR0FBWSxNQUFBZ0MsUUFBUyxZQUFBL0IsRUFBQWdDLEVBQUF3QixTQUFBeEQsRUFBQW8wQyxPQUFBcHlDLEdBQTBDLE9BQUFoQyxHQUFTLENBQUUsSUFBQTVCLEVBQUE0QixFQUFBb3dELG9CQUE0QixVQUFBaHlELEVBQUEsQ0FBYTBzQyxFQUFBOXFDLEVBQUF3RCxNQUFVLFFBQUEwbkMsRUFBQTlzQyxFQUFBNkosTUFBa0IsT0FBQWlqQyxHQUFTLENBQUUsR0FBQUEsRUFBQXprQyxVQUFBdEMsR0FBQSxJQUNoZSttQyxFQUFBMHVCLGFBQUFodUIsR0FBQSxDQUFvQixJQUFBNXJDLEVBQUF5VCxPQUFBeTNCLEVBQUFvbkIsR0FBQXZ5RCxJQUFBMFQsSUFBQW8vQyxHQUFBSCxHQUFBMXlELEVBQUFrckMsSUFBc0NsckMsRUFBQTR3RCxlQUFBN3dELElBQUFDLEVBQUE0d0QsZUFBQTd3RCxHQUF1RCxRQUFkbXJDLEVBQUFsckMsRUFBQTJnRCxZQUFjelYsRUFBQTBsQixlQUFBN3dELElBQUFtckMsRUFBQTBsQixlQUFBN3dELEdBQW1EbXJDLEVBQUFuckMsRUFBSSxRQUFBbUUsRUFBQWxFLEVBQUFvMEMsT0FBbUIsT0FBQWx3QyxHQUFTLENBQUUsSUFBQTdFLEVBQUE2RSxFQUFBeThDLFVBQWtCLEdBQUF6OEMsRUFBQXlzRCxvQkFBQXpsQixFQUFBaG5DLEVBQUF5c0Qsb0JBQUF6bEIsRUFBQSxPQUFBN3JDLEtBQUFzeEQsb0JBQUF6bEIsSUFBQTdyQyxFQUFBc3hELG9CQUFBemxCLE9BQWdILGFBQUE3ckMsS0FBQXN4RCxvQkFBQXpsQixHQUFrRSxNQUFsRTdyQyxFQUFBc3hELG9CQUFBemxCLEVBQTZFaG5DLElBQUFrd0MsT0FBV2gyQyxFQUFBd3lELGVBQUE3d0QsSUFBQTNCLEVBQUF3eUQsZUFBQTd3RCxHQUF5QyxNQUFNbXJDLElBQUF4N0IsV0FBVW83QixFQUFBLEtBQUE5cUMsRUFBQXlULEtBQUF6VCxFQUFBMEIsT0FBQU0sRUFBQU4sS0FDemQsS0FBQTFCLEVBQUF3RCxNQUFxQixVQUFBc25DLElBQUFzSixPQUFBcDBDLE9BQXVCLElBQUE4cUMsRUFBQTlxQyxFQUFhLE9BQUE4cUMsR0FBUyxDQUFFLEdBQUFBLElBQUE5b0MsRUFBQSxDQUFVOG9DLEVBQUEsS0FBTyxNQUFrQixXQUFaOXFDLEVBQUE4cUMsRUFBQWx0QixTQUFZLENBQWE1ZCxFQUFBbzBDLE9BQUF0SixFQUFBc0osT0FBa0J0SixFQUFBOXFDLEVBQUksTUFBTThxQyxJQUFBc0osT0FBV3AwQyxFQUFBOHFDLEdBQUttRCxHQUFBbHNDLEVBQUFDLEVBQUE5RixFQUFBWCxTQUFBd0UsR0FBb0JpQyxJQUFBd0IsTUFBVSxPQUFBeEIsRUFBUyxjQUFBOUYsRUFBQThGLEVBQUFOLEtBQUF5QyxHQUFBeW5DLEVBQUE1cEMsRUFBQW11RCxjQUFBNTBELFNBQUE4OEQsR0FBQXIyRCxFQUFBakMsR0FBQW9FLElBQUFqSSxFQUFBb3hDLEdBQUFweEMsRUFBQTB2QyxFQUFBaXVCLHdCQUFBNzNELEVBQUFnL0MsV0FBQSxFQUFBL1MsR0FBQWxzQyxFQUFBQyxFQUFBbUMsRUFBQXBFLEdBQUFpQyxFQUFBd0IsTUFBcUksZUFBQW9vQyxFQUFBc0IsR0FBQWh4QyxFQUFBOEYsRUFBQU4sS0FBQU0sRUFBQW11RCxjQUFBb0ksR0FBQXgyRCxFQUFBQyxFQUFBOUYsRUFBQTB2QyxFQUFBc0IsR0FBQWh4QyxFQUFBd0YsS0FBQWtxQyxHQUFBem5DLEVBQUFwRSxHQUE0RSxlQUFBeTRELEdBQUF6MkQsRUFBQUMsSUFBQU4sS0FBQU0sRUFBQW11RCxhQUFBaHNELEVBQUFwRSxHQUFpRCxlQUFBb0UsRUFBQW5DLEVBQUFOLEtBQUF4RixFQUFBOEYsRUFBQW11RCxhQUFBajBELEVBQUE4RixFQUFBa3VELGNBQ3pjL3JELEVBQUFqSSxFQUFBZ3hDLEdBQUEvb0MsRUFBQWpJLEdBQUEsT0FBQTZGLE1BQUE0K0MsVUFBQSxLQUFBMytDLEVBQUEyK0MsVUFBQSxLQUFBMytDLEVBQUFnL0MsV0FBQSxHQUFBaC9DLEVBQUF5UixJQUFBLEVBQUF1NUIsR0FBQTdvQyxJQUFBcEMsR0FBQSxFQUFBNHRELEdBQUEzdEQsSUFBQUQsR0FBQSxFQUFBczJELEdBQUFyMkQsRUFBQWpDLEdBQUFpekQsR0FBQWh4RCxFQUFBbUMsRUFBQWpJLEdBQUFtM0QsR0FBQXJ4RCxFQUFBbUMsRUFBQWpJLEVBQUE2RCxHQUFBaTVELEdBQUEsS0FBQWgzRCxFQUFBbUMsR0FBQSxFQUFBcEMsRUFBQWhDLEdBQTJKc3JDLEVBQUEsT0FBUyxJQUFBeXVCLEdBQUEsQ0FBUTUwQixRQUFBLE1BQWE2MEIsR0FBQSxLQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FBeUIsU0FBQVQsR0FBQXozRCxFQUFBQyxHQUFpQixJQUFBakMsRUFBQWdDLEVBQUFMLEtBQUE2dEMsU0FBc0I5QyxHQUFBcXRCLEdBQUEvNUQsRUFBQW12QyxlQUF3Qm52QyxFQUFBbXZDLGNBQUFsdEMsRUFBa0IsU0FBQWs0RCxHQUFBbjRELEdBQWUsSUFBQUMsRUFBQTgzRCxHQUFBNTBCLFFBQWlCc0gsR0FBQXN0QixJQUFRLzNELEVBQUFMLEtBQUE2dEMsU0FBQUwsY0FBQWx0QyxFQUFnQyxTQUFBcTJELEdBQUF0MkQsRUFBQUMsR0FBaUIrM0QsR0FBQWg0RCxFQUFLazRELEdBQUFELEdBQUEsS0FBVyxJQUFBajZELEVBQUFnQyxFQUFBcXVELG9CQUE0QixPQUFBcndELEtBQUE2d0QsZ0JBQUE1dUQsSUFBQTgwRCxJQUFBLEdBQXVDLzBELEVBQUFxdUQsb0JBQUEsS0FDL2MsU0FBQTlpQixHQUFBdnJDLEVBQUFDLEdBQW9QLE9BQXBPaTRELEtBQUFsNEQsSUFBQSxJQUFBQyxHQUFBLElBQUFBLElBQTBCLGlCQUFBQSxHQUFBLGFBQUFBLElBQUFpNEQsR0FBQWw0RCxFQUFBQyxFQUFBLFlBQXlEQSxFQUFBLENBQUd5RSxRQUFBMUUsRUFBQTYzRCxhQUFBNTNELEVBQUEwTixLQUFBLE1BQW9DLE9BQUFzcUQsSUFBQSxPQUFBRCxJQUFBMXVCLEVBQUEsT0FBQTJ1QixHQUFBaDRELEVBQUErM0QsR0FBQTNKLG9CQUFBLENBQWtFbm9ELE1BQUFqRyxFQUFBNHVELGVBQUEsSUFBeUJvSixNQUFBdHFELEtBQUExTixHQUFlRCxFQUFBbXRDLGNBQXVCLElBQUFpckIsR0FBQSxFQUFBdkgsR0FBQSxFQUFBQyxHQUFBLEVBQUF1SCxHQUFBLEVBQUF4QixJQUFBLEVBQThCLFNBQUF5QixHQUFBdDRELEdBQWUsT0FBT213RCxVQUFBbndELEVBQUF1NEQsWUFBQSxLQUFBQyxXQUFBLEtBQUFDLG9CQUFBLEtBQUFDLG1CQUFBLEtBQUFoSyxZQUFBLEtBQUFELFdBQUEsS0FBQWtLLG9CQUFBLEtBQUFDLG1CQUFBLE1BQy9ULFNBQUF6ckQsR0FBQW5OLEdBQWUsT0FBT213RCxVQUFBbndELEVBQUFtd0QsVUFBQW9JLFlBQUF2NEQsRUFBQXU0RCxZQUFBQyxXQUFBeDRELEVBQUF3NEQsV0FBQUMsb0JBQUEsS0FBQUMsbUJBQUEsS0FBQWhLLFlBQUEsS0FBQUQsV0FBQSxLQUFBa0ssb0JBQUEsS0FBQUMsbUJBQUEsTUFBNE0sU0FBQXJJLEdBQUF2d0QsR0FBZSxPQUFPNnVELGVBQUE3dUQsRUFBQTBSLElBQUEwbUQsR0FBQTNILFFBQUEsS0FBQW4xRCxTQUFBLEtBQUFxUyxLQUFBLEtBQUFnaEQsV0FBQSxNQUE4RSxTQUFBa0ssR0FBQTc0RCxFQUFBQyxHQUFpQixPQUFBRCxFQUFBdzRELFdBQUF4NEQsRUFBQXU0RCxZQUFBdjRELEVBQUF3NEQsV0FBQXY0RCxHQUFBRCxFQUFBdzRELFdBQUE3cUQsS0FBQTFOLEVBQUFELEVBQUF3NEQsV0FBQXY0RCxHQUN2VixTQUFBMHdELEdBQUEzd0QsRUFBQUMsR0FBaUIsSUFBQWpDLEVBQUFnQyxFQUFBNCtDLFVBQWtCLFVBQUE1Z0QsRUFBQSxDQUFhLElBQUFvRSxFQUFBcEMsRUFBQXV1RCxZQUFvQnAwRCxFQUFBLEtBQVcsT0FBQWlJLE1BQUFwQyxFQUFBdXVELFlBQUErSixHQUFBdDRELEVBQUFzdUQscUJBQWdEbHNELEVBQUFwQyxFQUFBdXVELFlBQUFwMEQsRUFBQTZELEVBQUF1d0QsWUFBQSxPQUFBbnNELEVBQUEsT0FBQWpJLEdBQUFpSSxFQUFBcEMsRUFBQXV1RCxZQUFBK0osR0FBQXQ0RCxFQUFBc3VELGVBQUFuMEQsRUFBQTZELEVBQUF1d0QsWUFBQStKLEdBQUF0NkQsRUFBQXN3RCxnQkFBQWxzRCxFQUFBcEMsRUFBQXV1RCxZQUFBcGhELEdBQUFoVCxHQUFBLE9BQUFBLE1BQUE2RCxFQUFBdXdELFlBQUFwaEQsR0FBQS9LLElBQXlMLE9BQUFqSSxHQUFBaUksSUFBQWpJLEVBQUEwK0QsR0FBQXoyRCxFQUFBbkMsR0FBQSxPQUFBbUMsRUFBQW8yRCxZQUFBLE9BQUFyK0QsRUFBQXErRCxZQUFBSyxHQUFBejJELEVBQUFuQyxHQUFBNDRELEdBQUExK0QsRUFBQThGLEtBQUE0NEQsR0FBQXoyRCxFQUFBbkMsR0FBQTlGLEVBQUFxK0QsV0FBQXY0RCxHQUN4VCxTQUFBNjRELEdBQUE5NEQsRUFBQUMsR0FBaUIsSUFBQWpDLEVBQUFnQyxFQUFBdXVELFlBQXlFLFFBQXJEdndELEVBQUEsT0FBQUEsRUFBQWdDLEVBQUF1dUQsWUFBQStKLEdBQUF0NEQsRUFBQXN1RCxlQUFBeUssR0FBQS80RCxFQUFBaEMsSUFBcUQwNkQsbUJBQUExNkQsRUFBQXk2RCxvQkFBQXo2RCxFQUFBMDZELG1CQUFBejRELEdBQUFqQyxFQUFBMDZELG1CQUFBL3FELEtBQUExTixFQUFBakMsRUFBQTA2RCxtQkFBQXo0RCxHQUE4SCxTQUFBODRELEdBQUEvNEQsRUFBQUMsR0FBaUIsSUFBQWpDLEVBQUFnQyxFQUFBNCtDLFVBQXVFLE9BQXJELE9BQUE1Z0QsR0FBQWlDLElBQUFqQyxFQUFBdXdELGNBQUF0dUQsRUFBQUQsRUFBQXV1RCxZQUFBcGhELEdBQUFsTixJQUFxREEsRUFDaFQsU0FBQSs0RCxHQUFBaDVELEVBQUFDLEVBQUFqQyxFQUFBb0UsRUFBQWpJLEVBQUEwdkMsR0FBeUIsT0FBQTdyQyxFQUFBMFQsS0FBYyxLQUFBbS9DLEdBQUEseUJBQUE3d0QsRUFBQWhDLEVBQUF5eUQsU0FBQXp3RCxFQUFBaEksS0FBQTZ4QyxFQUFBem5DLEVBQUFqSSxHQUFBNkYsRUFBaUUsS0FBQXE0RCxHQUFBcjRELEVBQUFpL0MsV0FBQSxLQUFBai9DLEVBQUFpL0MsVUFBQSxHQUF5QyxLQUFBbVosR0FBNEQsVUFBeENqK0QsRUFBQSxtQkFBcEI2RixFQUFBaEMsRUFBQXl5RCxTQUFvQnp3RCxFQUFBaEksS0FBQTZ4QyxFQUFBem5DLEVBQUFqSSxHQUFBNkYsR0FBd0MsTUFBOEIsT0FBQStDLEVBQUEsR0FBV1gsRUFBQWpJLEdBQU0sS0FBQTIyRCxHQUFBK0YsSUFBQSxFQUFjLE9BQUF6MEQsRUFDMVEsU0FBQW12RCxHQUFBdnhELEVBQUFDLEVBQUFqQyxFQUFBb0UsRUFBQWpJLEdBQXVCMDhELElBQUEsRUFBZ0IsUUFBQWh0QixHQUFWNXBDLEVBQUE4NEQsR0FBQS80RCxFQUFBQyxJQUFVa3dELFVBQUFwbkIsRUFBQSxLQUFBOXFDLEVBQUEsRUFBQTVCLEVBQUE0RCxFQUFBczRELFlBQUFwdkIsRUFBQVUsRUFBcUQsT0FBQXh0QyxHQUFTLENBQUUsSUFBQThGLEVBQUE5RixFQUFBd3lELGVBQXVCMXNELEVBQUFoSSxHQUFBLE9BQUE0dUMsTUFBQTFzQyxFQUFBd3RDLEVBQUFWLEdBQUFsckMsRUFBQWtFLElBQUFsRSxFQUFBa0UsS0FBQWduQyxFQUFBNnZCLEdBQUFoNUQsRUFBQUMsRUFBQTVELEVBQUE4c0MsRUFBQW5yQyxFQUFBb0UsR0FBQSxPQUFBL0YsRUFBQWYsV0FBQTBFLEVBQUFpL0MsV0FBQSxHQUFBNWlELEVBQUFzeUQsV0FBQSxZQUFBMXVELEVBQUF3dUQsV0FBQXh1RCxFQUFBeXVELFlBQUF6dUQsRUFBQXd1RCxXQUFBcHlELEdBQUE0RCxFQUFBd3VELFdBQUFFLFdBQUF0eUQsRUFBQTRELEVBQUF3dUQsV0FBQXB5RCxLQUE0TUEsSUFBQXNSLEtBQWdCLElBQVB4TCxFQUFBLEtBQU85RixFQUFBNEQsRUFBQXc0RCxvQkFBNEIsT0FBQXA4RCxHQUFTLENBQUUsSUFBQWlCLEVBQUFqQixFQUFBd3lELGVBQXVCdnhELEVBQUFuRCxHQUFBLE9BQUFnSSxNQUFBOUYsRUFBQSxPQUFBMHNDLElBQUFjLEVBQUFWLElBQUFsckMsRUFBQVgsSUFBQVcsRUFBQVgsS0FBQTZyQyxFQUFBNnZCLEdBQUFoNUQsRUFBQUMsRUFBQTVELEVBQUE4c0MsRUFBQW5yQyxFQUFBb0UsR0FBQSxPQUFBL0YsRUFBQWYsV0FBQTBFLEVBQUFpL0MsV0FDeFosR0FBQTVpRCxFQUFBc3lELFdBQUEsWUFBQTF1RCxFQUFBMjRELG1CQUFBMzRELEVBQUEwNEQsb0JBQUExNEQsRUFBQTI0RCxtQkFBQXY4RCxHQUFBNEQsRUFBQTI0RCxtQkFBQWpLLFdBQUF0eUQsRUFBQTRELEVBQUEyNEQsbUJBQUF2OEQsS0FBMkpBLElBQUFzUixLQUFTLE9BQUFvN0IsSUFBQTlvQyxFQUFBdTRELFdBQUEsTUFBOEIsT0FBQXIyRCxFQUFBbEMsRUFBQXk0RCxtQkFBQSxLQUFBMTRELEVBQUFpL0MsV0FBQSxHQUFtRCxPQUFBbFcsR0FBQSxPQUFBNW1DLElBQUEwbkMsRUFBQVYsR0FBMEJscEMsRUFBQWt3RCxVQUFBdG1CLEVBQWM1cEMsRUFBQXM0RCxZQUFBeHZCLEVBQWdCOW9DLEVBQUF3NEQsb0JBQUF0MkQsRUFBd0JuQyxFQUFBNnVELGVBQUE1d0QsRUFBbUIrQixFQUFBc3VELGNBQUFubEIsRUFDeFYsU0FBQTh2QixHQUFBajVELEVBQUFDLEVBQUFqQyxHQUFtQixPQUFBaUMsRUFBQXc0RCxzQkFBQSxPQUFBeDRELEVBQUF1NEQsYUFBQXY0RCxFQUFBdTRELFdBQUE3cUQsS0FBQTFOLEVBQUF3NEQsb0JBQUF4NEQsRUFBQXU0RCxXQUFBdjRELEVBQUF5NEQsb0JBQUF6NEQsRUFBQXc0RCxvQkFBQXg0RCxFQUFBeTRELG1CQUFBLE1BQWlMUSxHQUFBajVELEVBQUF5dUQsWUFBQTF3RCxHQUFvQmlDLEVBQUF5dUQsWUFBQXp1RCxFQUFBd3VELFdBQUEsS0FBZ0N5SyxHQUFBajVELEVBQUEwNEQsb0JBQUEzNkQsR0FBNEJpQyxFQUFBMDRELG9CQUFBMTRELEVBQUEyNEQsbUJBQUEsS0FBZ0QsU0FBQU0sR0FBQWw1RCxFQUFBQyxHQUFpQixLQUFLLE9BQUFELEdBQVMsQ0FBRSxJQUFBaEMsRUFBQWdDLEVBQUExRSxTQUFpQixVQUFBMEMsRUFBQSxDQUFhZ0MsRUFBQTFFLFNBQUEsS0FBZ0IsSUFBQThHLEVBQUFuQyxFQUFRLG1CQUFBakMsR0FBQXNyQyxFQUFBLE1BQUF0ckMsR0FBd0NBLEVBQUFoRyxLQUFBb0ssR0FBVXBDLElBQUEydUQsWUFDN2MsU0FBQXdLLEdBQUFuNUQsRUFBQUMsR0FBaUIsT0FBT2hHLE1BQUErRixFQUFBaWpCLE9BQUFoakIsRUFBQXlnQixNQUFBaTVCLEdBQUExNUMsSUFBOEIsU0FBQW01RCxHQUFBcDVELEdBQWVBLEVBQUFpL0MsV0FBQSxFQUFlLElBQUFvYSxRQUFBLEVBQUFDLFFBQUEsRUFBQUMsUUFBQSxFQUFBQyxRQUFBLEVBQTRDSCxHQUFBLFNBQUFyNUQsRUFBQUMsR0FBaUIsUUFBQWpDLEVBQUFpQyxFQUFBd0IsTUFBa0IsT0FBQXpELEdBQVMsQ0FBRSxPQUFBQSxFQUFBMFQsS0FBQSxJQUFBMVQsRUFBQTBULElBQUExUixFQUFBdkIsWUFBQVQsRUFBQTJ6QyxnQkFBbUQsT0FBQTN6QyxFQUFBMFQsS0FBQSxPQUFBMVQsRUFBQXlELE1BQUEsQ0FBbUN6RCxFQUFBeUQsTUFBQTR3QyxPQUFBcjBDLEVBQWlCQSxJQUFBeUQsTUFBVSxTQUFTLEdBQUF6RCxJQUFBaUMsRUFBQSxNQUFlLEtBQUssT0FBQWpDLEVBQUE2ZCxTQUFpQixDQUFFLFVBQUE3ZCxFQUFBcTBDLFFBQUFyMEMsRUFBQXEwQyxTQUFBcHlDLEVBQUEsT0FBd0NqQyxJQUFBcTBDLE9BQVdyMEMsRUFBQTZkLFFBQUF3MkIsT0FBQXIwQyxFQUFBcTBDLE9BQTBCcjBDLElBQUE2ZCxVQUFjeTlDLEdBQUEsYUFDMWFDLEdBQUEsU0FBQXY1RCxFQUFBQyxFQUFBakMsRUFBQW9FLEVBQUFqSSxHQUF1QixJQUFBMHZDLEVBQUE3cEMsRUFBQXd1RCxjQUFzQixHQUFBM2tCLElBQUF6bkMsRUFBQSxDQUFVLElBQUEybUMsRUFBQTlvQyxFQUFBMHhDLFVBQXVDLE9BQXJCOGdCLEdBQUE5bUIsR0FBQXhJLFNBQWNuakMsRUFBQSxLQUFPaEMsR0FBVSxZQUFBNnJDLEVBQUFvUixHQUFBbFMsRUFBQWMsR0FBdUJ6bkMsRUFBQTY0QyxHQUFBbFMsRUFBQTNtQyxHQUFVcEMsRUFBQSxHQUFLLE1BQU0sYUFBQTZwQyxFQUFBdWQsR0FBQXJlLEVBQUFjLEdBQXdCem5DLEVBQUFnbEQsR0FBQXJlLEVBQUEzbUMsR0FBVXBDLEVBQUEsR0FBSyxNQUFNLGFBQUE2cEMsRUFBQTltQyxFQUFBLEdBQW9COG1DLEVBQUEsQ0FBSTV2QyxXQUFBLElBQWVtSSxFQUFBVyxFQUFBLEdBQU1YLEVBQUEsQ0FBSW5JLFdBQUEsSUFBZStGLEVBQUEsR0FBSyxNQUFNLGVBQUE2cEMsRUFBQTJkLEdBQUF6ZSxFQUFBYyxHQUEwQnpuQyxFQUFBb2xELEdBQUF6ZSxFQUFBM21DLEdBQVVwQyxFQUFBLEdBQUssTUFBTSwyQkFBQTZwQyxFQUFBNHZCLFNBQUEsbUJBQUFyM0QsRUFBQXEzRCxVQUFBMXdCLEVBQUEyd0IsUUFBQTVOLElBQXFGSCxHQUFBM3RELEVBQUFvRSxHQUFRMm1DLEVBQUEvcUMsT0FBQSxFQUFXLElBQUFDLEVBQUEsS0FBVyxJQUFBRCxLQUFBNnJDLEVBQUEsSUFBQXpuQyxFQUFBckssZUFBQWlHLElBQUE2ckMsRUFBQTl4QyxlQUFBaUcsSUFBQSxNQUFBNnJDLEVBQUE3ckMsR0FBQSxhQUM5YUEsRUFBQSxDQUFHLElBQUEzQixFQUFBd3RDLEVBQUE3ckMsR0FBVyxJQUFBK3FDLEtBQUExc0MsSUFBQXRFLGVBQUFneEMsS0FBQTlxQyxNQUFBLElBQXlDQSxFQUFBOHFDLEdBQUEsUUFBVyw0QkFBQS9xQyxHQUFBLGFBQUFBLEdBQUEsbUNBQUFBLEdBQUEsNkJBQUFBLEdBQUEsY0FBQUEsSUFBQXV5QyxFQUFBeDRDLGVBQUFpRyxHQUFBZ0MsTUFBQSxLQUFBQSxLQUFBLElBQUF6RyxLQUFBeUUsRUFBQSxPQUFrTSxJQUFBQSxLQUFBb0UsRUFBQSxDQUFZLElBQUErbUMsRUFBQS9tQyxFQUFBcEUsR0FBaUMsR0FBdEIzQixFQUFBLE1BQUF3dEMsSUFBQTdyQyxRQUFBLEVBQXNCb0UsRUFBQXJLLGVBQUFpRyxJQUFBbXJDLElBQUE5c0MsSUFBQSxNQUFBOHNDLEdBQUEsTUFBQTlzQyxHQUFBLGFBQUEyQixFQUFBLEdBQUEzQixFQUFBLENBQXVFLElBQUEwc0MsS0FBQTFzQyxLQUFBdEUsZUFBQWd4QyxJQUFBSSxLQUFBcHhDLGVBQUFneEMsS0FBQTlxQyxNQUFBLElBQWtFQSxFQUFBOHFDLEdBQUEsSUFBVyxJQUFBQSxLQUFBSSxJQUFBcHhDLGVBQUFneEMsSUFBQTFzQyxFQUFBMHNDLEtBQUFJLEVBQUFKLEtBQUE5cUMsSUFDcmNBLEVBQUEsSUFBS0EsRUFBQThxQyxHQUFBSSxFQUFBSixTQUFhOXFDLElBQUErQixNQUFBLElBQUFBLEVBQUF6RyxLQUFBeUUsRUFBQUMsTUFBQWtyQyxNQUFvQyw0QkFBQW5yQyxHQUFBbXJDLE1BQUFpakIsWUFBQSxFQUFBL3ZELE1BQUErdkQsWUFBQSxRQUFBampCLEdBQUE5c0MsSUFBQThzQyxJQUFBbnBDLEtBQUEsSUFBQXpHLEtBQUF5RSxFQUFBLEdBQUFtckMsSUFBQSxhQUFBbnJDLEVBQUEzQixJQUFBOHNDLEdBQUEsaUJBQUFBLEdBQUEsaUJBQUFBLElBQUFucEMsS0FBQSxJQUFBekcsS0FBQXlFLEVBQUEsR0FBQW1yQyxHQUFBLG1DQUFBbnJDLEdBQUEsNkJBQUFBLElBQUF1eUMsRUFBQXg0QyxlQUFBaUcsSUFBQSxNQUFBbXJDLEdBQUEwaUIsR0FBQTF4RCxFQUFBNkQsR0FBQWdDLEdBQUEzRCxJQUFBOHNDLElBQUFucEMsRUFBQSxNQUFBQSxLQUFBLElBQUF6RyxLQUFBeUUsRUFBQW1yQyxJQUErVmxyQyxJQUFBK0IsS0FBQSxJQUFBekcsS0FBQSxRQUFBMEUsR0FBNkI5RCxFQUFBNkYsR0FBSUMsRUFBQXN1RCxZQUFBcDBELElBQUFpL0QsR0FBQW41RCxLQUEyQnU1RCxHQUFBLFNBQUF4NUQsRUFBQUMsRUFBQWpDLEVBQUFvRSxHQUFxQnBFLElBQUFvRSxHQUFBZzNELEdBQUFuNUQsSUFDdGUsSUFBQTA1RCxHQUFBLG1CQUFBQyxnQkFBQS9NLElBQStDLFNBQUFnTixHQUFBNzVELEVBQUFDLEdBQWlCLElBQUFqQyxFQUFBaUMsRUFBQWdqQixPQUFBN2dCLEVBQUFuQyxFQUFBeWdCLE1BQXlCLE9BQUF0ZSxHQUFBLE9BQUFwRSxJQUFBb0UsRUFBQXUzQyxHQUFBMzdDLElBQThCLE9BQUFBLEdBQUF5N0MsR0FBQXo3QyxFQUFBMkIsTUFBcUJNLElBQUFoRyxNQUFVLE9BQUErRixHQUFBLElBQUFBLEVBQUEwUixLQUFBK25DLEdBQUF6NUMsRUFBQUwsTUFBZ0MsSUFBSWxHLFFBQUFrSSxNQUFBMUIsR0FBaUIsTUFBQTlGLEdBQVM2bEIsV0FBQSxXQUFzQixNQUFBN2xCLEtBQVksU0FBQTIvRCxHQUFBOTVELEdBQWUsSUFBQUMsRUFBQUQsRUFBQW9yQyxJQUFZLFVBQUFuckMsRUFBQSxzQkFBQUEsRUFBQSxJQUF5Q0EsRUFBQSxNQUFRLE1BQUFqQyxHQUFTKzdELEdBQUEvNUQsRUFBQWhDLFFBQVFpQyxFQUFBa2pDLFFBQUEsS0FDblYsU0FBQXBkLEdBQUEvbEIsRUFBQUMsRUFBQWpDLEdBQWdFLFdBQTdCQSxFQUFBLFFBQWhCQSxJQUFBdXdELGFBQWdCdndELEVBQUF5d0QsV0FBQSxNQUE2QixDQUFhLElBQUFyc0QsRUFBQXBFLElBQUEyUCxLQUFlLEdBQUcsSUFBQXZMLEVBQUFzUCxJQUFBMVIsS0FBQSt5RCxHQUFBLENBQW1CLElBQUE1NEQsRUFBQWlJLEVBQUEreUQsUUFBZ0IveUQsRUFBQSt5RCxhQUFBLE9BQWlCLElBQUFoN0QsUUFBZ0JpSSxFQUFBc1AsSUFBQXpSLEtBQUE4eUQsS0FBQTU0RCxFQUFBaUksRUFBQVEsT0FBQVIsRUFBQSt5RCxRQUFBaDdELEtBQTJDaUksSUFBQXVMLFdBQVN2TCxJQUFBcEUsSUFHdk4sU0FBQWc4RCxHQUFBaDZELEdBQTZDLE9BQTlCLG1CQUFBZ3VELE9BQUFodUQsR0FBOEJBLEVBQUEwUixLQUFjLG1DQUFBelIsRUFBQUQsRUFBQXV1RCxZQUFtRCxVQUFBdHVELEdBQUEsUUFBQUEsSUFBQXd1RCxZQUFBLENBQXdDLElBQUF6d0QsRUFBQWlDLElBQUEwTixLQUFlLEdBQUcsSUFBQXZMLEVBQUFwRSxFQUFBbTNELFFBQWdCLFlBQUEveUQsRUFBQSxDQUFlLElBQUFqSSxFQUFBNkYsRUFBUSxJQUFJb0MsSUFBSSxNQUFBeW5DLEdBQVNrd0IsR0FBQTUvRCxFQUFBMHZDLElBQVM3ckMsSUFBQTJQLFdBQVMzUCxJQUFBaUMsR0FBYSxNQUFNLE9BQTJCLEdBQTNCNjVELEdBQUE5NUQsR0FBMkIsbUJBQWRDLEVBQUFELEVBQUEyeEMsV0FBY3NvQixxQkFBQSxJQUFrRGg2RCxFQUFBd3FCLE1BQUF6cUIsRUFBQXd1RCxjQUFBdnVELEVBQUFxZSxNQUFBdGUsRUFBQXN1RCxjQUFBcnVELEVBQUFnNkQsdUJBQXlFLE1BQUFwd0IsR0FBU2t3QixHQUFBLzVELEVBQUE2cEMsR0FBUSxNQUFNLE9BQUFpd0IsR0FBQTk1RCxHQUFhLE1BQU0sT0FBQWs2RCxHQUFBbDZELElBQ3JjLFNBQUFtNkQsR0FBQW42RCxHQUFlLFdBQUFBLEVBQUEwUixLQUFBLElBQUExUixFQUFBMFIsS0FBQSxJQUFBMVIsRUFBQTBSLElBQ2YsU0FBQTBvRCxHQUFBcDZELEdBQWVBLEVBQUEsQ0FBRyxRQUFBQyxFQUFBRCxFQUFBcXlDLE9BQW1CLE9BQUFweUMsR0FBUyxDQUFFLEdBQUFrNkQsR0FBQWw2RCxHQUFBLENBQVUsSUFBQWpDLEVBQUFpQyxFQUFRLE1BQUFELEVBQVFDLElBQUFveUMsT0FBVy9JLEVBQUEsT0FBU3RyQyxPQUFBLEVBQVMsSUFBQW9FLEVBQUFuQyxPQUFBLEVBQWUsT0FBQWpDLEVBQUEwVCxLQUFjLE9BQUF6UixFQUFBakMsRUFBQTJ6QyxVQUFxQnZ2QyxHQUFBLEVBQUssTUFBTSxPQUE4QyxPQUFBbkMsRUFBQWpDLEVBQUEyekMsVUFBQTRTLGNBQW1DbmlELEdBQUEsRUFBSyxNQUFNLFFBQUFrbkMsRUFBQSxPQUFpQixHQUFBdHJDLEVBQUFpaEQsWUFBQTJKLEdBQUEzb0QsRUFBQSxJQUFBakMsRUFBQWloRCxZQUFBLElBQTRDai9DLEVBQUFDLEVBQUEsSUFBQWpDLEVBQUFnQyxJQUFhLENBQUUsS0FBSyxPQUFBaEMsRUFBQTZkLFNBQWlCLENBQUUsVUFBQTdkLEVBQUFxMEMsUUFBQThuQixHQUFBbjhELEVBQUFxMEMsUUFBQSxDQUFrQ3IwQyxFQUFBLEtBQU8sTUFBQWdDLEVBQVFoQyxJQUFBcTBDLE9BQXFDLElBQTFCcjBDLEVBQUE2ZCxRQUFBdzJCLE9BQUFyMEMsRUFBQXEwQyxPQUEwQnIwQyxJQUFBNmQsUUFBZ0IsSUFBQTdkLEVBQUEwVCxLQUFBLElBQUExVCxFQUFBMFQsS0FBQSxLQUFBMVQsRUFBQTBULEtBQWlDLENBQUUsR0FDN2UsRUFENmUxVCxFQUFBaWhELFVBQzdlLFNBQUFoL0MsRUFBYSxVQUFBakMsRUFBQXlELE9BQUEsSUFBQXpELEVBQUEwVCxJQUFBLFNBQUF6UixFQUF3Q2pDLEVBQUF5RCxNQUFBNHdDLE9BQUFyMEMsTUFBQXlELE1BQWdDLE9BQUF6RCxFQUFBaWhELFdBQUEsQ0FBcUJqaEQsSUFBQTJ6QyxVQUFjLE1BQUEzeEMsR0FBUyxRQUFBN0YsRUFBQTZGLElBQWEsQ0FBRSxPQUFBN0YsRUFBQXVYLEtBQUEsSUFBQXZYLEVBQUF1WCxJQUFBLEdBQUExVCxFQUFBLEdBQUFvRSxFQUFBLENBQW1DLElBQUF5bkMsRUFBQTVwQyxFQUFBOG9DLEVBQUE1dUMsRUFBQXczQyxVQUFBMXpDLEVBQUFELEVBQTBCLElBQUE2ckMsRUFBQWg4QixTQUFBZzhCLEVBQUF2bEMsV0FBQTBxQixhQUFBK1osRUFBQTlxQyxHQUFBNHJDLEVBQUE3YSxhQUFBK1osRUFBQTlxQyxRQUFrRWdDLEVBQUErdUIsYUFBQTcwQixFQUFBdzNDLFVBQUEzekMsUUFBbUNvRSxHQUFBMm1DLEVBQUE5b0MsRUFBQWhDLEVBQUE5RCxFQUFBdzNDLFVBQUEsSUFBQTVJLEVBQUFsN0IsVUFBQWc4QixFQUFBZCxFQUFBemtDLFlBQUEwcUIsYUFBQS93QixFQUFBOHFDLElBQUFjLEVBQUFkLEdBQUF0cUMsWUFBQVIsR0FBQSxPQUFBOHFDLElBQUFzeEIsc0JBQUEsT0FBQXh3QixFQUFBNnZCLFVBQUE3dkIsRUFBQTZ2QixRQUFBNU4sS0FBQTdyRCxFQUFBeEIsWUFBQXRFLEVBQUF3M0MsZ0JBQ2xULE9BQUF4M0MsRUFBQXVYLEtBQUEsT0FBQXZYLEVBQUFzSCxNQUFBLENBQW1DdEgsRUFBQXNILE1BQUE0d0MsT0FBQWw0QyxFQUFpQkEsSUFBQXNILE1BQVUsU0FBUyxHQUFBdEgsSUFBQTZGLEVBQUEsTUFBZSxLQUFLLE9BQUE3RixFQUFBMGhCLFNBQWlCLENBQUUsVUFBQTFoQixFQUFBazRDLFFBQUFsNEMsRUFBQWs0QyxTQUFBcnlDLEVBQUEsT0FBd0M3RixJQUFBazRDLE9BQVdsNEMsRUFBQTBoQixRQUFBdzJCLE9BQUFsNEMsRUFBQWs0QyxPQUEwQmw0QyxJQUFBMGhCLFNBQzNMLFNBQUFxK0MsR0FBQWw2RCxHQUFlLFFBQUFDLEVBQUFELEVBQUFoQyxHQUFBLEVBQUFvRSxPQUFBLEVBQUFqSSxPQUFBLElBQW9DLENBQUUsSUFBQTZELEVBQUEsQ0FBT0EsRUFBQWlDLEVBQUFveUMsT0FBV3J5QyxFQUFBLE9BQVEsQ0FBMkIsT0FBekIsT0FBQWhDLEdBQUFzckMsRUFBQSxPQUF5QnRyQyxFQUFBMFQsS0FBYyxPQUFBdFAsRUFBQXBFLEVBQUEyekMsVUFBcUJ4M0MsR0FBQSxFQUFLLE1BQUE2RixFQUFRLE9BQWdELE9BQUFvQyxFQUFBcEUsRUFBQTJ6QyxVQUFBNFMsY0FBbUNwcUQsR0FBQSxFQUFLLE1BQUE2RixFQUFRaEMsSUFBQXEwQyxPQUFXcjBDLEdBQUEsRUFBSyxPQUFBaUMsRUFBQXlSLEtBQUEsSUFBQXpSLEVBQUF5UixJQUFBLENBQXlCMVIsRUFBQSxRQUFBNnBDLEVBQUE1cEMsRUFBQThvQyxFQUFBYyxJQUFtQixHQUFBbXdCLEdBQUFqeEIsR0FBQSxPQUFBQSxFQUFBdG5DLE9BQUEsSUFBQXNuQyxFQUFBcjNCLElBQUFxM0IsRUFBQXRuQyxNQUFBNHdDLE9BQUF0SixNQUFBdG5DLFVBQStELENBQUssR0FBQXNuQyxJQUFBYyxFQUFBLE1BQWUsS0FBSyxPQUFBZCxFQUFBbHRCLFNBQWlCLENBQUUsVUFBQWt0QixFQUFBc0osUUFBQXRKLEVBQUFzSixTQUFBeEksRUFBQSxNQUFBN3BDLEVBQXlDK29DLElBQUFzSixPQUFXdEosRUFBQWx0QixRQUFBdzJCLE9BQUF0SixFQUFBc0osT0FBMEJ0SixJQUFBbHRCLFFBQVkxaEIsR0FDM2YwdkMsRUFBQXpuQyxFQUFBMm1DLEVBQUE5b0MsRUFBQTB4QyxVQUFBLElBQUE5SCxFQUFBaDhCLFNBQUFnOEIsRUFBQXZsQyxXQUFBQyxZQUFBd2tDLEdBQUFjLEVBQUF0bEMsWUFBQXdrQyxJQUFBM21DLEVBQUFtQyxZQUFBdEUsRUFBQTB4QyxnQkFBMkcsT0FBQTF4QyxFQUFBeVIsS0FBbUIsVUFBQXpSLEVBQUF3QixNQUFBLENBQW1CVyxFQUFBbkMsRUFBQTB4QyxVQUFBNFMsY0FBNEJwcUQsR0FBQSxFQUFLOEYsRUFBQXdCLE1BQUE0d0MsT0FBQXB5QyxFQUFpQkEsSUFBQXdCLE1BQVUsZUFBVSxHQUFBdTRELEdBQUEvNUQsR0FBQSxPQUFBQSxFQUFBd0IsTUFBQSxDQUE4QnhCLEVBQUF3QixNQUFBNHdDLE9BQUFweUMsRUFBaUJBLElBQUF3QixNQUFVLFNBQVMsR0FBQXhCLElBQUFELEVBQUEsTUFBZSxLQUFLLE9BQUFDLEVBQUE0YixTQUFpQixDQUFFLFVBQUE1YixFQUFBb3lDLFFBQUFweUMsRUFBQW95QyxTQUFBcnlDLEVBQUEsT0FBbUQsS0FBWEMsSUFBQW95QyxRQUFXM2dDLE1BQUExVCxHQUFBLEdBQWtCaUMsRUFBQTRiLFFBQUF3MkIsT0FBQXB5QyxFQUFBb3lDLE9BQTBCcHlDLElBQUE0YixTQUMvWixTQUFBeStDLEdBQUF0NkQsRUFBQUMsR0FBaUIsT0FBQUEsRUFBQXlSLEtBQWMsK0JBQUFxVSxHQUFBa3RDLEdBQUFDLEdBQUFqekQsR0FBMkMsTUFBTSxhQUFhLFdBQUFqQyxFQUFBaUMsRUFBQTB4QyxVQUF5QixTQUFBM3pDLEVBQUEsQ0FBWSxJQUFBb0UsRUFBQW5DLEVBQUF1dUQsY0FBc0J4dUQsRUFBQSxPQUFBQSxJQUFBd3VELGNBQUFwc0QsRUFBNkIsSUFBQWpJLEVBQUE4RixFQUFBTixLQUFBa3FDLEVBQUE1cEMsRUFBQXN1RCxZQUE2QnR1RCxFQUFBc3VELFlBQUEsS0FBbUIsT0FBQTFrQixHQWpHck8sU0FBQTdwQyxFQUFBQyxFQUFBakMsRUFBQW9FLEVBQUFqSSxHQUF1QjZGLEVBQUEreEMsR0FBQTUzQyxFQUFRLFVBQUE2RCxHQUFBLFVBQUE3RCxFQUFBd0YsTUFBQSxNQUFBeEYsRUFBQVAsTUFBQTRoRCxHQUFBeDdDLEVBQUE3RixHQUFxRHl4RCxHQUFBNXRELEVBQUFvRSxHQUFRQSxFQUFBd3BELEdBQUE1dEQsRUFBQTdELEdBQVUsUUFBQTB2QyxFQUFBLEVBQVlBLEVBQUE1cEMsRUFBQXhFLE9BQVdvdUMsR0FBQSxHQUFNLElBQUFkLEVBQUE5b0MsRUFBQTRwQyxHQUFBNXJDLEVBQUFnQyxFQUFBNHBDLEVBQUEsR0FBb0IsVUFBQWQsRUFBQTZoQixHQUFBNXFELEVBQUEvQixHQUFBLDRCQUFBOHFDLEVBQUF5ZixHQUFBeG9ELEVBQUEvQixHQUFBLGFBQUE4cUMsRUFBQTZmLEdBQUE1b0QsRUFBQS9CLEdBQUEwOEMsR0FBQTM2QyxFQUFBK29DLEVBQUE5cUMsRUFBQW1FLEdBQTZGLE9BQUFwRSxHQUFVLFlBQUF5OUMsR0FBQXo3QyxFQUFBN0YsR0FBcUIsTUFBTSxlQUFBd3RELEdBQUEzbkQsRUFBQTdGLEdBQXdCLE1BQU0sYUFBQThGLEVBQUFELEVBQUFtN0MsY0FBQW9mLFlBQUF2NkQsRUFBQW03QyxjQUFBb2YsY0FBQXBnRSxFQUFBcWdFLFNBQUEsT0FBQXg4RCxFQUFBN0QsRUFBQUYsT0FBQXF0RCxHQUFBdG5ELElBQUE3RixFQUFBcWdFLFNBQUF4OEQsR0FBQSxHQUFBaUMsTUFBQTlGLEVBQUFxZ0UsV0FBQSxNQUFBcmdFLEVBQUFxZ0IsYUFBQThzQyxHQUFBdG5ELElBQUE3RixFQUFBcWdFLFNBQUFyZ0UsRUFBQXFnQixjQUN2VCxHQUFBOHNDLEdBQUF0bkQsSUFBQTdGLEVBQUFxZ0UsU0FBQXJnRSxFQUFBcWdFLFNBQUEsWUFnR3FPQyxDQUFBejhELEVBQUE2ckMsRUFBQTF2QyxFQUFBNkYsRUFBQW9DLEdBQTBCLE1BQU0sY0FBQW5DLEVBQUEweEMsV0FBQXJJLEVBQUEsT0FBMENycEMsRUFBQTB4QyxVQUFBbCtCLFVBQUF4VCxFQUFBdXVELGNBQXNDLE1BQU0sT0FBYSxjQUFjLFFBQ3hXLEdBRHdXeHdELEVBQUFpQyxFQUFBcXVELGNBQTBCbHNELE9BQUEsRUFBU3BDLEVBQUFDLEVBQUksT0FBQWpDLEVBQUFvRSxHQUFBLEdBQUFBLEdBQUEsRUFBQXBDLEVBQUFDLEVBQUF3QixNQUFBLElBQUF6RCxFQUFBczVELGFBQUF0NUQsRUFBQXM1RCxXQUFBaEgsT0FBcUUsT0FBQXR3RCxHQVRsZSxTQUFBQSxFQUFBQyxHQUFpQixRQUFBakMsRUFBQWdDLElBQWEsQ0FBRSxPQUFBaEMsRUFBQTBULElBQUEsQ0FBYyxJQUFBdFAsRUFBQXBFLEVBQUEyekMsVUFBa0IsR0FBQTF4QyxFQUFBbUMsRUFBQWloQixNQUFBQyxRQUFBLFdBQTRCLENBQUtsaEIsRUFBQXBFLEVBQUEyekMsVUFBYyxJQUFBeDNDLEVBQUE2RCxFQUFBd3dELGNBQUFuckMsTUFBNEJscEIsRUFBQSxNQUFBQSxLQUFBcEMsZUFBQSxXQUFBb0MsRUFBQW1wQixRQUFBLEtBQW1FbGhCLEVBQUFpaEIsTUFBQUMsUUFBQXFuQyxHQUFBLFVBQUF4d0QsU0FBaUMsT0FBQTZELEVBQUEwVCxJQUFBMVQsRUFBQTJ6QyxVQUFBbCtCLFVBQUF4VCxFQUFBLEdBQUFqQyxFQUFBd3dELGtCQUE2RCxTQUFBeHdELEVBQUEwVCxLQUFBLE9BQUExVCxFQUFBc3dELGNBQUEsRUFBNENsc0QsRUFBQXBFLEVBQUF5RCxNQUFBb2EsU0FBa0J3MkIsT0FBQXIwQyxFQUFXQSxFQUFBb0UsRUFBSSxTQUFTLFVBQUFwRSxFQUFBeUQsTUFBQSxDQUF3QnpELEVBQUF5RCxNQUFBNHdDLE9BQUFyMEMsRUFBaUJBLElBQUF5RCxNQUFVLFVBQVMsR0FBQXpELElBQUFnQyxFQUFBLE1BQWUsS0FBSyxPQUFBaEMsRUFBQTZkLFNBQWlCLENBQUUsVUFBQTdkLEVBQUFxMEMsUUFDcmVyMEMsRUFBQXEwQyxTQUFBcnlDLEVBQUEsT0FBb0JoQyxJQUFBcTBDLE9BQVdyMEMsRUFBQTZkLFFBQUF3MkIsT0FBQXIwQyxFQUFBcTBDLE9BQTBCcjBDLElBQUE2ZCxTQVF5YTYrQyxDQUFBMTZELEVBQUFvQyxHQUNwZCxRQURzZXBFLEVBQ3BmaUMsRUFBQXN1RCxhQUFjLENBQWF0dUQsRUFBQXN1RCxZQUFBLEtBQW1CLElBQUF4bEIsRUFBQTlvQyxFQUFBMHhDLFVBQWtCLE9BQUE1SSxNQUFBOW9DLEVBQUEweEMsVUFBQSxJQUFBZ29CLElBQWlDMzdELEVBQUFtRCxRQUFBLFNBQUFuQixHQUFzQixJQUFBaEMsRUErQjhMLFNBQUFnQyxFQUFBQyxHQUFpQixJQUFBakMsRUFBQWdDLEVBQUEyeEMsVUFBa0IsT0FBQTN6QyxLQUFBbTBELE9BQUFseUQsR0FBNkJBLEVBQUF1d0QsR0FBUHZ3RCxFQUFBcXdELEtBQU90d0QsR0FBb0IsUUFBVkEsRUFBQTI2RCxHQUFBMzZELEVBQUFDLE1BQVVxdkQsR0FBQXR2RCxFQUFBQyxHQUFBLEtBQUFBLEVBQUFELEVBQUE2dUQsaUJBQUErTCxHQUFBNTZELEVBQUFDLEtBL0JsUjZDLEtBQUEsS0FBQTdDLEVBQUFELEdBQXdCK29DLEVBQUF0ekIsSUFBQXpWLEtBQUErb0MsRUFBQTdzQixJQUFBbGMsS0FBQTFGLEtBQUEwRCxRQUFtQyxNQUFNLGNBQWMsUUFBQXNyQyxFQUFBLFFBQWtCLElBQUF1eEIsR0FBQSxtQkFBQUMsZ0JBQUE1SSxJQUErQyxTQUFBNkksR0FBQS82RCxFQUFBQyxFQUFBakMsSUFBbUJBLEVBQUF1eUQsR0FBQXZ5RCxJQUFRMFQsSUFBQTJtRCxHQUFTcjZELEVBQUF5eUQsUUFBQSxDQUFXL0osUUFBQSxNQUFjLElBQUF0a0QsRUFBQW5DLEVBQUFoRyxNQUFtRCxPQUFyQytELEVBQUExQyxTQUFBLFdBQXNCMC9ELEdBQUE1NEQsR0FBTXkzRCxHQUFBNzVELEVBQUFDLElBQVNqQyxFQUN2WCxTQUFBaTlELEdBQUFqN0QsRUFBQUMsRUFBQWpDLElBQW1CQSxFQUFBdXlELEdBQUF2eUQsSUFBUTBULElBQUEybUQsR0FBUyxJQUFBajJELEVBQUFwQyxFQUFBTCxLQUFBdTNELHlCQUFzQyxzQkFBQTkwRCxFQUFBLENBQTBCLElBQUFqSSxFQUFBOEYsRUFBQWhHLE1BQWMrRCxFQUFBeXlELFFBQUEsV0FBcUIsT0FBQXJ1RCxFQUFBakksSUFBYSxJQUFBMHZDLEVBQUE3cEMsRUFBQTJ4QyxVQUEwUCxPQUF4TyxPQUFBOUgsR0FBQSxtQkFBQUEsRUFBQXF4QixvQkFBQWw5RCxFQUFBMUMsU0FBQSxXQUEwRSxtQkFBQThHLElBQUEsT0FBQSs0RCxNQUFBLElBQUF0TyxJQUFBLENBQUF0cEQsT0FBQTQzRCxHQUFBai9DLElBQUEzWSxPQUFtRSxJQUFBdkYsRUFBQWlDLEVBQUFoRyxNQUFBRSxFQUFBOEYsRUFBQXlnQixNQUF3Qm01QyxHQUFBNzVELEVBQUFDLEdBQVFzRCxLQUFBMjNELGtCQUFBbDlELEVBQUEsQ0FBMEJvOUQsZUFBQSxPQUFBamhFLElBQUEsT0FBaUM2RCxFQUM5WSxTQUFBcTlELEdBQUFyN0QsR0FBZSxPQUFBQSxFQUFBMFIsS0FBYyxPQUFBdTVCLEdBQUFqckMsRUFBQUwsT0FBQTR0RCxLQUF3QixJQUFBdHRELEVBQUFELEVBQUFpL0MsVUFBa0IsWUFBQWgvQyxHQUFBRCxFQUFBaS9DLFdBQUEsS0FBQWgvQyxFQUFBLEdBQUFELEdBQUEsS0FBOEMsY0FBQTR5RCxLQUFBcEYsS0FBQSxRQUFBdnRELEVBQUFELEVBQUFpL0MsYUFBQTNWLEVBQUEsT0FBQXRwQyxFQUFBaS9DLFdBQUEsS0FBQWgvQyxFQUFBLEdBQUFELEVBQTRGLGNBQUE4eUQsR0FBQTl5RCxHQUFBLEtBQXlCLHFCQUFBQyxFQUFBRCxFQUFBaS9DLFlBQUFqL0MsRUFBQWkvQyxXQUFBLEtBQUFoL0MsRUFBQSxHQUFBRCxHQUFBLEtBQW9FLG9CQUFvQixjQUFBNHlELEtBQUEsS0FBeUIsZUFBQXVGLEdBQUFuNEQsR0FBQSxLQUEwQixxQkFDclgsSUFBQXM3RCxHQUFBN2lCLEdBQUFySix1QkFBQW1zQixHQUFBOWlCLEdBQUFwSixrQkFBQW1zQixHQUFBLFdBQUFDLElBQUEsRUFBQXR2QixHQUFBLEtBQUF1dkIsR0FBQSxLQUFBenZCLEdBQUEsRUFBQTB2QixJQUFBLEVBQUFDLElBQUEsRUFBQXB2QixHQUFBLEtBQUFxdkIsSUFBQSxFQUFBQyxHQUFBLEtBQUFDLEdBQUEsS0FBQUMsR0FBQSxLQUFBYixHQUFBLEtBQXlKLFNBQUFjLEtBQWMsVUFBQTl2QixHQUFBLFFBQUFuc0MsRUFBQW1zQyxHQUFBa0csT0FBK0IsT0FBQXJ5QyxHQUFTLENBQUUsSUFBQUMsRUFBQUQsRUFBUSxPQUFBQyxFQUFBeVIsS0FBYyxXQUFBMVQsRUFBQWlDLEVBQUFOLEtBQUEydEQsa0JBQXNDLE1BQUF0dkQsR0FBQXV2RCxLQUE0QixNQUFNLE9BQUFxRixLQUFhcEYsS0FBTSxNQUFNLE9BQUFzRixHQUFBN3lELEdBQWEsTUFBTSxPQUFBMnlELEtBQWEsTUFBTSxRQUFBdUYsR0FBQWw0RCxHQUFjRCxJQUFBcXlDLE9BQVdxcEIsR0FBQSxLQUFRenZCLEdBQUEsRUFBSTB2QixJQUFBLEVBQU1DLElBQUEsRUFBTXp2QixHQUFBLEtBQy9aLFNBQUErdkIsS0FBYyxLQUFLLE9BQUExdkIsSUFBUyxDQUFFLElBQUF4c0MsRUFBQXdzQyxHQUFBeVMsVUFBMkMsR0FBekIsR0FBQWovQyxHQUFBNG9ELEdBQUFwYyxHQUFBbUYsVUFBQSxJQUF5QixJQUFBM3hDLEVBQUEsQ0FBVSxJQUFBQyxFQUFBdXNDLEdBQUFvUyxVQUFrQixPQUFBMytDLElBQUEsUUFBQUEsSUFBQW1yQyxPQUFBLG1CQUFBbnJDLElBQUEsTUFBQUEsRUFBQWtqQyxRQUFBLE9BQTZFLFVBQUFuakMsR0FBYSxPQUFBbzZELEdBQUE1dEIsSUFBYUEsR0FBQXlTLFlBQUEsRUFBZ0IsTUFBTSxPQUFBbWIsR0FBQTV0QixJQUFhQSxHQUFBeVMsWUFBQSxFQUFnQnFiLEdBQUE5dEIsR0FBQW9TLFVBQUFwUyxJQUFrQixNQUFNLE9BQUE4dEIsR0FBQTl0QixHQUFBb1MsVUFBQXBTLElBQXlCLE1BQU0sT0FBQTB0QixHQUFBbDZELEVBQUF3c0MsSUFBQXhzQyxFQUFBcXlDLE9BQUEsS0FBQXJ5QyxFQUFBeUIsTUFBQSxLQUFBekIsRUFBQXN1RCxjQUFBLEtBQUF0dUQsRUFBQXV1RCxZQUFBLGFBQUF2dUQsSUFBQTQrQyxhQUFBNStDLEVBQUFxeUMsT0FBQSxLQUFBcnlDLEVBQUF5QixNQUFBLEtBQUF6QixFQUFBc3VELGNBQUEsS0FBQXR1RCxFQUFBdXVELFlBQUEsTUFBaUwvaEIsTUFBQW1pQixZQUN2ZSxTQUFBd04sS0FBYyxLQUFLLE9BQUEzdkIsSUFBUyxDQUFFLE9BQUFBLEdBQUF5UyxVQUFBai9DLEVBQUEsQ0FBc0IsSUFBQUEsRUFBQXdzQyxHQUFBb1MsVUFBQTMrQyxFQUFBdXNDLEdBQXNCLE9BQUF2c0MsRUFBQXlSLEtBQWMsdUJBQUFxVSxHQUFBaXRDLEdBQUFELEdBQUE5eUQsR0FBbUMsTUFBQUQsRUFBUSxjQUFBQyxFQUFBZy9DLFdBQUEsT0FBQWovQyxFQUFBLENBQXFDLElBQUFoQyxFQUFBZ0MsRUFBQXd1RCxjQUFBcHNELEVBQUFwQyxFQUFBc3VELGNBQXNEcnVELEdBQWRELEVBQUFDLEVBQUEweEMsV0FBYzhmLHdCQUFBeHhELEVBQUFrdUQsY0FBQWx1RCxFQUFBTixLQUFBM0IsRUFBQW10QyxHQUFBbHJDLEVBQUFOLEtBQUEzQixHQUFBb0UsR0FBb0VwQyxFQUFBbzhELG9DQUFBbjhELEVBQXdDLE1BQUFELEVBQVEsMENBQUFBLEVBQTRDLFFBQUFzcEMsRUFBQSxRQUFrQmtELE1BQUFtaUIsWUFDaFosU0FBQTBOLEdBQUFyOEQsRUFBQUMsR0FBaUIsS0FBSyxPQUFBdXNDLElBQVMsQ0FBRSxJQUFBeHVDLEVBQUF3dUMsR0FBQXlTLFVBQWtCLE1BQUFqaEQsRUFBQSxDQUFTLElBQUFvRSxFQUFBb3FDLEdBQUFvUyxVQUFBemtELEVBQUFxeUMsR0FBQTNDLEVBQUE1cEMsRUFBMEIsT0FBQTlGLEVBQUF1WCxLQUFjLHVCQUFBcVUsR0FBQW90QyxHQUFBQyxHQUFBajVELEdBQW1DLE1BQU0sV0FBQTR1QyxFQUFBNXVDLEVBQUF3M0MsVUFBeUIsS0FBQXgzQyxFQUFBOGtELFVBQUEsVUFBQTc4QyxFQUFBMm1DLEVBQUE2b0Isd0JBQW1ELENBQUssSUFBQTN6RCxFQUFBOUQsRUFBQWcwRCxjQUFBaDBELEVBQUF3RixLQUFBeUMsRUFBQW9zRCxjQUFBcmpCLEdBQUFoeEMsRUFBQXdGLEtBQUF5QyxFQUFBb3NELGVBQXVFemxCLEVBQUFpdUIsbUJBQUEvNEQsRUFBQW1FLEVBQUFrc0QsY0FBQXZsQixFQUFBcXpCLHFDQUE4RixRQUFoQmg2RCxFQUFBakksRUFBQW8wRCxjQUFnQjBLLEdBQUE5K0QsRUFBQWlJLEVBQUEybUMsR0FBc0IsTUFBTSxPQUF1QixXQUF2QjNtQyxFQUFBakksRUFBQW8wRCxhQUF1QixDQUFvQixHQUFQeGxCLEVBQUEsS0FBTyxPQUFBNXVDLEVBQUFzSCxNQUFBLE9BQUF0SCxFQUFBc0gsTUFBQWlRLEtBQXNDLE9BQUFxM0IsRUFDaGY1dUMsRUFBQXNILE1BQUFrd0MsVUFBa0IsTUFBTSxPQUFBNUksRUFBQTV1QyxFQUFBc0gsTUFBQWt3QyxVQUEyQnNuQixHQUFBOStELEVBQUFpSSxFQUFBMm1DLEdBQVksTUFBTSxPQUFBYyxFQUFBMXZDLEVBQUF3M0MsVUFBcUIsT0FBQXZ2QyxHQUFBLEVBQUFqSSxFQUFBOGtELFdBQUFnTixHQUFBOXhELEVBQUF3RixLQUFBeEYsRUFBQXEwRCxnQkFBQTNrQixFQUFBN3pCLFFBQStELE1BQU0sT0FBYSxPQUFhLFFBQWMsUUFBYyxjQUFjLFFBQUFzekIsRUFBQSxRQUFrQixJQUFBdHJDLElBQUEsUUFBQTdELEVBQUFxeUMsR0FBQXBCLE9BQUF2QixFQUFBMkMsR0FBQW1GLFVBQUEsbUJBQUF4M0MsSUFBQTB2QyxHQUFBMXZDLEVBQUFncEMsUUFBQTBHLElBQWtGLElBQUE3ckMsSUFBQTg5RCxHQUFBOTdELEdBQWN3c0MsTUFBQW1pQixZQUNsRyxTQUFBK0IsS0FBYyxPQUFBcUwsSUFBQXRQLEdBQUFzUCxJQUFrQixPQUFBQyxTQUNuUixTQUFBTSxHQUFBdDhELEVBQUFDLEdBQWlCNDdELEdBQUFKLElBQUEsRUFBU3o3RCxFQUFBbWpDLFVBQUFsakMsR0FBQXFwQyxFQUFBLE9BQThCLElBQUF0ckMsRUFBQWdDLEVBQUF1OEQsNEJBQW9DLElBQUF2K0QsR0FBQXNyQyxFQUFBLE9BQXNCdHBDLEVBQUF1OEQsNEJBQUEsRUFBZ0MsSUFBQW42RCxFQUFBbkMsRUFBQTR1RCxlQUFBMTBELEVBQUE4RixFQUFBMnVELG9CQUE0TSxJQTlGOVYsU0FBQTV1RCxFQUFBQyxHQUErQixHQUFkRCxFQUFBdXZELFVBQUEsRUFBYyxJQUFBdHZELEVBQUFELEVBQUF3dkQsb0JBQUEsRUFBQXh2RCxFQUFBeXZELGtCQUFBLEVBQUF6dkQsRUFBQTZ2RCxzQkFBQSxFQUFBN3ZELEVBQUE4dkQsb0JBQUEsRUFBQTl2RCxFQUFBNHZELGlCQUFBLE1BQThILENBQUszdkQsRUFBQUQsRUFBQTR2RCxtQkFBQTV2RCxFQUFBNHZELGlCQUFBLEdBQTZDLElBQUE1eEQsRUFBQWdDLEVBQUF5dkQsa0JBQTBCLElBQUF6eEQsTUFBQWlDLEVBQUFELEVBQUF3dkQsb0JBQUF4dkQsRUFBQXl2RCxrQkFBQSxFQUFBenZELEVBQUF3dkQsb0JBQUF2dkQsSUFBQUQsRUFBQXd2RCxvQkFBQXh2RCxFQUFBeXZELG9CQUF3SixLQUExQnp4RCxFQUFBZ0MsRUFBQTZ2RCx1QkFBMEJQLEdBQUF0dkQsRUFBQUMsS0FBQUQsRUFBQTh2RCxxQkFBQTl2RCxFQUFBNnZELHNCQUFBLEVBQUE3dkQsRUFBQTh2RCxvQkFBQSxFQUFBOXZELEVBQUE0dkQsaUJBQUEsRUFBQU4sR0FBQXR2RCxFQUFBQyxJQUNqWUEsRUFBQWpDLEdBQUFzeEQsR0FBQXR2RCxFQUFBQyxHQUFheXZELEdBQUEsRUFBQTF2RCxHQTZGb0x3OEQsQ0FBQXg4RCxFQUFBN0YsRUFBQWlJLEVBQUFqSSxFQUFBaUksR0FBY201RCxHQUFBcDRCLFFBQUEsS0FBZ0IvZ0MsT0FBQSxFQUFTLEVBQUFuQyxFQUFBZy9DLFVBQUEsT0FBQWgvQyxFQUFBd3VELFlBQUF4dUQsRUFBQXd1RCxXQUFBRSxXQUFBMXVELEVBQUFtQyxFQUFBbkMsRUFBQXl1RCxhQUFBdHNELEVBQUFuQyxFQUFBbUMsRUFBQW5DLEVBQUF5dUQsWUFBa0czQyxHQUFBdEgsR0FBTXVILEdBakloVixXQUFjLElBQUFoc0QsRUFBQW9sRCxLQUFXLEdBQUFFLEdBQUF0bEQsR0FBQSxDQUFVLHNCQUFBQSxFQUFBLElBQUFDLEVBQUEsQ0FBK0I4VSxNQUFBL1UsRUFBQTRsRCxlQUFBdC9DLElBQUF0RyxFQUFBNmxELG1CQUEyQzdsRCxFQUFBLENBQXFELElBQUFoQyxHQUE3Q2lDLEtBQUFELEVBQUFxTyxnQkFBQXBPLEVBQUE2USxhQUFBdlosUUFBNkN3dUQsY0FBQTlsRCxFQUFBOGxELGVBQXVDLEdBQUEvbkQsR0FBQSxJQUFBQSxFQUFBZ29ELFdBQUEsQ0FBd0IvbEQsRUFBQWpDLEVBQUFpb0QsV0FBZSxJQUFBN2pELEVBQUFwRSxFQUFBa29ELGFBQUEvckQsRUFBQTZELEVBQUFtb0QsVUFBbUNub0QsSUFBQW9vRCxZQUFnQixJQUFJbm1ELEVBQUE0TixTQUFBMVQsRUFBQTBULFNBQXNCLE1BQUE4N0IsR0FBUzFwQyxFQUFBLEtBQU8sTUFBQUQsRUFBUSxJQUFBNnBDLEVBQUEsRUFBQWQsR0FBQSxFQUFBOXFDLEdBQUEsRUFBQTVCLEVBQUEsRUFBQThzQyxFQUFBLEVBQUFobkMsRUFBQW5DLEVBQUExQyxFQUFBLEtBQXFDMkMsRUFBQSxPQUFRLENBQUUsUUFBQXRGLEVBQWF3SCxJQUFBbEMsR0FBQSxJQUFBbUMsR0FBQSxJQUFBRCxFQUFBMEwsV0FBQWs3QixFQUFBYyxFQUFBem5DLEdBQXNDRCxJQUFBaEksR0FBQSxJQUFBNkQsR0FBQSxJQUFBbUUsRUFBQTBMLFdBQUE1UCxFQUFBNHJDLEVBQUE3ckMsR0FBc0MsSUFBQW1FLEVBQUEwTCxXQUFBZzhCLEdBQUExbkMsRUFBQXNSLFVBQUFoWSxRQUM3ZCxRQUFBZCxFQUFBd0gsRUFBQXFSLGFBQWlDbFcsRUFBQTZFLEVBQUlBLEVBQUF4SCxFQUFJLE9BQU0sQ0FBRSxHQUFBd0gsSUFBQW5DLEVBQUEsTUFBQUMsRUFBNkQsR0FBNUMzQyxJQUFBMkMsS0FBQTVELElBQUErRixJQUFBMm1DLEVBQUFjLEdBQXNCdnNDLElBQUFuRCxLQUFBZ3ZDLElBQUFuckMsSUFBQUMsRUFBQTRyQyxHQUFzQixRQUFBbHZDLEVBQUF3SCxFQUFBK04sYUFBQSxNQUFzQzVTLEdBQUo2RSxFQUFBN0UsR0FBSWdILFdBQWVuQyxFQUFBeEgsRUFBSXNGLEdBQUEsSUFBQThvQyxJQUFBLElBQUE5cUMsRUFBQSxNQUF1QjhXLE1BQUFnMEIsRUFBQXppQyxJQUFBckksUUFBZWdDLEVBQUEsS0FBWUEsS0FBQSxDQUFNOFUsTUFBQSxFQUFBek8sSUFBQSxRQUFlckcsRUFBQSxLQUFZLE9BQU93bEQsWUFBQXpsRCxFQUFBMGxELGVBQUF6bEQsR0FnSStFdzhELEdBQVFoWSxJQUFBLEVBQU1qWSxHQUFBcHFDLEVBQVEsT0FBQW9xQyxJQUFTLENBQUVyeUMsR0FBQSxFQUFLLElBQUEwdkMsT0FBQSxFQUFhLElBQUlzeUIsS0FBSyxNQUFBbCtELEdBQVM5RCxHQUFBLEVBQUEwdkMsRUFBQTVyQyxFQUFTOUQsSUFBQSxPQUFBcXlDLElBQUFsRCxFQUFBLE9BQUF5d0IsR0FBQXZ0QixHQUFBM0MsR0FBQSxPQUFBMkMsV0FBQW1pQixhQUFpRSxJQUFBbmlCLEdBQUFwcUMsRUFBUSxPQUFBb3FDLElBQVMsQ0FBRXJ5QyxHQUFBLEVBQ2xmMHZDLE9BQUEsRUFBUyxJQUFJcXlCLEtBQUssTUFBQWorRCxHQUFTOUQsR0FBQSxFQUFBMHZDLEVBQUE1ckMsRUFBUzlELElBQUEsT0FBQXF5QyxJQUFBbEQsRUFBQSxPQUFBeXdCLEdBQUF2dEIsR0FBQTNDLEdBQUEsT0FBQTJDLFdBQUFtaUIsYUFBNEcsSUFBM0NuSixHQUFBd0csSUFBT0EsR0FBQSxLQUFRdkgsS0FBQXNILEdBQVFBLEdBQUEsS0FBUS9yRCxFQUFBbWpDLFFBQUFsakMsRUFBWXVzQyxHQUFBcHFDLEVBQVEsT0FBQW9xQyxJQUFTLENBQUVyeUMsR0FBQSxFQUFLMHZDLE9BQUEsRUFBUyxJQUFJd3lCLEdBQUFyOEQsRUFBQWhDLEdBQVEsTUFBQUMsR0FBUzlELEdBQUEsRUFBQTB2QyxFQUFBNXJDLEVBQVM5RCxJQUFBLE9BQUFxeUMsSUFBQWxELEVBQUEsT0FBQXl3QixHQUFBdnRCLEdBQUEzQyxHQUFBLE9BQUEyQyxXQUFBbWlCLGFBQWlFLFVBQUF2c0QsR0FBQSxPQUFBMDVELEdBQUEsQ0FBd0IsSUFBQS95QixFQUZ4UyxTQUFBL29DLEVBQUFDLEdBQWlCKzdELEdBQUFELEdBQUFELEdBQUEsS0FBYyxJQUFBOTlELEVBQUEwdUMsR0FBUUEsSUFBQSxFQUFLLEdBQUcsT0FBQXpzQyxFQUFBZy9DLFVBQUEsQ0FBb0IsSUFBQTc4QyxHQUFBLEVBQUFqSSxPQUFBLEVBQWtCLElBQUksSUFBQTB2QyxFQUFBNXBDLEVBQVE4bEIsR0FBQXV0QyxHQUFBUCxHQUFBbHBCLEdBQVk5akIsR0FBQWd0QyxHQUFBTSxHQUFBeHBCLEdBQVksTUFBQWQsR0FBUzNtQyxHQUFBLEVBQUFqSSxFQUFBNHVDLEVBQVMzbUMsR0FBQTIzRCxHQUFBOTVELEVBQUE5RixHQUFXOEYsSUFBQTB1RCxpQkFBZSxPQUFBMXVELEdBQWdCeXNDLEdBQUExdUMsRUFBdUIsS0FBbkJBLEVBQUFnQyxFQUFBNnVELGlCQUFtQitMLEdBQUE1NkQsRUFBQWhDLEdBQWUydUMsSUFBQUQsSUFBQWd3QixHQUFBLGdCQUU2RTU1RCxLQUFBLEtBQUE5QyxFQUFBb0MsR0FBd0IyNUQsR0FBQXg1RCxFQUFBbzZELHlCQUFBcDZELEVBQUFxNkQsd0JBQUEsV0FBbUUsT0FBQXJRLEdBQUF4akIsS0FBZWl6QixHQUFBanpCLEVBQUsweUIsR0FBQUksSUFBQSxFQUFTLG1CQUFBOU4sT0FBQTl0RCxFQUFBMHhDLFdBQXdDM3pDLEVBQUFpQyxFQUFBNHVELGVBQ2hjLEtBRDJlNXVELEdBQXhCQSxJQUFBMnVELHFCQUMzZDV3RCxFQUFBaUMsRUFBQWpDLEtBQVFtOUQsR0FBQSxNQXVCeVosU0FBQW43RCxFQUFBQyxHQUFpQkQsRUFBQTZ1RCxlQUFBNXVELEVBQW1CRCxFQUFBNjhELGFBQUEsS0F2QjVhQyxDQUFBOThELEVBQUFDLEdBQ3pCLFNBQUE4OEQsR0FBQS84RCxHQUFlLE9BQU0sQ0FBRSxJQUFBQyxFQUFBRCxFQUFBNCtDLFVBQUE1Z0QsRUFBQWdDLEVBQUFxeUMsT0FBQWp3QyxFQUFBcEMsRUFBQTZiLFFBQXlDLFlBQUE3YixFQUFBaS9DLFdBQUEsQ0FBMkI5UyxHQUFBbnNDLEVBQUlBLEVBQUEsQ0FBRyxJQUFBN0YsRUFBQThGLEVBQVk0cEMsRUFBQW9DLEdBQVFsRCxHQUFaOW9DLEVBQUFELEdBQVlvdUQsYUFBcUIsT0FBQW51RCxFQUFBeVIsS0FBYyxPQUFhLGNBQWMscUJBQXFCLE9BQUF1NUIsR0FBQWhyQyxFQUFBTixPQUFBNHRELEtBQXdCLE1BQU0sT0FBQXFGLEtBQWFwRixNQUFNemtCLEVBQUE5b0MsRUFBQTB4QyxXQUFjeWxCLGlCQUFBcnVCLEVBQUFya0MsUUFBQXFrQyxFQUFBcXVCLGVBQUFydUIsRUFBQXF1QixlQUFBLE1BQXFFLE9BQUFqOUQsR0FBQSxPQUFBQSxFQUFBc0gsUUFBQXkwRCxHQUFBajJELEtBQUFnL0MsWUFBQSxHQUFrRHFhLEdBQUFyNUQsR0FBTSxNQUFNLE9BQUE2eUQsR0FBQTd5RCxHQUFhLElBQUFoQyxFQUFBdzBELEdBQUFELEdBQUFydkIsU0FBOEIsR0FBVDBHLEVBQUE1cEMsRUFBQU4sS0FBUyxPQUFBeEYsR0FBQSxNQUFBOEYsRUFBQTB4QyxVQUFBNG5CLEdBQUFwL0QsRUFBQThGLEVBQUE0cEMsRUFBQWQsRUFBQTlxQyxHQUFBOUQsRUFBQWl4QyxNQUFBbnJDLEVBQUFtckMsTUFBQW5yQyxFQUFBZy9DLFdBQ3RiLFVBQUssR0FBQWxXLEVBQUEsQ0FBVyxJQUFBMXNDLEVBQUFvMkQsR0FBQTltQixHQUFBeEksU0FBb0IsR0FBQSt5QixHQUFBajJELEdBQUEsQ0FBYzlGLEdBQUo0dUMsRUFBQTlvQyxHQUFJMHhDLFVBQWMsSUFBQXhJLEVBQUFKLEVBQUFwcEMsS0FBQXdDLEVBQUE0bUMsRUFBQXlsQixjQUFBbHhELEVBQUFXLEVBQWdFLE9BQTdCOUQsRUFBQTIzQyxHQUFBL0ksRUFBUTV1QyxFQUFBNDNDLEdBQUE1dkMsRUFBUTBuQyxPQUFBLEVBQVM1ckMsRUFBQWtyQyxHQUFjLDBCQUFBbUIsR0FBQSxPQUFBbndDLEdBQXdDLE1BQU0sNEJBQUFndkMsRUFBQSxFQUFrQ0EsRUFBQXlLLEdBQUFuNEMsT0FBWTB0QyxJQUFBbUIsR0FBQXNKLEdBQUF6SyxHQUFBaHZDLEdBQWUsTUFBTSxhQUFBbXdDLEdBQUEsUUFBQW53QyxHQUEyQixNQUFNLGlDQUFBbXdDLEdBQUEsUUFBQW53QyxHQUFpRG13QyxHQUFBLE9BQUFud0MsR0FBWSxNQUFNLFdBQUFtd0MsR0FBQSxRQUFBbndDLEdBQXlCbXdDLEdBQUEsU0FBQW53QyxHQUFjLE1BQU0sY0FBQW13QyxHQUFBLFNBQUFud0MsR0FBNkIsTUFBTSxZQUFBa2hELEdBQUFsaEQsRUFBQWdJLEdBQXFCbW9DLEdBQUEsVUFBQW53QyxHQUFlMHhELEdBQUF2dUQsRUFBQSxZQUFpQixNQUFNLGFBQUFuRCxFQUFBZ2hELGNBQzFlLENBQUNvZixjQUFBcDRELEVBQUFxNEQsVUFBMEJsd0IsR0FBQSxVQUFBbndDLEdBQWUweEQsR0FBQXZ1RCxFQUFBLFlBQWlCLE1BQU0sZUFBQW9xRCxHQUFBdnRELEVBQUFnSSxHQUFBbW9DLEdBQUEsVUFBQW53QyxHQUFBMHhELEdBQUF2dUQsRUFBQSxZQUF1RSxJQUFBdXNDLEtBQWY4aEIsR0FBQTF0RCxFQUFBa0UsR0FBUWduQyxFQUFBLEtBQU9obkMsSUFBQXBLLGVBQUE4eEMsS0FBQXh0QyxFQUFBOEYsRUFBQTBuQyxHQUFBLGFBQUFBLEVBQUEsaUJBQUF4dEMsRUFBQWxDLEVBQUFvWixjQUFBbFgsSUFBQThzQyxFQUFBLFlBQUE5c0MsSUFBQSxpQkFBQUEsR0FBQWxDLEVBQUFvWixjQUFBLEdBQUFsWCxJQUFBOHNDLEVBQUEsZUFBQTlzQyxJQUFBazBDLEVBQUF4NEMsZUFBQTh4QyxJQUFBLE1BQUF4dEMsR0FBQXd2RCxHQUFBdnVELEVBQUF1c0MsSUFBME4sT0FBQTVyQyxHQUFVLFlBQUFnNkMsR0FBQTk5QyxHQUFtQndoRCxHQUFBeGhELEVBQUFnSSxHQUFBLEdBQVcsTUFBTSxlQUFBODFDLEdBQUE5OUMsR0FBc0J5dEQsR0FBQXp0RCxHQUFRLE1BQU0sZ0NBQWtDLDJCQUFBZ0ksRUFBQXMzRCxVQUN0ZHQvRCxFQUFBdS9ELFFBQUE1TixJQUFlamlCLEVBQUFWLEVBQUlKLEVBQUF3bEIsWUFBQTFrQixHQUFnQmQsRUFBQSxPQUFBYyxJQUFpQnV2QixHQUFBbjVELE9BQVMsQ0FBS2tDLEVBQUFsQyxFQUFJOUYsRUFBQTB2QyxFQUFJdnNDLEVBQUF5ckMsRUFBSUksRUFBQSxJQUFBbHJDLEVBQUE0UCxTQUFBNVAsSUFBQW9RLGNBQW1DaFMsSUFBQTZyRCxHQUFBOTVCLE9BQUEveEIsRUFBQWdzRCxHQUFBbHVELElBQXVCa0MsSUFBQTZyRCxHQUFBOTVCLEtBQUEsV0FBQWowQixNQUFBZ3ZDLEVBQUE5cUMsY0FBQSxRQUFBc1QsVUFBQSxxQkFBQXczQixFQUFBaHZDLEVBQUFvSyxZQUFBcEssRUFBQXFaLGFBQUEsaUJBQUFsVyxFQUFBd2QsR0FBQXF1QixJQUFBOXFDLGNBQUFsRSxFQUFBLENBQWlLMmdCLEdBQUF4ZCxFQUFBd2QsTUFBUXF1QixJQUFBOXFDLGNBQUFsRSxHQUFBLFdBQUFBLEdBQUFtRCxFQUFBazlELFdBQUFyeEIsRUFBQXF4QixVQUFBLElBQUFyeEIsSUFBQTZ6QixnQkFBQTNnRSxFQUFBbEMsSUFBNEZBLEVBQUFndkMsR0FBSTJJLEdBQUEzdkMsRUFBUWhJLEVBQUE0M0MsR0FBQWhKLEVBQVFzd0IsR0FBQWwvRCxFQUFBOEYsR0FBQSxNQUFjM0MsRUFBQW5ELEVBQVksSUFBQVEsRUFBQXNELEVBQUEwckMsRUFBQWlpQixHQUFSemlCLEVBQUFVLEVBQUkxbkMsRUFBQTRtQyxHQUFzQixPQUFBSSxHQUFVLDBCQUFBbUIsR0FBQSxPQUN2ZGh0QyxHQUFHVyxFQUFBa0UsRUFBSSxNQUFNLDRCQUFBbEUsRUFBQSxFQUFrQ0EsRUFBQTIxQyxHQUFBbjRDLE9BQVl3QyxJQUFBcXNDLEdBQUFzSixHQUFBMzFDLEdBQUFYLEdBQWVXLEVBQUFrRSxFQUFJLE1BQU0sYUFBQW1vQyxHQUFBLFFBQUFodEMsR0FBMkJXLEVBQUFrRSxFQUFJLE1BQU0saUNBQUFtb0MsR0FBQSxRQUFBaHRDLEdBQWlEZ3RDLEdBQUEsT0FBQWh0QyxHQUFZVyxFQUFBa0UsRUFBSSxNQUFNLFdBQUFtb0MsR0FBQSxRQUFBaHRDLEdBQXlCZ3RDLEdBQUEsU0FBQWh0QyxHQUFjVyxFQUFBa0UsRUFBSSxNQUFNLGNBQUFtb0MsR0FBQSxTQUFBaHRDLEdBQTZCVyxFQUFBa0UsRUFBSSxNQUFNLFlBQUFrNUMsR0FBQS85QyxFQUFBNkUsR0FBcUJsRSxFQUFBZzlDLEdBQUEzOUMsRUFBQTZFLEdBQVVtb0MsR0FBQSxVQUFBaHRDLEdBQWV1dUQsR0FBQWx4RCxFQUFBLFlBQWlCLE1BQU0sYUFBQXNELEVBQUFtcEQsR0FBQTlwRCxFQUFBNkUsR0FBd0IsTUFBTSxhQUFBN0UsRUFBQTY5QyxjQUFBLENBQStCb2YsY0FBQXA0RCxFQUFBcTRELFVBQTBCdjhELEVBQUE4RSxFQUFBLEdBQU1aLEVBQUEsQ0FBSWxJLFdBQUEsSUFBZXF3QyxHQUFBLFVBQUFodEMsR0FBZXV1RCxHQUFBbHhELEVBQUEsWUFBaUIsTUFBTSxlQUFBK3NELEdBQUFwcUQsRUFDbmY2RSxHQUFHbEUsRUFBQXVwRCxHQUFBbHFELEVBQUE2RSxHQUFVbW9DLEdBQUEsVUFBQWh0QyxHQUFldXVELEdBQUFseEQsRUFBQSxZQUFpQixNQUFNLFFBQUFzRCxFQUFBa0UsRUFBWXdwRCxHQUFBeGlCLEVBQUFsckMsR0FBUTVCLE9BQUEsRUFBUyxJQUFBd2dCLEVBQUFzc0IsRUFBQTZDLEVBQUExdUMsRUFBQStyQyxFQUFBcHJDLEVBQWdCLElBQUE1QixLQUFBZ3RDLEVBQUEsR0FBQUEsRUFBQXR4QyxlQUFBc0UsR0FBQSxDQUFtQyxJQUFBK3NDLEVBQUFDLEVBQUFodEMsR0FBVyxVQUFBQSxFQUFBdXVELEdBQUE1ZSxFQUFBNUMsR0FBQSw0QkFBQS9zQyxFQUFBLE9BQUErc0MsTUFBQWdqQixZQUFBLElBQUE1RCxHQUFBeGMsRUFBQTVDLEdBQUEsYUFBQS9zQyxFQUFBLGlCQUFBK3NDLEdBQUEsYUFBQXZzQixHQUFBLEtBQUF1c0IsSUFBQXdmLEdBQUE1YyxFQUFBNUMsR0FBQSxpQkFBQUEsR0FBQXdmLEdBQUE1YyxFQUFBLEdBQUE1QyxHQUFBLG1DQUFBL3NDLEdBQUEsNkJBQUFBLEdBQUEsY0FBQUEsSUFBQWswQyxFQUFBeDRDLGVBQUFzRSxHQUFBLE1BQUErc0MsR0FBQXlpQixHQUFBbHhELEVBQUEwQixHQUFBLE1BQUErc0MsR0FBQXVSLEdBQUEzTyxFQUFBM3ZDLEVBQUErc0MsRUFBQU8sSUFBa1YsT0FBQVIsR0FBVSxZQUFBOE8sR0FBQTM2QyxHQUMxZXErQyxHQUFBcitDLEVBQUE2RSxHQUFBLEdBQVcsTUFBTSxlQUFBODFDLEdBQUEzNkMsR0FBc0JzcUQsR0FBQXRxRCxHQUFRLE1BQU0sbUJBQUE2RSxFQUFBbEksT0FBQXFELEVBQUF3UixhQUFBLFdBQUFrc0MsR0FBQTc0QyxFQUFBbEksUUFBb0UsTUFBTSxjQUFBZ0UsRUFBQVgsR0FBa0JrOUQsV0FBQXI0RCxFQUFBcTRELFNBQWtDLE9BQVZsOUQsRUFBQTZFLEVBQUFsSSxPQUFVcXRELEdBQUFycEQsSUFBQWtFLEVBQUFxNEQsU0FBQWw5RCxHQUFBLFNBQUE2RSxFQUFBcVksY0FBQThzQyxHQUFBcnBELElBQUFrRSxFQUFBcTRELFNBQUFyNEQsRUFBQXFZLGNBQUEsR0FBMkYsTUFBTSwyQkFBQXZjLEVBQUF3N0QsVUFBQW44RCxFQUFBbzhELFFBQUE1TixLQUFzRC9pQixFQUFBa2pCLEdBQUFwaUIsRUFBQWQsS0FBQXF3QixHQUFBbjVELEdBQW1CQSxFQUFBMHhDLFVBQUF4M0MsRUFBYyxPQUFBOEYsRUFBQW1yQyxNQUFBbnJDLEVBQUFnL0MsV0FBQSxVQUFpQyxPQUFBaC9DLEVBQUEweEMsV0FBQXJJLEVBQUEsT0FBd0MsTUFBTSxPQUFBbnZDLEdBQUEsTUFBQThGLEVBQUEweEMsVUFBQTZuQixHQUFBci9ELEVBQUE4RixFQUFBOUYsRUFBQXEwRCxjQUFBemxCLElBQUEsaUJBQzFiQSxJQUFBLE9BQUE5b0MsRUFBQTB4QyxXQUFBckksRUFBQSxRQUFBbnZDLEVBQUFzNEQsR0FBQUQsR0FBQXJ2QixTQUFBc3ZCLEdBQUE5bUIsR0FBQXhJLFNBQUEreUIsR0FBQWoyRCxJQUFBNHBDLEdBQUFkLEVBQUE5b0MsR0FBQTB4QyxVQUFBeDNDLEVBQUE0dUMsRUFBQXlsQixjQUFBM2tCLEVBQUFpSSxHQUFBL0ksS0FBQWMsRUFBQXAyQixZQUFBdFosSUFBQWkvRCxHQUFBbjVELEtBQUE0cEMsRUFBQTVwQyxHQUFBOG9DLEdBQUEsSUFBQTV1QyxFQUFBMFQsU0FBQTFULElBQUFrVSxlQUFBc1ksZUFBQW9pQixJQUFBK0ksR0FBQTd4QyxFQUFBNHBDLEVBQUE4SCxVQUFBNUksSUFBaVAsTUFBTSxjQUFjLFFBQTBCLEdBQTFCQSxFQUFBOW9DLEVBQUFxdUQsY0FBMEIsT0FBQXJ1RCxFQUFBZy9DLFdBQUEsQ0FBeUJoL0MsRUFBQTR1RCxlQUFBaGxCLEVBQW1Cc0MsR0FBQWxzQyxFQUFJLE1BQUFELEVBQVErb0MsRUFBQSxPQUFBQSxFQUFXYyxFQUFBLE9BQUExdkMsR0FBQSxPQUFBQSxFQUFBbTBELGNBQW1DLE9BQUFuMEQsSUFBQTR1QyxHQUFBYyxJQUFBLFFBQUExdkMsSUFBQXNILE1BQUFvYSxXQUFBLFFBQUE1ZCxFQUFBZ0MsRUFBQXl1RCxjQUFBenVELEVBQUF5dUQsWUFBQXYwRCxJQUFBdzBELFdBQUExd0QsSUFBQWdDLEVBQUF5dUQsWUFDcll6dUQsRUFBQXd1RCxXQUFBdDBELElBQUF3MEQsV0FBQSxNQUFBeDBELEVBQUE4a0QsVUFBQSxLQUFrRGxXLEdBQUFjLEtBQUE1cEMsRUFBQWcvQyxXQUFBLEdBQXVCLE1BQU0sT0FBYSxPQUFhLGNBQWMsT0FBQTJULEtBQWEwRyxHQUFBcjVELEdBQU0sTUFBTSxRQUFBazRELEdBQUFsNEQsR0FBYyxNQUFNLE9BQWEsY0FBYyxRQUFBZ3JDLEdBQUFockMsRUFBQU4sT0FBQTR0RCxLQUF5QixNQUFNLGNBQWMsUUFBQWprQixFQUFBLE9BQWlCNkMsR0FBQSxLQUFXLEdBQUpsc0MsRUFBQUQsRUFBSSxJQUFBaXNDLElBQUEsSUFBQWhzQyxFQUFBMnVELG9CQUFBLENBQXlDLElBQUo3bEIsRUFBQSxFQUFJYyxFQUFBNXBDLEVBQUF3QixNQUFjLE9BQUFvb0MsSUFBUzF2QyxFQUFBMHZDLEVBQUFnbEIsZ0JBQUE5bEIsTUFBQTV1QyxJQUFBOEQsRUFBQTRyQyxFQUFBK2tCLHFCQUFBN2xCLE1BQUE5cUMsR0FBQTRyQyxJQUFBaHVCLFFBQThFNWIsRUFBQTJ1RCxvQkFBQTdsQixFQUF3QixVQUFBb0QsR0FBQSxPQUFBQSxHQUFxQixPQUFBbnVDLEdBQUEsU0FBQUEsRUFBQWloRCxhQUFBLE9BQUFqaEQsRUFBQTB3RCxjQUNuYzF3RCxFQUFBMHdELFlBQUExdUQsRUFBQTB1RCxhQUFBLE9BQUExdUQsRUFBQXl1RCxhQUFBLE9BQUF6d0QsRUFBQXl3RCxhQUFBendELEVBQUF5d0QsV0FBQUUsV0FBQTN1RCxFQUFBMHVELGFBQUExd0QsRUFBQXl3RCxXQUFBenVELEVBQUF5dUQsWUFBQSxFQUFBenVELEVBQUFpL0MsWUFBQSxPQUFBamhELEVBQUF5d0QsV0FBQXp3RCxFQUFBeXdELFdBQUFFLFdBQUEzdUQsRUFBQWhDLEVBQUEwd0QsWUFBQTF1RCxFQUFBaEMsRUFBQXl3RCxXQUFBenVELFFBQTJPLENBQWUsV0FBVkEsRUFBQXE3RCxHQUFBcjdELElBQVUsT0FBQUEsRUFBQWkvQyxXQUFBLEtBQUFqL0MsRUFBdUMsT0FBQWhDLE1BQUEwd0QsWUFBQTF3RCxFQUFBeXdELFdBQUEsS0FBQXp3RCxFQUFBaWhELFdBQUEsTUFBOEQsVUFBQTc4QyxFQUFBLE9BQUFBLEVBQXFCLFVBQUFwRSxFQUFnQixNQUFoQmdDLEVBQUFoQyxFQUEyQixZQUMvWSxTQUFBaS9ELEdBQUFqOUQsR0FBZSxJQUFBQyxFQUFBdTNELEdBQUF4M0QsRUFBQTQrQyxVQUFBNStDLEVBQUFpc0MsSUFBNkYsT0FBbkVqc0MsRUFBQXd1RCxjQUFBeHVELEVBQUFvdUQsYUFBK0IsT0FBQW51RCxNQUFBODhELEdBQUEvOEQsSUFBb0J1N0QsR0FBQXA0QixRQUFBLEtBQWdCbGpDLEVBQzVHLFNBQUFpOUQsR0FBQWw5RCxFQUFBQyxHQUFpQnc3RCxJQUFBbnlCLEVBQUEsT0FBbUJvbkIsS0FBSytLLElBQUEsRUFBTSxJQUFBejlELEVBQUFzOUQsR0FBQW40QixRQUFpQm00QixHQUFBbjRCLFFBQUFveEIsR0FBYyxJQUFBbnlELEVBQUFwQyxFQUFBZ3dELDJCQUFtQzV0RCxJQUFBNnBDLElBQUFqc0MsSUFBQTA3RCxJQUFBLE9BQUF2dkIsS0FBQTh2QixLQUFBaHdCLEdBQUE3cEMsRUFBQStwQyxHQUFBNGlCLElBQUEyTSxHQUFBMTdELEdBQUFtakMsUUFBQSxNQUFBbmpDLEVBQUF1OEQsNEJBQUEsR0FBMEcsSUFBVCxJQUFBcGlFLEdBQUEsSUFBUyxDQUFHLElBQUksR0FBQThGLEVBQUEsS0FBVSxPQUFBa3NDLEtBQUFneEIsTUFBZ0JoeEIsR0FBQTh3QixHQUFBOXdCLFNBQVMsS0FBVSxPQUFBQSxJQUFTQSxHQUFBOHdCLEdBQUE5d0IsSUFBUyxNQUFBOUMsR0FBUyxHQUFBNnVCLEdBQUFELEdBQUFELEdBQUEsS0FBQXhELEtBQUEsT0FBQXJvQixHQUFBaHlDLEdBQUEsRUFBQTZnRSxHQUFBM3hCLE9BQTBDLENBQUssT0FBQThDLElBQUE3QyxFQUFBLE9BQXlCLElBQUFPLEVBQUFzQyxHQUFBcEQsRUFBQWMsRUFBQXdJLE9BQW1CLFVBQUF0SixFQUF1QixDQUFLL29DLEVBQUEsQ0FBRyxJQUFBL0IsRUFBQStCLEVBQUEzRCxFQUFBMHNDLEVBQUFJLEVBQUFVLEVBQUExbkMsRUFBQWtuQyxFQUEwRSxHQUF0RE4sRUFBQWtELEdBQUk5QyxFQUFBOFYsV0FBQSxLQUFrQjlWLEVBQUF1bEIsWUFBQXZsQixFQUFBc2xCLFdBQUEsS0FBZ0MsT0FDOWV0c0QsR0FBQSxpQkFBQUEsR0FBQSxtQkFBQUEsRUFBQTdILEtBQUEsQ0FBb0QsSUFBQWdELEVBQUE2RSxFQUFRQSxFQUFBOUYsRUFBSSxJQUFBMUIsR0FBQSxFQUFBZ3ZDLEdBQUEsRUFBYyxHQUFHLFFBQUF4bkMsRUFBQXVQLElBQUEsQ0FBZSxJQUFBbUwsRUFBQTFhLEVBQUF5OEMsVUFBa0IsVUFBQS9oQyxHQUFBLFFBQUFBLElBQUF5eEMsZUFBQSxDQUEyQzNrQixFQUFBLGVBQUE5c0IsRUFBQXk2QyxZQUErQixNQUFtQyxpQkFBN0J6NkMsRUFBQTFhLEVBQUFpc0QsYUFBQWdQLGVBQTZCLEdBQUF2Z0QsRUFBQWxpQixFQUFBLElBQW1DLElBQUFBLEdBQUFraUIsRUFBQWxpQixPQUFBa2lCLElBQXdCMWEsSUFBQWt3QyxhQUFXLE9BQUFsd0MsR0FBZ0JBLEVBQUE5RixFQUFJLEdBQWlGLElBQTlFd2dCLEVBQUEsS0FBQTFhLEVBQUF1UCxPQUFBbUwsT0FBQSxJQUFBMWEsRUFBQXFzRCxjQUFBK0ksVUFBQSxPQUFBcDFELEVBQUFtc0QsZUFBOEV6eEMsRUFBQSxDQUE2RSxHQUF2RCxRQUFoQnhnQixFQUFBOEYsRUFBQW9zRCxlQUFnQmx5RCxFQUFBLElBQUF3d0QsS0FBQTN3QyxJQUFBNWUsR0FBQTZFLEVBQUFvc0QsWUFBQWx5RCxLQUFBNmYsSUFBQTVlLEdBQXVELE1BQUE2RSxFQUFBdkgsTUFBQSxDQUFtQnVILEVBQUE4OEMsV0FDMWUsR0FBRzlWLEVBQUE4VixZQUFBLEtBQW1CLElBQUE5VixFQUFBejNCLE1BQUEsT0FBQXkzQixFQUFBeVYsVUFBQXpWLEVBQUF6M0IsSUFBQSxLQUFBcTNCLEVBQUF3bkIsR0FBQSxhQUFBNytDLElBQUFvL0MsR0FBQUgsR0FBQXhuQixFQUFBSixLQUE2RUksRUFBQTBsQixlQUFBLFdBQTRCLE1BQUE3dUQsRUFBWTNELEVBQUEwc0MsRUFBSSxJQUFBaUQsR0FBUjdDLEVBQUFsckMsR0FBUW8vRCxVQUFrQixPQUFBcnhCLEtBQUE3QyxFQUFBazBCLFVBQUEsSUFBQXhDLEdBQUFoK0MsRUFBQSxJQUFBZ3dDLElBQUE3Z0IsRUFBQWh5QyxJQUFBc0QsRUFBQXVmLFNBQUEsS0FBQUEsRUFBQW12QixFQUFBanlDLElBQUF1RCxNQUFBdWYsRUFBQSxJQUFBZ3dDLElBQUE3Z0IsRUFBQWh5QyxJQUFBc0QsRUFBQXVmLElBQXFHQSxFQUFBcEgsSUFBQXBaLEtBQUF3Z0IsRUFBQVgsSUFBQTdmLEdBQUE4c0MsRUFBQW0wQixHQUFBeDZELEtBQUEsS0FBQXFtQyxFQUFBN3JDLEVBQUFqQixHQUFBaUIsRUFBQWhELEtBQUE2dUMsT0FBdUQsSUFBQXh1QyxFQUFBc0QsRUFBQSxpQkFBQTByQyxNQUFBLGVBQUFvbUIsR0FBQTl4RCxFQUFBOHFDLElBQUEsS0FBQTlxQyxFQUFBMHJDLEVBQUFodkMsR0FBb0UsR0FBQXNELEdBQUEwOUQsR0FBQTE5RCxJQUFBMDlELEdBQUExOUQsR0FBbUJrRSxFQUFBODhDLFdBQUEsS0FBa0I5OEMsRUFBQTBzRCxlQUFBOWxCLEVBQW1CLE1BQUEvb0MsRUFBUW1DLElBQUFrd0MsYUFBVyxPQUFBbHdDLEdBQWdCQSxFQUFBcEYsT0FBQTA4QyxHQUFBdFEsRUFBQXhwQyxPQUFBLHFCQUM1ZCx3TEFBQWc2QyxHQUFBeFEsSUFBK0x5eUIsSUFBQSxFQUFNejVELEVBQUFnM0QsR0FBQWgzRCxFQUFBZ25DLEdBQVVsckMsRUFBQTVCLEVBQUksR0FBRyxPQUFBNEIsRUFBQXlULEtBQWMsT0FBQXpULEVBQUFnaEQsV0FBQSxLQUF5QmhoRCxFQUFBNHdELGVBQUE5bEIsRUFBK0IrdkIsR0FBQTc2RCxFQUFaOHFDLEVBQUFneUIsR0FBQTk4RCxFQUFBa0UsRUFBQTRtQyxJQUFvQixNQUFBL29DLEVBQVEsVUFBQXJGLEVBQUF3SCxFQUFBd25DLEVBQUExckMsRUFBQTBCLEtBQUF3cEMsRUFBQWxyQyxFQUFBMHpDLFVBQUEsT0FBQTF6QyxFQUFBZ2hELGFBQUEsbUJBQUF0VixFQUFBdXRCLDBCQUFBLE9BQUEvdEIsR0FBQSxtQkFBQUEsRUFBQSt4QixvQkFBQSxPQUFBQyxRQUFBMWxELElBQUEwekIsS0FBQSxDQUF5TGxyQyxFQUFBZ2hELFdBQUEsS0FDcmVoaEQsRUFBQTR3RCxlQUFBOWxCLEVBQStCK3ZCLEdBQUE3NkQsRUFBWjhxQyxFQUFBa3lCLEdBQUFoOUQsRUFBQXRELEVBQUFvdUMsSUFBb0IsTUFBQS9vQyxHQUFTL0IsSUFBQW8wQyxhQUFXLE9BQUFwMEMsR0FBZ0JrdUMsR0FBQTR3QixHQUFBbHpCLEdBQVEsU0FKa1QxdkMsR0FBQSxFQUFBNmdFLEdBQUEzeEIsSUFJdlMsTUFBcUQsR0FBdENveUIsSUFBQSxFQUFNSCxHQUFBbjRCLFFBQUFubEMsRUFBYWs2RCxHQUFBRCxHQUFBRCxHQUFBLEtBQWN4RCxLQUFLcjZELEVBQUF1aEUsR0FBQSxLQUFBMTdELEVBQUE2OEQsYUFBQSxVQUFpQyxVQUFBMXdCLEdBQUFuc0MsRUFBQTY4RCxhQUFBLFNBQXFDLENBQTRELEdBQWpDLFFBQXRCNytELEVBQUFnQyxFQUFBbWpDLFFBQUF5YixZQUFzQnRWLEVBQUEsT0FBeUJveUIsR0FBQSxLQUFRRSxHQUFBLENBQTBFLEdBQW5FemhFLEVBQUE2RixFQUFBeXZELGtCQUFzQjVsQixFQUFBN3BDLEVBQUE4dkQsb0JBQXdCL21CLEVBQUEvb0MsRUFBQTR2RCxpQkFBcUIsSUFBQXoxRCxLQUFBaUksR0FBQSxJQUFBeW5DLEtBQUF6bkMsR0FBQSxJQUFBMm1DLEtBQUEzbUMsRUFBNkUsT0FBdEN1dEQsR0FBQTN2RCxFQUFBb0MsUUFBUW03RCxHQUFBdjlELEVBQUFoQyxFQUFBb0UsRUFBQXBDLEVBQUE2dUQsZ0JBQUEsR0FBcUMsSUFBQTd1RCxFQUFBdXZELFVBQUF0dkQsRUFDdFksT0FEeVpELEVBQUF1dkQsVUFBQSxFQUFjbnRELEVBQUFwQyxFQUFBZ3dELDJCQUFBNXRELEVBQ3BkbkMsRUFBQUQsRUFBQTZ1RCxlQUFBLGdCQUE4QjBPLEdBQUF2OUQsRUFBQWhDLEVBQUFvRSxFQUFBbkMsR0FBQSxHQUF1QkEsSUFBQSxJQUFBMDdELElBQUFoTSxHQUFBM3ZELEVBQUFvQyxJQUFBbkMsRUFBQSxlQUFBOHZELEdBQUEvdkQsRUFBQW9DLEtBQUF1NUQsUUFBQTE3RCxLQUFBLGVBQUFxd0QsTUFBQXJ3RCxFQUFBMDdELEdBQUExN0QsRUFBQXM5RCxHQUFBdjlELEVBQUFoQyxFQUFBb0UsRUFBQXBDLEVBQUE2dUQsZUFBQSxFQUFBNXVELEVBQUEsRUFBQUEsS0FBQUQsRUFBQXU4RCw0QkFBQW42RCxFQUFBcEMsRUFBQTY4RCxhQUFBNytELElBQ3JELFNBQUErN0QsR0FBQS81RCxFQUFBQyxHQUFpQixRQUFBakMsRUFBQWdDLEVBQUFxeUMsT0FBbUIsT0FBQXIwQyxHQUFTLENBQUUsT0FBQUEsRUFBQTBULEtBQWMsV0FBQXRQLEVBQUFwRSxFQUFBMnpDLFVBQXlCLHNCQUFBM3pDLEVBQUEyQixLQUFBdTNELDBCQUFBLG1CQUFBOTBELEVBQUE4NEQsb0JBQUEsT0FBQUMsUUFBQTFsRCxJQUFBclQsSUFBa0wsT0FBekJ1dUQsR0FBQTN5RCxFQUFyQmdDLEVBQUFpN0QsR0FBQWo5RCxFQUFWZ0MsRUFBQW01RCxHQUFBbDVELEVBQUFELEdBQVUsa0JBQTZCNHdELEdBQUE1eUQsRUFBQSxZQUF3QixNQUFNLE9BQStELE9BQXpCMnlELEdBQUEzeUQsRUFBckJnQyxFQUFBKzZELEdBQUEvOEQsRUFBakJnQyxFQUFBbTVELEdBQUFsNUQsRUFBQUQsR0FBaUIsa0JBQTZCNHdELEdBQUE1eUQsRUFBQSxZQUF3QkEsSUFBQXEwQyxPQUFXLElBQUFyeUMsRUFBQTBSLE1BQUFpL0MsR0FBQTN3RCxFQUFBaEMsRUFBQSs4RCxHQUFBLzZELEVBQUFoQyxFQUFBbTdELEdBQUFsNUQsRUFBQUQsR0FBQSxhQUFBNHdELEdBQUE1d0QsRUFBQSxhQUN0VyxTQUFBd3dELEdBQUF4d0QsRUFBQUMsR0FBaUIsSUFBQWpDLEVBQUF1RSxFQUFBaTdELG1DQUFBcDdELE9BQUEsRUFBb0QsU0FBQW5DLEVBQUFyRixNQUFBd0gsRUFBQSxnQkFBK0IsR0FBQXE1RCxLQUFBSSxHQUFBejVELEVBQUE2cEMsT0FBb0IsQ0FBSyxPQUFBanVDLEdBQVUsS0FBQXVFLEVBQUFrN0QsMkJBQUFyN0QsRUFBQSxXQUErQyxNQUFNLEtBQUFHLEVBQUFtN0QsOEJBQUF0N0QsRUFBQSw4QkFBQXBDLEVBQUEsV0FBa0YsTUFBTSxLQUFBdUMsRUFBQXE2RCx3QkFBQXg2RCxFQUFBLDhCQUFBcEMsRUFBQSxZQUE2RSxNQUFNLEtBQUF1QyxFQUFBbzdELHFCQUFBLEtBQUFwN0QsRUFBQXE3RCxzQkFBQXg3RCxFQUFBLEVBQTZELE1BQU0sUUFBQWtuQyxFQUFBLE9BQWlCLE9BQUFveUIsSUFBQXQ1RCxJQUFBNnBDLE1BQUE3cEMsRUFDcGEsT0FEMGJwRSxJQUFBdUUsRUFBQW03RCxnQ0FDamQsSUFBQUcsSUFBQXo3RCxFQUFBeTdELFNBQUF6N0QsR0FBdUJBLEVBQVMsU0FBQWs3RCxHQUFBdDlELEVBQUFDLEVBQUFqQyxHQUFtQixJQUFBb0UsRUFBQXBDLEVBQUFxOUQsVUFBa0IsT0FBQWo3RCxLQUFBK3ZELE9BQUFseUQsR0FBc0IsT0FBQXk3RCxJQUFBenZCLEtBQUFqdUMsRUFBQTA5RCxHQUFBLE1BQTRCejdELEVBQUFELEVBQUE2dkQsc0JBQUF6dEQsRUFBQXBDLEVBQUE4dkQsb0JBQUEsSUFBQTd2RCxHQUFBakMsR0FBQWlDLEdBQUFqQyxHQUFBb0UsSUFBNkVwQyxFQUFBdXZELFVBQUEsR0FBbUMsS0FBckJ0dkQsRUFBQUQsRUFBQTR2RCxtQkFBcUIzdkQsRUFBQWpDLEtBQUFnQyxFQUFBNHZELGlCQUFBNXhELEdBQW1DMHhELEdBQUExeEQsRUFBQWdDLEdBQTJCLEtBQW5CaEMsRUFBQWdDLEVBQUE2dUQsaUJBQW1CK0wsR0FBQTU2RCxFQUFBaEMsS0FDclMsU0FBQTI4RCxHQUFBMzZELEVBQUFDLEdBQWlCRCxFQUFBNnVELGVBQUE1dUQsSUFBQUQsRUFBQTZ1RCxlQUFBNXVELEdBQXlDLElBQUFqQyxFQUFBZ0MsRUFBQTQrQyxVQUFrQixPQUFBNWdELEtBQUE2d0QsZUFBQTV1RCxJQUFBakMsRUFBQTZ3RCxlQUFBNXVELEdBQW1ELElBQUFtQyxFQUFBcEMsRUFBQXF5QyxPQUFBbDRDLEVBQUEsS0FBc0IsVUFBQWlJLEdBQUEsSUFBQXBDLEVBQUEwUixJQUFBdlgsRUFBQTZGLEVBQUEyeEMsZUFBcUMsS0FBVSxPQUFBdnZDLEdBQVMsQ0FBZ0ksR0FBOUhwRSxFQUFBb0UsRUFBQXc4QyxVQUFjeDhDLEVBQUF3c0Qsb0JBQUEzdUQsSUFBQW1DLEVBQUF3c0Qsb0JBQUEzdUQsR0FBbUQsT0FBQWpDLEtBQUE0d0Qsb0JBQUEzdUQsSUFBQWpDLEVBQUE0d0Qsb0JBQUEzdUQsR0FBNkQsT0FBQW1DLEVBQUFpd0MsUUFBQSxJQUFBandDLEVBQUFzUCxJQUFBLENBQStCdlgsRUFBQWlJLEVBQUF1dkMsVUFBYyxNQUFNdnZDLElBQUFpd0MsT0FBVyxPQUFBbDRDLEVBQzNZLFNBQUF5MkQsR0FBQTV3RCxFQUFBQyxHQUEyQixRQUFWRCxFQUFBMjZELEdBQUEzNkQsRUFBQUMsT0FBVXc3RCxJQUFBLElBQUF4dkIsSUFBQWhzQyxFQUFBZ3NDLElBQUFnd0IsS0FBQTNNLEdBQUF0dkQsRUFBQUMsR0FBQXc3RCxLQUFBSSxJQUFBSCxLQUFBMTdELEdBQUE0NkQsR0FBQTU2RCxJQUFBNnVELGdCQUFBaVAsR0FBQUMsS0FBQUQsR0FBQSxFQUFBeDBCLEVBQUEsU0FBeUcsU0FBQTAwQixHQUFBaCtELEVBQUFDLEVBQUFqQyxFQUFBb0UsRUFBQWpJLEdBQXVCLE9BQUFvSSxFQUFBbzZELHlCQUFBcDZELEVBQUFrN0QsMkJBQUEsV0FBMEUsT0FBQXo5RCxFQUFBQyxFQUFBakMsRUFBQW9FLEVBQUFqSSxLQUFvQixJQUFBOGpFLEdBQUEsS0FBQTN1QixHQUFBLEtBQUE0dUIsR0FBQSxFQUFBQyxRQUFBLEVBQUF6eEIsSUFBQSxFQUFBMHhCLEdBQUEsS0FBQTV1QixHQUFBLEVBQUFxdUIsR0FBQSxFQUFBUSxJQUFBLEVBQUFDLEdBQUEsS0FBQTN4QixJQUFBLEVBQUE0eEIsSUFBQSxFQUFBQyxHQUFBLEtBQUFDLEdBQUFsOEQsRUFBQW04RCxlQUFBQyxHQUFBLFlBQUFGLEdBQUEsTUFBQUcsR0FBQUQsR0FBQVosR0FBQSxHQUFBRCxHQUFBLEVBQUFlLEdBQUEsS0FBOEosU0FBQUMsS0FBY0gsR0FBQSxhQUFBcDhELEVBQUFtOEQsZUFBQUQsSUFBQSxNQUNyYSxTQUFBTSxHQUFBLytELEVBQUFDLEdBQWlCLE9BQUFpK0QsR0FBQSxDQUFXLEdBQUFqK0QsRUFBQWkrRCxHQUFBLE9BQWUsT0FBQUMsSUFBQTU3RCxFQUFBbXFELHdCQUFBeVIsSUFBeUNELEdBQUFqK0QsRUFBS0QsRUFBQXVDLEVBQUFtOEQsZUFBQUQsR0FBc0JOLEdBQUE1N0QsRUFBQWlxRCwwQkFBQXdTLEdBQUEsQ0FBbUN4aEUsUUFBQSxlQUFBeUMsR0FBQUQsSUFBOEIsU0FBQXU5RCxHQUFBdjlELEVBQUFDLEVBQUFqQyxFQUFBb0UsRUFBQWpJLEdBQXVCNkYsRUFBQTZ1RCxlQUFBenNELEVBQW1CLElBQUFqSSxHQUFBZ2pFLEtBQUEsRUFBQWhqRSxJQUFBNkYsRUFBQWkvRCxjQUFBNVMsR0FBZ0gsU0FBQXJzRCxFQUFBQyxFQUFBakMsR0FBbUJnQyxFQUFBdThELDRCQUFBditELEVBQWdDZ0MsRUFBQTY4RCxhQUFBNThELEVBQWlCNitELEtBQUtGLEdBQUFELEdBQU1PLEdBQUFsL0QsRUFBQWhDLElBQS9MOEUsS0FBQSxLQUFBOUMsRUFBQUMsRUFBQWpDLEdBQUE3RCxLQUFBNkYsRUFBQXU4RCw0QkFBQXYrRCxFQUFBZ0MsRUFBQTY4RCxhQUFBNThELEdBQzFOLFNBQUFxd0QsS0FBYyxPQUFBNWpCLEdBQUFreUIsSUFBZU8sS0FBSyxJQUFBM3ZCLElBQUEsSUFBQUEsS0FBQXN2QixLQUFBRixHQUFBRCxJQUEyQkMsSUFBVSxTQUFBaEUsR0FBQTU2RCxFQUFBQyxHQUFpQixPQUFBRCxFQUFBby9ELG1CQUFBcC9ELEVBQUE2dUQsZUFBQTV1RCxFQUFBLE9BQUFxdkMsSUFBQTJ1QixHQUFBM3VCLEdBQUF0dkMsSUFBQW8vRCxrQkFBQXAvRCxJQUFBc3ZDLE1BQUE4dkIsa0JBQUFwL0QsR0FBQW8vRCxrQkFBQW5CLElBQUFoK0QsRUFBQUQsRUFBQTZ1RCxpQkFBQTd1RCxFQUFBNnVELGVBQUE1dUQsR0FBa0x5c0MsS0FBQUMsR0FBQTR4QixLQUFBSCxHQUFBcCtELEVBQUF3dkMsR0FBQSxXQUFBNnZCLEdBQUFyL0QsRUFBQSw2QkFBQUMsRUFBQXk4RCxHQUFBLGVBQUFxQyxHQUFBLytELEVBQUFDLElBQzFRLFNBQUFrL0QsS0FBYyxJQUFBbi9ELEVBQUEsRUFBQUMsRUFBQSxLQUFlLFVBQUFxdkMsR0FBQSxRQUFBdHhDLEVBQUFzeEMsR0FBQWx0QyxFQUFBNjdELEdBQTZCLE9BQUE3N0QsR0FBUyxDQUFFLElBQUFqSSxFQUFBaUksRUFBQXlzRCxlQUF1QixPQUFBMTBELEVBQUEsQ0FBNkMsSUFBbkMsT0FBQTZELEdBQUEsT0FBQXN4QyxLQUFBaEcsRUFBQSxPQUFtQ2xuQyxNQUFBZzlELGtCQUFBLENBQTRCbkIsR0FBQTN1QixHQUFBbHRDLEVBQUFnOUQsa0JBQUEsS0FBOEIsTUFBTSxHQUFBaDlELElBQUE2N0QsTUFBQTlqRSxFQUFBaUksRUFBQWc5RCxrQkFBQTl2QixHQUFBOHZCLGtCQUFBamxFLEVBQUFpSSxFQUFBZzlELGtCQUFBLFNBQXVGLElBQUFoOUQsSUFBQWt0QyxHQUFBLEVBQWVBLEdBQUF0eEMsR0FBSW9oRSxrQkFBQW5CLEdBQXVCNzdELEVBQUFnOUQsa0JBQUEsS0FBeUIsTUFBTXBoRSxFQUFBb2hFLGtCQUFBaDlELEVBQUFnOUQsa0JBQUFoOUQsRUFBQWc5RCxrQkFBQSxLQUFzRWg5RCxFQUFBcEUsRUFBQW9oRSxzQkFBc0IsQ0FBb0IsR0FBZmpsRSxFQUFBNkYsTUFBQTdGLEVBQUE4RixFQUFBbUMsR0FBZUEsSUFBQWt0QyxHQUFBLE1BQWUsZ0JBQ3hldHZDLEVBQUEsTUFBUWhDLEVBQUFvRSxFQUFJQSxJQUFBZzlELG1CQUF1QmhCLEdBQUFuK0QsRUFBS3V2QyxHQUFBeHZDLEVBQUksSUFBQXMvRCxJQUFBLEVBQVUsU0FBQW5DLEtBQWMsUUFBQW1DLE1BQUEvOEQsRUFBQWc5RCx5QkFBQUQsSUFBQSxHQUErQyxTQUFBTixLQUFjLElBQUksSUFBQTdCLE1BQUEsT0FBQWMsR0FBQSxDQUFxQmEsS0FBSyxJQUFBOStELEVBQUFpK0QsR0FBUyxHQUFHLElBQUFoK0QsRUFBQUQsRUFBQTZ1RCxlQUF1QixJQUFBNXVELEdBQUEwK0QsSUFBQTErRCxJQUFBRCxFQUFBZ3dELDJCQUFBMk8sSUFBZ0QzK0QsSUFBQW8vRCx3QkFBc0JwL0QsSUFBQWkrRCxJQUFjdkIsR0FBQSxNQUFTLFFBQVE0QyxJQUFBLEdBQ3ZTLFNBQUE1QyxHQUFBMThELEVBQUFDLEdBQXNCLEdBQUxrL0QsS0FBS2wvRCxFQUFBLElBQUE2K0QsS0FBQUYsR0FBQUQsR0FBb0IsT0FBQVAsSUFBQSxJQUFBNXVCLElBQUF4dkMsR0FBQXd2QyxNQUFBOHZCLElBQUFYLEdBQUFudkIsS0FBb0M2dkIsR0FBQWpCLEdBQUE1dUIsR0FBQW12QixHQUFBbnZCLElBQUEydkIsS0FBQUwsS0FBQUYsR0FBQUQsUUFBK0IsS0FBVSxPQUFBUCxJQUFBLElBQUE1dUIsSUFBQXh2QyxHQUFBd3ZDLElBQXVCNnZCLEdBQUFqQixHQUFBNXVCLElBQUEsR0FBQTJ2QixLQUFpRSxHQUEvQ2wvRCxJQUFBaStELEdBQUEsRUFBQUMsR0FBQSxNQUFrQixJQUFBM3VCLElBQUF1dkIsR0FBQVgsR0FBQTV1QixJQUFnQnN1QixHQUFBLEVBQUtlLEdBQUEsS0FBUSxPQUFBTCxHQUFBLElBQUF4K0QsRUFBQXcrRCxNQUFBLEtBQUF2K0QsRUFBQSxFQUFrQ0EsRUFBQUQsRUFBQXZFLE9BQVd3RSxJQUFBLENBQUssSUFBQWpDLEVBQUFnQyxFQUFBQyxHQUFXLElBQUlqQyxFQUFBd2hFLGNBQWdCLE1BQUFwOUQsR0FBU2k4RCxTQUFBLEVBQUFDLEdBQUFsOEQsSUFBa0IsR0FBQWk4RCxHQUFBLE1BQUFyK0QsRUFBQXMrRCxNQUFBLEtBQUFELElBQUEsRUFBQXIrRCxFQUFrQyxTQUFBay9ELEdBQUFsL0QsRUFBQUMsR0FBaUJ5c0MsSUFBQXBELEVBQUEsT0FBa0I4MEIsR0FBQXArRCxFQUFLd3ZDLEdBQUF2dkMsRUFBSW8vRCxHQUFBci9ELEVBQUFDLEdBQUEsR0FBV3k4RCxHQUFBLGVBQ3BaLFNBQUEyQyxHQUFBci9ELEVBQUFDLEVBQUFqQyxHQUEwQyxHQUF2QjB1QyxJQUFBcEQsRUFBQSxPQUFrQm9ELElBQUEsRUFBSzF1QyxFQUFBLENBQU0sSUFBQW9FLEVBQUFwQyxFQUFBNjhELGFBQXFCLE9BQUF6NkQsRUFBQXE5RCxHQUFBei9ELEVBQUFvQyxFQUFBbkMsSUFBQUQsRUFBQTY4RCxhQUFBLFdBQUF6NkQsRUFBQXBDLEVBQUFpL0QsaUJBQUFqL0QsRUFBQWkvRCxlQUFBLEVBQUEzUyxHQUFBbHFELElBQUE4NkQsR0FBQWw5RCxFQUFBaEMsR0FBQSxRQUFBb0UsRUFBQXBDLEVBQUE2OEQsZ0JBQUFNLEtBQUFuOUQsRUFBQTY4RCxhQUFBejZELEVBQUFxOUQsR0FBQXovRCxFQUFBb0MsRUFBQW5DLFVBQW1LLFFBQUFtQyxFQUFBcEMsRUFBQTY4RCxjQUFBNEMsR0FBQXovRCxFQUFBb0MsRUFBQW5DLElBQUFELEVBQUE2OEQsYUFBQSxXQUFBejZELEVBQUFwQyxFQUFBaS9ELGlCQUFBai9ELEVBQUFpL0QsZUFBQSxFQUFBM1MsR0FBQWxxRCxJQUFBODZELEdBQUFsOUQsRUFBQWhDLEdBQUEsUUFBQW9FLEVBQUFwQyxFQUFBNjhELGVBQUE0QyxHQUFBei9ELEVBQUFvQyxFQUFBbkMsSUFBaUt5c0MsSUFBQSxFQUN6WSxTQUFBK3lCLEdBQUF6L0QsRUFBQUMsRUFBQWpDLEdBQW1CLElBQUFvRSxFQUFBcEMsRUFBQTAvRCxXQUFtQixVQUFBdDlELEtBQUF1OUQsaUJBQUEzaEUsSUFBQSxPQUFBd2dFLE1BQUEsQ0FBQXA4RCxHQUFBbzhELEdBQUFqbEUsS0FBQTZJLEtBQUF3OUQsUUFBK0csT0FBcEM1L0QsRUFBQTY4RCxhQUFBNThELE9BQWlCRCxFQUFBNnVELGVBQUEsR0FBMEI3dUQsRUFBQTY4RCxhQUFBLEtBQW9CNzhELElBQUE2K0QsR0FBQWYsTUFBQWUsR0FBQTcrRCxFQUFBODlELEdBQUEsR0FBd0J2N0QsRUFBQW82RCx5QkFBQXA2RCxFQUFBazdELDJCQUFBLFdBQW1FbkIsR0FBQXQ4RCxFQUFBQyxLQUFVLFNBQUErNkQsR0FBQWg3RCxHQUFlLE9BQUFvK0QsSUFBQTkwQixFQUFBLE9BQTBCODBCLEdBQUF2UCxlQUFBLEVBQW9Cd1AsU0FBQSxFQUFBQyxHQUFBdCtELEdBQWlCLFNBQUE2L0QsR0FBQTcvRCxFQUFBQyxHQUFpQixJQUFBakMsRUFBQTJ1QyxHQUFRQSxJQUFBLEVBQUssSUFBSSxPQUFBM3NDLEVBQUFDLEdBQVksU0FBUTBzQyxHQUFBM3VDLElBQUEwdUMsSUFBQWd3QixHQUFBLGdCQUN6WixTQUFBb0QsR0FBQTkvRCxFQUFBQyxHQUFpQixHQUFBMHNDLEtBQUE0eEIsR0FBQSxDQUFXQSxJQUFBLEVBQU0sSUFBSSxPQUFBditELEVBQUFDLEdBQVksUUFBUXMrRCxJQUFBLEdBQU8sT0FBQXYrRCxFQUFBQyxHQUFZLFNBQUE4L0QsR0FBQS8vRCxFQUFBQyxFQUFBakMsR0FBbUIydUMsSUFBQUQsSUFBQSxJQUFBbXhCLEtBQUFuQixHQUFBbUIsSUFBQSxHQUFBQSxHQUFBLEdBQStCLElBQUF6N0QsRUFBQXVxQyxHQUFRQSxJQUFBLEVBQUssSUFBSSxPQUFBcHFDLEVBQUFvNkQseUJBQUFwNkQsRUFBQW03RCw4QkFBQSxXQUE2RSxPQUFBMTlELEVBQUFDLEVBQUFqQyxLQUFnQixTQUFRMnVDLEdBQUF2cUMsSUFBQXNxQyxJQUFBZ3dCLEdBQUEsZ0JBQ3JQLFNBQUFzRCxHQUFBaGdFLEVBQUFDLEVBQUFqQyxFQUFBb0UsRUFBQWpJLEdBQXVCLElBQUEwdkMsRUFBQTVwQyxFQUFBa2pDLFFBQWdCbmpDLEVBQUEsR0FBQWhDLEVBQUEsQ0FBZ0NpQyxFQUFBLENBQUcsSUFBQSsrQyxHQUEzQmhoRCxJQUFBcXlELHNCQUEyQixJQUFBcnlELEVBQUEwVCxLQUFBNDNCLEVBQUEsT0FBcUMsSUFBQVAsRUFBQS9xQyxFQUFRLEdBQUcsT0FBQStxQyxFQUFBcjNCLEtBQWMsT0FBQXEzQixJQUFBNEksVUFBQWp0QyxRQUE2QixNQUFBekUsRUFBUSxVQUFBZ3JDLEdBQUFsQyxFQUFBcHBDLE1BQUEsQ0FBcUJvcEMsSUFBQTRJLFVBQUFrYywwQ0FBd0QsTUFBQTV0RCxHQUFTOG9DLElBQUFzSixhQUFXLE9BQUF0SixHQUFnQk8sRUFBQSxPQUFTUCxPQUFBLEVBQVMsT0FBQS9xQyxFQUFBMFQsSUFBQSxDQUFjLElBQUF6VCxFQUFBRCxFQUFBMkIsS0FBYSxHQUFBc3JDLEdBQUFodEMsR0FBQSxDQUFTRCxFQUFBMHZELEdBQUExdkQsRUFBQUMsRUFBQThxQyxHQUFZLE1BQUEvb0MsR0FBU2hDLEVBQUErcUMsT0FBSS9xQyxFQUFBZ3ZELEdBQ3hWLE9BRGtXLE9BQUEvc0QsRUFBQXlFLFFBQUF6RSxFQUFBeUUsUUFBQTFHLEVBQUFpQyxFQUFBbTNELGVBQUFwNUQsRUFBZ0RpQyxFQUFBOUYsR0FBSUEsRUFBQW8yRCxHQUFBbnVELElBQVFxdUQsUUFBQSxDQUFXL0osUUFBQTFtRCxHQUErQixRQUFwQkMsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLEtBQW9COUYsRUFBQW1CLFNBQUEyRSxHQUM3ZHl3RCxLQUFLQyxHQUFBOW1CLEVBQUExdkMsR0FBUXkyRCxHQUFBL21CLEVBQUF6bkMsR0FBUUEsRUFBUyxTQUFBNjlELEdBQUFqZ0UsRUFBQUMsRUFBQWpDLEVBQUFvRSxHQUFxQixJQUFBakksRUFBQThGLEVBQUFrakMsUUFBaUMsT0FBQTY4QixHQUFBaGdFLEVBQUFDLEVBQUFqQyxFQUFWN0QsRUFBQXEyRCxHQUF2QkYsS0FBdUJuMkQsR0FBVWlJLEdBQXFCLFNBQUE4OUQsR0FBQWxnRSxHQUEyQixLQUFaQSxJQUFBbWpDLFNBQVkxaEMsTUFBQSxZQUF3QixPQUFBekIsRUFBQXlCLE1BQUFpUSxLQUFvQixPQUFnQyxlQUFBMVIsRUFBQXlCLE1BQUFrd0MsV0FFaE4sU0FBQXd1QixHQUFBbmdFLEdBQWUsSUFBQUMsRUFBQSw4QkFBQXF3RCxLQUFBLFlBQXFEcndELEdBQUF1N0QsS0FBQXY3RCxFQUFBdTdELEdBQUEsR0FBZ0JqNEQsS0FBQW84RCxnQkFBQW5FLEdBQUF2N0QsRUFBMEJzRCxLQUFBNjhELE1BQUFwZ0UsRUFBYXVELEtBQUE4OEQsV0FBQTk4RCxLQUFBKzhELE1BQUEsS0FBZ0MvOEQsS0FBQWc5RCxhQUFBaDlELEtBQUFpOUQsY0FBQSxFQUF1Q2o5RCxLQUFBazlELFVBQUEsS0FBb0JsOUQsS0FBQXE4RCxRQUFBLEVBR3ZDLFNBQUFjLEtBQWNuOUQsS0FBQTg4RCxXQUFBLEtBQXFCOThELEtBQUFvOUQsWUFBQSxFQUFtQnA5RCxLQUFBcTlELFVBQUFyOUQsS0FBQXE5RCxVQUFBOTlELEtBQUFTLE1BRXJPLFNBQUFzOUQsR0FBQTdnRSxFQUFBQyxFQUFBakMsR0FBMENnQyxFQUFBLENBQUdtakMsUUFBMUJsakMsRUFBQWlyQyxHQUFBLFlBQUFqckMsRUFBQSxLQUEwQnNrRCxjQUFBdmtELEVBQUFxdkQsZ0JBQUEsS0FBQWdPLFVBQUEsS0FBQTdOLG9CQUFBLEVBQUFDLGtCQUFBLEVBQUFJLHNCQUFBLEVBQUFDLG9CQUFBLEVBQUFGLGlCQUFBLEVBQUFMLFVBQUEsRUFBQWdOLDRCQUFBLEVBQUFNLGFBQUEsS0FBQW9DLGVBQUEsRUFBQXY2RCxRQUFBLEtBQUEweUQsZUFBQSxLQUFBUSxRQUFBNTVELEVBQUFneUQsMkJBQUEsRUFBQW5CLGVBQUEsRUFBQTZRLFdBQUEsS0FBQU4sa0JBQUEsTUFBdVg3N0QsS0FBQXU5RCxjQUFBN2dFLEVBQUEweEMsVUFBQTN4QyxFQUVySyxTQUFBK2dFLEdBQUEvZ0UsR0FBZSxTQUFBQSxHQUFBLElBQUFBLEVBQUE2TixVQUFBLElBQUE3TixFQUFBNk4sVUFBQSxLQUFBN04sRUFBQTZOLFdBQUEsSUFBQTdOLEVBQUE2TixVQUFBLGlDQUFBN04sRUFBQXlULFlBRTlRLFNBQUF1dEQsR0FBQWhoRSxFQUFBQyxFQUFBakMsRUFBQW9FLEVBQUFqSSxHQUF1QixJQUFBMHZDLEVBQUE3ckMsRUFBQXE4RCxvQkFBNEIsR0FBQXh3QixFQUFBLENBQU0sc0JBQUExdkMsRUFBQSxDQUEwQixJQUFBNHVDLEVBQUE1dUMsRUFBUUEsRUFBQSxXQUFhLElBQUE2RixFQUFBa2dFLEdBQUFyMkIsRUFBQWkzQixlQUEwQi8zQixFQUFBL3dDLEtBQUFnSSxJQUFXLE1BQUFBLEVBQUE2cEMsRUFBQW8zQixrQ0FBQWpoRSxFQUFBQyxFQUFBOUYsR0FBQTB2QyxFQUFBNkQsT0FBQXp0QyxFQUFBOUYsT0FBaUUsQ0FBcUMsR0FBaEMwdkMsRUFBQTdyQyxFQUFBcThELG9CQURuTixTQUFBcjZELEVBQUFDLEdBQXdJLEdBQXZIQSxZQUFBRCxFQUFBLElBQUFBLEVBQUE2TixTQUFBN04sRUFBQTBRLGdCQUFBMVEsRUFBQXdULFdBQUEsV0FBQXZULEVBQUE0TixXQUFBNU4sRUFBQWloRSxhQUFBLHFCQUF1SGpoRSxFQUFBLFFBQUFqQyxFQUFnQkEsRUFBQWdDLEVBQUFpVixXQUFjalYsRUFBQXVFLFlBQUF2RyxHQUFrQixXQUFBNmlFLEdBQUE3Z0UsR0FBQSxFQUFBQyxHQUMyQmtoRSxDQUFBbmpFLEVBQUFvRSxHQUFnQyxtQkFBQWpJLEVBQUEsQ0FBMEIsSUFBQThELEVBQUE5RCxFQUFRQSxFQUFBLFdBQWEsSUFBQTZGLEVBQUFrZ0UsR0FBQXIyQixFQUFBaTNCLGVBQTBCN2lFLEVBQUFqRyxLQUFBZ0ksSUFBVzgvRCxHQUFBLFdBQWMsTUFBQTkvRCxFQUFBNnBDLEVBQUFvM0Isa0NBQUFqaEUsRUFBQUMsRUFBQTlGLEdBQUEwdkMsRUFBQTZELE9BQUF6dEMsRUFBQTlGLEtBQW1FLE9BQUErbEUsR0FBQXIyQixFQUFBaTNCLGVBQ3haLFNBQUFNLEdBQUFwaEUsRUFBQUMsR0FBaUIsSUFBQWpDLEVBQUEsRUFBQWlJLFVBQUF4SyxhQUFBLElBQUF3SyxVQUFBLEdBQUFBLFVBQUEsUUFBd0YsT0FBdEI4NkQsR0FBQTlnRSxJQUFBcXBDLEVBQUEsT0FaK0osU0FBQXRwQyxFQUFBQyxFQUFBakMsR0FBbUIsSUFBQW9FLEVBQUEsRUFBQTZELFVBQUF4SyxhQUFBLElBQUF3SyxVQUFBLEdBQUFBLFVBQUEsUUFBa0UsT0FBT3dsQyxTQUFBbU4sR0FBQS8xQyxJQUFBLE1BQUFULEVBQUEsUUFBQUEsRUFBQTVJLFNBQUF3RyxFQUFBdWtELGNBQUF0a0QsRUFBQTJsQyxlQUFBNW5DLEdBWXJPcWpFLENBQUFyaEUsRUFBQUMsRUFBQSxLQUFBakMsR0FYekdvNEMsR0FBQSxTQUFBcDJDLEVBQUFDLEVBQUFqQyxHQUFtQixPQUFBaUMsR0FBVSxZQUE4QixHQUE5Qnc3QyxHQUFBejdDLEVBQUFoQyxHQUFxQmlDLEVBQUFqQyxFQUFBcEUsS0FBUyxVQUFBb0UsRUFBQTJCLE1BQUEsTUFBQU0sRUFBQSxDQUE4QixJQUFBakMsRUFBQWdDLEVBQVFoQyxFQUFBc0csWUFBYXRHLElBQUFzRyxXQUEyRixJQUEzRXRHLElBQUFpUixpQkFBQSxjQUFBcFIsS0FBQXlqRSxVQUFBLEdBQUFyaEUsR0FBQSxtQkFBMkVBLEVBQUEsRUFBUUEsRUFBQWpDLEVBQUF2QyxPQUFXd0UsSUFBQSxDQUFLLElBQUFtQyxFQUFBcEUsRUFBQWlDLEdBQVcsR0FBQW1DLElBQUFwQyxHQUFBb0MsRUFBQW0vRCxPQUFBdmhFLEVBQUF1aEUsS0FBQSxDQUEyQixJQUFBcG5FLEVBQUFnNEMsRUFBQS92QyxHQUFZakksR0FBQW12QyxFQUFBLE1BQWlCa1AsR0FBQXAyQyxHQUFNcTVDLEdBQUFyNUMsRUFBQWpJLEtBQVUsTUFBTSxlQUFBd3RELEdBQUEzbkQsRUFBQWhDLEdBQXdCLE1BQU0sb0JBQUFpQyxFQUFBakMsRUFBQS9ELFFBQUFxdEQsR0FBQXRuRCxJQUFBaEMsRUFBQXc4RCxTQUFBdjZELEdBQUEsS0FDbkhrZ0UsR0FBQXJvRSxVQUFBNDFDLE9BQUEsU0FBQTF0QyxHQUFnQ3VELEtBQUFxOEQsUUFBQXQyQixFQUFBLE9BQTRCL2xDLEtBQUFnOUQsY0FBQSxFQUFxQmg5RCxLQUFBazlELFVBQUF6Z0UsRUFBaUIsSUFBQUMsRUFBQXNELEtBQUE2OEQsTUFBQVUsY0FBQTlpRSxFQUFBdUYsS0FBQW84RCxnQkFBQXY5RCxFQUFBLElBQUFzK0QsR0FBMEYsT0FBM0JWLEdBQUFoZ0UsRUFBQUMsRUFBQSxLQUFBakMsRUFBQW9FLEVBQUF3K0QsV0FBMkJ4K0QsR0FDamErOUQsR0FBQXJvRSxVQUFBd0MsS0FBQSxTQUFBMEYsR0FBOEIsR0FBQXVELEtBQUFpOUQsYUFBQXhnRSxRQUF5QixDQUFLLElBQUFDLEVBQUFzRCxLQUFBODhELFdBQXNCLE9BQUFwZ0UsTUFBQXNELEtBQUE4OEQsV0FBQSxJQUFpQ3BnRSxFQUFBMUcsS0FBQXlHLEtBQ25IbWdFLEdBQUFyb0UsVUFBQTBwRSxPQUFBLFdBQStCLElBQUF4aEUsRUFBQXVELEtBQUE2OEQsTUFBQVUsY0FBQTdnRSxFQUFBRCxFQUFBMC9ELFdBQW9GLEdBQXRDbjhELEtBQUFxOEQsUUFBQSxPQUFBMy9ELEdBQUFxcEMsRUFBQSxPQUFzQy9sQyxLQUFBZzlELGFBQUEsQ0FBc0IsSUFBQXZpRSxFQUFBdUYsS0FBQW84RCxnQkFBMkIsR0FBQTEvRCxJQUFBc0QsS0FBQSxDQUFhQSxLQUFBZzlELGVBQUF2aUUsRUFBQXVGLEtBQUFvOEQsZ0JBQUExL0QsRUFBQTAvRCxnQkFBQXA4RCxLQUFBbXFDLE9BQUFucUMsS0FBQWs5RCxZQUEwRixRQUFBcitELEVBQUEsS0FBQWpJLEVBQUE4RixFQUFtQjlGLElBQUFvSixNQUFTbkIsRUFBQWpJLE1BQUFtbUUsTUFBZSxPQUFBbCtELEdBQUFrbkMsRUFBQSxPQUF5QmxuQyxFQUFBaytELE1BQUFubUUsRUFBQW1tRSxNQUFnQi84RCxLQUFBKzhELE1BQUFyZ0UsRUFBYUQsRUFBQTAvRCxXQUFBbjhELEtBQWtCQSxLQUFBcThELFFBQUEsRUFBZVYsR0FBQWwvRCxFQUFBaEMsR0FBUWlDLEVBQUFzRCxLQUFBKzhELE1BQWEvOEQsS0FBQSs4RCxNQUFBLEtBQWlDLFFBQWpCcmdFLEVBQUFELEVBQUEwL0QsV0FBQXovRCxJQUFpQkEsRUFBQXNnRSxjQUFBdGdFLEVBQUF5dEMsT0FBQXp0QyxFQUFBd2dFLGdCQUFnRGw5RCxLQUFBKzhELE1BQ25mLEtBQUEvOEQsS0FBQXE4RCxRQUFBLEdBQXFCTyxHQUFBcm9FLFVBQUEwbkUsWUFBQSxXQUFvQyxJQUFBajhELEtBQUFpOUQsYUFBQSxDQUF1Qmo5RCxLQUFBaTlELGNBQUEsRUFBcUIsSUFBQXhnRSxFQUFBdUQsS0FBQTg4RCxXQUFzQixVQUFBcmdFLEVBQUEsUUFBQUMsRUFBQSxFQUF3QkEsRUFBQUQsRUFBQXZFLE9BQVd3RSxLQUFBLEVBQUFELEVBQUFDLFFBQWdIeWdFLEdBQUE1b0UsVUFBQXdDLEtBQUEsU0FBQTBGLEdBQThCLEdBQUF1RCxLQUFBbzlELFdBQUEzZ0UsUUFBdUIsQ0FBSyxJQUFBQyxFQUFBc0QsS0FBQTg4RCxXQUFzQixPQUFBcGdFLE1BQUFzRCxLQUFBODhELFdBQUEsSUFBaUNwZ0UsRUFBQTFHLEtBQUF5RyxLQUMvWDBnRSxHQUFBNW9FLFVBQUE4b0UsVUFBQSxXQUFrQyxJQUFBcjlELEtBQUFvOUQsV0FBQSxDQUFxQnA5RCxLQUFBbzlELFlBQUEsRUFBbUIsSUFBQTNnRSxFQUFBdUQsS0FBQTg4RCxXQUFzQixVQUFBcmdFLEVBQUEsUUFBQUMsRUFBQSxFQUF3QkEsRUFBQUQsRUFBQXZFLE9BQVd3RSxJQUFBLENBQUssSUFBQWpDLEVBQUFnQyxFQUFBQyxHQUFXLG1CQUFBakMsR0FBQXNyQyxFQUFBLE1BQUF0ckMsR0FBd0NBLE9BRTNMNmlFLEdBQUEvb0UsVUFBQTQxQyxPQUFBLFNBQUExdEMsRUFBQUMsR0FBa0MsSUFBQWpDLEVBQUF1RixLQUFBdTlELGNBQUExK0QsRUFBQSxJQUFBcytELEdBQW1HLE9BQTdDLFFBQXBCemdFLE9BQUEsSUFBQUEsRUFBQSxLQUFBQSxJQUFvQm1DLEVBQUE5SCxLQUFBMkYsR0FBb0JnZ0UsR0FBQWpnRSxFQUFBaEMsRUFBQSxLQUFBb0UsRUFBQXcrRCxXQUF5QngrRCxHQUFVeStELEdBQUEvb0UsVUFBQTJwRSxRQUFBLFNBQUF6aEUsR0FBaUMsSUFBQUMsRUFBQXNELEtBQUF1OUQsY0FBQTlpRSxFQUFBLElBQUEwaUUsR0FBc0csT0FBaEQsUUFBcEIxZ0UsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLElBQW9CaEMsRUFBQTFELEtBQUEwRixHQUFvQmlnRSxHQUFBLEtBQUFoZ0UsRUFBQSxLQUFBakMsRUFBQTRpRSxXQUE0QjVpRSxHQUFVNmlFLEdBQUEvb0UsVUFBQW1wRSxrQ0FBQSxTQUFBamhFLEVBQUFDLEVBQUFqQyxHQUErRCxJQUFBb0UsRUFBQW1CLEtBQUF1OUQsY0FBQTNtRSxFQUFBLElBQUF1bUUsR0FBZ0csT0FBMUMsUUFBcEIxaUUsT0FBQSxJQUFBQSxFQUFBLEtBQUFBLElBQW9CN0QsRUFBQUcsS0FBQTBELEdBQW9CaWlFLEdBQUFoZ0UsRUFBQW1DLEVBQUFwQyxFQUFBN0YsRUFBQXltRSxXQUFzQnptRSxHQUMvYjBtRSxHQUFBL29FLFVBQUE0cEUsWUFBQSxXQUFvQyxJQUFBMWhFLEVBQUEsSUFBQW1nRSxHQUFBNThELE1BQUF0RCxFQUFBRCxFQUFBMi9ELGdCQUFBM2hFLEVBQUF1RixLQUFBdTlELGNBQUExK0QsRUFBQXBFLEVBQUEwaEUsV0FBMkUsVUFBQXQ5RCxFQUFBcEUsRUFBQTBoRSxXQUFBMS9ELElBQUFzZ0UsTUFBQSxTQUF3QyxDQUFLLElBQUF0aUUsRUFBQSxLQUFXLE9BQUFvRSxLQUFBdTlELGlCQUFBMS9ELEdBQStCakMsRUFBQW9FLE1BQUFrK0QsTUFBZXRnRSxFQUFBc2dFLE1BQUFsK0QsRUFBVSxPQUFBcEUsTUFBQXNpRSxNQUFBdGdFLEdBQXNCLE9BQUFBLEdBQXNKMDJDLEdBQUFtcEIsR0FBTWxwQixHQUFBb3BCLEdBQU1ucEIsR0FBQSxXQUFjbEssSUFBQSxJQUFBbXhCLEtBQUFuQixHQUFBbUIsSUFBQSxHQUFBQSxHQUFBLElBSXJhLElBQUE4RCxHQUFBLENBQVFDLGFBQUFSLEdBQUFTLFlBQUEsU0FBQTdoRSxHQUF3QyxTQUFBQSxFQUFBLFlBQXVCLE9BQUFBLEVBQUE2TixTQUFBLE9BQUE3TixFQUEyQixJQUFBQyxFQUFBRCxFQUFBcXdELG9CQUE0SSxZQUFoSCxJQUFBcHdELElBQUEsbUJBQUFELEVBQUEwdEMsT0FBQXBFLEVBQUEsT0FBQUEsRUFBQSxNQUFBenhDLE9BQUFxSixLQUFBbEIsS0FBb0ZBLEVBQUEsUUFBUkEsRUFBQW0vQyxHQUFBbC9DLElBQVEsS0FBQUQsRUFBQTJ4QyxXQUFxQ2ltQixRQUFBLFNBQUE1M0QsRUFBQUMsRUFBQWpDLEdBQStDLE9BQXRCK2lFLEdBQUE5Z0UsSUFBQXFwQyxFQUFBLE9BQXNCMDNCLEdBQUEsS0FBQWhoRSxFQUFBQyxHQUFBLEVBQUFqQyxJQUF5QjB2QyxPQUFBLFNBQUExdEMsRUFBQUMsRUFBQWpDLEdBQThDLE9BQXRCK2lFLEdBQUE5Z0UsSUFBQXFwQyxFQUFBLE9BQXNCMDNCLEdBQUEsS0FBQWhoRSxFQUFBQyxHQUFBLEVBQUFqQyxJQUF5QjhqRSxvQ0FBQSxTQUFBOWhFLEVBQUFDLEVBQUFqQyxFQUFBb0UsR0FDdlgsT0FEOGEyK0QsR0FBQS9pRSxJQUFBc3JDLEVBQUEsUUFBc0IsTUFBQXRwQyxRQUFBLElBQUFBLEVBQUFxd0Qsc0JBQ25kL21CLEVBQUEsTUFBZTAzQixHQUFBaGhFLEVBQUFDLEVBQUFqQyxHQUFBLEVBQUFvRSxJQUFzQjIvRCx1QkFBQSxTQUFBL2hFLEdBQXlELE9BQXJCK2dFLEdBQUEvZ0UsSUFBQXNwQyxFQUFBLFFBQXFCdHBDLEVBQUFxNkQsc0JBQUF5RixHQUFBLFdBQTRDa0IsR0FBQSxVQUFBaGhFLEdBQUEsYUFBNkJBLEVBQUFxNkQsb0JBQUEsVUFBNkIsSUFBUzJILHNCQUFBLFdBQWtDLE9BQUFaLEdBQUFsbEUsV0FBQSxFQUFBK0osWUFBa0NnOEQsd0JBQUFwQyxHQUFBcUMsNEJBQUFuQyxHQUFBb0MsVUFBQSxTQUFBbmlFLEVBQUFDLEdBQW1GeXNDLElBQUFwRCxFQUFBLE9BQWtCLElBQUF0ckMsRUFBQTJ1QyxHQUFRQSxJQUFBLEVBQUssSUFBSSxPQUFBcXhCLEdBQUFoK0QsRUFBQUMsR0FBZSxRQUFRMHNDLEdBQUEzdUMsRUFBQTArRCxHQUFBLGlCQUF1QjBGLG9CQUNsUCxTQUFBcGlFLEVBQUFDLEdBQTZELE9BQTVDOGdFLEdBQUEvZ0UsSUFBQXNwQyxFQUFBLDZCQUE0QyxJQUFBdTNCLEdBQUE3Z0UsR0FBQSxRQUFBQyxJQUFBLElBQUFBLEVBQUEyM0QsVUFEcUx5Syx5QkFBQSxTQUFBcmlFLEdBQTZELElBQUFDLEVBQ2xmMHNDLEdBQUVBLElBQUEsRUFBSyxJQUFJcXhCLEdBQUFoK0QsR0FBTSxTQUFRMnNDLEdBQUExc0MsSUFBQXlzQyxJQUFBZ3dCLEdBQUEsaUJBQTZCdnRCLG1EQUFBLENBQXFEbXpCLE9BQUEsQ0FBQXJ3QixFQUFBQyxFQUFBQyxFQUFBWixFQUFBRSx5QkFBQXRCLEVBQUF5QyxFQUFBLFNBQUE1eUMsR0FBK0RneEMsRUFBQWh4QyxFQUFBMnlDLElBQVM2RCxHQUFBQyxHQUFBa08sR0FBQS9TLE1BQ25MLFNBQUE1eEMsR0FBYSxJQUFBQyxFQUFBRCxFQUFBdWlFLHlCQXhKYixTQUFBdmlFLEdBQWUsdUJBQUFrcEMsK0JBQUEsU0FBZ0UsSUFBQWpwQyxFQUFBaXBDLCtCQUFxQyxHQUFBanBDLEVBQUFxUSxhQUFBclEsRUFBQXVpRSxjQUFBLFNBQTJDLElBQUksSUFBQXhrRSxFQUFBaUMsRUFBQXdpRSxPQUFBemlFLEdBQWtCK3RELEdBQUFFLEdBQUEsU0FBQWp1RCxHQUFrQixPQUFBQyxFQUFBeWlFLGtCQUFBMWtFLEVBQUFnQyxLQUFrQ2d1RCxHQUFBQyxHQUFBLFNBQUFqdUQsR0FBa0IsT0FBQUMsRUFBQTBpRSxxQkFBQTNrRSxFQUFBZ0MsS0FBcUMsTUFBQW9DLE1Bd0puUHdnRSxDQUFBNy9ELEVBQUEsR0FBYy9DLEVBQUEsQ0FBSTZpRSxjQUFBLEtBQUFDLHFCQUFBcnFCLEdBQUFySix1QkFBQTJ6Qix3QkFBQSxTQUFBL2lFLEdBQThHLGVBQVJBLEVBQUFtL0MsR0FBQW4vQyxJQUFRLEtBQUFBLEVBQUEyeEMsV0FBaUM0d0Isd0JBQUEsU0FBQXZpRSxHQUFxQyxPQUFBQyxJQUFBRCxHQUFBLFNBQW5QLENBQTBRLENBQUd1aUUsd0JBQUF2d0IsRUFBQWd4QixXQUFBLEVBQUFoMEIsUUFBQSxTQUFBaTBCLG9CQUFBLGNBQTJGLElBQUFDLEdBQUEsQ0FBUTN6QixRQUFBb3lCLElBQVd3QixHQUFBRCxJQUFBdkIsSUFBQXVCLEdBQWVqa0UsRUFBQWlELFFBQUFpaEUsR0FBQTV6QixTQUFBNHpCLGlDQ3pRMVlsa0UsRUFBQWlELFFBQW1CbEosRUFBUSxrQ0NIM0IsU0FBQW9LOzs7Ozs7Ozs7QUFTYXZMLE9BQUFxQyxlQUFBZ0ksRUFBQSxjQUE0Q2pJLE9BQUEsSUFBVyxJQUFBbUksRUFBQSxLQUFBakksR0FBQSxFQUFBNHVDLEVBQUEsRUFBQUksR0FBQSxFQUFBOXNDLEdBQUEsRUFBQThGLEdBQUEsRUFBQVksR0FBQSxFQUF3QyxTQUFBekYsSUFBYSxJQUFBNkUsRUFBQSxDQUFPLElBQUFuQyxFQUFBb0MsRUFBQXlzRCxlQUF1QjlyRCxFQUFBcW1DLElBQUFybUMsR0FBQSxFQUFXUixFQUFBNUgsRUFBQXFGLElBQ2xLLFNBQUFxcEMsSUFBYSxJQUFBcnBDLEVBQUFvQyxFQUFBbkMsRUFBQW1DLEVBQUF1TCxLQUFpQixHQUFBdkwsSUFBQW5DLEVBQUFtQyxFQUFBLFNBQWdCLENBQUssSUFBQXBFLEVBQUFvRSxFQUFBZ2hFLFNBQWlCaGhFLEVBQUFwRSxFQUFBMlAsS0FBQTFOLEVBQVdBLEVBQUFtakUsU0FBQXBsRSxFQUFhZ0MsRUFBQTJOLEtBQUEzTixFQUFBb2pFLFNBQUEsS0FBdUJwbEUsRUFBQWdDLEVBQUExRSxTQUFhMkUsRUFBQUQsRUFBQTZ1RCxlQUFtQjd1RCxJQUFBcWpFLGNBQWtCLElBQUF4NUIsRUFBQWQsRUFBQStDLEVBQUF6dkMsRUFBWTBzQyxFQUFBL29DLEVBQUkzRCxFQUFBNEQsRUFBSSxJQUFJLElBQUFoQyxFQUFBRCxJQUFVLFFBQVErcUMsRUFBQWMsRUFBQXh0QyxFQUFBeXZDLEVBQVEsc0JBQUE3dEMsRUFBQSxHQUFBQSxFQUFBLENBQStCM0MsU0FBQTJDLEVBQUFvbEUsY0FBQXJqRSxFQUFBNnVELGVBQUE1dUQsRUFBQTBOLEtBQUEsS0FBQXkxRCxTQUFBLE1BQW9FLE9BQUFoaEUsSUFBQW5FLEVBQUEwUCxLQUFBMVAsRUFBQW1sRSxTQUFBbmxFLE1BQWdDLENBQUtELEVBQUEsS0FBT2dDLEVBQUFvQyxFQUFJLEdBQUcsR0FBQXBDLEVBQUE2dUQsZ0JBQUE1dUQsRUFBQSxDQUF3QmpDLEVBQUFnQyxFQUFJLE1BQU1BLElBQUEyTixXQUFTM04sSUFBQW9DLEdBQWEsT0FBQXBFLElBQUFvRSxFQUFBcEUsSUFBQW9FLE1BQUFuRSxFQUFBWCxNQUE4QjJDLEVBQUFqQyxFQUFBb2xFLFVBQWF6MUQsS0FBQTNQLEVBQUFvbEUsU0FBQW5sRSxFQUFvQkEsRUFBQTBQLEtBQUEzUCxFQUFTQyxFQUFBbWxFLFNBQzdlbmpFLEdBQUcsU0FBQTRjLElBQWEsUUFBQXNzQixHQUFBLE9BQUEvbUMsR0FBQSxJQUFBQSxFQUFBaWhFLGNBQUEsQ0FBMENsaEUsR0FBQSxFQUFLLElBQUksR0FBQWtuQyxVQUFPLE9BQUFqbkMsR0FBQSxJQUFBQSxFQUFBaWhFLGVBQXFDLFFBQVFsaEUsR0FBQSxTQUFBQyxFQUFBOUUsSUFBQXlGLEdBQUEsSUFBeUIsU0FBQXBJLEVBQUFxRixHQUFjbUMsR0FBQSxFQUFLLElBQUFsQyxFQUFBOUYsRUFBUUEsRUFBQTZGLEVBQUksSUFBSSxHQUFBQSxFQUFBLEtBQVUsT0FBQW9DLEdBQVMsQ0FBRSxJQUFBcEUsRUFBQWtFLEVBQUF3OEQsZUFBNkIsS0FBQXQ4RCxFQUFBeXNELGdCQUFBN3dELEdBQW9FLE1BQTVDLEdBQUFxckMsVUFBTyxPQUFBam5DLEtBQUF5c0QsZ0JBQUE3d0QsUUFBZ0QsVUFBQW9FLEVBQWtCLEdBQUFpbkMsVUFBTyxPQUFBam5DLElBQUFrQixLQUF1QixRQUFRbkIsR0FBQSxFQUFBaEksRUFBQThGLEVBQUEsT0FBQW1DLEVBQUE5RSxJQUFBeUYsR0FBQSxFQUFBOFosS0FDNVcsSUFBQW10QixFQUFBSyxFQUFBZixFQUFBcmdDLEtBQUFzZ0MsRUFBQSxtQkFBQXZwQiwyQkFBQSxFQUFBd3BCLEVBQUEsbUJBQUF6UCwrQkFBQSxFQUFBNFAsRUFBQSxtQkFBQXhULGlEQUFBLEVBQUF5VCxFQUFBLG1CQUFBMDVCLCtDQUFBLEVBQXlRLFNBQUFoNUIsRUFBQXRxQyxHQUFjZ3FDLEVBQUFMLEVBQUEsU0FBQTFwQyxHQUFnQnVwQyxFQUFBYSxHQUFLcnFDLEVBQUFDLEtBQU9vcUMsRUFBQWQsRUFBQSxXQUFlSyxFQUFBSSxHQUFLaHFDLEVBQUFrQyxFQUFBdzhELGlCQUEwQixLQUNqVyxvQkFBQTZFLGFBQUEsbUJBQUFBLFlBQUF2NkQsSUFBQSxDQUF1RSxJQUFBeWhDLEVBQUE4NEIsWUFBa0JyaEUsRUFBQXc4RCxhQUFBLFdBQWdDLE9BQUFqMEIsRUFBQXpoQyxZQUFnQjlHLEVBQUF3OEQsYUFBQSxXQUFxQyxPQUFBcDFCLEVBQUF0Z0MsT0FBZ0IsSUFBQXpHLEVBQUE2bUMsRUFBQTlsQyxFQUFBb25DLEVBQUEsS0FDOUwsR0FEK00sb0JBQUFuekMsT0FBQW16QyxFQUFBbnpDLFlBQUEsSUFBQTZMLElBQUFzbkMsRUFBQXRuQyxHQUMvTXNuQyxLQUFBODRCLFdBQUEsQ0FBb0IsSUFBQTE0QixFQUFBSixFQUFBODRCLFdBQW1CamhFLEVBQUF1b0MsRUFBQSxHQUFPMUIsRUFBQTBCLEVBQUEsR0FBT3huQyxFQUFBd25DLEVBQUEsR0FBTzVvQyxFQUFBdzhELGFBQUE1ekIsRUFBQSxRQUEwQix1QkFBQXZ6QyxRQUFBLG1CQUFBa3NFLGVBQUEsQ0FBeUUsSUFBQXo0QixFQUFBLEtBQUFDLEVBQUEsU0FBQWpyQyxHQUF5QixVQUFBZ3JDLEVBQUEsSUFBZ0JBLEVBQUFockMsR0FBSyxRQUFRZ3JDLEVBQUEsT0FBU3pvQyxFQUFBLFNBQUF2QyxHQUFjLE9BQUFnckMsRUFBQWhyQixXQUFBemQsRUFBQSxFQUFBdkMsSUFBQWdyQyxFQUFBaHJDLEVBQUFnZ0IsV0FBQWlyQixFQUFBLFFBQXFEN0IsRUFBQSxXQUFhNEIsRUFBQSxNQUFRMW5DLEVBQUEsV0FBYSxjQUFVLENBQUssb0JBQUE3SixVQUFBLG1CQUFBa3dDLEdBQUFsd0MsUUFBQWtJLE1BQUEsMklBQ2xWLG1CQUFBaW9DLEdBQUFud0MsUUFBQWtJLE1BQUEsMklBQWdMLElBQUF1cEMsRUFBQSxLQUFBQyxHQUFBLEVBQUFJLEdBQUEsRUFBQUksR0FBQSxFQUFBQyxHQUFBLEVBQUFDLEVBQUEsRUFBQUcsRUFBQSxHQUFBRSxFQUFBLEdBQTZDNW9DLEVBQUEsV0FBYSxPQUFBdW9DLEdBQUEzcEMsRUFBQXc4RCxnQkFBa0MsSUFBQXZ5QixFQUFBLElBQUFzM0IsZUFBQXgzQixFQUFBRSxFQUFBdTNCLE1BQW1DdjNCLEVBQUF3M0IsTUFBQUMsVUFBQSxXQUE2Qno0QixHQUFBLEVBQUssSUFBQW5yQyxFQUFBa3JDLEVBQUFqckMsRUFBQXNyQyxFQUFZTCxFQUFBLEtBQU9LLEdBQUEsRUFBSyxJQUFBdnRDLEVBQUFrRSxFQUFBdzhELGVBQUE3MEIsR0FBQSxFQUFrQyxNQUFBZ0MsRUFBQTd0QyxFQUFBLFdBQUFpQyxNQUFBakMsR0FBMkQsT0FBdkIydEMsT0FBQSxFQUFBckIsRUFBQWtDLElBQWV0QixFQUFBbHJDLE9BQUl1ckMsRUFBQXRyQyxHQUF2RDRwQyxHQUFBLEVBQWtFLFVBQUE3cEMsRUFBQSxDQUFhNHJDLEdBQUEsRUFBSyxJQUFJNXJDLEVBQUE2cEMsR0FBSyxRQUFRK0IsR0FBQSxLQUNoZixJQUFBWSxFQUFBLFNBQUF4c0MsR0FBa0IsVUFBQWtyQyxFQUFBLENBQWFaLEVBQUFrQyxHQUFLLElBQUF2c0MsRUFBQUQsRUFBQTZyQyxFQUFBSyxFQUFZanNDLEVBQUFpc0MsR0FBQUYsRUFBQUUsR0FBQSxFQUFBanNDLE1BQUEsR0FBQWlzQyxFQUFBanNDLEVBQUErckMsSUFBQS9yQyxHQUFBK3JDLEVBQUEvckMsRUFBb0M0ckMsRUFBQTdyQyxFQUFBa3NDLEVBQU1mLE9BQUEsRUFBQWMsRUFBQTQzQixpQkFBQSxTQUFnQ2w0QixHQUFBLEdBQVdwcEMsRUFBQSxTQUFBdkMsRUFBQUMsR0FBZ0JpckMsRUFBQWxyQyxFQUFJdXJDLEVBQUF0ckMsRUFBSTJyQyxHQUFBLEVBQUEzckMsRUFBQWdzQyxFQUFBNDNCLGlCQUFBLEdBQUFsNEIsT0FBQSxFQUFBckIsRUFBQWtDLEtBQTZDcEQsRUFBQSxXQUFhOEIsRUFBQSxLQUFPQyxHQUFBLEVBQUtJLEdBQUEsR0FBTXJwQyxFQUFBdTdELDJCQUFBLEVBQXFDdjdELEVBQUF3N0QsOEJBQUEsRUFBd0N4N0QsRUFBQTA2RCx3QkFBQSxFQUFrQzE2RCxFQUFBMDdELHNCQUFBLEVBQWdDMTdELEVBQUF5N0QscUJBQUEsRUFDeFh6N0QsRUFBQXk2RCx5QkFBQSxTQUFBMzhELEVBQUFDLEdBQStDLE9BQUFELEdBQVUseUNBQXlDLFFBQUFBLEVBQUEsRUFBWSxJQUFBaEMsRUFBQStxQyxFQUFBYyxFQUFBVixFQUFZSixFQUFBL29DLEVBQUltcEMsRUFBQWpuQyxFQUFBdzhELGVBQXlCLElBQUksT0FBQXorRCxJQUFXLFFBQVE4b0MsRUFBQS9xQyxFQUFBbXJDLEVBQUFVLEVBQUFodEIsTUFBYzNhLEVBQUE0aEUsY0FBQSxTQUFBOWpFLEdBQWtDLE9BQUErb0MsR0FBVSx5QkFBQTlvQyxFQUFBLEVBQTZCLE1BQU0sUUFBQUEsRUFBQThvQyxFQUFZLElBQUEvcUMsRUFBQStxQyxFQUFBYyxFQUFBVixFQUFZSixFQUFBOW9DLEVBQUlrcEMsRUFBQWpuQyxFQUFBdzhELGVBQXlCLElBQUksT0FBQTErRCxJQUFXLFFBQVErb0MsRUFBQS9xQyxFQUFBbXJDLEVBQUFVLEVBQUFodEIsTUFDdlYzYSxFQUFBc3FELDBCQUFBLFNBQUF4c0QsRUFBQUMsR0FBZ0QsSUFBQWpDLEdBQUEsSUFBQW1yQyxJQUFBam5DLEVBQUF3OEQsZUFBc0Msb0JBQUF6K0QsR0FBQSxPQUFBQSxHQUFBLGlCQUFBQSxFQUFBekMsUUFBQXlDLEVBQUFqQyxFQUFBaUMsRUFBQXpDLGFBQTRFLE9BQUF1ckMsR0FBZSxPQUFBOW9DLEVBQUFqQyxHQUFBLEVBQWMsTUFBTSxPQUFBaUMsRUFBQWpDLEVBQUEsSUFBZSxNQUFNLE9BQUFpQyxFQUFBakMsRUFBQSxXQUFzQixNQUFNLE9BQUFpQyxFQUFBakMsRUFBQSxJQUFlLE1BQU0sUUFBQWlDLEVBQUFqQyxFQUFBLElBQXdGLEdBQXhFZ0MsRUFBQSxDQUFHMUUsU0FBQTBFLEVBQUFxakUsY0FBQXQ2QixFQUFBOGxCLGVBQUE1dUQsRUFBQTBOLEtBQUEsS0FBQXkxRCxTQUFBLE1BQXFFLE9BQUFoaEUsSUFBQXBDLEVBQUEyTixLQUFBM04sRUFBQW9qRSxTQUFBcGpFLEVBQUExQyxRQUFzQyxDQUFLVSxFQUFBLEtBQU8sSUFBQTZyQyxFQUFBem5DLEVBQVEsR0FBRyxHQUFBeW5DLEVBQUFnbEIsZUFBQTV1RCxFQUFBLENBQXVCakMsRUFBQTZyQyxFQUFJLE1BQU1BLElBQUFsOEIsV0FBU2s4QixJQUFBem5DLEdBQWEsT0FBQXBFLElBQUFvRSxFQUFBcEUsSUFBQW9FLE1BQUFwQyxFQUFBMUMsTUFDdmQyQyxFQUFBakMsRUFBQW9sRSxVQUFhejFELEtBQUEzUCxFQUFBb2xFLFNBQUFwakUsRUFBb0JBLEVBQUEyTixLQUFBM1AsRUFBU2dDLEVBQUFvakUsU0FBQW5qRSxFQUFhLE9BQUFELEdBQVVrQyxFQUFBd3FELHdCQUFBLFNBQUExc0QsR0FBNEMsSUFBQUMsRUFBQUQsRUFBQTJOLEtBQWEsVUFBQTFOLEVBQUEsQ0FBYSxHQUFBQSxJQUFBRCxFQUFBb0MsRUFBQSxTQUFnQixDQUFLcEMsSUFBQW9DLE1BQUFuQyxHQUFhLElBQUFqQyxFQUFBZ0MsRUFBQW9qRSxTQUFpQnBsRSxFQUFBMlAsS0FBQTFOLEVBQVNBLEVBQUFtakUsU0FBQXBsRSxFQUFhZ0MsRUFBQTJOLEtBQUEzTixFQUFBb2pFLFNBQUEsT0FBeUJsaEUsRUFBQTZoRSxzQkFBQSxTQUFBL2pFLEdBQTBDLElBQUFDLEVBQUE4b0MsRUFBUSxrQkFBa0IsSUFBQS9xQyxFQUFBK3FDLEVBQUFjLEVBQUFWLEVBQVlKLEVBQUE5b0MsRUFBSWtwQyxFQUFBam5DLEVBQUF3OEQsZUFBeUIsSUFBSSxPQUFBMStELEVBQUE5RCxNQUFBcUgsS0FBQTBDLFdBQStCLFFBQVE4aUMsRUFBQS9xQyxFQUFBbXJDLEVBQUFVLEVBQUFodEIsT0FBZTNhLEVBQUFzN0QsaUNBQUEsV0FBb0QsT0FBQXowQixHQUNwYzdtQyxFQUFBcTlELHFCQUFBLFdBQXdDLE9BQUFwbEUsSUFBQSxPQUFBaUksS0FBQXlzRCxlQUFBeHlELEdBQUFpSCxNQUErQ3BCLEVBQUE4aEUsMkJBQUEsV0FBOEMsT0FBQTVoRSxHQUFBOUUsS0FBZTRFLEVBQUEraEUsd0JBQUEsYUFBNkMvaEUsRUFBQWdpRSw4QkFBQSxXQUFpRCxPQUFBOWhFOzs7Ozs7Q0NYalAsU0FBQUYsRUFBQStsQyxFQUFBazhCLEdBQXFDLGFBS3RDLFNBQUFDLEVBQUF4OUQsRUFBQTZqQixHQUNBLFFBQUFqdkIsRUFBQSxFQUFpQkEsRUFBQWl2QixFQUFBaHZCLE9BQWtCRCxJQUFBLENBQ25DLElBQUE2b0UsRUFBQTU1QyxFQUFBanZCLEdBQ0E2b0UsRUFBQXZxRSxXQUFBdXFFLEVBQUF2cUUsYUFBQSxFQUNBdXFFLEVBQUF4cUUsY0FBQSxFQUNBLFVBQUF3cUUsTUFBQXA2QyxVQUFBLEdBQ0FweUIsT0FBQXFDLGVBQUEwTSxFQUFBeTlELEVBQUF4aEUsSUFBQXdoRSxJQUlBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBR0EsT0FGQUQsR0FBQUosRUFBQUcsRUFBQXpzRSxVQUFBMHNFLEdBQ0FDLEdBQUFMLEVBQUFHLEVBQUFFLEdBQ0FGLEVBR0EsU0FBQUcsSUFlQSxPQWRBQSxFQUFBN3NFLE9BQUF5d0MsUUFBQSxTQUFBMWhDLEdBQ0EsUUFBQXBMLEVBQUEsRUFBbUJBLEVBQUF5SyxVQUFBeEssT0FBc0JELElBQUEsQ0FDekMsSUFBQXluQixFQUFBaGQsVUFBQXpLLEdBRUEsUUFBQXFILEtBQUFvZ0IsRUFDQXByQixPQUFBQyxVQUFBQyxlQUFBQyxLQUFBaXJCLEVBQUFwZ0IsS0FDQStELEVBQUEvRCxHQUFBb2dCLEVBQUFwZ0IsSUFLQSxPQUFBK0QsSUFHQTFLLE1BQUFxSCxLQUFBMEMsV0FsQ0FnaUMsT0FBQWx3QyxlQUFBLFdBQUFrd0MsRUFBQSxRQUFBQSxFQUNBazhCLE9BQUFwc0UsZUFBQSxXQUFBb3NFLEVBQUEsUUFBQUEsRUFpREEsSUFBQVEsRUFBQSxTQUFBQyxHQU1BLElBQUFyeEIsR0FBQSxFQStCQSxTQUFBc3hCLEVBQUExdkMsR0FDQSxJQUFBMnZDLEVBQUF2aEUsS0FFQXdoRSxHQUFBLEVBU0EsT0FSQUgsRUFBQXJoRSxNQUFBZ2tCLElBQUFvOUMsRUFBQUssZUFBQSxXQUNBRCxHQUFBLElBRUEva0QsV0FBQSxXQUNBK2tELEdBQ0FKLEVBQUFNLHFCQUFBSCxJQUVLM3ZDLEdBQ0w1eEIsS0F5QkEsSUFBQW9oRSxFQUFBLENBQ0FLLGVBQUEsa0JBQ0FFLE9BQUEsU0FBQXh3QyxHQUNBLEdBRUFBLE1BeEVBLElBd0VBdnRCLEtBQUFDLGdCQUNPaEosU0FBQW1RLGVBQUFtbUIsSUFFUCxPQUFBQSxHQUVBeXdDLHVCQUFBLFNBQUF6ZSxHQUNBLElBQUFqaUQsRUFBQWlpRCxFQUFBNzNDLGFBQUEsZUFFQXBLLEdBQUEsTUFBQUEsSUFDQUEsRUFBQWlpRCxFQUFBNzNDLGFBQUEsYUFJQSxNQUFBcEssRUFBQW9tRCxPQUFBLEtBQ0FwbUQsRUFoQ0EsU0FBQUEsR0FJQSxPQURBQSxFQUFBLG1CQUFBbWdFLEVBQUFqcUQsZUFBQWlxRCxFQUFBanFELGVBQUFsVyxHQUFBMmdFLE9BQUEsR0FBQTNnRSxFQUFBNEMsUUFBQSw4QkE2QkFnK0QsQ0FBQTVnRSxJQUdBLElBQ0EsSUFBQTZnRSxFQUFBVixFQUFBeG1FLFVBQUFvVCxLQUFBL00sR0FDQSxPQUFBNmdFLEVBQUE3cEUsT0FBQSxFQUFBZ0osRUFBQSxLQUNPLE1BQUFqSyxHQUNQLGNBR0ErcUUsT0FBQSxTQUFBN2UsR0FDQSxPQUFBQSxFQUFBMWlCLGNBRUFpaEMscUJBQUEsU0FBQXZlLEdBQ0FrZSxFQUFBbGUsR0FBQXQ4QixRQUFBbXBCLEVBQUFqdEMsTUFFQWsvRCxzQkFBQSxXQUNBLE9BQUFDLFFBQUFseUIsSUFFQW15QixVQUFBLFNBQUF0Z0UsR0FDQSxPQUFBQSxFQUFBLElBQUFBLEdBQUF5SSxVQUVBODNELGdCQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsUUFBQTdpRSxLQUFBNmlFLEVBQ0EsR0FBQWp1RSxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBOHRFLEVBQUE3aUUsR0FBQSxDQUNBLElBQUE4aUUsRUFBQUQsRUFBQTdpRSxHQUNBaEosRUFBQTRyRSxFQUFBNWlFLEdBQ0EraUUsRUFBQS9yRSxHQUFBMHFFLEVBQUFlLFVBQUF6ckUsR0FBQSxXQS9HQW1MLEVBK0dBbkwsRUE5R0EsR0FBYTRKLFNBQUE3TCxLQUFBb04sR0FBQTZJLE1BQUEsb0JBQUE3RSxlQWdIYixRQUFBaUMsT0FBQTA2RCxHQUFBcDNELEtBQUFxM0QsR0FDQSxVQUFBanBFLE1BQUE2b0UsRUFBQTFnRSxjQUFBLGFBQUFqQyxFQUFBLG9CQUFBK2lFLEVBQUEsd0JBQUFELEVBQUEsTUFsSEEsSUFBQTNnRSxJQXlIQSxPQTdFQW11QyxHQXpCQSxvQkFBQWg4QyxnQkFBQTB1RSxRQUlBLENBQ0EzL0QsSUFBQSxpQkFxQkFzK0QsRUFBQTNyRSxHQUFBaXRFLHFCQUFBckIsRUFFQUYsRUFBQWEsMEJBQ0FaLEVBQUFuOUMsTUFBQXBJLFFBQUFzbEQsRUFBQUssZ0JBM0NBLENBQ0F6OEMsU0FBQWdyQixFQUFBanRDLElBQ0FnaUIsYUFBQWlyQixFQUFBanRDLElBQ0E2aEIsT0FBQSxTQUFBVixHQUNBLEdBQUFtOUMsRUFBQW45QyxFQUFBN2dCLFFBQUFrVSxHQUFBdlgsTUFDQSxPQUFBa2tCLEVBQUFLLFVBQUFsWSxRQUFBMVQsTUFBQXFILEtBQUEwQyxjQStHQTArRCxFQWxJQSxDQW1JQzE4QixHQVNEaytCLEVBQUEsU0FBQXZCLEdBTUEsSUFLQXdCLEVBQUF4QixFQUFBM3JFLEdBQUEsTUFLQTh3QixFQUFBLENBQ0FzOEMsTUFBQSxpQkFDQUMsT0FBQSxrQkFDQUMsZUFBQSwyQkFFQUMsRUFBQSxDQUNBQyxNQUFBLFFBQ0FDLEtBQUEsT0FDQUMsS0FBQSxRQVNBUixFQUVBLFdBQ0EsU0FBQUEsRUFBQXpmLEdBQ0FuakQsS0FBQXFqRSxTQUFBbGdCLEVBSUEsSUFBQW1nQixFQUFBVixFQUFBcnVFLFVBaUdBLE9BOUZBK3VFLEVBQUFDLE1BQUEsU0FBQXBnQixHQUNBQSxLQUFBbmpELEtBQUFxakUsU0FFQSxJQUFBRyxFQUFBeGpFLEtBQUF5akUsZ0JBQUF0Z0IsR0FFQXVnQixFQUFBMWpFLEtBQUEyakUsbUJBQUFILEdBRUFFLEVBQUF2OEMsc0JBSUFubkIsS0FBQTRqRSxlQUFBSixJQUdBRixFQUFBbHJFLFFBQUEsV0FDQWlwRSxFQUFBeGlELFdBQUE3ZSxLQUFBcWpFLFNBbkRBLFlBb0RBcmpFLEtBQUFxakUsU0FBQSxNQUlBQyxFQUFBRyxnQkFBQSxTQUFBdGdCLEdBQ0EsSUFBQWppRCxFQUFBa2dFLEVBQUFRLHVCQUFBemUsR0FDQTdtRCxHQUFBLEVBVUEsT0FSQTRFLElBQ0E1RSxFQUFBK2tFLEVBQUFuZ0UsR0FBQSxJQUdBNUUsSUFDQUEsRUFBQStrRSxFQUFBbGUsR0FBQTNxQyxRQUFBLElBQUF5cUQsRUFBQUMsT0FBQSxJQUdBNW1FLEdBR0FnbkUsRUFBQUssbUJBQUEsU0FBQXhnQixHQUNBLElBQUEwZ0IsRUFBQXhDLEVBQUE3NkMsUUFBQXM4QyxPQUVBLE9BREF6QixFQUFBbGUsR0FBQXQ4QixRQUFBZzlDLEdBQ0FBLEdBR0FQLEVBQUFNLGVBQUEsU0FBQXpnQixHQUNBLElBQUFvZSxFQUFBdmhFLEtBRUFxaEUsRUFBQWxlLEdBQUFsckIsWUFBQWdyQyxFQUFBRyxNQUVBaEMsRUFBQWEseUJBQUFaLEVBQUFsZSxHQUFBOXFCLFNBQUE0cUMsRUFBQUUsTUFNQTlCLEVBQUFsZSxHQUFBbi9CLElBQUFvOUMsRUFBQUssZUFBQSxTQUFBdjlDLEdBQ0EsT0FBQXE5QyxFQUFBdUMsZ0JBQUEzZ0IsRUFBQWovQixLQUNPeStDLHFCQXRGUCxLQStFQTNpRSxLQUFBOGpFLGdCQUFBM2dCLElBVUFtZ0IsRUFBQVEsZ0JBQUEsU0FBQTNnQixHQUNBa2UsRUFBQWxlLEdBQUE3M0IsU0FBQXpFLFFBQUFMLEVBQUF1OEMsUUFBQXZvRCxVQUlBb29ELEVBQUFtQixpQkFBQSxTQUFBekIsR0FDQSxPQUFBdGlFLEtBQUF3QyxLQUFBLFdBQ0EsSUFBQXdoRSxFQUFBM0MsRUFBQXJoRSxNQUNBOUcsRUFBQThxRSxFQUFBOXFFLEtBckdBLFlBdUdBQSxJQUNBQSxFQUFBLElBQUEwcEUsRUFBQTVpRSxNQUNBZ2tFLEVBQUE5cUUsS0F6R0EsV0F5R0FBLElBR0EsVUFBQW9wRSxHQUNBcHBFLEVBQUFvcEUsR0FBQXRpRSxTQUtBNGlFLEVBQUFxQixlQUFBLFNBQUFDLEdBQ0EsZ0JBQUFoZ0QsR0FDQUEsR0FDQUEsRUFBQStCLGlCQUdBaStDLEVBQUFYLE1BQUF2akUsUUFJQStnRSxFQUFBNkIsRUFBQSxPQUNBdGpFLElBQUEsVUFDQTlJLElBQUEsV0FDQSxNQWhJQSxZQW1JQW9zRSxFQXZHQSxHQStIQSxPQWZBdkIsRUFBQXhtRSxVQUFBaXBCLEdBQUEwQyxFQUFBdzhDLGVBcklBLHlCQXFJQUosRUFBQXFCLGVBQUEsSUFBQXJCLElBT0F2QixFQUFBM3JFLEdBQUEsTUFBQWt0RSxFQUFBbUIsaUJBQ0ExQyxFQUFBM3JFLEdBQUEsTUFBQXNyRSxZQUFBNEIsRUFFQXZCLEVBQUEzckUsR0FBQSxNQUFBaXZDLFdBQUEsV0FFQSxPQURBMDhCLEVBQUEzckUsR0FBQSxNQUFBbXRFLEVBQ0FELEVBQUFtQixrQkFHQW5CLEVBbEtBLENBbUtDbCtCLEdBU0R5L0IsRUFBQSxTQUFBOUMsR0FNQSxJQUFBK0MsRUFBQSxTQUtBdkIsRUFBQXhCLEVBQUEzckUsR0FBQTB1RSxHQUNBbkIsRUFBQSxDQUNBb0IsT0FBQSxTQUNBQyxPQUFBLE1BQ0FDLE1BQUEsU0FFQUMsRUFBQSxDQUNBQyxtQkFBQSwwQkFDQUMsWUFBQSwwQkFDQUMsTUFBQSxRQUNBTixPQUFBLFVBQ0FDLE9BQUEsUUFFQTk5QyxFQUFBLENBQ0F3OEMsZUFBQSwyQkFDQTRCLG9CQUFBLG9EQVNBVCxFQUVBLFdBQ0EsU0FBQUEsRUFBQWhoQixHQUNBbmpELEtBQUFxakUsU0FBQWxnQixFQUlBLElBQUFtZ0IsRUFBQWEsRUFBQTV2RSxVQTBFQSxPQXZFQSt1RSxFQUFBamlELE9BQUEsV0FDQSxJQUFBd2pELEdBQUEsRUFDQUMsR0FBQSxFQUNBdEIsRUFBQW5DLEVBQUFyaEUsS0FBQXFqRSxVQUFBN3FELFFBQUFnc0QsRUFBQUUsYUFBQSxHQUVBLEdBQUFsQixFQUFBLENBQ0EsSUFBQW4xRCxFQUFBZ3pELEVBQUFyaEUsS0FBQXFqRSxVQUFBcDFELEtBQUF1MkQsRUFBQUcsT0FBQSxHQUVBLEdBQUF0MkQsRUFBQSxDQUNBLGFBQUFBLEVBQUFqUyxLQUNBLEdBQUFpUyxFQUFBMEUsU0FBQXN1RCxFQUFBcmhFLEtBQUFxakUsVUFBQWhyQyxTQUFBNHFDLEVBQUFvQixRQUNBUSxHQUFBLE1BQ2EsQ0FDYixJQUFBbnlELEVBQUEydUQsRUFBQW1DLEdBQUF2MUQsS0FBQXUyRCxFQUFBSCxRQUFBLEdBRUEzeEQsR0FDQTJ1RCxFQUFBM3VELEdBQUF1bEIsWUFBQWdyQyxFQUFBb0IsUUFLQSxHQUFBUSxFQUFBLENBQ0EsR0FBQXgyRCxFQUFBc3ZELGFBQUEsYUFBQTZGLEVBQUE3RixhQUFBLGFBQUF0dkQsRUFBQTAyRCxVQUFBbCtELFNBQUEsYUFBQTI4RCxFQUFBdUIsVUFBQWwrRCxTQUFBLFlBQ0EsT0FHQXdILEVBQUEwRSxTQUFBc3VELEVBQUFyaEUsS0FBQXFqRSxVQUFBaHJDLFNBQUE0cUMsRUFBQW9CLFFBQ0FoRCxFQUFBaHpELEdBQUF3WSxRQUFBLFVBR0F4WSxFQUFBb0UsUUFDQXF5RCxHQUFBLEdBSUFBLEdBQ0E5a0UsS0FBQXFqRSxTQUFBOTNELGFBQUEsZ0JBQUE4MUQsRUFBQXJoRSxLQUFBcWpFLFVBQUFockMsU0FBQTRxQyxFQUFBb0IsU0FHQVEsR0FDQXhELEVBQUFyaEUsS0FBQXFqRSxVQUFBbnJDLFlBQUErcUMsRUFBQW9CLFNBSUFmLEVBQUFsckUsUUFBQSxXQUNBaXBFLEVBQUF4aUQsV0FBQTdlLEtBQUFxakUsU0FuRkEsYUFvRkFyakUsS0FBQXFqRSxTQUFBLE1BSUFjLEVBQUFKLGlCQUFBLFNBQUF6QixHQUNBLE9BQUF0aUUsS0FBQXdDLEtBQUEsV0FDQSxJQUFBdEosRUFBQW1vRSxFQUFBcmhFLE1BQUE5RyxLQTFGQSxhQTRGQUEsSUFDQUEsRUFBQSxJQUFBaXJFLEVBQUFua0UsTUFDQXFoRSxFQUFBcmhFLE1BQUE5RyxLQTlGQSxZQThGQUEsSUFHQSxXQUFBb3BFLEdBQ0FwcEUsRUFBQW9wRSxRQUtBdkIsRUFBQW9ELEVBQUEsT0FDQTdrRSxJQUFBLFVBQ0E5SSxJQUFBLFdBQ0EsTUEzR0EsWUE4R0EydEUsRUFoRkEsR0FvSEEsT0EzQkE5QyxFQUFBeG1FLFVBQUFpcEIsR0FBQTBDLEVBQUF3OEMsZUFBQXdCLEVBQUFDLG1CQUFBLFNBQUF2Z0QsR0FDQUEsRUFBQStCLGlCQUNBLElBQUE3UyxFQUFBOFEsRUFBQTdnQixPQUVBZytELEVBQUFqdUQsR0FBQWlsQixTQUFBNHFDLEVBQUFxQixVQUNBbHhELEVBQUFpdUQsRUFBQWp1RCxHQUFBb0YsUUFBQWdzRCxFQUFBRixTQUdBSCxFQUFBSixpQkFBQXR2RSxLQUFBNHNFLEVBQUFqdUQsR0FBQSxZQUNHMFEsR0FBQTBDLEVBQUFvK0Msb0JBQUFKLEVBQUFDLG1CQUFBLFNBQUF2Z0QsR0FDSCxJQUFBOVEsRUFBQWl1RCxFQUFBbjlDLEVBQUE3Z0IsUUFBQW1WLFFBQUFnc0QsRUFBQUYsUUFBQSxHQUNBakQsRUFBQWp1RCxHQUFBOGtCLFlBQUErcUMsRUFBQXNCLE1BQUEsZUFBQW41RCxLQUFBOFksRUFBQTluQixTQVFBaWxFLEVBQUEzckUsR0FBQTB1RSxHQUFBRCxFQUFBSixpQkFDQTFDLEVBQUEzckUsR0FBQTB1RSxHQUFBcEQsWUFBQW1ELEVBRUE5QyxFQUFBM3JFLEdBQUEwdUUsR0FBQXovQixXQUFBLFdBRUEsT0FEQTA4QixFQUFBM3JFLEdBQUEwdUUsR0FBQXZCLEVBQ0FzQixFQUFBSixrQkFHQUksRUF6SkEsQ0EwSkN6L0IsR0FTRHNnQyxFQUFBLFNBQUEzRCxHQU1BLElBQUErQyxFQUFBLFdBRUFhLEVBQUEsY0FDQUMsRUFBQSxJQUFBRCxFQUVBcEMsRUFBQXhCLEVBQUEzckUsR0FBQTB1RSxHQVFBZSxFQUFBLENBQ0F0eUMsU0FBQSxJQUNBdXlDLFVBQUEsRUFDQUMsT0FBQSxFQUNBQyxNQUFBLFFBQ0F2aUQsTUFBQSxHQUVBd2lELEVBQUEsQ0FDQTF5QyxTQUFBLG1CQUNBdXlDLFNBQUEsVUFDQUMsTUFBQSxtQkFDQUMsTUFBQSxtQkFDQXZpRCxLQUFBLFdBRUF5aUQsRUFBQSxDQUNBQyxLQUFBLE9BQ0FDLEtBQUEsT0FDQUMsS0FBQSxPQUNBQyxNQUFBLFNBRUFwL0MsRUFBQSxDQUNBcS9DLE1BQUEsUUFBQVgsRUFDQVksS0FBQSxPQUFBWixFQUNBYSxRQUFBLFVBQUFiLEVBQ0FjLFdBQUEsYUFBQWQsRUFDQWUsV0FBQSxhQUFBZixFQUNBZ0IsU0FBQSxXQUFBaEIsRUFDQWlCLGNBQUEsNEJBQ0FuRCxlQUFBLDhCQUVBQyxFQUFBLENBQ0FtRCxTQUFBLFdBQ0EvQixPQUFBLFNBQ0F3QixNQUFBLFFBQ0FELE1BQUEsc0JBQ0FELEtBQUEscUJBQ0FGLEtBQUEscUJBQ0FDLEtBQUEscUJBQ0FXLEtBQUEsaUJBRUE3QixFQUFBLENBQ0FILE9BQUEsVUFDQWlDLFlBQUEsd0JBQ0FELEtBQUEsaUJBQ0FFLFVBQUEsMkNBQ0FDLFdBQUEsdUJBQ0FDLFdBQUEsZ0NBQ0FDLFVBQUEsMEJBU0ExQixFQUVBLFdBQ0EsU0FBQUEsRUFBQTdoQixFQUFBbWYsR0FDQXRpRSxLQUFBMm1FLE9BQUEsS0FDQTNtRSxLQUFBNG1FLFVBQUEsS0FDQTVtRSxLQUFBNm1FLGVBQUEsS0FDQTdtRSxLQUFBOG1FLFdBQUEsRUFDQTltRSxLQUFBK21FLFlBQUEsRUFDQS9tRSxLQUFBZ25FLGFBQUEsS0FDQWhuRSxLQUFBaW5FLFFBQUFqbkUsS0FBQWtuRSxXQUFBNUUsR0FDQXRpRSxLQUFBcWpFLFNBQUFoQyxFQUFBbGUsR0FBQSxHQUNBbmpELEtBQUFtbkUsbUJBQUE5RixFQUFBcmhFLEtBQUFxakUsVUFBQXAxRCxLQUFBdTJELEVBQUFnQyxZQUFBLEdBRUF4bUUsS0FBQW9uRSxxQkFJQSxJQUFBOUQsRUFBQTBCLEVBQUF6d0UsVUE2V0EsT0ExV0ErdUUsRUFBQWw1RCxLQUFBLFdBQ0FwSyxLQUFBK21FLFlBQ0EvbUUsS0FBQXFuRSxPQUFBN0IsRUFBQUMsT0FJQW5DLEVBQUFnRSxnQkFBQSxZQUdBenNFLFNBQUE4M0IsUUFBQTB1QyxFQUFBcmhFLEtBQUFxakUsVUFBQTlyRCxHQUFBLHdCQUFBOHBELEVBQUFyaEUsS0FBQXFqRSxVQUFBcmpELElBQUEsZUFDQWhnQixLQUFBb0ssUUFJQWs1RCxFQUFBanJELEtBQUEsV0FDQXJZLEtBQUErbUUsWUFDQS9tRSxLQUFBcW5FLE9BQUE3QixFQUFBRSxPQUlBcEMsRUFBQWdDLE1BQUEsU0FBQXBoRCxHQUNBQSxJQUNBbGtCLEtBQUE4bUUsV0FBQSxHQUdBekYsRUFBQXJoRSxLQUFBcWpFLFVBQUFwMUQsS0FBQXUyRCxFQUFBK0IsV0FBQSxJQUFBbkYsRUFBQWEsMEJBQ0FiLEVBQUFNLHFCQUFBMWhFLEtBQUFxakUsVUFDQXJqRSxLQUFBdW5FLE9BQUEsSUFHQUMsY0FBQXhuRSxLQUFBNG1FLFdBQ0E1bUUsS0FBQTRtRSxVQUFBLE1BR0F0RCxFQUFBaUUsTUFBQSxTQUFBcmpELEdBQ0FBLElBQ0Fsa0IsS0FBQThtRSxXQUFBLEdBR0E5bUUsS0FBQTRtRSxZQUNBWSxjQUFBeG5FLEtBQUE0bUUsV0FDQTVtRSxLQUFBNG1FLFVBQUEsTUFHQTVtRSxLQUFBaW5FLFFBQUFwMEMsV0FBQTd5QixLQUFBOG1FLFlBQ0E5bUUsS0FBQTRtRSxVQUFBYSxhQUFBNXNFLFNBQUE2c0UsZ0JBQUExbkUsS0FBQXNuRSxnQkFBQXRuRSxLQUFBb0ssTUFBQTdLLEtBQUFTLFdBQUFpbkUsUUFBQXAwQyxZQUlBeXdDLEVBQUFodUMsR0FBQSxTQUFBN2MsR0FDQSxJQUFBOG9ELEVBQUF2aEUsS0FFQUEsS0FBQTZtRSxlQUFBeEYsRUFBQXJoRSxLQUFBcWpFLFVBQUFwMUQsS0FBQXUyRCxFQUFBOEIsYUFBQSxHQUVBLElBQUFxQixFQUFBM25FLEtBQUE0bkUsY0FBQTVuRSxLQUFBNm1FLGdCQUVBLEtBQUFwdUQsRUFBQXpZLEtBQUEybUUsT0FBQXp1RSxPQUFBLEdBQUF1Z0IsRUFBQSxHQUlBLEdBQUF6WSxLQUFBK21FLFdBQ0ExRixFQUFBcmhFLEtBQUFxakUsVUFBQXIvQyxJQUFBd0MsRUFBQXMvQyxLQUFBLFdBQ0EsT0FBQXZFLEVBQUFqc0MsR0FBQTdjLFNBRkEsQ0FPQSxHQUFBa3ZELElBQUFsdkQsRUFHQSxPQUZBelksS0FBQXNsRSxhQUNBdGxFLEtBQUF1bkUsUUFJQSxJQUFBTSxFQUFBcHZELEVBQUFrdkQsRUFBQW5DLEVBQUFDLEtBQUFELEVBQUFFLEtBRUExbEUsS0FBQXFuRSxPQUFBUSxFQUFBN25FLEtBQUEybUUsT0FBQWx1RCxNQUdBNnFELEVBQUFsckUsUUFBQSxXQUNBaXBFLEVBQUFyaEUsS0FBQXFqRSxVQUFBbC9DLElBQUErZ0QsR0FDQTdELEVBQUF4aUQsV0FBQTdlLEtBQUFxakUsU0FBQTRCLEdBQ0FqbEUsS0FBQTJtRSxPQUFBLEtBQ0EzbUUsS0FBQWluRSxRQUFBLEtBQ0FqbkUsS0FBQXFqRSxTQUFBLEtBQ0FyakUsS0FBQTRtRSxVQUFBLEtBQ0E1bUUsS0FBQThtRSxVQUFBLEtBQ0E5bUUsS0FBQSttRSxXQUFBLEtBQ0EvbUUsS0FBQTZtRSxlQUFBLEtBQ0E3bUUsS0FBQW1uRSxtQkFBQSxNQUlBN0QsRUFBQTRELFdBQUEsU0FBQTVFLEdBR0EsT0FGQUEsRUFBQW5CLEVBQUEsR0FBMEJnRSxFQUFBN0MsR0FDMUJsQixFQUFBZ0IsZ0JBQUFnQyxFQUFBOUIsRUFBQWlELEdBQ0FqRCxHQUdBZ0IsRUFBQThELG1CQUFBLFdBQ0EsSUFBQVUsRUFBQTluRSxLQUVBQSxLQUFBaW5FLFFBQUE3QixVQUNBL0QsRUFBQXJoRSxLQUFBcWpFLFVBQUF2L0MsR0FBQTBDLEVBQUF1L0MsUUFBQSxTQUFBN2hELEdBQ0EsT0FBQTRqRCxFQUFBQyxTQUFBN2pELEtBSUEsVUFBQWxrQixLQUFBaW5FLFFBQUEzQixRQUNBakUsRUFBQXJoRSxLQUFBcWpFLFVBQUF2L0MsR0FBQTBDLEVBQUF3L0MsV0FBQSxTQUFBOWhELEdBQ0EsT0FBQTRqRCxFQUFBeEMsTUFBQXBoRCxLQUNTSixHQUFBMEMsRUFBQXkvQyxXQUFBLFNBQUEvaEQsR0FDVCxPQUFBNGpELEVBQUFQLE1BQUFyakQsS0FHQSxpQkFBQXJwQixTQUFBc1MsaUJBUUFrMEQsRUFBQXJoRSxLQUFBcWpFLFVBQUF2L0MsR0FBQTBDLEVBQUEwL0MsU0FBQSxXQUNBNEIsRUFBQXhDLFFBRUF3QyxFQUFBZCxjQUNBeHdDLGFBQUFzeEMsRUFBQWQsY0FHQWMsRUFBQWQsYUFBQXZxRCxXQUFBLFNBQUF5SCxHQUNBLE9BQUE0akQsRUFBQVAsTUFBQXJqRCxJQWpOQSxJQWtOYTRqRCxFQUFBYixRQUFBcDBDLGNBTWJ5d0MsRUFBQXlFLFNBQUEsU0FBQTdqRCxHQUNBLHNCQUFBOVksS0FBQThZLEVBQUE3Z0IsT0FBQStyRCxTQUlBLE9BQUFsckMsRUFBQWtGLE9BQ0EsS0FsT0EsR0FtT0FsRixFQUFBK0IsaUJBQ0FqbUIsS0FBQXFZLE9BQ0EsTUFFQSxLQXJPQSxHQXNPQTZMLEVBQUErQixpQkFDQWptQixLQUFBb0ssU0FPQWs1RCxFQUFBc0UsY0FBQSxTQUFBemtCLEdBRUEsT0FEQW5qRCxLQUFBMm1FLE9BQUF0RixFQUFBejhELFVBQUF5OEQsRUFBQWxlLEdBQUE3bUQsU0FBQTJSLEtBQUF1MkQsRUFBQTZCLE9BQ0FybUUsS0FBQTJtRSxPQUFBNXdFLFFBQUFvdEQsSUFHQW1nQixFQUFBMEUsb0JBQUEsU0FBQUgsRUFBQW4xRCxHQUNBLElBQUF1MUQsRUFBQUosSUFBQXJDLEVBQUFDLEtBQ0F5QyxFQUFBTCxJQUFBckMsRUFBQUUsS0FFQWlDLEVBQUEzbkUsS0FBQTRuRSxjQUFBbDFELEdBRUF5MUQsRUFBQW5vRSxLQUFBMm1FLE9BQUF6dUUsT0FBQSxFQUNBa3dFLEVBQUFGLEdBQUEsSUFBQVAsR0FBQU0sR0FBQU4sSUFBQVEsRUFFQSxHQUFBQyxJQUFBcG9FLEtBQUFpbkUsUUFBQWxrRCxLQUNBLE9BQUFyUSxFQUdBLElBQUEyMUQsRUFBQVIsSUFBQXJDLEVBQUFFLE1BQUEsSUFDQTRDLEdBQUFYLEVBQUFVLEdBQUFyb0UsS0FBQTJtRSxPQUFBenVFLE9BQ0EsV0FBQW93RSxFQUFBdG9FLEtBQUEybUUsT0FBQTNtRSxLQUFBMm1FLE9BQUF6dUUsT0FBQSxHQUFBOEgsS0FBQTJtRSxPQUFBMkIsSUFHQWhGLEVBQUFpRixtQkFBQSxTQUFBbGhELEVBQUFtaEQsR0FDQSxJQUFBQyxFQUFBem9FLEtBQUE0bkUsY0FBQXZnRCxHQUVBcWhELEVBQUExb0UsS0FBQTRuRSxjQUFBdkcsRUFBQXJoRSxLQUFBcWpFLFVBQUFwMUQsS0FBQXUyRCxFQUFBOEIsYUFBQSxJQUVBcUMsRUFBQXRILEVBQUE3NkMsUUFBQXEvQyxNQUFBLENBQ0F4K0MsZ0JBQ0F3Z0QsVUFBQVcsRUFDQW5qQyxLQUFBcWpDLEVBQ0FwekMsR0FBQW16QyxJQUdBLE9BREFwSCxFQUFBcmhFLEtBQUFxakUsVUFBQXg4QyxRQUFBOGhELEdBQ0FBLEdBR0FyRixFQUFBc0YsMkJBQUEsU0FBQXpsQixHQUNBLEdBQUFuakQsS0FBQW1uRSxtQkFBQSxDQUNBOUYsRUFBQXJoRSxLQUFBbW5FLG9CQUFBbDVELEtBQUF1MkQsRUFBQUgsUUFBQXBzQyxZQUFBZ3JDLEVBQUFvQixRQUVBLElBQUF3RSxFQUFBN29FLEtBQUFtbkUsbUJBQUFseEUsU0FBQStKLEtBQUE0bkUsY0FBQXprQixJQUVBMGxCLEdBQ0F4SCxFQUFBd0gsR0FBQWp4QyxTQUFBcXJDLEVBQUFvQixVQUtBZixFQUFBK0QsT0FBQSxTQUFBUSxFQUFBMWtCLEdBQ0EsSUFXQTJsQixFQUNBQyxFQUNBUCxFQWJBUSxFQUFBaHBFLEtBRUEwUyxFQUFBMnVELEVBQUFyaEUsS0FBQXFqRSxVQUFBcDFELEtBQUF1MkQsRUFBQThCLGFBQUEsR0FFQTJDLEVBQUFqcEUsS0FBQTRuRSxjQUFBbDFELEdBRUF3MkQsRUFBQS9sQixHQUFBendDLEdBQUExUyxLQUFBZ29FLG9CQUFBSCxFQUFBbjFELEdBRUF5MkQsRUFBQW5wRSxLQUFBNG5FLGNBQUFzQixHQUVBRSxFQUFBbEgsUUFBQWxpRSxLQUFBNG1FLFdBZUEsR0FWQWlCLElBQUFyQyxFQUFBQyxNQUNBcUQsRUFBQTdGLEVBQUEwQyxLQUNBb0QsRUFBQTlGLEVBQUF3QyxLQUNBK0MsRUFBQWhELEVBQUFHLE9BRUFtRCxFQUFBN0YsRUFBQTJDLE1BQ0FtRCxFQUFBOUYsRUFBQXlDLEtBQ0E4QyxFQUFBaEQsRUFBQUksT0FHQXNELEdBQUE3SCxFQUFBNkgsR0FBQTd3QyxTQUFBNHFDLEVBQUFvQixRQUNBcmtFLEtBQUErbUUsWUFBQSxNQURBLENBS0EsSUFBQTRCLEVBQUEzb0UsS0FBQXVvRSxtQkFBQVcsRUFBQVYsR0FFQSxJQUFBRyxFQUFBeGhELHNCQUlBelUsR0FBQXcyRCxFQUFBLENBS0FscEUsS0FBQSttRSxZQUFBLEVBRUFxQyxHQUNBcHBFLEtBQUFzbEUsUUFHQXRsRSxLQUFBNG9FLDJCQUFBTSxHQUVBLElBQUFHLEVBQUFoSSxFQUFBNzZDLFFBQUFzL0MsS0FBQSxDQUNBeitDLGNBQUE2aEQsRUFDQXJCLFVBQUFXLEVBQ0FuakMsS0FBQTRqQyxFQUNBM3pDLEdBQUE2ekMsSUFHQS9ILEVBQUFhLHlCQUFBWixFQUFBcmhFLEtBQUFxakUsVUFBQWhyQyxTQUFBNHFDLEVBQUE0QyxRQUNBeEUsRUFBQTZILEdBQUF0eEMsU0FBQW14QyxHQUNBM0gsRUFBQVksT0FBQWtILEdBQ0E3SCxFQUFBM3VELEdBQUFrbEIsU0FBQWt4QyxHQUNBekgsRUFBQTZILEdBQUF0eEMsU0FBQWt4QyxHQUNBekgsRUFBQTN1RCxHQUFBc1IsSUFBQW85QyxFQUFBSyxlQUFBLFdBQ0FKLEVBQUE2SCxHQUFBanhDLFlBQUE2d0MsRUFBQSxJQUFBQyxHQUFBbnhDLFNBQUFxckMsRUFBQW9CLFFBQ0FoRCxFQUFBM3VELEdBQUF1bEIsWUFBQWdyQyxFQUFBb0IsT0FBQSxJQUFBMEUsRUFBQSxJQUFBRCxHQUNBRSxFQUFBakMsWUFBQSxFQUNBdHFELFdBQUEsV0FDQSxPQUFBNGtELEVBQUEySCxFQUFBM0YsVUFBQXg4QyxRQUFBd2lELElBQ1csS0FDRjFHLHFCQXhXVCxPQTBXQXRCLEVBQUEzdUQsR0FBQXVsQixZQUFBZ3JDLEVBQUFvQixRQUNBaEQsRUFBQTZILEdBQUF0eEMsU0FBQXFyQyxFQUFBb0IsUUFDQXJrRSxLQUFBK21FLFlBQUEsRUFDQTFGLEVBQUFyaEUsS0FBQXFqRSxVQUFBeDhDLFFBQUF3aUQsSUFHQUQsR0FDQXBwRSxLQUFBdW5FLFdBS0F2QyxFQUFBakIsaUJBQUEsU0FBQXpCLEdBQ0EsT0FBQXRpRSxLQUFBd0MsS0FBQSxXQUNBLElBQUF0SixFQUFBbW9FLEVBQUFyaEUsTUFBQTlHLEtBQUErckUsR0FFQWdDLEVBQUE5RixFQUFBLEdBQWlDZ0UsRUFBQTlELEVBQUFyaEUsTUFBQTlHLFFBRWpDLGlCQUFBb3BFLElBQ0EyRSxFQUFBOUYsRUFBQSxHQUErQjhGLEVBQUEzRSxJQUcvQixJQUFBL1EsRUFBQSxpQkFBQStRLElBQUEyRSxFQUFBNUIsTUFPQSxHQUxBbnNFLElBQ0FBLEVBQUEsSUFBQThyRSxFQUFBaGxFLEtBQUFpbkUsR0FDQTVGLEVBQUFyaEUsTUFBQTlHLEtBQUErckUsRUFBQS9yRSxJQUdBLGlCQUFBb3BFLEVBQ0FwcEUsRUFBQW84QixHQUFBZ3RDLFFBQ1Msb0JBQUEvUSxFQUFBLENBQ1QsWUFBQXI0RCxFQUFBcTRELEdBQ0EsVUFBQXQxQyxVQUFBLG9CQUFBczFDLEVBQUEsS0FHQXI0RCxFQUFBcTRELFVBQ1MwVixFQUFBcDBDLFdBQ1QzNUIsRUFBQW9zRSxRQUNBcHNFLEVBQUFxdUUsWUFLQXZDLEVBQUFzRSxxQkFBQSxTQUFBcGxELEdBQ0EsSUFBQWhqQixFQUFBa2dFLEVBQUFRLHVCQUFBNWhFLE1BRUEsR0FBQWtCLEVBQUEsQ0FJQSxJQUFBbUMsRUFBQWcrRCxFQUFBbmdFLEdBQUEsR0FFQSxHQUFBbUMsR0FBQWcrRCxFQUFBaCtELEdBQUFnMUIsU0FBQTRxQyxFQUFBbUQsVUFBQSxDQUlBLElBQUE5RCxFQUFBbkIsRUFBQSxHQUE4QkUsRUFBQWgrRCxHQUFBbkssT0FBQW1vRSxFQUFBcmhFLE1BQUE5RyxRQUM5QnF3RSxFQUFBdnBFLEtBQUFzTCxhQUFBLGlCQUVBaStELElBQ0FqSCxFQUFBenZDLFVBQUEsR0FHQW15QyxFQUFBakIsaUJBQUF0dkUsS0FBQTRzRSxFQUFBaCtELEdBQUFpL0QsR0FFQWlILEdBQ0FsSSxFQUFBaCtELEdBQUFuSyxLQUFBK3JFLEdBQUEzdkMsR0FBQWkwQyxHQUdBcmxELEVBQUErQixvQkFHQTg2QyxFQUFBaUUsRUFBQSxPQUNBMWxFLElBQUEsVUFDQTlJLElBQUEsV0FDQSxNQTNiQSxVQTZiSyxDQUNMOEksSUFBQSxVQUNBOUksSUFBQSxXQUNBLE9BQUEydUUsTUFHQUgsRUE3WEEsR0E0WkEsT0F0QkEzRCxFQUFBeG1FLFVBQUFpcEIsR0FBQTBDLEVBQUF3OEMsZUFBQXdCLEVBQUFpQyxXQUFBekIsRUFBQXNFLHNCQUNBakksRUFBQXJ0RSxRQUFBOHZCLEdBQUEwQyxFQUFBMi9DLGNBQUEsV0FDQTlFLEVBQUFtRCxFQUFBa0MsV0FBQWxrRSxLQUFBLFdBQ0EsSUFBQWduRSxFQUFBbkksRUFBQXJoRSxNQUVBZ2xFLEVBQUFqQixpQkFBQXR2RSxLQUFBKzBFLElBQUF0d0UsWUFTQW1vRSxFQUFBM3JFLEdBQUEwdUUsR0FBQVksRUFBQWpCLGlCQUNBMUMsRUFBQTNyRSxHQUFBMHVFLEdBQUFwRCxZQUFBZ0UsRUFFQTNELEVBQUEzckUsR0FBQTB1RSxHQUFBei9CLFdBQUEsV0FFQSxPQURBMDhCLEVBQUEzckUsR0FBQTB1RSxHQUFBdkIsRUFDQW1DLEVBQUFqQixrQkFHQWlCLEVBemVBLENBMGVDdGdDLEdBU0Qra0MsRUFBQSxTQUFBcEksR0FNQSxJQUFBK0MsRUFBQSxXQUVBYSxFQUFBLGNBR0FwQyxFQUFBeEIsRUFBQTNyRSxHQUFBMHVFLEdBRUFlLEVBQUEsQ0FDQTlqRCxRQUFBLEVBQ0Eva0IsT0FBQSxJQUVBaXBFLEVBQUEsQ0FDQWxrRCxPQUFBLFVBQ0Eva0IsT0FBQSxvQkFFQWtxQixFQUFBLENBQ0E0OEMsS0FBQSxtQkFDQXNHLE1BQUEsb0JBQ0FDLEtBQUEsbUJBQ0FDLE9BQUEscUJBQ0E1RyxlQUFBLDhCQUVBQyxFQUFBLENBQ0FHLEtBQUEsT0FDQXlHLFNBQUEsV0FDQUMsV0FBQSxhQUNBQyxVQUFBLGFBRUFDLEVBQUEsQ0FDQUMsTUFBQSxRQUNBQyxPQUFBLFVBRUExRixFQUFBLENBQ0EyRixRQUFBLHFCQUNBekYsWUFBQSw0QkFTQStFLEVBRUEsV0FDQSxTQUFBQSxFQUFBdG1CLEVBQUFtZixHQUNBdGlFLEtBQUFvcUUsa0JBQUEsRUFDQXBxRSxLQUFBcWpFLFNBQUFsZ0IsRUFDQW5qRCxLQUFBaW5FLFFBQUFqbkUsS0FBQWtuRSxXQUFBNUUsR0FDQXRpRSxLQUFBcXFFLGNBQUFoSixFQUFBejhELFVBQUF5OEQsRUFBQSxtQ0FBQWxlLEVBQUE1cEQsR0FBQSw2Q0FBQTRwRCxFQUFBNXBELEdBQUEsT0FHQSxJQUZBLElBQUErd0UsRUFBQWpKLEVBQUFtRCxFQUFBRSxhQUVBenNFLEVBQUEsRUFBcUJBLEVBQUFxeUUsRUFBQXB5RSxPQUF1QkQsSUFBQSxDQUM1QyxJQUFBd0ssRUFBQTZuRSxFQUFBcnlFLEdBQ0FpSixFQUFBa2dFLEVBQUFRLHVCQUFBbi9ELEdBRUEsT0FBQXZCLEdBQUFtZ0UsRUFBQW5nRSxHQUFBNk0sT0FBQW8xQyxHQUFBanJELE9BQUEsSUFDQThILEtBQUF1cUUsVUFBQXJwRSxFQUVBbEIsS0FBQXFxRSxjQUFBcjBFLEtBQUF5TSxJQUlBekMsS0FBQXdxRSxRQUFBeHFFLEtBQUFpbkUsUUFBQTNxRSxPQUFBMEQsS0FBQXlxRSxhQUFBLEtBRUF6cUUsS0FBQWluRSxRQUFBM3FFLFFBQ0EwRCxLQUFBMHFFLDBCQUFBMXFFLEtBQUFxakUsU0FBQXJqRSxLQUFBcXFFLGVBR0FycUUsS0FBQWluRSxRQUFBNWxELFFBQ0FyaEIsS0FBQXFoQixTQUtBLElBQUFpaUQsRUFBQW1HLEVBQUFsMUUsVUE4T0EsT0EzT0ErdUUsRUFBQWppRCxPQUFBLFdBQ0FnZ0QsRUFBQXJoRSxLQUFBcWpFLFVBQUFockMsU0FBQTRxQyxFQUFBRyxNQUNBcGpFLEtBQUFvaEIsT0FFQXBoQixLQUFBa2hCLFFBSUFvaUQsRUFBQXBpRCxLQUFBLFdBQ0EsSUFNQXlwRCxFQUNBQyxFQVBBckosRUFBQXZoRSxLQUVBLEtBQUFBLEtBQUFvcUUsa0JBQUEvSSxFQUFBcmhFLEtBQUFxakUsVUFBQWhyQyxTQUFBNHFDLEVBQUFHLFFBT0FwakUsS0FBQXdxRSxTQUdBLEtBRkFHLEVBQUF0SixFQUFBejhELFVBQUF5OEQsRUFBQXJoRSxLQUFBd3FFLFNBQUF2OEQsS0FBQXUyRCxFQUFBMkYsU0FBQXA4RCxPQUFBLGlCQUFBL04sS0FBQWluRSxRQUFBM3FFLE9BQUEsUUFFQXBFLFNBQ0F5eUUsRUFBQSxNQUlBQSxJQUNBQyxFQUFBdkosRUFBQXNKLEdBQUE1NEQsSUFBQS9SLEtBQUF1cUUsV0FBQXJ4RSxLQUFBK3JFLEtBRUEyRixFQUFBUixtQkFIQSxDQVFBLElBQUFTLEVBQUF4SixFQUFBNzZDLFFBQUE0OEMsTUFHQSxHQUZBL0IsRUFBQXJoRSxLQUFBcWpFLFVBQUF4OEMsUUFBQWdrRCxJQUVBQSxFQUFBMWpELHFCQUFBLENBSUF3akQsSUFDQWxCLEVBQUExRixpQkFBQXR2RSxLQUFBNHNFLEVBQUFzSixHQUFBNTRELElBQUEvUixLQUFBdXFFLFdBQUEsUUFFQUssR0FDQXZKLEVBQUFzSixHQUFBenhFLEtBQUErckUsRUFBQSxPQUlBLElBQUE2RixFQUFBOXFFLEtBQUErcUUsZ0JBRUExSixFQUFBcmhFLEtBQUFxakUsVUFBQXByQyxZQUFBZ3JDLEVBQUE0RyxVQUFBanlDLFNBQUFxckMsRUFBQTZHLFlBQ0E5cEUsS0FBQXFqRSxTQUFBdmpELE1BQUFnckQsR0FBQSxFQUVBOXFFLEtBQUFxcUUsY0FBQW55RSxPQUFBLEdBQ0FtcEUsRUFBQXJoRSxLQUFBcXFFLGVBQUFweUMsWUFBQWdyQyxFQUFBOEcsV0FBQXg2RCxLQUFBLG9CQUdBdlAsS0FBQWdyRSxrQkFBQSxHQUVBLElBQUE3MkMsRUFBQSxXQUNBa3RDLEVBQUFFLEVBQUE4QixVQUFBcHJDLFlBQUFnckMsRUFBQTZHLFlBQUFseUMsU0FBQXFyQyxFQUFBNEcsVUFBQWp5QyxTQUFBcXJDLEVBQUFHLE1BQ0E3QixFQUFBOEIsU0FBQXZqRCxNQUFBZ3JELEdBQUEsR0FFQXZKLEVBQUF5SixrQkFBQSxHQUVBM0osRUFBQUUsRUFBQThCLFVBQUF4OEMsUUFBQUwsRUFBQWtqRCxRQUdBLEdBQUF0SSxFQUFBYSx3QkFBQSxDQUtBLElBQUFnSixFQUFBSCxFQUFBLEdBQUFucEUsY0FBQW1wRSxFQUFBL3VFLE1BQUEsR0FDQW12RSxFQUFBLFNBQUFELEVBQ0E1SixFQUFBcmhFLEtBQUFxakUsVUFBQXIvQyxJQUFBbzlDLEVBQUFLLGVBQUF0dEMsR0FBQXd1QyxxQkFySkEsS0FzSkEzaUUsS0FBQXFqRSxTQUFBdmpELE1BQUFnckQsR0FBQTlxRSxLQUFBcWpFLFNBQUE2SCxHQUFBLFVBUEEvMkMsT0FVQW12QyxFQUFBbGlELEtBQUEsV0FDQSxJQUFBMG1ELEVBQUE5bkUsS0FFQSxJQUFBQSxLQUFBb3FFLGtCQUFBL0ksRUFBQXJoRSxLQUFBcWpFLFVBQUFockMsU0FBQTRxQyxFQUFBRyxNQUFBLENBSUEsSUFBQXlILEVBQUF4SixFQUFBNzZDLFFBQUFtakQsTUFHQSxHQUZBdEksRUFBQXJoRSxLQUFBcWpFLFVBQUF4OEMsUUFBQWdrRCxJQUVBQSxFQUFBMWpELHFCQUFBLENBSUEsSUFBQTJqRCxFQUFBOXFFLEtBQUErcUUsZ0JBTUEsR0FKQS9xRSxLQUFBcWpFLFNBQUF2akQsTUFBQWdyRCxHQUFBOXFFLEtBQUFxakUsU0FBQXZ5Qyx3QkFBQWc2QyxHQUFBLEtBQ0ExSixFQUFBWSxPQUFBaGlFLEtBQUFxakUsVUFDQWhDLEVBQUFyaEUsS0FBQXFqRSxVQUFBenJDLFNBQUFxckMsRUFBQTZHLFlBQUE3eEMsWUFBQWdyQyxFQUFBNEcsVUFBQTV4QyxZQUFBZ3JDLEVBQUFHLE1BRUFwakUsS0FBQXFxRSxjQUFBbnlFLE9BQUEsRUFDQSxRQUFBRCxFQUFBLEVBQXVCQSxFQUFBK0gsS0FBQXFxRSxjQUFBbnlFLE9BQStCRCxJQUFBLENBQ3RELElBQUE0dUIsRUFBQTdtQixLQUFBcXFFLGNBQUFweUUsR0FDQWlKLEVBQUFrZ0UsRUFBQVEsdUJBQUEvNkMsR0FFQSxVQUFBM2xCLEVBQUEsQ0FDQSxJQUFBaXFFLEVBQUE5SixFQUFBbmdFLEdBRUFpcUUsRUFBQTl5QyxTQUFBNHFDLEVBQUFHLE9BQ0EvQixFQUFBeDZDLEdBQUErUSxTQUFBcXJDLEVBQUE4RyxXQUFBeDZELEtBQUEscUJBTUF2UCxLQUFBZ3JFLGtCQUFBLEdBRUEsSUFBQTcyQyxFQUFBLFdBQ0EyekMsRUFBQWtELGtCQUFBLEdBRUEzSixFQUFBeUcsRUFBQXpFLFVBQUFwckMsWUFBQWdyQyxFQUFBNkcsWUFBQWx5QyxTQUFBcXJDLEVBQUE0RyxVQUFBaGpELFFBQUFMLEVBQUFvakQsU0FHQTVwRSxLQUFBcWpFLFNBQUF2akQsTUFBQWdyRCxHQUFBLEdBRUExSixFQUFBYSx3QkFLQVosRUFBQXJoRSxLQUFBcWpFLFVBQUFyL0MsSUFBQW85QyxFQUFBSyxlQUFBdHRDLEdBQUF3dUMscUJBM01BLEtBdU1BeHVDLE9BT0FtdkMsRUFBQTBILGlCQUFBLFNBQUFJLEdBQ0FwckUsS0FBQW9xRSxpQkFBQWdCLEdBR0E5SCxFQUFBbHJFLFFBQUEsV0FDQWlwRSxFQUFBeGlELFdBQUE3ZSxLQUFBcWpFLFNBQUE0QixHQUNBamxFLEtBQUFpbkUsUUFBQSxLQUNBam5FLEtBQUF3cUUsUUFBQSxLQUNBeHFFLEtBQUFxakUsU0FBQSxLQUNBcmpFLEtBQUFxcUUsY0FBQSxLQUNBcnFFLEtBQUFvcUUsaUJBQUEsTUFJQTlHLEVBQUE0RCxXQUFBLFNBQUE1RSxHQUtBLE9BSkFBLEVBQUFuQixFQUFBLEdBQTBCZ0UsRUFBQTdDLElBQzFCamhELE9BQUE2Z0QsUUFBQUksRUFBQWpoRCxRQUVBKy9DLEVBQUFnQixnQkFBQWdDLEVBQUE5QixFQUFBaUQsR0FDQWpELEdBR0FnQixFQUFBeUgsY0FBQSxXQUNBLElBQUFNLEVBQUFoSyxFQUFBcmhFLEtBQUFxakUsVUFBQWhyQyxTQUFBMnhDLEVBQUFDLE9BQ0EsT0FBQW9CLEVBQUFyQixFQUFBQyxNQUFBRCxFQUFBRSxRQUdBNUcsRUFBQW1ILFdBQUEsV0FDQSxJQUFBekIsRUFBQWhwRSxLQUVBMUQsRUFBQSxLQUVBOGtFLEVBQUFlLFVBQUFuaUUsS0FBQWluRSxRQUFBM3FFLFNBQ0FBLEVBQUEwRCxLQUFBaW5FLFFBQUEzcUUsWUFFQSxJQUFBMEQsS0FBQWluRSxRQUFBM3FFLE9BQUF5RixTQUNBekYsRUFBQTBELEtBQUFpbkUsUUFBQTNxRSxPQUFBLEtBR0FBLEVBQUEra0UsRUFBQXJoRSxLQUFBaW5FLFFBQUEzcUUsUUFBQSxHQUdBLElBQUE0RSxFQUFBLHlDQUFBbEIsS0FBQWluRSxRQUFBM3FFLE9BQUEsS0FJQSxPQUhBK2tFLEVBQUEva0UsR0FBQTJSLEtBQUEvTSxHQUFBc0IsS0FBQSxTQUFBdkssRUFBQWtyRCxHQUNBNmxCLEVBQUEwQiwwQkFBQWpCLEVBQUE2QixzQkFBQW5vQixHQUFBLENBQUFBLE1BRUE3bUQsR0FHQWduRSxFQUFBb0gsMEJBQUEsU0FBQXZuQixFQUFBb29CLEdBQ0EsR0FBQXBvQixFQUFBLENBQ0EsSUFBQXFvQixFQUFBbkssRUFBQWxlLEdBQUE5cUIsU0FBQTRxQyxFQUFBRyxNQUVBbUksRUFBQXJ6RSxPQUFBLEdBQ0FtcEUsRUFBQWtLLEdBQUFyekMsWUFBQStxQyxFQUFBOEcsV0FBQXlCLEdBQUFqOEQsS0FBQSxnQkFBQWk4RCxLQU1BL0IsRUFBQTZCLHNCQUFBLFNBQUFub0IsR0FDQSxJQUFBamlELEVBQUFrZ0UsRUFBQVEsdUJBQUF6ZSxHQUNBLE9BQUFqaUQsRUFBQW1nRSxFQUFBbmdFLEdBQUEsU0FHQXVvRSxFQUFBMUYsaUJBQUEsU0FBQXpCLEdBQ0EsT0FBQXRpRSxLQUFBd0MsS0FBQSxXQUNBLElBQUFpcEUsRUFBQXBLLEVBQUFyaEUsTUFDQTlHLEVBQUF1eUUsRUFBQXZ5RSxLQUFBK3JFLEdBRUFnQyxFQUFBOUYsRUFBQSxHQUFpQ2dFLEVBQUFzRyxFQUFBdnlFLE9BQUEsaUJBQUFvcEUsTUFXakMsSUFUQXBwRSxHQUFBK3RFLEVBQUE1bEQsUUFBQSxZQUFBalcsS0FBQWszRCxLQUNBMkUsRUFBQTVsRCxRQUFBLEdBR0Fub0IsSUFDQUEsRUFBQSxJQUFBdXdFLEVBQUF6cEUsS0FBQWluRSxHQUNBd0UsRUFBQXZ5RSxLQUFBK3JFLEVBQUEvckUsSUFHQSxpQkFBQW9wRSxFQUFBLENBQ0EsWUFBQXBwRSxFQUFBb3BFLEdBQ0EsVUFBQXJtRCxVQUFBLG9CQUFBcW1ELEVBQUEsS0FHQXBwRSxFQUFBb3BFLFNBS0F2QixFQUFBMEksRUFBQSxPQUNBbnFFLElBQUEsVUFDQTlJLElBQUEsV0FDQSxNQWpUQSxVQW1USyxDQUNMOEksSUFBQSxVQUNBOUksSUFBQSxXQUNBLE9BQUEydUUsTUFHQXNFLEVBN1FBLEdBb1RBLE9BOUJBcEksRUFBQXhtRSxVQUFBaXBCLEdBQUEwQyxFQUFBdzhDLGVBQUF3QixFQUFBRSxZQUFBLFNBQUF4Z0QsR0FFQSxNQUFBQSxFQUFBNEIsY0FBQXNwQyxTQUNBbHJDLEVBQUErQixpQkFHQSxJQUFBeWxELEVBQUFySyxFQUFBcmhFLE1BQ0FrQixFQUFBa2dFLEVBQUFRLHVCQUFBNWhFLE1BQ0FxaEUsRUFBQW5nRSxHQUFBc0IsS0FBQSxXQUNBLElBQUFtcEUsRUFBQXRLLEVBQUFyaEUsTUFDQTlHLEVBQUF5eUUsRUFBQXp5RSxLQUFBK3JFLEdBQ0EzQyxFQUFBcHBFLEVBQUEsU0FBQXd5RSxFQUFBeHlFLE9BRUF1d0UsRUFBQTFGLGlCQUFBdHZFLEtBQUFrM0UsRUFBQXJKLE9BU0FqQixFQUFBM3JFLEdBQUEwdUUsR0FBQXFGLEVBQUExRixpQkFDQTFDLEVBQUEzckUsR0FBQTB1RSxHQUFBcEQsWUFBQXlJLEVBRUFwSSxFQUFBM3JFLEdBQUEwdUUsR0FBQXovQixXQUFBLFdBRUEsT0FEQTA4QixFQUFBM3JFLEdBQUEwdUUsR0FBQXZCLEVBQ0E0RyxFQUFBMUYsa0JBR0EwRixFQXZXQSxDQXdXQy9rQyxHQVNEa25DLEVBQUEsU0FBQXZLLEdBTUEsSUFBQStDLEVBQUEsV0FFQWEsRUFBQSxjQUNBQyxFQUFBLElBQUFELEVBRUFwQyxFQUFBeEIsRUFBQTNyRSxHQUFBMHVFLEdBYUF5SCxFQUFBLElBQUEvakUsT0FBQWdrRSxZQUNBdGxELEVBQUEsQ0FDQW1qRCxLQUFBLE9BQUF6RSxFQUNBMEUsT0FBQSxTQUFBMUUsRUFDQTlCLEtBQUEsT0FBQThCLEVBQ0F3RSxNQUFBLFFBQUF4RSxFQUNBNkcsTUFBQSxRQUFBN0csRUFDQWxDLGVBQUEsNkJBQ0FnSixpQkFBQSwrQkFDQUMsZUFBQSw4QkFFQWhKLEVBQUEsQ0FDQWlKLFNBQUEsV0FDQTlJLEtBQUEsT0FDQStJLE9BQUEsU0FDQUMsVUFBQSxZQUNBQyxTQUFBLFdBQ0FDLFVBQUEsc0JBQ0FDLFNBQUEscUJBQ0FDLGdCQUFBLG1CQUVBaEksRUFBQSxDQUNBRSxZQUFBLDJCQUNBK0gsV0FBQSxpQkFDQUMsS0FBQSxpQkFDQUMsV0FBQSxjQUNBQyxjQUFBLGdEQUVBQyxFQUFBLENBQ0FDLElBQUEsWUFDQUMsT0FBQSxVQUNBQyxPQUFBLGVBQ0FDLFVBQUEsYUFDQXJILE1BQUEsY0FDQXNILFNBQUEsWUFDQXZILEtBQUEsYUFDQXdILFFBQUEsWUFFQWhJLEVBQUEsQ0FDQXppQyxPQUFBLEVBQ0EwcUMsTUFBQSxFQUNBQyxTQUFBLGdCQUVBOUgsRUFBQSxDQUNBN2lDLE9BQUEsMkJBQ0EwcUMsS0FBQSxVQUNBQyxTQUFBLG9CQVNBekIsRUFFQSxXQUNBLFNBQUFBLEVBQUF6b0IsRUFBQW1mLEdBQ0F0aUUsS0FBQXFqRSxTQUFBbGdCLEVBQ0FuakQsS0FBQXN0RSxRQUFBLEtBQ0F0dEUsS0FBQWluRSxRQUFBam5FLEtBQUFrbkUsV0FBQTVFLEdBQ0F0aUUsS0FBQXV0RSxNQUFBdnRFLEtBQUF3dEUsa0JBQ0F4dEUsS0FBQXl0RSxVQUFBenRFLEtBQUEwdEUsZ0JBRUExdEUsS0FBQW9uRSxxQkFJQSxJQUFBOUQsRUFBQXNJLEVBQUFyM0UsVUEyVUEsT0F4VUErdUUsRUFBQWppRCxPQUFBLFdBQ0EsSUFBQXJoQixLQUFBcWpFLFNBQUFuNUQsV0FBQW0zRCxFQUFBcmhFLEtBQUFxakUsVUFBQWhyQyxTQUFBNHFDLEVBQUFpSixVQUFBLENBSUEsSUFBQTV2RSxFQUFBc3ZFLEVBQUErQixzQkFBQTN0RSxLQUFBcWpFLFVBRUF1SyxFQUFBdk0sRUFBQXJoRSxLQUFBdXRFLE9BQUFsMUMsU0FBQTRxQyxFQUFBRyxNQUlBLEdBRkF3SSxFQUFBaUMsZUFFQUQsRUFBQSxDQUlBLElBQUF2bUQsRUFBQSxDQUNBQSxjQUFBcm5CLEtBQUFxakUsVUFFQXlLLEVBQUF6TSxFQUFBNzZDLFFBQUE0OEMsS0FBQS83QyxHQUdBLEdBRkFnNkMsRUFBQS9rRSxHQUFBdXFCLFFBQUFpbkQsSUFFQUEsRUFBQTNtRCxxQkFBQSxDQUtBLElBQUFubkIsS0FBQXl0RSxVQUFBLENBS0EsWUFBQTdNLEVBQ0EsVUFBQTNrRCxVQUFBLGdFQUdBLElBQUFrbkMsRUFBQW5qRCxLQUFBcWpFLFNBRUFoQyxFQUFBL2tFLEdBQUErN0IsU0FBQTRxQyxFQUFBa0osVUFDQTlLLEVBQUFyaEUsS0FBQXV0RSxPQUFBbDFDLFNBQUE0cUMsRUFBQXNKLFdBQUFsTCxFQUFBcmhFLEtBQUF1dEUsT0FBQWwxQyxTQUFBNHFDLEVBQUFxSixjQUNBbnBCLEVBQUE3bUQsR0FPQSxpQkFBQTBELEtBQUFpbkUsUUFBQW9HLFVBQ0FoTSxFQUFBL2tFLEdBQUFzN0IsU0FBQXFyQyxFQUFBdUosaUJBR0F4c0UsS0FBQXN0RSxRQUFBLElBQUExTSxFQUFBemQsRUFBQW5qRCxLQUFBdXRFLE1BQUF2dEUsS0FBQSt0RSxvQkFPQSxpQkFBQWx6RSxTQUFBc1MsaUJBQUEsSUFBQWswRCxFQUFBL2tFLEdBQUFrYyxRQUFBZ3NELEVBQUFtSSxZQUFBejBFLFFBQ0FtcEUsRUFBQSxRQUFBcHJFLFdBQUE2dEIsR0FBQSxpQkFBQXU5QyxFQUFBcDlELE1BR0FqRSxLQUFBcWpFLFNBQUE1d0QsUUFFQXpTLEtBQUFxakUsU0FBQTkzRCxhQUFBLG9CQUVBODFELEVBQUFyaEUsS0FBQXV0RSxPQUFBcjFDLFlBQUErcUMsRUFBQUcsTUFDQS9CLEVBQUEva0UsR0FBQTQ3QixZQUFBK3FDLEVBQUFHLE1BQUF2OEMsUUFBQXc2QyxFQUFBNzZDLFFBQUFrakQsTUFBQXJpRCxRQUdBaThDLEVBQUFsckUsUUFBQSxXQUNBaXBFLEVBQUF4aUQsV0FBQTdlLEtBQUFxakUsU0FBQTRCLEdBQ0E1RCxFQUFBcmhFLEtBQUFxakUsVUFBQWwvQyxJQUFBK2dELEdBQ0FsbEUsS0FBQXFqRSxTQUFBLEtBQ0FyakUsS0FBQXV0RSxNQUFBLEtBRUEsT0FBQXZ0RSxLQUFBc3RFLFVBQ0F0dEUsS0FBQXN0RSxRQUFBMWIsVUFFQTV4RCxLQUFBc3RFLFFBQUEsT0FJQWhLLEVBQUFqcEUsT0FBQSxXQUNBMkYsS0FBQXl0RSxVQUFBenRFLEtBQUEwdEUsZ0JBRUEsT0FBQTF0RSxLQUFBc3RFLFNBQ0F0dEUsS0FBQXN0RSxRQUFBVSxrQkFLQTFLLEVBQUE4RCxtQkFBQSxXQUNBLElBQUE3RixFQUFBdmhFLEtBRUFxaEUsRUFBQXJoRSxLQUFBcWpFLFVBQUF2L0MsR0FBQTBDLEVBQUF1bEQsTUFBQSxTQUFBN25ELEdBQ0FBLEVBQUErQixpQkFDQS9CLEVBQUFnQyxrQkFFQXE3QyxFQUFBbGdELFlBSUFpaUQsRUFBQTRELFdBQUEsU0FBQTVFLEdBR0EsT0FGQUEsRUFBQW5CLEVBQUEsR0FBMEJuaEUsS0FBQWdDLFlBQUFtakUsUUFBQTlELEVBQUFyaEUsS0FBQXFqRSxVQUFBbnFFLE9BQUFvcEUsR0FDMUJsQixFQUFBZ0IsZ0JBQUFnQyxFQUFBOUIsRUFBQXRpRSxLQUFBZ0MsWUFBQXVqRSxhQUNBakQsR0FHQWdCLEVBQUFrSyxnQkFBQSxXQUNBLElBQUF4dEUsS0FBQXV0RSxNQUFBLENBQ0EsSUFBQWp4RSxFQUFBc3ZFLEVBQUErQixzQkFBQTN0RSxLQUFBcWpFLFVBRUFyakUsS0FBQXV0RSxNQUFBbE0sRUFBQS9rRSxHQUFBMlIsS0FBQXUyRCxFQUFBa0ksTUFBQSxHQUdBLE9BQUExc0UsS0FBQXV0RSxPQUdBakssRUFBQTJLLGNBQUEsV0FDQSxJQUFBQyxFQUFBN00sRUFBQXJoRSxLQUFBcWpFLFVBQUEvbUUsU0FDQTZ4RSxFQUFBdEIsRUFBQUcsT0FnQkEsT0FkQWtCLEVBQUE3MUMsU0FBQTRxQyxFQUFBa0osU0FDQWdDLEVBQUF0QixFQUFBQyxJQUVBekwsRUFBQXJoRSxLQUFBdXRFLE9BQUFsMUMsU0FBQTRxQyxFQUFBcUosYUFDQTZCLEVBQUF0QixFQUFBRSxTQUVPbUIsRUFBQTcxQyxTQUFBNHFDLEVBQUFtSixXQUNQK0IsRUFBQXRCLEVBQUFqSCxNQUNPc0ksRUFBQTcxQyxTQUFBNHFDLEVBQUFvSixVQUNQOEIsRUFBQXRCLEVBQUFsSCxLQUNPdEUsRUFBQXJoRSxLQUFBdXRFLE9BQUFsMUMsU0FBQTRxQyxFQUFBcUosYUFDUDZCLEVBQUF0QixFQUFBSSxXQUdBa0IsR0FHQTdLLEVBQUFvSyxjQUFBLFdBQ0EsT0FBQXJNLEVBQUFyaEUsS0FBQXFqRSxVQUFBN3FELFFBQUEsV0FBQXRnQixPQUFBLEdBR0FvckUsRUFBQXlLLGlCQUFBLFdBQ0EsSUFBQWpHLEVBQUE5bkUsS0FFQW91RSxFQUFBLEdBRUEsbUJBQUFwdUUsS0FBQWluRSxRQUFBdmtDLE9BQ0EwckMsRUFBQTE0RSxHQUFBLFNBQUF3RCxHQUVBLE9BREFBLEVBQUFtMUUsUUFBQWxOLEVBQUEsR0FBb0Nqb0UsRUFBQW0xRSxRQUFBdkcsRUFBQWIsUUFBQXZrQyxPQUFBeHBDLEVBQUFtMUUsVUFBQSxJQUNwQ24xRSxHQUdBazFFLEVBQUExckMsT0FBQTFpQyxLQUFBaW5FLFFBQUF2a0MsT0FHQSxJQUFBNHJDLEVBQUEsQ0FDQUgsVUFBQW51RSxLQUFBaXVFLGdCQUNBTSxVQUFBLENBQ0E3ckMsT0FBQTByQyxFQUNBaEIsS0FBQSxDQUNBdDZELFFBQUE5UyxLQUFBaW5FLFFBQUFtRyxNQUVBb0IsZ0JBQUEsQ0FDQUMsa0JBQUF6dUUsS0FBQWluRSxRQUFBb0csWUFJQSxPQUFBaUIsR0FJQTFDLEVBQUE3SCxpQkFBQSxTQUFBekIsR0FDQSxPQUFBdGlFLEtBQUF3QyxLQUFBLFdBQ0EsSUFBQXRKLEVBQUFtb0UsRUFBQXJoRSxNQUFBOUcsS0FBQStyRSxHQUVBZ0MsRUFBQSxpQkFBQTNFLElBQUEsS0FPQSxHQUxBcHBFLElBQ0FBLEVBQUEsSUFBQTB5RSxFQUFBNXJFLEtBQUFpbkUsR0FDQTVGLEVBQUFyaEUsTUFBQTlHLEtBQUErckUsRUFBQS9yRSxJQUdBLGlCQUFBb3BFLEVBQUEsQ0FDQSxZQUFBcHBFLEVBQUFvcEUsR0FDQSxVQUFBcm1ELFVBQUEsb0JBQUFxbUQsRUFBQSxLQUdBcHBFLEVBQUFvcEUsU0FLQXNKLEVBQUFpQyxZQUFBLFNBQUEzcEQsR0FDQSxJQUFBQSxHQTdRQSxJQTZRQUEsRUFBQWtGLFFBQUEsVUFBQWxGLEVBQUE5bkIsTUFuUkEsSUFtUkE4bkIsRUFBQWtGLE9BTUEsSUFGQSxJQUFBc2xELEVBQUFyTixFQUFBejhELFVBQUF5OEQsRUFBQW1ELEVBQUFFLGNBRUF6c0UsRUFBQSxFQUFxQkEsRUFBQXkyRSxFQUFBeDJFLE9BQW9CRCxJQUFBLENBQ3pDLElBQUFxRSxFQUFBc3ZFLEVBQUErQixzQkFBQWUsRUFBQXoyRSxJQUVBa0osRUFBQWtnRSxFQUFBcU4sRUFBQXoyRSxJQUFBaUIsS0FBQStyRSxHQUNBNTlDLEVBQUEsQ0FDQUEsY0FBQXFuRCxFQUFBejJFLElBR0EsR0FBQWtKLEVBQUEsQ0FJQSxJQUFBd3RFLEVBQUF4dEUsRUFBQW9zRSxNQUVBLEdBQUFsTSxFQUFBL2tFLEdBQUErN0IsU0FBQTRxQyxFQUFBRyxTQUlBbC9DLElBQUEsVUFBQUEsRUFBQTluQixNQUFBLGtCQUFBZ1AsS0FBQThZLEVBQUE3Z0IsT0FBQStyRCxVQUFBLFVBQUFsckMsRUFBQTluQixNQTNTQSxJQTJTQThuQixFQUFBa0YsUUFBQWk0QyxFQUFBeDZELFNBQUF2SyxFQUFBNG5CLEVBQUE3Z0IsU0FBQSxDQUlBLElBQUF1ckUsRUFBQXZOLEVBQUE3NkMsUUFBQW1qRCxLQUFBdGlELEdBQ0FnNkMsRUFBQS9rRSxHQUFBdXFCLFFBQUErbkQsR0FFQUEsRUFBQXpuRCx1QkFNQSxpQkFBQXRzQixTQUFBc1MsaUJBQ0FrMEQsRUFBQSxRQUFBcHJFLFdBQUFrdUIsSUFBQSxpQkFBQWs5QyxFQUFBcDlELE1BR0F5cUUsRUFBQXoyRSxHQUFBc1QsYUFBQSx5QkFDQTgxRCxFQUFBc04sR0FBQTEyQyxZQUFBZ3JDLEVBQUFHLE1BQ0EvQixFQUFBL2tFLEdBQUEyN0IsWUFBQWdyQyxFQUFBRyxNQUFBdjhDLFFBQUF3NkMsRUFBQTc2QyxRQUFBb2pELE9BQUF2aUQsU0FJQXVrRCxFQUFBK0Isc0JBQUEsU0FBQXhxQixHQUNBLElBQUE3bUQsRUFDQTRFLEVBQUFrZ0UsRUFBQVEsdUJBQUF6ZSxHQU1BLE9BSkFqaUQsSUFDQTVFLEVBQUEra0UsRUFBQW5nRSxHQUFBLElBR0E1RSxHQUFBNm1ELEVBQUFwaUQsWUFJQTZxRSxFQUFBaUQsdUJBQUEsU0FBQTNxRCxHQVFBLHNCQUFBOVksS0FBQThZLEVBQUE3Z0IsT0FBQStyRCxXQXhWQSxLQXdWQWxyQyxFQUFBa0YsT0ExVkEsS0EwVkFsRixFQUFBa0YsUUFsVkEsS0FrVkFsRixFQUFBa0YsT0FwVkEsS0FvVkFsRixFQUFBa0YsT0FBQWk0QyxFQUFBbjlDLEVBQUE3Z0IsUUFBQW1WLFFBQUFnc0QsRUFBQWtJLE1BQUF4MEUsU0FBQTJ6RSxFQUFBemdFLEtBQUE4WSxFQUFBa0YsVUFJQWxGLEVBQUErQixpQkFDQS9CLEVBQUFnQyxtQkFFQWxtQixLQUFBa0ssV0FBQW0zRCxFQUFBcmhFLE1BQUFxNEIsU0FBQTRxQyxFQUFBaUosV0FBQSxDQUlBLElBQUE1dkUsRUFBQXN2RSxFQUFBK0Isc0JBQUEzdEUsTUFFQTR0RSxFQUFBdk0sRUFBQS9rRSxHQUFBKzdCLFNBQUE0cUMsRUFBQUcsTUFFQSxJQUFBd0ssR0F6V0EsS0F5V0ExcEQsRUFBQWtGLE9BdldBLEtBdVdBbEYsRUFBQWtGLFVBQUF3a0QsR0F6V0EsS0F5V0ExcEQsRUFBQWtGLE9BdldBLEtBdVdBbEYsRUFBQWtGLE9BQUEsQ0FVQSxJQUFBMGxELEVBQUF6TixFQUFBL2tFLEdBQUEyUixLQUFBdTJELEVBQUFvSSxlQUFBcDJFLE1BRUEsT0FBQXM0RSxFQUFBNTJFLE9BQUEsQ0FJQSxJQUFBdWdCLEVBQUFxMkQsRUFBQS80RSxRQUFBbXVCLEVBQUE3Z0IsUUFuWEEsS0FxWEE2Z0IsRUFBQWtGLE9BQUEzUSxFQUFBLEdBRUFBLElBclhBLEtBd1hBeUwsRUFBQWtGLE9BQUEzUSxFQUFBcTJELEVBQUE1MkUsT0FBQSxHQUVBdWdCLElBR0FBLEVBQUEsSUFDQUEsRUFBQSxHQUdBcTJELEVBQUFyMkQsR0FBQWhHLGFBaENBLENBQ0EsR0ExV0EsS0EwV0F5UixFQUFBa0YsTUFBQSxDQUNBLElBQUEvSCxFQUFBZ2dELEVBQUEva0UsR0FBQTJSLEtBQUF1MkQsRUFBQUUsYUFBQSxHQUNBckQsRUFBQWhnRCxHQUFBd0YsUUFBQSxTQUdBdzZDLEVBQUFyaEUsTUFBQTZtQixRQUFBLFlBNkJBazZDLEVBQUE2SyxFQUFBLE9BQ0F0c0UsSUFBQSxVQUNBOUksSUFBQSxXQUNBLE1BcFpBLFVBc1pLLENBQ0w4SSxJQUFBLFVBQ0E5SSxJQUFBLFdBQ0EsT0FBQTJ1RSxJQUVLLENBQ0w3bEUsSUFBQSxjQUNBOUksSUFBQSxXQUNBLE9BQUErdUUsTUFHQXFHLEVBdlZBLEdBc1hBLE9BdEJBdkssRUFBQXhtRSxVQUFBaXBCLEdBQUEwQyxFQUFBd2xELGlCQUFBeEgsRUFBQUUsWUFBQWtILEVBQUFpRCx3QkFBQS9xRCxHQUFBMEMsRUFBQXdsRCxpQkFBQXhILEVBQUFrSSxLQUFBZCxFQUFBaUQsd0JBQUEvcUQsR0FBQTBDLEVBQUF3OEMsZUFBQSxJQUFBeDhDLEVBQUF5bEQsZUFBQUwsRUFBQWlDLGFBQUEvcEQsR0FBQTBDLEVBQUF3OEMsZUFBQXdCLEVBQUFFLFlBQUEsU0FBQXhnRCxHQUNBQSxFQUFBK0IsaUJBQ0EvQixFQUFBZ0Msa0JBRUEwbEQsRUFBQTdILGlCQUFBdHZFLEtBQUE0c0UsRUFBQXJoRSxNQUFBLFlBQ0c4akIsR0FBQTBDLEVBQUF3OEMsZUFBQXdCLEVBQUFpSSxXQUFBLFNBQUE3MUUsR0FDSEEsRUFBQXN2QixvQkFRQW03QyxFQUFBM3JFLEdBQUEwdUUsR0FBQXdILEVBQUE3SCxpQkFDQTFDLEVBQUEzckUsR0FBQTB1RSxHQUFBcEQsWUFBQTRLLEVBRUF2SyxFQUFBM3JFLEdBQUEwdUUsR0FBQXovQixXQUFBLFdBRUEsT0FEQTA4QixFQUFBM3JFLEdBQUEwdUUsR0FBQXZCLEVBQ0ErSSxFQUFBN0gsa0JBR0E2SCxFQXZjQSxDQXdjQ2xuQyxHQVNEcXFDLEVBQUEsU0FBQTFOLEdBTUEsSUFBQStDLEVBQUEsUUFHQWMsRUFBQSxZQUVBckMsRUFBQXhCLEVBQUEzckUsR0FBQSxNQUtBeXZFLEVBQUEsQ0FDQTZKLFVBQUEsRUFDQTVKLFVBQUEsRUFDQTN5RCxPQUFBLEVBQ0F5TyxNQUFBLEdBRUFxa0QsRUFBQSxDQUNBeUosU0FBQSxtQkFDQTVKLFNBQUEsVUFDQTN5RCxNQUFBLFVBQ0F5TyxLQUFBLFdBRUFzRixFQUFBLENBQ0FtakQsS0FBQSxnQkFDQUMsT0FBQSxrQkFDQXhHLEtBQUEsZ0JBQ0FzRyxNQUFBLGlCQUNBdUYsUUFBQSxtQkFDQUMsT0FBQSxrQkFDQUMsY0FBQSx5QkFDQUMsZ0JBQUEsMkJBQ0FDLGdCQUFBLDJCQUNBQyxrQkFBQSw2QkFDQXRNLGVBQUEsMkJBRUFDLEVBQUEsQ0FDQXNNLG1CQUFBLDBCQUNBQyxTQUFBLGlCQUNBQyxLQUFBLGFBQ0F0TSxLQUFBLE9BQ0FDLEtBQUEsUUFFQW9CLEVBQUEsQ0FDQWtMLE9BQUEsZ0JBQ0FoTCxZQUFBLHdCQUNBaUwsYUFBQSx5QkFDQUMsY0FBQSxvREFDQUMsZUFBQSxjQUNBQyxlQUFBLG1CQVNBZixFQUVBLFdBQ0EsU0FBQUEsRUFBQTVyQixFQUFBbWYsR0FDQXRpRSxLQUFBaW5FLFFBQUFqbkUsS0FBQWtuRSxXQUFBNUUsR0FDQXRpRSxLQUFBcWpFLFNBQUFsZ0IsRUFDQW5qRCxLQUFBK3ZFLFFBQUExTyxFQUFBbGUsR0FBQWwxQyxLQUFBdTJELEVBQUFrTCxRQUFBLEdBQ0ExdkUsS0FBQWd3RSxVQUFBLEtBQ0Fod0UsS0FBQWl3RSxVQUFBLEVBQ0Fqd0UsS0FBQWt3RSxvQkFBQSxFQUNBbHdFLEtBQUFtd0Usc0JBQUEsRUFDQW53RSxLQUFBb3dFLHFCQUFBLEVBQ0Fwd0UsS0FBQXF3RSxnQkFBQSxFQUlBLElBQUEvTSxFQUFBeUwsRUFBQXg2RSxVQWliQSxPQTlhQSt1RSxFQUFBamlELE9BQUEsU0FBQWdHLEdBQ0EsT0FBQXJuQixLQUFBaXdFLFNBQUFqd0UsS0FBQW9oQixPQUFBcGhCLEtBQUFraEIsS0FBQW1HLElBR0FpOEMsRUFBQXBpRCxLQUFBLFNBQUFtRyxHQUNBLElBQUFrNkMsRUFBQXZoRSxLQUVBLElBQUFBLEtBQUFvcUUsbUJBQUFwcUUsS0FBQWl3RSxTQUFBLENBSUE3TyxFQUFBYSx5QkFBQVosRUFBQXJoRSxLQUFBcWpFLFVBQUFockMsU0FBQTRxQyxFQUFBRSxRQUNBbmpFLEtBQUFvcUUsa0JBQUEsR0FHQSxJQUFBMEQsRUFBQXpNLEVBQUE3NkMsUUFBQTQ4QyxLQUFBLENBQ0EvN0Msa0JBRUFnNkMsRUFBQXJoRSxLQUFBcWpFLFVBQUF4OEMsUUFBQWluRCxHQUVBOXRFLEtBQUFpd0UsVUFBQW5DLEVBQUEzbUQsdUJBSUFubkIsS0FBQWl3RSxVQUFBLEVBRUFqd0UsS0FBQXN3RSxrQkFFQXR3RSxLQUFBdXdFLGdCQUVBdndFLEtBQUF3d0UsZ0JBRUFuUCxFQUFBeG1FLFNBQUFtbUIsTUFBQTRXLFNBQUFxckMsRUFBQXdNLE1BRUF6dkUsS0FBQXl3RSxrQkFFQXp3RSxLQUFBMHdFLGtCQUVBclAsRUFBQXJoRSxLQUFBcWpFLFVBQUF2L0MsR0FBQTBDLEVBQUEyb0QsY0FBQTNLLEVBQUFtTCxhQUFBLFNBQUF6ckQsR0FDQSxPQUFBcTlDLEVBQUFuZ0QsS0FBQThDLEtBRUFtOUMsRUFBQXJoRSxLQUFBK3ZFLFNBQUFqc0QsR0FBQTBDLEVBQUE4b0Qsa0JBQUEsV0FDQWpPLEVBQUFFLEVBQUE4QixVQUFBci9DLElBQUF3QyxFQUFBNm9ELGdCQUFBLFNBQUFuckQsR0FDQW05QyxFQUFBbjlDLEVBQUE3Z0IsUUFBQWtVLEdBQUFncUQsRUFBQThCLFlBQ0E5QixFQUFBNE8sc0JBQUEsT0FLQW53RSxLQUFBMndFLGNBQUEsV0FDQSxPQUFBcFAsRUFBQXFQLGFBQUF2cEQsUUFJQWk4QyxFQUFBbGlELEtBQUEsU0FBQThDLEdBQ0EsSUFBQTRqRCxFQUFBOW5FLEtBTUEsR0FKQWtrQixHQUNBQSxFQUFBK0Isa0JBR0FqbUIsS0FBQW9xRSxrQkFBQXBxRSxLQUFBaXdFLFNBQUEsQ0FJQSxJQUFBckIsRUFBQXZOLEVBQUE3NkMsUUFBQW1qRCxNQUdBLEdBRkF0SSxFQUFBcmhFLEtBQUFxakUsVUFBQXg4QyxRQUFBK25ELEdBRUE1dUUsS0FBQWl3RSxXQUFBckIsRUFBQXpuRCxxQkFBQSxDQUlBbm5CLEtBQUFpd0UsVUFBQSxFQUNBLElBQUFqZ0MsRUFBQW94QixFQUFBYSx5QkFBQVosRUFBQXJoRSxLQUFBcWpFLFVBQUFockMsU0FBQTRxQyxFQUFBRSxNQUVBbnpCLElBQ0Fod0MsS0FBQW9xRSxrQkFBQSxHQUdBcHFFLEtBQUF5d0Usa0JBRUF6d0UsS0FBQTB3RSxrQkFFQXJQLEVBQUF4bUUsVUFBQXNwQixJQUFBcUMsRUFBQXlvRCxTQUNBNU4sRUFBQXJoRSxLQUFBcWpFLFVBQUFwckMsWUFBQWdyQyxFQUFBRyxNQUNBL0IsRUFBQXJoRSxLQUFBcWpFLFVBQUFsL0MsSUFBQXFDLEVBQUEyb0QsZUFDQTlOLEVBQUFyaEUsS0FBQSt2RSxTQUFBNXJELElBQUFxQyxFQUFBOG9ELG1CQUVBdC9CLEVBQ0FxeEIsRUFBQXJoRSxLQUFBcWpFLFVBQUFyL0MsSUFBQW85QyxFQUFBSyxlQUFBLFNBQUF2OUMsR0FDQSxPQUFBNGpELEVBQUErSSxXQUFBM3NELEtBQ1N5K0MscUJBaktULEtBbUtBM2lFLEtBQUE2d0UsZ0JBSUF2TixFQUFBbHJFLFFBQUEsV0FDQWlwRSxFQUFBeGlELFdBQUE3ZSxLQUFBcWpFLFNBNUtBLFlBNktBaEMsRUFBQXJ0RSxPQUFBNkcsU0FBQW1GLEtBQUFxakUsU0FBQXJqRSxLQUFBZ3dFLFdBQUE3ckQsSUFBQStnRCxHQUNBbGxFLEtBQUFpbkUsUUFBQSxLQUNBam5FLEtBQUFxakUsU0FBQSxLQUNBcmpFLEtBQUErdkUsUUFBQSxLQUNBL3ZFLEtBQUFnd0UsVUFBQSxLQUNBaHdFLEtBQUFpd0UsU0FBQSxLQUNBandFLEtBQUFrd0UsbUJBQUEsS0FDQWx3RSxLQUFBbXdFLHFCQUFBLEtBQ0Fud0UsS0FBQXF3RSxnQkFBQSxNQUdBL00sRUFBQXdOLGFBQUEsV0FDQTl3RSxLQUFBd3dFLGlCQUlBbE4sRUFBQTRELFdBQUEsU0FBQTVFLEdBR0EsT0FGQUEsRUFBQW5CLEVBQUEsR0FBMEJnRSxFQUFBN0MsR0FDMUJsQixFQUFBZ0IsZ0JBQUFnQyxFQUFBOUIsRUFBQWlELEdBQ0FqRCxHQUdBZ0IsRUFBQXNOLGFBQUEsU0FBQXZwRCxHQUNBLElBQUEyaEQsRUFBQWhwRSxLQUVBZ3dDLEVBQUFveEIsRUFBQWEseUJBQUFaLEVBQUFyaEUsS0FBQXFqRSxVQUFBaHJDLFNBQUE0cUMsRUFBQUUsTUFFQW5qRSxLQUFBcWpFLFNBQUF0aUUsWUFBQWYsS0FBQXFqRSxTQUFBdGlFLFdBQUF1SixXQUFBeW1FLEtBQUFDLGNBRUFuMkUsU0FBQW1tQixLQUFBOWxCLFlBQUE4RSxLQUFBcWpFLFVBR0FyakUsS0FBQXFqRSxTQUFBdmpELE1BQUFDLFFBQUEsUUFFQS9mLEtBQUFxakUsU0FBQXozRCxnQkFBQSxlQUVBNUwsS0FBQXFqRSxTQUFBcnhDLFVBQUEsRUFFQWdlLEdBQ0FveEIsRUFBQVksT0FBQWhpRSxLQUFBcWpFLFVBR0FoQyxFQUFBcmhFLEtBQUFxakUsVUFBQXpyQyxTQUFBcXJDLEVBQUFHLE1BRUFwakUsS0FBQWluRSxRQUFBeDBELE9BQ0F6UyxLQUFBaXhFLGdCQUdBLElBQUFDLEVBQUE3UCxFQUFBNzZDLFFBQUFrakQsTUFBQSxDQUNBcmlELGtCQUdBOHBELEVBQUEsV0FDQW5JLEVBQUEvQixRQUFBeDBELE9BQ0F1MkQsRUFBQTNGLFNBQUE1d0QsUUFHQXUyRCxFQUFBb0Isa0JBQUEsRUFDQS9JLEVBQUEySCxFQUFBM0YsVUFBQXg4QyxRQUFBcXFELElBR0FsaEMsRUFDQXF4QixFQUFBcmhFLEtBQUErdkUsU0FBQS9yRCxJQUFBbzlDLEVBQUFLLGVBQUEwUCxHQUFBeE8scUJBdk9BLEtBeU9Bd08sS0FJQTdOLEVBQUEyTixjQUFBLFdBQ0EsSUFBQUcsRUFBQXB4RSxLQUVBcWhFLEVBQUF4bUUsVUFBQXNwQixJQUFBcUMsRUFBQXlvRCxTQUNBbnJELEdBQUEwQyxFQUFBeW9ELFFBQUEsU0FBQS9xRCxHQUNBcnBCLFdBQUFxcEIsRUFBQTdnQixRQUFBK3RFLEVBQUEvTixXQUFBbi9DLEVBQUE3Z0IsUUFBQSxJQUFBZytELEVBQUErUCxFQUFBL04sVUFBQW54RCxJQUFBZ1MsRUFBQTdnQixRQUFBbkwsUUFDQWs1RSxFQUFBL04sU0FBQTV3RCxXQUtBNndELEVBQUFtTixnQkFBQSxXQUNBLElBQUFZLEVBQUFyeEUsS0FFQUEsS0FBQWl3RSxVQUFBandFLEtBQUFpbkUsUUFBQTdCLFNBQ0EvRCxFQUFBcmhFLEtBQUFxakUsVUFBQXYvQyxHQUFBMEMsRUFBQTRvRCxnQkFBQSxTQUFBbHJELEdBMVBBLEtBMlBBQSxFQUFBa0YsUUFDQWxGLEVBQUErQixpQkFFQW9yRCxFQUFBandELFVBR09waEIsS0FBQWl3RSxVQUNQNU8sRUFBQXJoRSxLQUFBcWpFLFVBQUFsL0MsSUFBQXFDLEVBQUE0b0Qsa0JBSUE5TCxFQUFBb04sZ0JBQUEsV0FDQSxJQUFBWSxFQUFBdHhFLEtBRUFBLEtBQUFpd0UsU0FDQTVPLEVBQUFydEUsUUFBQTh2QixHQUFBMEMsRUFBQTBvRCxPQUFBLFNBQUFockQsR0FDQSxPQUFBb3RELEVBQUFSLGFBQUE1c0QsS0FHQW05QyxFQUFBcnRFLFFBQUFtd0IsSUFBQXFDLEVBQUEwb0QsU0FJQTVMLEVBQUF1TixXQUFBLFdBQ0EsSUFBQVUsRUFBQXZ4RSxLQUVBQSxLQUFBcWpFLFNBQUF2akQsTUFBQUMsUUFBQSxPQUVBL2YsS0FBQXFqRSxTQUFBOTNELGFBQUEsa0JBRUF2TCxLQUFBb3FFLGtCQUFBLEVBRUFwcUUsS0FBQTJ3RSxjQUFBLFdBQ0F0UCxFQUFBeG1FLFNBQUFtbUIsTUFBQWlYLFlBQUFnckMsRUFBQXdNLE1BRUE4QixFQUFBQyxvQkFFQUQsRUFBQUUsa0JBRUFwUSxFQUFBa1EsRUFBQWxPLFVBQUF4OEMsUUFBQUwsRUFBQW9qRCxXQUlBdEcsRUFBQW9PLGdCQUFBLFdBQ0ExeEUsS0FBQWd3RSxZQUNBM08sRUFBQXJoRSxLQUFBZ3dFLFdBQUF4MUQsU0FDQXhhLEtBQUFnd0UsVUFBQSxPQUlBMU0sRUFBQXFOLGNBQUEsU0FBQTU0RSxHQUNBLElBQUE0NUUsRUFBQTN4RSxLQUVBdTFCLEVBQUE4ckMsRUFBQXJoRSxLQUFBcWpFLFVBQUFockMsU0FBQTRxQyxFQUFBRSxNQUFBRixFQUFBRSxLQUFBLEdBRUEsR0FBQW5qRSxLQUFBaXdFLFVBQUFqd0UsS0FBQWluRSxRQUFBK0gsU0FBQSxDQUNBLElBQUE0QyxFQUFBeFEsRUFBQWEseUJBQUExc0MsRUFnQ0EsR0EvQkF2MUIsS0FBQWd3RSxVQUFBbjFFLFNBQUFDLGNBQUEsT0FDQWtGLEtBQUFnd0UsVUFBQXJpRSxVQUFBczFELEVBQUF1TSxTQUVBajZDLEdBQ0E4ckMsRUFBQXJoRSxLQUFBZ3dFLFdBQUFwNEMsU0FBQXJDLEdBR0E4ckMsRUFBQXJoRSxLQUFBZ3dFLFdBQUFsa0QsU0FBQWp4QixTQUFBbW1CLE1BQ0FxZ0QsRUFBQXJoRSxLQUFBcWpFLFVBQUF2L0MsR0FBQTBDLEVBQUEyb0QsY0FBQSxTQUFBanJELEdBQ0F5dEQsRUFBQXhCLHFCQUNBd0IsRUFBQXhCLHNCQUFBLEVBSUFqc0QsRUFBQTdnQixTQUFBNmdCLEVBQUE0QixnQkFJQSxXQUFBNnJELEVBQUExSyxRQUFBK0gsU0FDQTJDLEVBQUF0TyxTQUFBNXdELFFBRUFrL0QsRUFBQXZ3RCxVQUlBd3dELEdBQ0F4USxFQUFBWSxPQUFBaGlFLEtBQUFnd0UsV0FHQTNPLEVBQUFyaEUsS0FBQWd3RSxXQUFBcDRDLFNBQUFxckMsRUFBQUcsT0FFQXJyRSxFQUNBLE9BR0EsSUFBQTY1RSxFQUVBLFlBREE3NUUsSUFJQXNwRSxFQUFBcmhFLEtBQUFnd0UsV0FBQWhzRCxJQUFBbzlDLEVBQUFLLGVBQUExcEUsR0FBQTRxRSxxQkE3VkEsVUE4Vk8sSUFBQTNpRSxLQUFBaXdFLFVBQUFqd0UsS0FBQWd3RSxVQUFBLENBQ1AzTyxFQUFBcmhFLEtBQUFnd0UsV0FBQS8zQyxZQUFBZ3JDLEVBQUFHLE1BRUEsSUFBQXlPLEVBQUEsV0FDQUYsRUFBQUQsa0JBRUEzNUUsR0FDQUEsS0FJQXFwRSxFQUFBYSx5QkFBQVosRUFBQXJoRSxLQUFBcWpFLFVBQUFockMsU0FBQTRxQyxFQUFBRSxNQUNBOUIsRUFBQXJoRSxLQUFBZ3dFLFdBQUFoc0QsSUFBQW85QyxFQUFBSyxlQUFBb1EsR0FBQWxQLHFCQTFXQSxLQTRXQWtQLFNBRU85NUUsR0FDUEEsS0FRQXVyRSxFQUFBa04sY0FBQSxXQUNBLElBQUFzQixFQUFBOXhFLEtBQUFxakUsU0FBQTBPLGFBQUFsM0UsU0FBQXNTLGdCQUFBNmtFLGNBRUFoeUUsS0FBQWt3RSxvQkFBQTRCLElBQ0E5eEUsS0FBQXFqRSxTQUFBdmpELE1BQUFteUQsWUFBQWp5RSxLQUFBcXdFLGdCQUFBLE1BR0Fyd0UsS0FBQWt3RSxxQkFBQTRCLElBQ0E5eEUsS0FBQXFqRSxTQUFBdmpELE1BQUFveUQsYUFBQWx5RSxLQUFBcXdFLGdCQUFBLE9BSUEvTSxFQUFBa08sa0JBQUEsV0FDQXh4RSxLQUFBcWpFLFNBQUF2akQsTUFBQW15RCxZQUFBLEdBQ0FqeUUsS0FBQXFqRSxTQUFBdmpELE1BQUFveUQsYUFBQSxJQUdBNU8sRUFBQWdOLGdCQUFBLFdBQ0EsSUFBQWx0QyxFQUFBdm9DLFNBQUFtbUIsS0FBQThQLHdCQUNBOXdCLEtBQUFrd0UsbUJBQUE5c0MsRUFBQXJTLEtBQUFxUyxFQUFBK3VDLE1BQUFuK0UsT0FBQW8rRSxXQUNBcHlFLEtBQUFxd0UsZ0JBQUFyd0UsS0FBQXF5RSxzQkFHQS9PLEVBQUFpTixjQUFBLFdBQ0EsSUFBQStCLEVBQUF0eUUsS0FFQSxHQUFBQSxLQUFBa3dFLG1CQUFBLENBSUE3TyxFQUFBbUQsRUFBQW9MLGVBQUFwdEUsS0FBQSxTQUFBaVcsRUFBQTBxQyxHQUNBLElBQUFvdkIsRUFBQWxSLEVBQUFsZSxHQUFBLEdBQUFyakMsTUFBQW95RCxhQUNBTSxFQUFBblIsRUFBQWxlLEdBQUFuakMsSUFBQSxpQkFDQXFoRCxFQUFBbGUsR0FBQWpxRCxLQUFBLGdCQUFBcTVFLEdBQUF2eUQsSUFBQSxnQkFBQTViLFdBQUFvdUUsR0FBQUYsRUFBQWpDLGdCQUFBLFFBR0FoUCxFQUFBbUQsRUFBQXFMLGdCQUFBcnRFLEtBQUEsU0FBQWlXLEVBQUEwcUMsR0FDQSxJQUFBc3ZCLEVBQUFwUixFQUFBbGUsR0FBQSxHQUFBcmpDLE1BQUE2TixZQUNBK2tELEVBQUFyUixFQUFBbGUsR0FBQW5qQyxJQUFBLGdCQUNBcWhELEVBQUFsZSxHQUFBanFELEtBQUEsZUFBQXU1RSxHQUFBenlELElBQUEsZUFBQTViLFdBQUFzdUUsR0FBQUosRUFBQWpDLGdCQUFBLFFBR0FoUCxFQUFBbUQsRUFBQXNMLGdCQUFBdHRFLEtBQUEsU0FBQWlXLEVBQUEwcUMsR0FDQSxJQUFBc3ZCLEVBQUFwUixFQUFBbGUsR0FBQSxHQUFBcmpDLE1BQUE2TixZQUNBK2tELEVBQUFyUixFQUFBbGUsR0FBQW5qQyxJQUFBLGdCQUNBcWhELEVBQUFsZSxHQUFBanFELEtBQUEsZUFBQXU1RSxHQUFBenlELElBQUEsZUFBQTViLFdBQUFzdUUsR0FBQUosRUFBQWpDLGdCQUFBLFFBR0EsSUFBQWtDLEVBQUExM0UsU0FBQW1tQixLQUFBbEIsTUFBQW95RCxhQUNBTSxFQUFBblIsRUFBQSxRQUFBcmhELElBQUEsaUJBQ0FxaEQsRUFBQSxRQUFBbm9FLEtBQUEsZ0JBQUFxNUUsR0FBQXZ5RCxJQUFBLGdCQUFBNWIsV0FBQW91RSxHQUFBeHlFLEtBQUFxd0UsZ0JBQUEsUUFJQS9NLEVBQUFtTyxnQkFBQSxXQUVBcFEsRUFBQW1ELEVBQUFvTCxlQUFBcHRFLEtBQUEsU0FBQWlXLEVBQUEwcUMsR0FDQSxJQUFBbHlCLEVBQUFvd0MsRUFBQWxlLEdBQUFqcUQsS0FBQSxzQkFFQSxJQUFBKzNCLEdBQ0Fvd0MsRUFBQWxlLEdBQUFuakMsSUFBQSxnQkFBQWlSLEdBQUFwUyxXQUFBLG1CQUlBd2lELEVBQUFtRCxFQUFBcUwsZUFBQSxLQUFBckwsRUFBQXNMLGdCQUFBdHRFLEtBQUEsU0FBQWlXLEVBQUEwcUMsR0FDQSxJQUFBbnlCLEVBQUFxd0MsRUFBQWxlLEdBQUFqcUQsS0FBQSxxQkFFQSxJQUFBODNCLEdBQ0Fxd0MsRUFBQWxlLEdBQUFuakMsSUFBQSxlQUFBZ1IsR0FBQW5TLFdBQUEsa0JBSUEsSUFBQW9TLEVBQUFvd0MsRUFBQSxRQUFBbm9FLEtBQUEsc0JBRUEsSUFBQSszQixHQUNBb3dDLEVBQUEsUUFBQXJoRCxJQUFBLGdCQUFBaVIsR0FBQXBTLFdBQUEsa0JBSUF5a0QsRUFBQStPLG1CQUFBLFdBRUEsSUFBQU0sRUFBQTkzRSxTQUFBQyxjQUFBLE9BQ0E2M0UsRUFBQWhsRSxVQUFBczFELEVBQUFzTSxtQkFDQTEwRSxTQUFBbW1CLEtBQUE5bEIsWUFBQXkzRSxHQUNBLElBQUFDLEVBQUFELEVBQUE3aEQsd0JBQUFuRSxNQUFBZ21ELEVBQUFFLFlBRUEsT0FEQWg0RSxTQUFBbW1CLEtBQUFoZ0IsWUFBQTJ4RSxHQUNBQyxHQUlBN0QsRUFBQWhMLGlCQUFBLFNBQUF6QixFQUFBajdDLEdBQ0EsT0FBQXJuQixLQUFBd0MsS0FBQSxXQUNBLElBQUF0SixFQUFBbW9FLEVBQUFyaEUsTUFBQTlHLEtBeGRBLFlBMGRBK3RFLEVBQUE5RixFQUFBLEdBQWlDNE4sRUFBQTVKLFFBQUE5RCxFQUFBcmhFLE1BQUE5RyxPQUFBLGlCQUFBb3BFLE1BT2pDLEdBTEFwcEUsSUFDQUEsRUFBQSxJQUFBNjFFLEVBQUEvdUUsS0FBQWluRSxHQUNBNUYsRUFBQXJoRSxNQUFBOUcsS0E5ZEEsV0E4ZEFBLElBR0EsaUJBQUFvcEUsRUFBQSxDQUNBLFlBQUFwcEUsRUFBQW9wRSxHQUNBLFVBQUFybUQsVUFBQSxvQkFBQXFtRCxFQUFBLEtBR0FwcEUsRUFBQW9wRSxHQUFBajdDLFFBQ1M0L0MsRUFBQS9sRCxNQUNUaG9CLEVBQUFnb0IsS0FBQW1HLE1BS0EwNUMsRUFBQWdPLEVBQUEsT0FDQXp2RSxJQUFBLFVBQ0E5SSxJQUFBLFdBQ0EsTUFqZkEsVUFtZkssQ0FDTDhJLElBQUEsVUFDQTlJLElBQUEsV0FDQSxPQUFBMnVFLE1BR0E0SixFQS9iQSxHQXFmQSxPQTdDQTFOLEVBQUF4bUUsVUFBQWlwQixHQUFBMEMsRUFBQXc4QyxlQUFBd0IsRUFBQUUsWUFBQSxTQUFBeGdELEdBQ0EsSUFFQTdnQixFQUZBeXZFLEVBQUE5eUUsS0FHQWtCLEVBQUFrZ0UsRUFBQVEsdUJBQUE1aEUsTUFFQWtCLElBQ0FtQyxFQUFBZytELEVBQUFuZ0UsR0FBQSxJQUdBLElBQUFvaEUsRUFBQWpCLEVBQUFoK0QsR0FBQW5LLEtBM2dCQSxZQTJnQkEsU0FBQWlvRSxFQUFBLEdBQXFFRSxFQUFBaCtELEdBQUFuSyxPQUFBbW9FLEVBQUFyaEUsTUFBQTlHLFFBRXJFLE1BQUE4RyxLQUFBb3ZELFNBQUEsU0FBQXB2RCxLQUFBb3ZELFNBQ0FsckMsRUFBQStCLGlCQUdBLElBQUEwbEQsRUFBQXRLLEVBQUFoK0QsR0FBQTJnQixJQUFBd0MsRUFBQTQ4QyxLQUFBLFNBQUEwSyxHQUNBQSxFQUFBM21ELHNCQUtBd2tELEVBQUEzbkQsSUFBQXdDLEVBQUFvakQsT0FBQSxXQUNBdkksRUFBQXlSLEdBQUF2N0QsR0FBQSxhQUNBdTdELEVBQUFyZ0UsWUFLQXM4RCxFQUFBaEwsaUJBQUF0dkUsS0FBQTRzRSxFQUFBaCtELEdBQUFpL0QsRUFBQXRpRSxRQVFBcWhFLEVBQUEzckUsR0FBQSxNQUFBcTVFLEVBQUFoTCxpQkFDQTFDLEVBQUEzckUsR0FBQSxNQUFBc3JFLFlBQUErTixFQUVBMU4sRUFBQTNyRSxHQUFBLE1BQUFpdkMsV0FBQSxXQUVBLE9BREEwOEIsRUFBQTNyRSxHQUFBLE1BQUFtdEUsRUFDQWtNLEVBQUFoTCxrQkFHQWdMLEVBdGpCQSxDQXVqQkNycUMsR0FTRHF1QyxFQUFBLFNBQUExUixHQU1BLElBQUErQyxFQUFBLFVBR0FjLEVBQUEsY0FDQXJDLEVBQUF4QixFQUFBM3JFLEdBQUEwdUUsR0FHQTRPLEVBQUEsSUFBQWxyRSxPQUFBLDZCQUNBeTlELEVBQUEsQ0FDQW55QyxVQUFBLFVBQ0E2L0MsU0FBQSxTQUNBQyxNQUFBLDRCQUNBcnNELFFBQUEsU0FDQXlQLE1BQUEsa0JBQ0F6TCxLQUFBLFVBQ0EzcEIsU0FBQSxtQkFDQWl0RSxVQUFBLG9CQUNBenJDLE9BQUEsa0JBQ0FyVixVQUFBLDJCQUNBOGxELGtCQUFBLGlCQUNBOUYsU0FBQSxvQkFFQVIsRUFBQSxDQUNBdUcsS0FBQSxPQUNBdEcsSUFBQSxNQUNBbEgsTUFBQSxRQUNBb0gsT0FBQSxTQUNBckgsS0FBQSxRQUVBUixFQUFBLENBQ0EveEMsV0FBQSxFQUNBNi9DLFNBQUEsdUdBQ0Fwc0QsUUFBQSxjQUNBcXNELE1BQUEsR0FDQTU4QyxNQUFBLEVBQ0F6TCxNQUFBLEVBQ0EzcEIsVUFBQSxFQUNBaXRFLFVBQUEsTUFDQXpyQyxPQUFBLEVBQ0FyVixXQUFBLEVBQ0E4bEQsa0JBQUEsT0FDQTlGLFNBQUEsZ0JBRUFnRyxFQUFBLENBQ0FqUSxLQUFBLE9BQ0FrUSxJQUFBLE9BRUE5c0QsRUFBQSxDQUNBbWpELEtBQUEsT0FBQXpFLEVBQ0EwRSxPQUFBLFNBQUExRSxFQUNBOUIsS0FBQSxPQUFBOEIsRUFDQXdFLE1BQUEsUUFBQXhFLEVBQ0FxTyxTQUFBLFdBQUFyTyxFQUNBNkcsTUFBQSxRQUFBN0csRUFDQStKLFFBQUEsVUFBQS9KLEVBQ0FzTyxTQUFBLFdBQUF0TyxFQUNBYyxXQUFBLGFBQUFkLEVBQ0FlLFdBQUEsYUFBQWYsR0FFQWpDLEVBQUEsQ0FDQUUsS0FBQSxPQUNBQyxLQUFBLFFBRUFvQixFQUFBLENBQ0FpUCxRQUFBLFdBQ0FDLGNBQUEsaUJBQ0FDLE1BQUEsVUFFQUMsRUFBQSxDQUNBQyxNQUFBLFFBQ0F0UCxNQUFBLFFBQ0F3SCxNQUFBLFFBQ0ErSCxPQUFBLFVBU0FmLEVBRUEsV0FDQSxTQUFBQSxFQUFBNXZCLEVBQUFtZixHQUtBLFlBQUExQixFQUNBLFVBQUEza0QsVUFBQSxnRUFJQWpjLEtBQUErekUsWUFBQSxFQUNBL3pFLEtBQUFnMEUsU0FBQSxFQUNBaDBFLEtBQUFpMEUsWUFBQSxHQUNBajBFLEtBQUFrMEUsZUFBQSxHQUNBbDBFLEtBQUFzdEUsUUFBQSxLQUVBdHRFLEtBQUFtakQsVUFDQW5qRCxLQUFBc2lFLE9BQUF0aUUsS0FBQWtuRSxXQUFBNUUsR0FDQXRpRSxLQUFBbTBFLElBQUEsS0FFQW4wRSxLQUFBbzBFLGdCQUlBLElBQUE5USxFQUFBeVAsRUFBQXgrRSxVQTRnQkEsT0F6Z0JBK3VFLEVBQUErUSxPQUFBLFdBQ0FyMEUsS0FBQSt6RSxZQUFBLEdBR0F6USxFQUFBN29ELFFBQUEsV0FDQXphLEtBQUErekUsWUFBQSxHQUdBelEsRUFBQWdSLGNBQUEsV0FDQXQwRSxLQUFBK3pFLFlBQUEvekUsS0FBQSt6RSxZQUdBelEsRUFBQWppRCxPQUFBLFNBQUE2QyxHQUNBLEdBQUFsa0IsS0FBQSt6RSxXQUlBLEdBQUE3dkQsRUFBQSxDQUNBLElBQUFxd0QsRUFBQXYwRSxLQUFBZ0MsWUFBQWlqRSxTQUNBOWpFLEVBQUFrZ0UsRUFBQW45QyxFQUFBNEIsZUFBQTVzQixLQUFBcTdFLEdBRUFwekUsSUFDQUEsRUFBQSxJQUFBbkIsS0FBQWdDLFlBQUFraUIsRUFBQTRCLGNBQUE5bEIsS0FBQXcwRSxzQkFDQW5ULEVBQUFuOUMsRUFBQTRCLGVBQUE1c0IsS0FBQXE3RSxFQUFBcHpFLElBR0FBLEVBQUEreUUsZUFBQW50RCxPQUFBNWxCLEVBQUEreUUsZUFBQW50RCxNQUVBNWxCLEVBQUFzekUsdUJBQ0F0ekUsRUFBQXV6RSxPQUFBLEtBQUF2ekUsR0FFQUEsRUFBQXd6RSxPQUFBLEtBQUF4ekUsT0FFTyxDQUNQLEdBQUFrZ0UsRUFBQXJoRSxLQUFBNDBFLGlCQUFBdjhDLFNBQUE0cUMsRUFBQUcsTUFHQSxZQUZBcGpFLEtBQUEyMEUsT0FBQSxLQUFBMzBFLE1BS0FBLEtBQUEwMEUsT0FBQSxLQUFBMTBFLFFBSUFzakUsRUFBQWxyRSxRQUFBLFdBQ0FvK0IsYUFBQXgyQixLQUFBZzBFLFVBQ0EzUyxFQUFBeGlELFdBQUE3ZSxLQUFBbWpELFFBQUFuakQsS0FBQWdDLFlBQUFpakUsVUFDQTVELEVBQUFyaEUsS0FBQW1qRCxTQUFBaC9CLElBQUFua0IsS0FBQWdDLFlBQUFrakUsV0FDQTdELEVBQUFyaEUsS0FBQW1qRCxTQUFBM3FDLFFBQUEsVUFBQTJMLElBQUEsaUJBRUFua0IsS0FBQW0wRSxLQUNBOVMsRUFBQXJoRSxLQUFBbTBFLEtBQUEzNUQsU0FHQXhhLEtBQUErekUsV0FBQSxLQUNBL3pFLEtBQUFnMEUsU0FBQSxLQUNBaDBFLEtBQUFpMEUsWUFBQSxLQUNBajBFLEtBQUFrMEUsZUFBQSxLQUVBLE9BQUFsMEUsS0FBQXN0RSxTQUNBdHRFLEtBQUFzdEUsUUFBQTFiLFVBR0E1eEQsS0FBQXN0RSxRQUFBLEtBQ0F0dEUsS0FBQW1qRCxRQUFBLEtBQ0FuakQsS0FBQXNpRSxPQUFBLEtBQ0F0aUUsS0FBQW0wRSxJQUFBLE1BR0E3USxFQUFBcGlELEtBQUEsV0FDQSxJQUFBcWdELEVBQUF2aEUsS0FFQSxZQUFBcWhFLEVBQUFyaEUsS0FBQW1qRCxTQUFBbmpDLElBQUEsV0FDQSxVQUFBeG1CLE1BQUEsdUNBR0EsSUFBQXMwRSxFQUFBek0sRUFBQTc2QyxNQUFBeG1CLEtBQUFnQyxZQUFBd2tCLE1BQUE0OEMsTUFFQSxHQUFBcGpFLEtBQUE2MEUsaUJBQUE3MEUsS0FBQSt6RSxXQUFBLENBQ0ExUyxFQUFBcmhFLEtBQUFtakQsU0FBQXQ4QixRQUFBaW5ELEdBQ0EsSUFBQWdILEVBQUF6VCxFQUFBeDZELFNBQUE3RyxLQUFBbWpELFFBQUFyNEMsY0FBQXFDLGdCQUFBbk4sS0FBQW1qRCxTQUVBLEdBQUEycUIsRUFBQTNtRCx1QkFBQTJ0RCxFQUNBLE9BR0EsSUFBQVgsRUFBQW4wRSxLQUFBNDBFLGdCQUNBRyxFQUFBM1QsRUFBQU8sT0FBQTNoRSxLQUFBZ0MsWUFBQW9pRSxNQUNBK1AsRUFBQTVvRSxhQUFBLEtBQUF3cEUsR0FDQS8wRSxLQUFBbWpELFFBQUE1M0MsYUFBQSxtQkFBQXdwRSxHQUNBLzBFLEtBQUFnMUUsYUFFQWgxRSxLQUFBc2lFLE9BQUFsdkMsV0FDQWl1QyxFQUFBOFMsR0FBQXY4QyxTQUFBcXJDLEVBQUFFLE1BR0EsSUFBQWdMLEVBQUEsbUJBQUFudUUsS0FBQXNpRSxPQUFBNkwsVUFBQW51RSxLQUFBc2lFLE9BQUE2TCxVQUFBMTVFLEtBQUF1TCxLQUFBbTBFLEVBQUFuMEUsS0FBQW1qRCxTQUFBbmpELEtBQUFzaUUsT0FBQTZMLFVBRUE4RyxFQUFBajFFLEtBQUFrMUUsZUFBQS9HLEdBRUFudUUsS0FBQW0xRSxtQkFBQUYsR0FDQSxJQUFBNW5ELEdBQUEsSUFBQXJ0QixLQUFBc2lFLE9BQUFqMUMsVUFBQXh5QixTQUFBbW1CLEtBQUFxZ0QsRUFBQXJoRSxLQUFBc2lFLE9BQUFqMUMsV0FDQWcwQyxFQUFBOFMsR0FBQWo3RSxLQUFBOEcsS0FBQWdDLFlBQUFpakUsU0FBQWpsRSxNQUVBcWhFLEVBQUF4NkQsU0FBQTdHLEtBQUFtakQsUUFBQXI0QyxjQUFBcUMsZ0JBQUFuTixLQUFBbTBFLE1BQ0E5UyxFQUFBOFMsR0FBQXJvRCxTQUFBdUIsR0FHQWcwQyxFQUFBcmhFLEtBQUFtakQsU0FBQXQ4QixRQUFBN21CLEtBQUFnQyxZQUFBd2tCLE1BQUErc0QsVUFDQXZ6RSxLQUFBc3RFLFFBQUEsSUFBQTFNLEVBQUE1Z0UsS0FBQW1qRCxRQUFBZ3hCLEVBQUEsQ0FDQWhHLFVBQUE4RyxFQUNBMUcsVUFBQSxDQUNBN3JDLE9BQUEsQ0FDQUEsT0FBQTFpQyxLQUFBc2lFLE9BQUE1L0IsUUFFQTBxQyxLQUFBLENBQ0FnSSxTQUFBcDFFLEtBQUFzaUUsT0FBQTZRLG1CQUVBa0MsTUFBQSxDQUNBbHlCLFFBQUFxaEIsRUFBQW1QLE9BRUFuRixnQkFBQSxDQUNBQyxrQkFBQXp1RSxLQUFBc2lFLE9BQUErSyxXQUdBaUksU0FBQSxTQUFBcDhFLEdBQ0FBLEVBQUFxOEUsb0JBQUFyOEUsRUFBQWkxRSxXQUNBNU0sRUFBQWlVLDZCQUFBdDhFLElBR0F1OEUsU0FBQSxTQUFBdjhFLEdBQ0Fxb0UsRUFBQWlVLDZCQUFBdDhFLE1BR0Ftb0UsRUFBQThTLEdBQUF2OEMsU0FBQXFyQyxFQUFBRyxNQUtBLGlCQUFBdm9FLFNBQUFzUyxpQkFDQWswRCxFQUFBLFFBQUFwckUsV0FBQTZ0QixHQUFBLGlCQUFBdTlDLEVBQUFwOUQsTUFHQSxJQUFBa3dCLEVBQUEsV0FDQW90QyxFQUFBZSxPQUFBbHZDLFdBQ0FtdUMsRUFBQW1VLGlCQUdBLElBQUFDLEVBQUFwVSxFQUFBMFMsWUFDQTFTLEVBQUEwUyxZQUFBLEtBQ0E1UyxFQUFBRSxFQUFBcGUsU0FBQXQ4QixRQUFBMDZDLEVBQUF2L0QsWUFBQXdrQixNQUFBa2pELE9BRUFpTSxJQUFBdEMsRUFBQUMsS0FDQS9SLEVBQUFvVCxPQUFBLEtBQUFwVCxJQUlBSCxFQUFBYSx5QkFBQVosRUFBQXJoRSxLQUFBbTBFLEtBQUE5N0MsU0FBQTRxQyxFQUFBRSxNQUNBOUIsRUFBQXJoRSxLQUFBbTBFLEtBQUFud0QsSUFBQW85QyxFQUFBSyxlQUFBdHRDLEdBQUF3dUMscUJBQUFvUSxFQUFBNkMsc0JBRUF6aEQsTUFLQW12QyxFQUFBbGlELEtBQUEsU0FBQXJwQixHQUNBLElBQUErdkUsRUFBQTluRSxLQUVBbTBFLEVBQUFuMEUsS0FBQTQwRSxnQkFDQWhHLEVBQUF2TixFQUFBNzZDLE1BQUF4bUIsS0FBQWdDLFlBQUF3a0IsTUFBQW1qRCxNQUVBeDFDLEVBQUEsV0FDQTJ6QyxFQUFBbU0sY0FBQVosRUFBQWpRLE1BQUErUSxFQUFBcHpFLFlBQ0FvekUsRUFBQXB6RSxXQUFBQyxZQUFBbXpFLEdBR0FyTSxFQUFBK04saUJBRUEvTixFQUFBM2tCLFFBQUF2M0MsZ0JBQUEsb0JBRUF5MUQsRUFBQXlHLEVBQUEza0IsU0FBQXQ4QixRQUFBaWhELEVBQUE5bEUsWUFBQXdrQixNQUFBb2pELFFBRUEsT0FBQTlCLEVBQUF3RixTQUNBeEYsRUFBQXdGLFFBQUExYixVQUdBNzVELEdBQ0FBLEtBSUFzcEUsRUFBQXJoRSxLQUFBbWpELFNBQUF0OEIsUUFBQStuRCxHQUVBQSxFQUFBem5ELHVCQUlBazZDLEVBQUE4UyxHQUFBbDhDLFlBQUFnckMsRUFBQUcsTUFHQSxpQkFBQXZvRSxTQUFBc1MsaUJBQ0FrMEQsRUFBQSxRQUFBcHJFLFdBQUFrdUIsSUFBQSxpQkFBQWs5QyxFQUFBcDlELE1BR0FqRSxLQUFBazBFLGVBQUFOLEVBQUE3SCxRQUFBLEVBQ0EvckUsS0FBQWswRSxlQUFBTixFQUFBclAsUUFBQSxFQUNBdmtFLEtBQUFrMEUsZUFBQU4sRUFBQUMsUUFBQSxFQUVBelMsRUFBQWEseUJBQUFaLEVBQUFyaEUsS0FBQW0wRSxLQUFBOTdDLFNBQUE0cUMsRUFBQUUsTUFDQTlCLEVBQUE4UyxHQUFBbndELElBQUFvOUMsRUFBQUssZUFBQXR0QyxHQUFBd3VDLHFCQTNUQSxLQTZUQXh1QyxJQUdBbjBCLEtBQUFpMEUsWUFBQSxLQUdBM1EsRUFBQWpwRSxPQUFBLFdBQ0EsT0FBQTJGLEtBQUFzdEUsU0FDQXR0RSxLQUFBc3RFLFFBQUFVLGtCQUtBMUssRUFBQXVSLGNBQUEsV0FDQSxPQUFBM1MsUUFBQWxpRSxLQUFBODFFLGFBR0F4UyxFQUFBNlIsbUJBQUEsU0FBQUYsR0FDQTVULEVBQUFyaEUsS0FBQTQwRSxpQkFBQWg5QyxTQUFBbStDLGNBQUFkLElBR0EzUixFQUFBc1IsY0FBQSxXQUVBLE9BREE1MEUsS0FBQW0wRSxJQUFBbjBFLEtBQUFtMEUsS0FBQTlTLEVBQUFyaEUsS0FBQXNpRSxPQUFBMlEsVUFBQSxHQUNBanpFLEtBQUFtMEUsS0FHQTdRLEVBQUEwUixXQUFBLFdBQ0EsSUFBQWdCLEVBQUEzVSxFQUFBcmhFLEtBQUE0MEUsaUJBQ0E1MEUsS0FBQWkyRSxrQkFBQUQsRUFBQS9uRSxLQUFBdTJELEVBQUFrUCxlQUFBMXpFLEtBQUE4MUUsWUFDQUUsRUFBQS85QyxZQUFBZ3JDLEVBQUFFLEtBQUEsSUFBQUYsRUFBQUcsT0FHQUUsRUFBQTJTLGtCQUFBLFNBQUFqUyxFQUFBOXFELEdBQ0EsSUFBQTJSLEVBQUE3cUIsS0FBQXNpRSxPQUFBejNDLEtBRUEsaUJBQUEzUixNQUFBNU8sVUFBQTRPLEVBQUFuWCxRQUVBOG9CLEVBQ0F3MkMsRUFBQW5vRCxHQUFBNWMsU0FBQWliLEdBQUF5c0QsSUFDQUEsRUFBQTl3RCxRQUFBcVksT0FBQXJTLEdBR0E4cUQsRUFBQWxqRSxLQUFBdWdFLEVBQUFub0QsR0FBQXBZLFFBR0FrakUsRUFBQW41QyxFQUFBLGVBQUEzUixJQUlBb3FELEVBQUF3UyxTQUFBLFdBQ0EsSUFBQTVDLEVBQUFsekUsS0FBQW1qRCxRQUFBNzNDLGFBQUEsdUJBTUEsT0FKQTRuRSxJQUNBQSxFQUFBLG1CQUFBbHpFLEtBQUFzaUUsT0FBQTRRLE1BQUFsekUsS0FBQXNpRSxPQUFBNFEsTUFBQXorRSxLQUFBdUwsS0FBQW1qRCxTQUFBbmpELEtBQUFzaUUsT0FBQTRRLE9BR0FBLEdBSUE1UCxFQUFBNFIsZUFBQSxTQUFBL0csR0FDQSxPQUFBdEIsRUFBQXNCLEVBQUF4c0UsZ0JBR0EyaEUsRUFBQThRLGNBQUEsV0FDQSxJQUFBcEwsRUFBQWhwRSxLQUVBazJFLEVBQUFsMkUsS0FBQXNpRSxPQUFBejdDLFFBQUFqaEIsTUFBQSxLQUNBc3dFLEVBQUF0NEUsUUFBQSxTQUFBaXBCLEdBQ0EsYUFBQUEsRUFDQXc2QyxFQUFBMkgsRUFBQTdsQixTQUFBci9CLEdBQUFrbEQsRUFBQWhuRSxZQUFBd2tCLE1BQUF1bEQsTUFBQS9DLEVBQUExRyxPQUFBcGhFLFNBQUEsU0FBQWdqQixHQUNBLE9BQUE4a0QsRUFBQTNuRCxPQUFBNkMsVUFFUyxHQUFBMkMsSUFBQStzRCxFQUFBRSxPQUFBLENBQ1QsSUFBQXFDLEVBQUF0dkQsSUFBQStzRCxFQUFBQyxNQUFBN0ssRUFBQWhuRSxZQUFBd2tCLE1BQUF3L0MsV0FBQWdELEVBQUFobkUsWUFBQXdrQixNQUFBeW9ELFFBQ0FtSCxFQUFBdnZELElBQUErc0QsRUFBQUMsTUFBQTdLLEVBQUFobkUsWUFBQXdrQixNQUFBeS9DLFdBQUErQyxFQUFBaG5FLFlBQUF3a0IsTUFBQWd0RCxTQUNBblMsRUFBQTJILEVBQUE3bEIsU0FBQXIvQixHQUFBcXlELEVBQUFuTixFQUFBMUcsT0FBQXBoRSxTQUFBLFNBQUFnakIsR0FDQSxPQUFBOGtELEVBQUEwTCxPQUFBeHdELEtBQ1dKLEdBQUFzeUQsRUFBQXBOLEVBQUExRyxPQUFBcGhFLFNBQUEsU0FBQWdqQixHQUNYLE9BQUE4a0QsRUFBQTJMLE9BQUF6d0QsS0FJQW05QyxFQUFBMkgsRUFBQTdsQixTQUFBM3FDLFFBQUEsVUFBQXNMLEdBQUEsMkJBQ0EsT0FBQWtsRCxFQUFBNW5ELFdBSUFwaEIsS0FBQXNpRSxPQUFBcGhFLFNBQ0FsQixLQUFBc2lFLE9BQUFuQixFQUFBLEdBQWlDbmhFLEtBQUFzaUUsT0FBQSxDQUNqQ3o3QyxRQUFBLFNBQ0EzbEIsU0FBQSxLQUdBbEIsS0FBQXEyRSxhQUlBL1MsRUFBQStTLFVBQUEsV0FDQSxJQUFBQyxTQUFBdDJFLEtBQUFtakQsUUFBQTczQyxhQUFBLHdCQUVBdEwsS0FBQW1qRCxRQUFBNzNDLGFBQUEscUJBQUFnckUsS0FDQXQyRSxLQUFBbWpELFFBQUE1M0MsYUFBQSxzQkFBQXZMLEtBQUFtakQsUUFBQTczQyxhQUFBLGNBQ0F0TCxLQUFBbWpELFFBQUE1M0MsYUFBQSxjQUlBKzNELEVBQUFvUixPQUFBLFNBQUF4d0QsRUFBQS9pQixHQUNBLElBQUFvekUsRUFBQXYwRSxLQUFBZ0MsWUFBQWlqRSxVQUNBOWpFLEtBQUFrZ0UsRUFBQW45QyxFQUFBNEIsZUFBQTVzQixLQUFBcTdFLE1BR0FwekUsRUFBQSxJQUFBbkIsS0FBQWdDLFlBQUFraUIsRUFBQTRCLGNBQUE5bEIsS0FBQXcwRSxzQkFDQW5ULEVBQUFuOUMsRUFBQTRCLGVBQUE1c0IsS0FBQXE3RSxFQUFBcHpFLElBR0EraUIsSUFDQS9pQixFQUFBK3lFLGVBQUEsWUFBQWh3RCxFQUFBOW5CLEtBQUF3M0UsRUFBQXJQLE1BQUFxUCxFQUFBQyxRQUFBLEdBR0F4UyxFQUFBbGdFLEVBQUF5ekUsaUJBQUF2OEMsU0FBQTRxQyxFQUFBRyxPQUFBamlFLEVBQUE4eUUsY0FBQVosRUFBQWpRLEtBQ0FqaUUsRUFBQTh5RSxZQUFBWixFQUFBalEsTUFJQTVzQyxhQUFBcjFCLEVBQUE2eUUsVUFDQTd5RSxFQUFBOHlFLFlBQUFaLEVBQUFqUSxLQUVBamlFLEVBQUFtaEUsT0FBQWhzQyxPQUFBbjFCLEVBQUFtaEUsT0FBQWhzQyxNQUFBcFYsS0FLQS9mLEVBQUE2eUUsU0FBQXYzRCxXQUFBLFdBQ0F0YixFQUFBOHlFLGNBQUFaLEVBQUFqUSxNQUNBamlFLEVBQUErZixRQUVPL2YsRUFBQW1oRSxPQUFBaHNDLE1BQUFwVixNQVJQL2YsRUFBQStmLFNBV0FvaUQsRUFBQXFSLE9BQUEsU0FBQXp3RCxFQUFBL2lCLEdBQ0EsSUFBQW96RSxFQUFBdjBFLEtBQUFnQyxZQUFBaWpFLFVBQ0E5akUsS0FBQWtnRSxFQUFBbjlDLEVBQUE0QixlQUFBNXNCLEtBQUFxN0UsTUFHQXB6RSxFQUFBLElBQUFuQixLQUFBZ0MsWUFBQWtpQixFQUFBNEIsY0FBQTlsQixLQUFBdzBFLHNCQUNBblQsRUFBQW45QyxFQUFBNEIsZUFBQTVzQixLQUFBcTdFLEVBQUFwekUsSUFHQStpQixJQUNBL2lCLEVBQUEreUUsZUFBQSxhQUFBaHdELEVBQUE5bkIsS0FBQXczRSxFQUFBclAsTUFBQXFQLEVBQUFDLFFBQUEsR0FHQTF5RSxFQUFBc3pFLHlCQUlBaitDLGFBQUFyMUIsRUFBQTZ5RSxVQUNBN3lFLEVBQUE4eUUsWUFBQVosRUFBQUMsSUFFQW55RSxFQUFBbWhFLE9BQUFoc0MsT0FBQW4xQixFQUFBbWhFLE9BQUFoc0MsTUFBQWxWLEtBS0FqZ0IsRUFBQTZ5RSxTQUFBdjNELFdBQUEsV0FDQXRiLEVBQUE4eUUsY0FBQVosRUFBQUMsS0FDQW55RSxFQUFBaWdCLFFBRU9qZ0IsRUFBQW1oRSxPQUFBaHNDLE1BQUFsVixNQVJQamdCLEVBQUFpZ0IsU0FXQWtpRCxFQUFBbVIscUJBQUEsV0FDQSxRQUFBNXRELEtBQUE3bUIsS0FBQWswRSxlQUNBLEdBQUFsMEUsS0FBQWswRSxlQUFBcnRELEdBQ0EsU0FJQSxVQUdBeThDLEVBQUE0RCxXQUFBLFNBQUE1RSxHQW1CQSxNQWhCQSxpQkFGQUEsRUFBQW5CLEVBQUEsR0FBMEJuaEUsS0FBQWdDLFlBQUFtakUsUUFBQTlELEVBQUFyaEUsS0FBQW1qRCxTQUFBanFELE9BQUFvcEUsSUFFMUJoc0MsUUFDQWdzQyxFQUFBaHNDLE1BQUEsQ0FDQXBWLEtBQUFvaEQsRUFBQWhzQyxNQUNBbFYsS0FBQWtoRCxFQUFBaHNDLFFBSUEsaUJBQUFnc0MsRUFBQTRRLFFBQ0E1USxFQUFBNFEsTUFBQTVRLEVBQUE0USxNQUFBNXlFLFlBR0EsaUJBQUFnaUUsRUFBQXBwRCxVQUNBb3BELEVBQUFwcEQsUUFBQW9wRCxFQUFBcHBELFFBQUE1WSxZQUdBOGdFLEVBQUFnQixnQkFBQWdDLEVBQUE5QixFQUFBdGlFLEtBQUFnQyxZQUFBdWpFLGFBQ0FqRCxHQUdBZ0IsRUFBQWtSLG1CQUFBLFdBQ0EsSUFBQWxTLEVBQUEsR0FFQSxHQUFBdGlFLEtBQUFzaUUsT0FDQSxRQUFBaGpFLEtBQUFVLEtBQUFzaUUsT0FDQXRpRSxLQUFBZ0MsWUFBQW1qRSxRQUFBN2xFLEtBQUFVLEtBQUFzaUUsT0FBQWhqRSxLQUNBZ2pFLEVBQUFoakUsR0FBQVUsS0FBQXNpRSxPQUFBaGpFLElBS0EsT0FBQWdqRSxHQUdBZ0IsRUFBQXVTLGVBQUEsV0FDQSxJQUFBRyxFQUFBM1UsRUFBQXJoRSxLQUFBNDBFLGlCQUNBMkIsRUFBQVAsRUFBQXptRSxLQUFBLFNBQUE3RSxNQUFBc29FLEdBRUEsT0FBQXVELEtBQUFyK0UsT0FBQSxHQUNBODlFLEVBQUEvOUMsWUFBQXMrQyxFQUFBcjVFLEtBQUEsTUFJQW9tRSxFQUFBa1MsNkJBQUEsU0FBQXQ4RSxHQUNBOEcsS0FBQTYxRSxpQkFFQTcxRSxLQUFBbTFFLG1CQUFBbjFFLEtBQUFrMUUsZUFBQWg4RSxFQUFBaTFFLGFBR0E3SyxFQUFBb1MsZUFBQSxXQUNBLElBQUF2QixFQUFBbjBFLEtBQUE0MEUsZ0JBQ0E0QixFQUFBeDJFLEtBQUFzaUUsT0FBQWx2QyxVQUVBLE9BQUErZ0QsRUFBQTdvRSxhQUFBLGlCQUlBKzFELEVBQUE4UyxHQUFBbDhDLFlBQUFnckMsRUFBQUUsTUFDQW5qRSxLQUFBc2lFLE9BQUFsdkMsV0FBQSxFQUNBcHpCLEtBQUFvaEIsT0FDQXBoQixLQUFBa2hCLE9BQ0FsaEIsS0FBQXNpRSxPQUFBbHZDLFVBQUFvakQsSUFJQXpELEVBQUFoUCxpQkFBQSxTQUFBekIsR0FDQSxPQUFBdGlFLEtBQUF3QyxLQUFBLFdBQ0EsSUFBQXRKLEVBQUFtb0UsRUFBQXJoRSxNQUFBOUcsS0EzakJBLGNBNmpCQSt0RSxFQUFBLGlCQUFBM0UsS0FFQSxJQUFBcHBFLElBQUEsZUFBQWtTLEtBQUFrM0QsTUFJQXBwRSxJQUNBQSxFQUFBLElBQUE2NUUsRUFBQS95RSxLQUFBaW5FLEdBQ0E1RixFQUFBcmhFLE1BQUE5RyxLQXJrQkEsYUFxa0JBQSxJQUdBLGlCQUFBb3BFLEdBQUEsQ0FDQSxZQUFBcHBFLEVBQUFvcEUsR0FDQSxVQUFBcm1ELFVBQUEsb0JBQUFxbUQsRUFBQSxLQUdBcHBFLEVBQUFvcEUsU0FLQXZCLEVBQUFnUyxFQUFBLE9BQ0F6ekUsSUFBQSxVQUNBOUksSUFBQSxXQUNBLE1BdGxCQSxVQXdsQkssQ0FDTDhJLElBQUEsVUFDQTlJLElBQUEsV0FDQSxPQUFBMnVFLElBRUssQ0FDTDdsRSxJQUFBLE9BQ0E5SSxJQUFBLFdBQ0EsT0FBQTR0RSxJQUVLLENBQ0w5a0UsSUFBQSxXQUNBOUksSUFBQSxXQUNBLE1BcG1CQSxlQXNtQkssQ0FDTDhJLElBQUEsUUFDQTlJLElBQUEsV0FDQSxPQUFBZ3dCLElBRUssQ0FDTGxuQixJQUFBLFlBQ0E5SSxJQUFBLFdBQ0EsT0FBQTB1RSxJQUVLLENBQ0w1bEUsSUFBQSxjQUNBOUksSUFBQSxXQUNBLE9BQUErdUUsTUFHQXdOLEVBcmlCQSxHQXNqQkEsT0FSQTFSLEVBQUEzckUsR0FBQTB1RSxHQUFBMk8sRUFBQWhQLGlCQUNBMUMsRUFBQTNyRSxHQUFBMHVFLEdBQUFwRCxZQUFBK1IsRUFFQTFSLEVBQUEzckUsR0FBQTB1RSxHQUFBei9CLFdBQUEsV0FFQSxPQURBMDhCLEVBQUEzckUsR0FBQTB1RSxHQUFBdkIsRUFDQWtRLEVBQUFoUCxrQkFHQWdQLEVBL29CQSxDQWdwQkNydUMsR0FTRCt4QyxFQUFBLFNBQUFwVixHQU1BLElBQUErQyxFQUFBLFVBR0FjLEVBQUEsY0FDQXJDLEVBQUF4QixFQUFBM3JFLEdBQUEwdUUsR0FFQTRPLEVBQUEsSUFBQWxyRSxPQUFBLDZCQUNBcTlELEVBQUFoRSxFQUFBLEdBQTJCNFIsRUFBQTVOLFFBQUEsQ0FDM0JnSixVQUFBLFFBQ0F0bkQsUUFBQSxRQUNBM04sUUFBQSxHQUNBKzVELFNBQUEsd0lBRUExTixFQUFBcEUsRUFBQSxHQUErQjRSLEVBQUF4TixZQUFBLENBQy9CcnNELFFBQUEsOEJBRUErcEQsRUFBQSxDQUNBRSxLQUFBLE9BQ0FDLEtBQUEsUUFFQW9CLEVBQUEsQ0FDQWtTLE1BQUEsa0JBQ0FDLFFBQUEsaUJBRUFud0QsRUFBQSxDQUNBbWpELEtBQUEsT0FBQXpFLEVBQ0EwRSxPQUFBLFNBQUExRSxFQUNBOUIsS0FBQSxPQUFBOEIsRUFDQXdFLE1BQUEsUUFBQXhFLEVBQ0FxTyxTQUFBLFdBQUFyTyxFQUNBNkcsTUFBQSxRQUFBN0csRUFDQStKLFFBQUEsVUFBQS9KLEVBQ0FzTyxTQUFBLFdBQUF0TyxFQUNBYyxXQUFBLGFBQUFkLEVBQ0FlLFdBQUEsYUFBQWYsR0FTQXVSLEVBRUEsU0FBQUcsR0F6aUdBLElBQUFDLEVBQUFDLEVBNGlHQSxTQUFBTCxJQUNBLE9BQUFHLEVBQUFqK0UsTUFBQXFILEtBQUEwQyxZQUFBMUMsS0E3aUdBODJFLEVBMGlHQUYsR0ExaUdBQyxFQTBpR0FKLEdBemlHQWxpRixVQUFBRCxPQUFBK0ssT0FBQXkzRSxFQUFBdmlGLFdBQ0FzaUYsRUFBQXRpRixVQUFBeU4sWUFBQTYwRSxFQUNBQSxFQUFBRSxVQUFBRCxFQTZpR0EsSUFBQXhULEVBQUFtVCxFQUFBbGlGLFVBNEdBLE9BekdBK3VFLEVBQUF1UixjQUFBLFdBQ0EsT0FBQTcwRSxLQUFBODFFLFlBQUE5MUUsS0FBQWczRSxlQUdBMVQsRUFBQTZSLG1CQUFBLFNBQUFGLEdBQ0E1VCxFQUFBcmhFLEtBQUE0MEUsaUJBQUFoOUMsU0FBQW0rQyxjQUFBZCxJQUdBM1IsRUFBQXNSLGNBQUEsV0FFQSxPQURBNTBFLEtBQUFtMEUsSUFBQW4wRSxLQUFBbTBFLEtBQUE5UyxFQUFBcmhFLEtBQUFzaUUsT0FBQTJRLFVBQUEsR0FDQWp6RSxLQUFBbTBFLEtBR0E3USxFQUFBMFIsV0FBQSxXQUNBLElBQUFnQixFQUFBM1UsRUFBQXJoRSxLQUFBNDBFLGlCQUVBNTBFLEtBQUFpMkUsa0JBQUFELEVBQUEvbkUsS0FBQXUyRCxFQUFBa1MsT0FBQTEyRSxLQUFBODFFLFlBRUEsSUFBQTU4RCxFQUFBbFosS0FBQWczRSxjQUVBLG1CQUFBOTlELElBQ0FBLElBQUF6a0IsS0FBQXVMLEtBQUFtakQsVUFHQW5qRCxLQUFBaTJFLGtCQUFBRCxFQUFBL25FLEtBQUF1MkQsRUFBQW1TLFNBQUF6OUQsR0FDQTg4RCxFQUFBLzlDLFlBQUFnckMsRUFBQUUsS0FBQSxJQUFBRixFQUFBRyxPQUlBRSxFQUFBMFQsWUFBQSxXQUNBLE9BQUFoM0UsS0FBQW1qRCxRQUFBNzNDLGFBQUEsaUJBQUF0TCxLQUFBc2lFLE9BQUFwcEQsU0FHQW9xRCxFQUFBdVMsZUFBQSxXQUNBLElBQUFHLEVBQUEzVSxFQUFBcmhFLEtBQUE0MEUsaUJBQ0EyQixFQUFBUCxFQUFBem1FLEtBQUEsU0FBQTdFLE1BQUFzb0UsR0FFQSxPQUFBdUQsS0FBQXIrRSxPQUFBLEdBQ0E4OUUsRUFBQS85QyxZQUFBcytDLEVBQUFyNUUsS0FBQSxNQUtBdTVFLEVBQUExUyxpQkFBQSxTQUFBekIsR0FDQSxPQUFBdGlFLEtBQUF3QyxLQUFBLFdBQ0EsSUFBQXRKLEVBQUFtb0UsRUFBQXJoRSxNQUFBOUcsS0FsR0EsY0FvR0ErdEUsRUFBQSxpQkFBQTNFLElBQUEsS0FFQSxJQUFBcHBFLElBQUEsZUFBQWtTLEtBQUFrM0QsTUFJQXBwRSxJQUNBQSxFQUFBLElBQUF1OUUsRUFBQXoyRSxLQUFBaW5FLEdBQ0E1RixFQUFBcmhFLE1BQUE5RyxLQTVHQSxhQTRHQUEsSUFHQSxpQkFBQW9wRSxHQUFBLENBQ0EsWUFBQXBwRSxFQUFBb3BFLEdBQ0EsVUFBQXJtRCxVQUFBLG9CQUFBcW1ELEVBQUEsS0FHQXBwRSxFQUFBb3BFLFNBS0F2QixFQUFBMFYsRUFBQSxPQUNBbjNFLElBQUEsVUFFQTlJLElBQUEsV0FDQSxNQTlIQSxVQWdJSyxDQUNMOEksSUFBQSxVQUNBOUksSUFBQSxXQUNBLE9BQUEydUUsSUFFSyxDQUNMN2xFLElBQUEsT0FDQTlJLElBQUEsV0FDQSxPQUFBNHRFLElBRUssQ0FDTDlrRSxJQUFBLFdBQ0E5SSxJQUFBLFdBQ0EsTUE1SUEsZUE4SUssQ0FDTDhJLElBQUEsUUFDQTlJLElBQUEsV0FDQSxPQUFBZ3dCLElBRUssQ0FDTGxuQixJQUFBLFlBQ0E5SSxJQUFBLFdBQ0EsT0FBQTB1RSxJQUVLLENBQ0w1bEUsSUFBQSxjQUNBOUksSUFBQSxXQUNBLE9BQUErdUUsTUFHQWtSLEVBbkhBLENBb0hHMUQsR0FnQkgsT0FSQTFSLEVBQUEzckUsR0FBQTB1RSxHQUFBcVMsRUFBQTFTLGlCQUNBMUMsRUFBQTNyRSxHQUFBMHVFLEdBQUFwRCxZQUFBeVYsRUFFQXBWLEVBQUEzckUsR0FBQTB1RSxHQUFBei9CLFdBQUEsV0FFQSxPQURBMDhCLEVBQUEzckUsR0FBQTB1RSxHQUFBdkIsRUFDQTRULEVBQUExUyxrQkFHQTBTLEVBdkxBLENBd0xDL3hDLEdBU0R1eUMsRUFBQSxTQUFBNVYsR0FNQSxJQUFBK0MsRUFBQSxZQUtBdkIsRUFBQXhCLEVBQUEzckUsR0FBQTB1RSxHQUNBZSxFQUFBLENBQ0F6aUMsT0FBQSxHQUNBL29CLE9BQUEsT0FDQXRXLE9BQUEsSUFFQWtpRSxFQUFBLENBQ0E3aUMsT0FBQSxTQUNBL29CLE9BQUEsU0FDQXRXLE9BQUEsb0JBRUFtakIsRUFBQSxDQUNBMHdELFNBQUEsd0JBQ0FDLE9BQUEsc0JBQ0FoUixjQUFBLDhCQUVBbEQsRUFBQSxDQUNBbVUsY0FBQSxnQkFDQUMsY0FBQSxnQkFDQWhULE9BQUEsVUFFQUcsRUFBQSxDQUNBOFMsU0FBQSxzQkFDQWpULE9BQUEsVUFDQWtULGVBQUEsb0JBQ0FDLFVBQUEsWUFDQUMsVUFBQSxZQUNBQyxXQUFBLG1CQUNBQyxTQUFBLFlBQ0FDLGVBQUEsaUJBQ0FDLGdCQUFBLG9CQUVBQyxFQUFBLENBQ0FDLE9BQUEsU0FDQUMsU0FBQSxZQVNBZixFQUVBLFdBQ0EsU0FBQUEsRUFBQTl6QixFQUFBbWYsR0FDQSxJQUFBZixFQUFBdmhFLEtBRUFBLEtBQUFxakUsU0FBQWxnQixFQUNBbmpELEtBQUFpNEUsZUFBQSxTQUFBOTBCLEVBQUFpTSxRQUFBcDdELE9BQUFtdkQsRUFDQW5qRCxLQUFBaW5FLFFBQUFqbkUsS0FBQWtuRSxXQUFBNUUsR0FDQXRpRSxLQUFBdXFFLFVBQUF2cUUsS0FBQWluRSxRQUFBNWpFLE9BQUEsSUFBQW1oRSxFQUFBZ1QsVUFBQSxJQUFBeDNFLEtBQUFpbkUsUUFBQTVqRSxPQUFBLElBQUFtaEUsRUFBQWtULFdBQUEsSUFBQTEzRSxLQUFBaW5FLFFBQUE1akUsT0FBQSxJQUFBbWhFLEVBQUFvVCxlQUNBNTNFLEtBQUFrNEUsU0FBQSxHQUNBbDRFLEtBQUFtNEUsU0FBQSxHQUNBbjRFLEtBQUFvNEUsY0FBQSxLQUNBcDRFLEtBQUFxNEUsY0FBQSxFQUNBaFgsRUFBQXJoRSxLQUFBaTRFLGdCQUFBbjBELEdBQUEwQyxFQUFBMndELE9BQUEsU0FBQWp6RCxHQUNBLE9BQUFxOUMsRUFBQStXLFNBQUFwMEQsS0FFQWxrQixLQUFBdTRFLFVBRUF2NEUsS0FBQXM0RSxXQUlBLElBQUFoVixFQUFBMlQsRUFBQTFpRixVQWdNQSxPQTdMQSt1RSxFQUFBaVYsUUFBQSxXQUNBLElBQUF6USxFQUFBOW5FLEtBRUF3NEUsRUFBQXg0RSxLQUFBaTRFLGlCQUFBajRFLEtBQUFpNEUsZUFBQWprRixPQUFBOGpGLEVBQUFDLE9BQUFELEVBQUFFLFNBQ0FTLEVBQUEsU0FBQXo0RSxLQUFBaW5FLFFBQUF0dEQsT0FBQTYrRCxFQUFBeDRFLEtBQUFpbkUsUUFBQXR0RCxPQUNBKytELEVBQUFELElBQUFYLEVBQUFFLFNBQUFoNEUsS0FBQTI0RSxnQkFBQSxFQUNBMzRFLEtBQUFrNEUsU0FBQSxHQUNBbDRFLEtBQUFtNEUsU0FBQSxHQUNBbjRFLEtBQUFxNEUsY0FBQXI0RSxLQUFBNDRFLG1CQUNBLElBQUFyZ0UsRUFBQThvRCxFQUFBejhELFVBQUF5OEQsRUFBQXJoRSxLQUFBdXFFLFlBQ0FoeUQsRUFBQXZjLElBQUEsU0FBQW1uRCxHQUNBLElBQUE5L0MsRUFDQXcxRSxFQUFBelgsRUFBQVEsdUJBQUF6ZSxHQU1BLEdBSkEwMUIsSUFDQXgxRSxFQUFBZytELEVBQUF3WCxHQUFBLElBR0F4MUUsRUFBQSxDQUNBLElBQUF5MUUsRUFBQXoxRSxFQUFBeXRCLHdCQUVBLEdBQUFnb0QsRUFBQW5zRCxPQUFBbXNELEVBQUE1bEQsT0FFQSxPQUFBbXVDLEVBQUFoK0QsR0FBQW8xRSxLQUFBanJFLElBQUFrckUsRUFBQUcsR0FJQSxjQUNPOXFFLE9BQUEsU0FBQXBSLEdBQ1AsT0FBQUEsSUFDT3FHLEtBQUEsU0FBQXZHLEVBQUFDLEdBQ1AsT0FBQUQsRUFBQSxHQUFBQyxFQUFBLEtBQ09rQixRQUFBLFNBQUFqQixHQUNQbXJFLEVBQUFvUSxTQUFBbGlGLEtBQUEyRyxFQUFBLElBRUFtckUsRUFBQXFRLFNBQUFuaUYsS0FBQTJHLEVBQUEsT0FJQTJtRSxFQUFBbHJFLFFBQUEsV0FDQWlwRSxFQUFBeGlELFdBQUE3ZSxLQUFBcWpFLFNBaEhBLGdCQWlIQWhDLEVBQUFyaEUsS0FBQWk0RSxnQkFBQTl6RCxJQWhIQSxpQkFpSEFua0IsS0FBQXFqRSxTQUFBLEtBQ0FyakUsS0FBQWk0RSxlQUFBLEtBQ0FqNEUsS0FBQWluRSxRQUFBLEtBQ0FqbkUsS0FBQXVxRSxVQUFBLEtBQ0F2cUUsS0FBQWs0RSxTQUFBLEtBQ0FsNEUsS0FBQW00RSxTQUFBLEtBQ0FuNEUsS0FBQW80RSxjQUFBLEtBQ0FwNEUsS0FBQXE0RSxjQUFBLE1BSUEvVSxFQUFBNEQsV0FBQSxTQUFBNUUsR0FHQSxvQkFGQUEsRUFBQW5CLEVBQUEsR0FBMEJnRSxFQUFBN0MsSUFFMUJqL0QsT0FBQSxDQUNBLElBQUE5SixFQUFBOG5FLEVBQUFpQixFQUFBai9ELFFBQUFrTSxLQUFBLE1BRUFoVyxJQUNBQSxFQUFBNm5FLEVBQUFPLE9BQUF5QyxHQUNBL0MsRUFBQWlCLEVBQUFqL0QsUUFBQWtNLEtBQUEsS0FBQWhXLElBR0Erb0UsRUFBQWovRCxPQUFBLElBQUE5SixFQUlBLE9BREE2bkUsRUFBQWdCLGdCQUFBZ0MsRUFBQTlCLEVBQUFpRCxHQUNBakQsR0FHQWdCLEVBQUFxVixjQUFBLFdBQ0EsT0FBQTM0RSxLQUFBaTRFLGlCQUFBamtGLE9BQUFnTSxLQUFBaTRFLGVBQUEzMEMsWUFBQXRqQyxLQUFBaTRFLGVBQUFqbUQsV0FHQXN4QyxFQUFBc1YsaUJBQUEsV0FDQSxPQUFBNTRFLEtBQUFpNEUsZUFBQWxHLGNBQUFudUUsS0FBQXNyQixJQUFBcjBCLFNBQUFtbUIsS0FBQSt3RCxhQUFBbDNFLFNBQUFzUyxnQkFBQTRrRSxlQUdBek8sRUFBQXlWLGlCQUFBLFdBQ0EsT0FBQS80RSxLQUFBaTRFLGlCQUFBamtGLGNBQUFnbEYsWUFBQWg1RSxLQUFBaTRFLGVBQUFubkQsd0JBQUFvQyxRQUdBb3dDLEVBQUFnVixTQUFBLFdBQ0EsSUFBQXRtRCxFQUFBaHlCLEtBQUEyNEUsZ0JBQUEzNEUsS0FBQWluRSxRQUFBdmtDLE9BRUFxdkMsRUFBQS94RSxLQUFBNDRFLG1CQUVBSyxFQUFBajVFLEtBQUFpbkUsUUFBQXZrQyxPQUFBcXZDLEVBQUEveEUsS0FBQSs0RSxtQkFNQSxHQUpBLzRFLEtBQUFxNEUsZ0JBQUF0RyxHQUNBL3hFLEtBQUF1NEUsVUFHQXZtRCxHQUFBaW5ELEVBQUEsQ0FDQSxJQUFBNTFFLEVBQUFyRCxLQUFBbTRFLFNBQUFuNEUsS0FBQW00RSxTQUFBamdGLE9BQUEsR0FFQThILEtBQUFvNEUsZ0JBQUEvMEUsR0FDQXJELEtBQUFrNUUsVUFBQTcxRSxPQUpBLENBVUEsR0FBQXJELEtBQUFvNEUsZUFBQXBtRCxFQUFBaHlCLEtBQUFrNEUsU0FBQSxJQUFBbDRFLEtBQUFrNEUsU0FBQSxLQUtBLE9BSkFsNEUsS0FBQW80RSxjQUFBLFVBRUFwNEUsS0FBQW01RSxTQUtBLFFBQUFsaEYsRUFBQStILEtBQUFrNEUsU0FBQWhnRixPQUF3Q0QsS0FBSyxDQUM3QyxJQUFBbWhGLEVBQUFwNUUsS0FBQW80RSxnQkFBQXA0RSxLQUFBbTRFLFNBQUFsZ0YsSUFBQSs1QixHQUFBaHlCLEtBQUFrNEUsU0FBQWpnRixVQUFBLElBQUErSCxLQUFBazRFLFNBQUFqZ0YsRUFBQSxJQUFBKzVCLEVBQUFoeUIsS0FBQWs0RSxTQUFBamdGLEVBQUEsSUFFQW1oRixHQUNBcDVFLEtBQUFrNUUsVUFBQWw1RSxLQUFBbTRFLFNBQUFsZ0YsT0FLQXFyRSxFQUFBNFYsVUFBQSxTQUFBNzFFLEdBQ0FyRCxLQUFBbzRFLGNBQUEvMEUsRUFFQXJELEtBQUFtNUUsU0FFQSxJQUFBRSxFQUFBcjVFLEtBQUF1cUUsVUFBQTNrRSxNQUFBLEtBR0F5ekUsSUFBQXI5RSxJQUFBLFNBQUFrRixHQUNBLE9BQUFBLEVBQUEsaUJBQUFtQyxFQUFBLE1BQUFuQyxFQUFBLFVBQUFtQyxFQUFBLE9BRUEsSUFBQWkyRSxFQUFBalksRUFBQWdZLEVBQUFuOEUsS0FBQSxNQUVBbzhFLEVBQUFqaEQsU0FBQTRxQyxFQUFBbVUsZ0JBQ0FrQyxFQUFBOWdFLFFBQUFnc0QsRUFBQW1ULFVBQUExcEUsS0FBQXUyRCxFQUFBcVQsaUJBQUFqZ0QsU0FBQXFyQyxFQUFBb0IsUUFDQWlWLEVBQUExaEQsU0FBQXFyQyxFQUFBb0IsVUFHQWlWLEVBQUExaEQsU0FBQXFyQyxFQUFBb0IsUUFHQWlWLEVBQUF4akYsUUFBQTB1RSxFQUFBK1MsZ0JBQUFsL0QsS0FBQW1zRCxFQUFBZ1QsVUFBQSxLQUFBaFQsRUFBQWtULFlBQUE5L0MsU0FBQXFyQyxFQUFBb0IsUUFFQWlWLEVBQUF4akYsUUFBQTB1RSxFQUFBK1MsZ0JBQUFsL0QsS0FBQW1zRCxFQUFBaVQsV0FBQXhoRixTQUFBdXVFLEVBQUFnVCxXQUFBNS9DLFNBQUFxckMsRUFBQW9CLFNBR0FoRCxFQUFBcmhFLEtBQUFpNEUsZ0JBQUFweEQsUUFBQUwsRUFBQTB3RCxTQUFBLENBQ0E3dkQsY0FBQWhrQixLQUlBaWdFLEVBQUE2VixPQUFBLFdBQ0E5WCxFQUFBcmhFLEtBQUF1cUUsV0FBQXg4RCxPQUFBeTJELEVBQUFILFFBQUFwc0MsWUFBQWdyQyxFQUFBb0IsU0FJQTRTLEVBQUFsVCxpQkFBQSxTQUFBekIsR0FDQSxPQUFBdGlFLEtBQUF3QyxLQUFBLFdBQ0EsSUFBQXRKLEVBQUFtb0UsRUFBQXJoRSxNQUFBOUcsS0F2T0EsZ0JBeU9BK3RFLEVBQUEsaUJBQUEzRSxLQU9BLEdBTEFwcEUsSUFDQUEsRUFBQSxJQUFBKzlFLEVBQUFqM0UsS0FBQWluRSxHQUNBNUYsRUFBQXJoRSxNQUFBOUcsS0E3T0EsZUE2T0FBLElBR0EsaUJBQUFvcEUsRUFBQSxDQUNBLFlBQUFwcEUsRUFBQW9wRSxHQUNBLFVBQUFybUQsVUFBQSxvQkFBQXFtRCxFQUFBLEtBR0FwcEUsRUFBQW9wRSxTQUtBdkIsRUFBQWtXLEVBQUEsT0FDQTMzRSxJQUFBLFVBQ0E5SSxJQUFBLFdBQ0EsTUE5UEEsVUFnUUssQ0FDTDhJLElBQUEsVUFDQTlJLElBQUEsV0FDQSxPQUFBMnVFLE1BR0E4UixFQXJOQSxHQXFQQSxPQXZCQTVWLEVBQUFydEUsUUFBQTh2QixHQUFBMEMsRUFBQTIvQyxjQUFBLFdBR0EsSUFGQSxJQUFBb1QsRUFBQWxZLEVBQUF6OEQsVUFBQXk4RCxFQUFBbUQsRUFBQThTLFdBRUFyL0UsRUFBQXNoRixFQUFBcmhGLE9BQW1DRCxLQUFLLENBQ3hDLElBQUF1aEYsRUFBQW5ZLEVBQUFrWSxFQUFBdGhGLElBRUFnL0UsRUFBQWxULGlCQUFBdHZFLEtBQUEra0YsSUFBQXRnRixXQVNBbW9FLEVBQUEzckUsR0FBQTB1RSxHQUFBNlMsRUFBQWxULGlCQUNBMUMsRUFBQTNyRSxHQUFBMHVFLEdBQUFwRCxZQUFBaVcsRUFFQTVWLEVBQUEzckUsR0FBQTB1RSxHQUFBei9CLFdBQUEsV0FFQSxPQURBMDhCLEVBQUEzckUsR0FBQTB1RSxHQUFBdkIsRUFDQW9VLEVBQUFsVCxrQkFHQWtULEVBN1NBLENBOFNDdnlDLEdBU0QrMEMsRUFBQSxTQUFBcFksR0FNQSxJQUtBd0IsRUFBQXhCLEVBQUEzckUsR0FBQSxJQUVBOHdCLEVBQUEsQ0FDQW1qRCxLQUFBLGNBQ0FDLE9BQUEsZ0JBQ0F4RyxLQUFBLGNBQ0FzRyxNQUFBLGVBQ0ExRyxlQUFBLHlCQUVBQyxFQUFBLENBQ0FvVSxjQUFBLGdCQUNBaFQsT0FBQSxTQUNBNkgsU0FBQSxXQUNBL0ksS0FBQSxPQUNBQyxLQUFBLFFBRUFvQixFQUFBLENBQ0FtVCxTQUFBLFlBQ0FKLGVBQUEsb0JBQ0FsVCxPQUFBLFVBQ0FxVixVQUFBLGlCQUNBaFYsWUFBQSxrRUFDQW1ULGdCQUFBLG1CQUNBOEIsc0JBQUEsNEJBU0FGLEVBRUEsV0FDQSxTQUFBQSxFQUFBdDJCLEdBQ0FuakQsS0FBQXFqRSxTQUFBbGdCLEVBSUEsSUFBQW1nQixFQUFBbVcsRUFBQWxsRixVQThKQSxPQTNKQSt1RSxFQUFBcGlELEtBQUEsV0FDQSxJQUFBcWdELEVBQUF2aEUsS0FFQSxLQUFBQSxLQUFBcWpFLFNBQUF0aUUsWUFBQWYsS0FBQXFqRSxTQUFBdGlFLFdBQUF1SixXQUFBeW1FLEtBQUFDLGNBQUEzUCxFQUFBcmhFLEtBQUFxakUsVUFBQWhyQyxTQUFBNHFDLEVBQUFvQixTQUFBaEQsRUFBQXJoRSxLQUFBcWpFLFVBQUFockMsU0FBQTRxQyxFQUFBaUosV0FBQSxDQUlBLElBQUE3b0UsRUFDQXc4RCxFQUNBK1osRUFBQXZZLEVBQUFyaEUsS0FBQXFqRSxVQUFBN3FELFFBQUFnc0QsRUFBQStTLGdCQUFBLEdBQ0FyMkUsRUFBQWtnRSxFQUFBUSx1QkFBQTVoRSxLQUFBcWpFLFVBRUEsR0FBQXVXLEVBQUEsQ0FDQSxJQUFBQyxFQUFBLE9BQUFELEVBQUF2dUUsU0FBQW01RCxFQUFBa1YsVUFBQWxWLEVBQUFILE9BRUF4RSxHQURBQSxFQUFBd0IsRUFBQXo4RCxVQUFBeThELEVBQUF1WSxHQUFBM3JFLEtBQUE0ckUsS0FDQWhhLEVBQUEzbkUsT0FBQSxHQUdBLElBQUEwMkUsRUFBQXZOLEVBQUE3NkMsUUFBQW1qRCxLQUFBLENBQ0F0aUQsY0FBQXJuQixLQUFBcWpFLFdBRUF5SyxFQUFBek0sRUFBQTc2QyxRQUFBNDhDLEtBQUEsQ0FDQS83QyxjQUFBdzRDLElBU0EsR0FOQUEsR0FDQXdCLEVBQUF4QixHQUFBaDVDLFFBQUErbkQsR0FHQXZOLEVBQUFyaEUsS0FBQXFqRSxVQUFBeDhDLFFBQUFpbkQsSUFFQUEsRUFBQTNtRCx1QkFBQXluRCxFQUFBem5ELHFCQUFBLENBSUFqbUIsSUFDQW1DLEVBQUFnK0QsRUFBQW5nRSxHQUFBLElBR0FsQixLQUFBazVFLFVBQUFsNUUsS0FBQXFqRSxTQUFBdVcsR0FFQSxJQUFBemxELEVBQUEsV0FDQSxJQUFBMmxELEVBQUF6WSxFQUFBNzZDLFFBQUFvakQsT0FBQSxDQUNBdmlELGNBQUFrNkMsRUFBQThCLFdBRUE2TixFQUFBN1AsRUFBQTc2QyxRQUFBa2pELE1BQUEsQ0FDQXJpRCxjQUFBdzRDLElBRUF3QixFQUFBeEIsR0FBQWg1QyxRQUFBaXpELEdBQ0F6WSxFQUFBRSxFQUFBOEIsVUFBQXg4QyxRQUFBcXFELElBR0E3dEUsRUFDQXJELEtBQUFrNUUsVUFBQTcxRSxJQUFBdEMsV0FBQW96QixHQUVBQSxPQUlBbXZDLEVBQUFsckUsUUFBQSxXQUNBaXBFLEVBQUF4aUQsV0FBQTdlLEtBQUFxakUsU0ExR0EsVUEyR0FyakUsS0FBQXFqRSxTQUFBLE1BSUFDLEVBQUE0VixVQUFBLFNBQUEvMUIsRUFBQTkxQixFQUFBdDFCLEdBQ0EsSUFBQSt2RSxFQUFBOW5FLEtBVUFuSyxHQU5BLE9BQUF3M0IsRUFBQWhpQixTQUNBZzJELEVBQUFoMEMsR0FBQXBmLEtBQUF1MkQsRUFBQWtWLFdBRUFyWSxFQUFBaDBDLEdBQUFwM0IsU0FBQXV1RSxFQUFBSCxTQUdBLEdBQ0ErRyxFQUFBcnpFLEdBQUFxcEUsRUFBQWEseUJBQUFwc0UsR0FBQXdyRSxFQUFBeHJFLEdBQUF3aUMsU0FBQTRxQyxFQUFBRSxNQUVBaHZDLEVBQUEsV0FDQSxPQUFBMnpDLEVBQUFpUyxvQkFBQTUyQixFQUFBdHRELEVBQUFrQyxJQUdBbEMsR0FBQXUxRSxFQUNBL0osRUFBQXhyRSxHQUFBbXVCLElBQUFvOUMsRUFBQUssZUFBQXR0QyxHQUFBd3VDLHFCQTlIQSxLQWdJQXh1QyxLQUlBbXZDLEVBQUF5VyxvQkFBQSxTQUFBNTJCLEVBQUF0dEQsRUFBQWtDLEdBQ0EsR0FBQWxDLEVBQUEsQ0FDQXdyRSxFQUFBeHJFLEdBQUFvaUMsWUFBQWdyQyxFQUFBRyxLQUFBLElBQUFILEVBQUFvQixRQUNBLElBQUEyVixFQUFBM1ksRUFBQXhyRSxFQUFBa0wsWUFBQWtOLEtBQUF1MkQsRUFBQW1WLHVCQUFBLEdBRUFLLEdBQ0EzWSxFQUFBMlksR0FBQS9oRCxZQUFBZ3JDLEVBQUFvQixRQUdBLFFBQUF4dUUsRUFBQXlWLGFBQUEsU0FDQXpWLEVBQUEwVixhQUFBLG9CQWFBLEdBVEE4MUQsRUFBQWxlLEdBQUF2ckIsU0FBQXFyQyxFQUFBb0IsUUFFQSxRQUFBbGhCLEVBQUE3M0MsYUFBQSxTQUNBNjNDLEVBQUE1M0MsYUFBQSxvQkFHQTYxRCxFQUFBWSxPQUFBN2UsR0FDQWtlLEVBQUFsZSxHQUFBdnJCLFNBQUFxckMsRUFBQUcsTUFFQWpnQixFQUFBcGlELFlBQUFzZ0UsRUFBQWxlLEVBQUFwaUQsWUFBQXMzQixTQUFBNHFDLEVBQUFvVSxlQUFBLENBQ0EsSUFBQTRDLEVBQUE1WSxFQUFBbGUsR0FBQTNxQyxRQUFBZ3NELEVBQUFtVCxVQUFBLEdBRUFzQyxHQUNBNVksRUFBQTRZLEdBQUFoc0UsS0FBQXUyRCxFQUFBcVQsaUJBQUFqZ0QsU0FBQXFyQyxFQUFBb0IsUUFHQWxoQixFQUFBNTNDLGFBQUEsb0JBR0F4VCxHQUNBQSxLQUtBMGhGLEVBQUExVixpQkFBQSxTQUFBekIsR0FDQSxPQUFBdGlFLEtBQUF3QyxLQUFBLFdBQ0EsSUFBQWlwRSxFQUFBcEssRUFBQXJoRSxNQUNBOUcsRUFBQXV5RSxFQUFBdnlFLEtBbExBLFVBeUxBLEdBTEFBLElBQ0FBLEVBQUEsSUFBQXVnRixFQUFBejVFLE1BQ0F5ckUsRUFBQXZ5RSxLQXRMQSxTQXNMQUEsSUFHQSxpQkFBQW9wRSxFQUFBLENBQ0EsWUFBQXBwRSxFQUFBb3BFLEdBQ0EsVUFBQXJtRCxVQUFBLG9CQUFBcW1ELEVBQUEsS0FHQXBwRSxFQUFBb3BFLFNBS0F2QixFQUFBMFksRUFBQSxPQUNBbjZFLElBQUEsVUFDQTlJLElBQUEsV0FDQSxNQXZNQSxZQTBNQWlqRixFQXBLQSxHQWdNQSxPQW5CQXBZLEVBQUF4bUUsVUFBQWlwQixHQUFBMEMsRUFBQXc4QyxlQUFBd0IsRUFBQUUsWUFBQSxTQUFBeGdELEdBQ0FBLEVBQUErQixpQkFFQXd6RCxFQUFBMVYsaUJBQUF0dkUsS0FBQTRzRSxFQUFBcmhFLE1BQUEsVUFRQXFoRSxFQUFBM3JFLEdBQUEsSUFBQStqRixFQUFBMVYsaUJBQ0ExQyxFQUFBM3JFLEdBQUEsSUFBQXNyRSxZQUFBeVksRUFFQXBZLEVBQUEzckUsR0FBQSxJQUFBaXZDLFdBQUEsV0FFQSxPQURBMDhCLEVBQUEzckUsR0FBQSxJQUFBbXRFLEVBQ0E0VyxFQUFBMVYsa0JBR0EwVixFQTdPQSxDQThPQy8wQyxJQVNELFNBQUEyOEIsR0FDQSxZQUFBQSxFQUNBLFVBQUFwbEQsVUFBQSxrR0FHQSxJQUFBd3ZCLEVBQUE0MUIsRUFBQTNyRSxHQUFBcU0sT0FBQTZELE1BQUEsUUFBQUEsTUFBQSxLQU9BLEdBQUE2bEMsRUFBQSxHQUxBLEdBS0FBLEVBQUEsR0FKQSxHQUZBLElBTUFBLEVBQUEsSUFKQSxJQUlBQSxFQUFBLElBQUFBLEVBQUEsR0FIQSxHQUdBQSxFQUFBLElBRkEsRUFHQSxVQUFBanlDLE1BQUEsZ0ZBYkEsQ0FlQ2tyQyxHQUVEL2xDLEVBQUF5aUUsT0FDQXppRSxFQUFBaWtFLFFBQ0Fqa0UsRUFBQXdsRSxTQUNBeGxFLEVBQUFxbUUsV0FDQXJtRSxFQUFBOHFFLFdBQ0E5cUUsRUFBQWl0RSxXQUNBanRFLEVBQUFvd0UsUUFDQXB3RSxFQUFBODNFLFVBQ0E5M0UsRUFBQXU3RSxVQUFBakQsRUFDQXQ0RSxFQUFBODZFLE1BQ0E5NkUsRUFBQW8wRSxVQUVBeitFLE9BQUFxQyxlQUFBZ0ksRUFBQSxjQUE4Q2pJLE9BQUEsSUE1eUhlb0osQ0FBQW5CLEVBQW9CbEosRUFBUSxHQUFXQSxFQUFRLG1DQ041R0EsRUFBQXVKLEVBQUFtN0UsR0FBQSxTQUFBdDZFLEdBMkJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSEEsSUFBQXU2RSxFQUFBLG9CQUFBcG1GLFFBQUEsb0JBQUE2RyxTQUNBdy9FLEVBQUEsNkJBQ0FDLEVBQUEsRUFDQXJpRixFQUFBLEVBQWVBLEVBQUFvaUYsRUFBQW5pRixPQUFrQ0QsR0FBQSxFQUNqRCxHQUFBbWlGLEdBQUFHLFVBQUFDLFVBQUF6a0YsUUFBQXNrRixFQUFBcGlGLEtBQUEsR0FDQXFpRixFQUFBLEVBQ0EsTUErQkEsSUFXQUcsRUFYQUwsR0FBQXBtRixPQUFBMEYsUUEzQkEsU0FBQWhFLEdBQ0EsSUFBQThyRSxHQUFBLEVBQ0Esa0JBQ0FBLElBR0FBLEdBQUEsRUFDQXh0RSxPQUFBMEYsUUFBQUMsVUFBQTVDLEtBQUEsV0FDQXlxRSxHQUFBLEVBQ0E5ckUsU0FLQSxTQUFBQSxHQUNBLElBQUFnbEYsR0FBQSxFQUNBLGtCQUNBQSxJQUNBQSxHQUFBLEVBQ0FqK0QsV0FBQSxXQUNBaStELEdBQUEsRUFDQWhsRixLQUNPNGtGLE1BeUJQLFNBQUEvMkUsRUFBQW8zRSxHQUVBLE9BQUFBLEdBQUEsc0JBREEsR0FDQXI2RSxTQUFBN0wsS0FBQWttRixHQVVBLFNBQUFDLEVBQUF6M0IsRUFBQXpqRCxHQUNBLE9BQUF5akQsRUFBQTc0QyxTQUNBLFNBR0EsSUFBQTBWLEVBQUF3TSxpQkFBQTIyQixFQUFBLE1BQ0EsT0FBQXpqRCxFQUFBc2dCLEVBQUF0Z0IsR0FBQXNnQixFQVVBLFNBQUE2NkQsRUFBQTEzQixHQUNBLGVBQUFBLEVBQUE5M0MsU0FDQTgzQyxFQUVBQSxFQUFBcGlELFlBQUFvaUQsRUFBQXZrQixLQVVBLFNBQUFrOEMsRUFBQTMzQixHQUVBLElBQUFBLEVBQ0EsT0FBQXRvRCxTQUFBbW1CLEtBR0EsT0FBQW1pQyxFQUFBOTNDLFVBQ0EsV0FDQSxXQUNBLE9BQUE4M0MsRUFBQXI0QyxjQUFBa1csS0FDQSxnQkFDQSxPQUFBbWlDLEVBQUFuaUMsS0FLQSxJQUFBKzVELEVBQUFILEVBQUF6M0IsR0FDQXJ1QixFQUFBaW1ELEVBQUFqbUQsU0FDQUMsRUFBQWdtRCxFQUFBaG1ELFVBQ0FDLEVBQUErbEQsRUFBQS9sRCxVQUVBLHNCQUFBNXBCLEtBQUEwcEIsRUFBQUUsRUFBQUQsR0FDQW91QixFQUdBMjNCLEVBQUFELEVBQUExM0IsSUFVQSxTQUFBNjNCLEVBQUE3M0IsR0FFQSxJQUFBemYsRUFBQXlmLEtBQUF6ZixhQUNBcjRCLEVBQUFxNEIsS0FBQXI0QixTQUVBLE9BQUFBLEdBQUEsU0FBQUEsR0FBQSxTQUFBQSxHQVVBLG1CQUFBdFYsUUFBQTJ0QyxFQUFBcjRCLFdBQUEsV0FBQXV2RSxFQUFBbDNDLEVBQUEsWUFDQXMzQyxFQUFBdDNDLEdBR0FBLEVBYkF5ZixFQUNBQSxFQUFBcjRDLGNBQUFxQyxnQkFHQXRTLFNBQUFzUyxnQkE0QkEsU0FBQTh0RSxFQUFBN3RFLEdBQ0EsY0FBQUEsRUFBQXJNLFdBQ0FrNkUsRUFBQTd0RSxFQUFBck0sWUFHQXFNLEVBV0EsU0FBQTh0RSxFQUFBQyxFQUFBQyxHQUVBLEtBQUFELEtBQUE3d0UsVUFBQTh3RSxLQUFBOXdFLFVBQ0EsT0FBQXpQLFNBQUFzUyxnQkFJQSxJQUFBZ2pCLEVBQUFnckQsRUFBQXZzRSx3QkFBQXdzRSxHQUFBckssS0FBQXNLLDRCQUNBN3BFLEVBQUEyZSxFQUFBZ3JELEVBQUFDLEVBQ0FyNEUsRUFBQW90QixFQUFBaXJELEVBQUFELEVBR0FubkMsRUFBQW41QyxTQUFBaW9ELGNBQ0E5TyxFQUFBK08sU0FBQXZ4QyxFQUFBLEdBQ0F3aUMsRUFBQWtQLE9BQUFuZ0QsRUFBQSxHQUNBLElBL0NBb2dELEVBQ0E5M0MsRUE4Q0Fpd0UsRUFBQXRuQyxFQUFBc25DLHdCQUlBLEdBQUFILElBQUFHLEdBQUFGLElBQUFFLEdBQUE5cEUsRUFBQTNLLFNBQUE5RCxHQUNBLE1BakRBLFVBRkFzSSxHQURBODNDLEVBb0RBbTRCLEdBbkRBandFLFdBS0EsU0FBQUEsR0FBQTJ2RSxFQUFBNzNCLEVBQUEvaUIscUJBQUEraUIsRUFrREE2M0IsRUFBQU0sR0FIQUEsRUFPQSxJQUFBQyxFQUFBTixFQUFBRSxHQUNBLE9BQUFJLEVBQUEzOEMsS0FDQXM4QyxFQUFBSyxFQUFBMzhDLEtBQUF3OEMsR0FFQUYsRUFBQUMsRUFBQUYsRUFBQUcsR0FBQXg4QyxNQVlBLFNBQUE0OEMsRUFBQXI0QixHQUNBLElBRUFzNEIsRUFBQSxTQUZBLzRFLFVBQUF4SyxPQUFBLFFBQUFGLElBQUEwSyxVQUFBLEdBQUFBLFVBQUEsVUFFQSx5QkFDQTJJLEVBQUE4M0MsRUFBQTkzQyxTQUVBLFlBQUFBLEdBQUEsU0FBQUEsRUFBQSxDQUNBLElBQUF3ZixFQUFBczRCLEVBQUFyNEMsY0FBQXFDLGdCQUVBLE9BREFnMkMsRUFBQXI0QyxjQUFBNHdFLGtCQUFBN3dELEdBQ0E0d0QsR0FHQSxPQUFBdDRCLEVBQUFzNEIsR0FtQ0EsU0FBQUUsRUFBQXJzRCxFQUFBc3NELEdBQ0EsSUFBQUMsRUFBQSxNQUFBRCxFQUFBLGFBQ0FFLEVBQUEsU0FBQUQsRUFBQSxpQkFFQSxPQUFBejNFLFdBQUFrckIsRUFBQSxTQUFBdXNELEVBQUEsYUFBQXozRSxXQUFBa3JCLEVBQUEsU0FBQXdzRCxFQUFBLGFBU0EsSUFBQUMsT0FBQS9qRixFQUVBZ2tGLEVBQUEsV0FJQSxZQUhBaGtGLElBQUErakYsSUFDQUEsR0FBQSxJQUFBeEIsVUFBQTBCLFdBQUFsbUYsUUFBQSxZQUVBZ21GLEdBR0EsU0FBQUcsRUFBQU4sRUFBQTU2RCxFQUFBNkosRUFBQXN4RCxHQUNBLE9BQUF2NEUsS0FBQXNyQixJQUFBbE8sRUFBQSxTQUFBNDZELEdBQUE1NkQsRUFBQSxTQUFBNDZELEdBQUEvd0QsRUFBQSxTQUFBK3dELEdBQUEvd0QsRUFBQSxTQUFBK3dELEdBQUEvd0QsRUFBQSxTQUFBK3dELEdBQUFJLElBQUFueEQsRUFBQSxTQUFBK3dELEdBQUFPLEVBQUEscUJBQUFQLEVBQUEsZUFBQU8sRUFBQSxxQkFBQVAsRUFBQSxzQkFHQSxTQUFBUSxJQUNBLElBQUFwN0QsRUFBQW5tQixTQUFBbW1CLEtBQ0E2SixFQUFBaHdCLFNBQUFzUyxnQkFDQWd2RSxFQUFBSCxLQUFBeHZELGlCQUFBM0IsR0FFQSxPQUNBcUksT0FBQWdwRCxFQUFBLFNBQUFsN0QsRUFBQTZKLEVBQUFzeEQsR0FDQXh2RCxNQUFBdXZELEVBQUEsUUFBQWw3RCxFQUFBNkosRUFBQXN4RCxJQUlBLElBQUFFLEVBQUEsU0FBQUMsRUFBQXRiLEdBQ0EsS0FBQXNiLGFBQUF0YixHQUNBLFVBQUEva0QsVUFBQSxzQ0FJQXNnRSxFQUFBLFdBQ0EsU0FBQUMsRUFBQW41RSxFQUFBNmpCLEdBQ0EsUUFBQWp2QixFQUFBLEVBQW1CQSxFQUFBaXZCLEVBQUFodkIsT0FBa0JELElBQUEsQ0FDckMsSUFBQTZvRSxFQUFBNTVDLEVBQUFqdkIsR0FDQTZvRSxFQUFBdnFFLFdBQUF1cUUsRUFBQXZxRSxhQUFBLEVBQ0F1cUUsRUFBQXhxRSxjQUFBLEVBQ0EsVUFBQXdxRSxNQUFBcDZDLFVBQUEsR0FDQXB5QixPQUFBcUMsZUFBQTBNLEVBQUF5OUQsRUFBQXhoRSxJQUFBd2hFLElBSUEsZ0JBQUFFLEVBQUFDLEVBQUFDLEdBR0EsT0FGQUQsR0FBQXViLEVBQUF4YixFQUFBenNFLFVBQUEwc0UsR0FDQUMsR0FBQXNiLEVBQUF4YixFQUFBRSxHQUNBRixHQWRBLEdBc0JBcnFFLEVBQUEsU0FBQWtMLEVBQUF2QyxFQUFBNUksR0FZQSxPQVhBNEksS0FBQXVDLEVBQ0F2TixPQUFBcUMsZUFBQWtMLEVBQUF2QyxFQUFBLENBQ0E1SSxRQUNBSCxZQUFBLEVBQ0FELGNBQUEsRUFDQW93QixVQUFBLElBR0E3a0IsRUFBQXZDLEdBQUE1SSxFQUdBbUwsR0FHQXMvRCxFQUFBN3NFLE9BQUF5d0MsUUFBQSxTQUFBMWhDLEdBQ0EsUUFBQXBMLEVBQUEsRUFBaUJBLEVBQUF5SyxVQUFBeEssT0FBc0JELElBQUEsQ0FDdkMsSUFBQXluQixFQUFBaGQsVUFBQXpLLEdBRUEsUUFBQXFILEtBQUFvZ0IsRUFDQXByQixPQUFBQyxVQUFBQyxlQUFBQyxLQUFBaXJCLEVBQUFwZ0IsS0FDQStELEVBQUEvRCxHQUFBb2dCLEVBQUFwZ0IsSUFLQSxPQUFBK0QsR0FVQSxTQUFBbzVFLEVBQUFwTyxHQUNBLE9BQUFsTixFQUFBLEdBQW9Ca04sRUFBQSxDQUNwQjhELE1BQUE5RCxFQUFBdDlDLEtBQUFzOUMsRUFBQTFoRCxNQUNBK3ZELE9BQUFyTyxFQUFBN2dFLElBQUE2Z0UsRUFBQW43QyxTQVdBLFNBQUFwQyxFQUFBcXlCLEdBQ0EsSUFBQS9mLEVBQUEsR0FLQSxHQUFBNDRDLElBQ0EsSUFDQTU0QyxFQUFBK2YsRUFBQXJ5Qix3QkFDQSxJQUFBa0IsRUFBQXdwRCxFQUFBcjRCLEVBQUEsT0FDQWx4QixFQUFBdXBELEVBQUFyNEIsRUFBQSxRQUNBL2YsRUFBQTUxQixLQUFBd2tCLEVBQ0FvUixFQUFBclMsTUFBQWtCLEVBQ0FtUixFQUFBczVDLFFBQUExcUQsRUFDQW9SLEVBQUErdUMsT0FBQWxnRCxFQUNLLE1BQUFoN0IsU0FFTG1zQyxFQUFBK2YsRUFBQXJ5Qix3QkFHQSxJQUFBejFCLEVBQUEsQ0FDQTAxQixLQUFBcVMsRUFBQXJTLEtBQ0F2akIsSUFBQTQxQixFQUFBNTFCLElBQ0FtZixNQUFBeVcsRUFBQSt1QyxNQUFBL3VDLEVBQUFyUyxLQUNBbUMsT0FBQWtRLEVBQUFzNUMsT0FBQXQ1QyxFQUFBNTFCLEtBSUFtdkUsRUFBQSxTQUFBeDVCLEVBQUE5M0MsU0FBQSt3RSxJQUFBLEdBQ0F6dkQsRUFBQWd3RCxFQUFBaHdELE9BQUF3MkIsRUFBQTB2QixhQUFBeDNFLEVBQUE4MkUsTUFBQTkyRSxFQUFBMDFCLEtBQ0FtQyxFQUFBeXBELEVBQUF6cEQsUUFBQWl3QixFQUFBNnVCLGNBQUEzMkUsRUFBQXFoRixPQUFBcmhGLEVBQUFtUyxJQUVBb3ZFLEVBQUF6NUIsRUFBQTNpQixZQUFBN1QsRUFDQWt3RCxFQUFBMTVCLEVBQUExaUIsYUFBQXZOLEVBSUEsR0FBQTBwRCxHQUFBQyxFQUFBLENBQ0EsSUFBQXZ0RCxFQUFBc3JELEVBQUF6M0IsR0FDQXk1QixHQUFBakIsRUFBQXJzRCxFQUFBLEtBQ0F1dEQsR0FBQWxCLEVBQUFyc0QsRUFBQSxLQUVBajBCLEVBQUFzeEIsT0FBQWl3RCxFQUNBdmhGLEVBQUE2M0IsUUFBQTJwRCxFQUdBLE9BQUFKLEVBQUFwaEYsR0FHQSxTQUFBeWhGLEVBQUE3bUYsRUFBQXFHLEdBQ0EsSUFBQXkvRSxFQUFBQyxJQUNBZSxFQUFBLFNBQUF6Z0YsRUFBQStPLFNBQ0EyeEUsRUFBQWxzRCxFQUFBNzZCLEdBQ0FnbkYsRUFBQW5zRCxFQUFBeDBCLEdBQ0E0Z0YsRUFBQXBDLEVBQUE3a0YsR0FFQXE1QixFQUFBc3JELEVBQUF0K0UsR0FDQTZnRixFQUFBLzRFLFdBQUFrckIsRUFBQTZ0RCxlQUFBLElBQ0FDLEVBQUFoNUUsV0FBQWtyQixFQUFBOHRELGdCQUFBLElBRUEvTyxFQUFBb08sRUFBQSxDQUNBanZFLElBQUF3dkUsRUFBQXh2RSxJQUFBeXZFLEVBQUF6dkUsSUFBQTJ2RSxFQUNBcHNELEtBQUFpc0QsRUFBQWpzRCxLQUFBa3NELEVBQUFsc0QsS0FBQXFzRCxFQUNBendELE1BQUFxd0QsRUFBQXJ3RCxNQUNBdUcsT0FBQThwRCxFQUFBOXBELFNBU0EsR0FQQW03QyxFQUFBZ1AsVUFBQSxFQUNBaFAsRUFBQTVnRCxXQUFBLEdBTUFzdUQsR0FBQWdCLEVBQUEsQ0FDQSxJQUFBTSxFQUFBajVFLFdBQUFrckIsRUFBQSt0RCxVQUFBLElBQ0E1dkQsRUFBQXJwQixXQUFBa3JCLEVBQUE3QixXQUFBLElBRUE0Z0QsRUFBQTdnRSxLQUFBMnZFLEVBQUFFLEVBQ0FoUCxFQUFBcU8sUUFBQVMsRUFBQUUsRUFDQWhQLEVBQUF0OUMsTUFBQXFzRCxFQUFBM3ZELEVBQ0E0Z0QsRUFBQThELE9BQUFpTCxFQUFBM3ZELEVBR0E0Z0QsRUFBQWdQLFlBQ0FoUCxFQUFBNWdELGFBT0EsT0FKQXN1RCxFQUFBei9FLEVBQUF1SyxTQUFBcTJFLEdBQUE1Z0YsSUFBQTRnRixHQUFBLFNBQUFBLEVBQUE3eEUsWUFDQWdqRSxFQWxPQSxTQUFBanJDLEVBQUErZixHQUNBLElBQUFsMEIsRUFBQXZzQixVQUFBeEssT0FBQSxRQUFBRixJQUFBMEssVUFBQSxJQUFBQSxVQUFBLEdBRUFzdkIsRUFBQXdwRCxFQUFBcjRCLEVBQUEsT0FDQWx4QixFQUFBdXBELEVBQUFyNEIsRUFBQSxRQUNBbTZCLEVBQUFydUQsR0FBQSxJQUtBLE9BSkFtVSxFQUFBNTFCLEtBQUF3a0IsRUFBQXNyRCxFQUNBbDZDLEVBQUFzNUMsUUFBQTFxRCxFQUFBc3JELEVBQ0FsNkMsRUFBQXJTLE1BQUFrQixFQUFBcXJELEVBQ0FsNkMsRUFBQSt1QyxPQUFBbGdELEVBQUFxckQsRUFDQWw2QyxFQXdOQW02QyxDQUFBbFAsRUFBQS94RSxJQUdBK3hFLEVBbURBLFNBQUFtUCxFQUFBQyxFQUFBQyxFQUFBenNELEVBQUF3OUMsR0FFQSxJQUFBa1AsRUFBQSxDQUFvQm53RSxJQUFBLEVBQUF1akIsS0FBQSxHQUNwQjJTLEVBQUF3M0MsRUFBQXVDLEVBQUFDLEdBR0EsZ0JBQUFqUCxFQUNBa1AsRUF2REEsU0FBQXg2QixHQUNBLElBQUF0NEIsRUFBQXM0QixFQUFBcjRDLGNBQUFxQyxnQkFDQXl3RSxFQUFBZCxFQUFBMzVCLEVBQUF0NEIsR0FDQThCLEVBQUEvb0IsS0FBQXNyQixJQUFBckUsRUFBQWdvRCxZQUFBNytFLE9BQUFvK0UsWUFBQSxHQUNBbC9DLEVBQUF0dkIsS0FBQXNyQixJQUFBckUsRUFBQW1uRCxhQUFBaCtFLE9BQUFnbEYsYUFBQSxHQUVBaG5ELEVBQUF3cEQsRUFBQTN3RCxHQUNBb0gsRUFBQXVwRCxFQUFBM3dELEVBQUEsUUFTQSxPQUFBNHhELEVBUEEsQ0FDQWp2RSxJQUFBd2tCLEVBQUE0ckQsRUFBQXB3RSxJQUFBb3dFLEVBQUFQLFVBQ0F0c0QsS0FBQWtCLEVBQUEyckQsRUFBQTdzRCxLQUFBNnNELEVBQUFud0QsV0FDQWQsUUFDQXVHLFdBMENBMnFELENBQUFuNkMsT0FDRyxDQUVILElBQUFvNkMsT0FBQSxFQUNBLGlCQUFBclAsRUFFQSxVQURBcVAsRUFBQWhELEVBQUFELEVBQUE2QyxLQUNBcnlFLFdBQ0F5eUUsRUFBQUwsRUFBQTN5RSxjQUFBcUMsaUJBR0Eyd0UsRUFESyxXQUFBclAsRUFDTGdQLEVBQUEzeUUsY0FBQXFDLGdCQUVBc2hFLEVBR0EsSUFBQUosRUFBQXlPLEVBQUFnQixFQUFBcDZDLEdBR0EsWUFBQW82QyxFQUFBenlFLFVBOUNBLFNBQUEweUUsRUFBQTU2QixHQUNBLElBQUE5M0MsRUFBQTgzQyxFQUFBOTNDLFNBQ0EsZUFBQUEsR0FBQSxTQUFBQSxJQUdBLFVBQUF1dkUsRUFBQXozQixFQUFBLGFBR0E0NkIsRUFBQWxELEVBQUExM0IsS0FzQ0E0NkIsQ0FBQXI2QyxHQVdBaTZDLEVBQUF0UCxNQVhBLENBQ0EsSUFBQTJQLEVBQUE1QixJQUNBbHBELEVBQUE4cUQsRUFBQTlxRCxPQUNBdkcsRUFBQXF4RCxFQUFBcnhELE1BRUFneEQsRUFBQW53RSxLQUFBNmdFLEVBQUE3Z0UsSUFBQTZnRSxFQUFBZ1AsVUFDQU0sRUFBQWpCLE9BQUF4cEQsRUFBQW03QyxFQUFBN2dFLElBQ0Ftd0UsRUFBQTVzRCxNQUFBczlDLEVBQUF0OUMsS0FBQXM5QyxFQUFBNWdELFdBQ0Frd0QsRUFBQXhMLE1BQUF4bEQsRUFBQTBoRCxFQUFBdDlDLE1BYUEsT0FMQTRzRCxFQUFBNXNELE1BQUFFLEVBQ0Ewc0QsRUFBQW53RSxLQUFBeWpCLEVBQ0Ewc0QsRUFBQXhMLE9BQUFsaEQsRUFDQTBzRCxFQUFBakIsUUFBQXpyRCxFQUVBMHNELEVBbUJBLFNBQUFNLEVBQUE5UCxFQUFBK1AsRUFBQVQsRUFBQUMsRUFBQWpQLEdBQ0EsSUFBQXg5QyxFQUFBdnVCLFVBQUF4SyxPQUFBLFFBQUFGLElBQUEwSyxVQUFBLEdBQUFBLFVBQUEsS0FFQSxRQUFBeXJFLEVBQUFwNEUsUUFBQSxRQUNBLE9BQUFvNEUsRUFHQSxJQUFBd1AsRUFBQUgsRUFBQUMsRUFBQUMsRUFBQXpzRCxFQUFBdzlDLEdBRUEwUCxFQUFBLENBQ0Ezd0UsSUFBQSxDQUNBbWYsTUFBQWd4RCxFQUFBaHhELE1BQ0F1RyxPQUFBZ3JELEVBQUExd0UsSUFBQW13RSxFQUFBbndFLEtBRUEya0UsTUFBQSxDQUNBeGxELE1BQUFneEQsRUFBQXhMLE1BQUErTCxFQUFBL0wsTUFDQWovQyxPQUFBeXFELEVBQUF6cUQsUUFFQXdwRCxPQUFBLENBQ0EvdkQsTUFBQWd4RCxFQUFBaHhELE1BQ0F1RyxPQUFBeXFELEVBQUFqQixPQUFBd0IsRUFBQXhCLFFBRUEzckQsS0FBQSxDQUNBcEUsTUFBQXV4RCxFQUFBbnRELEtBQUE0c0QsRUFBQTVzRCxLQUNBbUMsT0FBQXlxRCxFQUFBenFELFNBSUFrckQsRUFBQTlwRixPQUFBcUosS0FBQXdnRixHQUFBbmlGLElBQUEsU0FBQXNELEdBQ0EsT0FBQTZoRSxFQUFBLENBQ0E3aEUsT0FDSzYrRSxFQUFBNytFLEdBQUEsQ0FDTG9vRCxNQWhEQTIyQixFQWdEQUYsRUFBQTcrRSxHQS9DQSsrRSxFQUFBMXhELE1BQ0EweEQsRUFBQW5yRCxVQUZBLElBQUFtckQsSUFrREdyN0UsS0FBQSxTQUFBdkcsRUFBQUMsR0FDSCxPQUFBQSxFQUFBZ3JELEtBQUFqckQsRUFBQWlyRCxPQUdBNDJCLEVBQUFGLEVBQUFyd0UsT0FBQSxTQUFBd3dFLEdBQ0EsSUFBQTV4RCxFQUFBNHhELEVBQUE1eEQsTUFDQXVHLEVBQUFxckQsRUFBQXJyRCxPQUNBLE9BQUF2RyxHQUFBOHdELEVBQUE1SyxhQUFBMy9DLEdBQUF1cUQsRUFBQXpMLGVBR0F3TSxFQUFBRixFQUFBcG1GLE9BQUEsRUFBQW9tRixFQUFBLEdBQUFoL0UsSUFBQTgrRSxFQUFBLEdBQUE5K0UsSUFFQW0vRSxFQUFBdFEsRUFBQXZvRSxNQUFBLFFBRUEsT0FBQTQ0RSxHQUFBQyxFQUFBLElBQUFBLEVBQUEsSUFZQSxTQUFBQyxFQUFBM2pFLEVBQUEwaUUsRUFBQUMsR0FFQSxPQUFBWixFQUFBWSxFQURBeEMsRUFBQXVDLEVBQUFDLElBV0EsU0FBQWlCLEVBQUF4N0IsR0FDQSxJQUFBN3pCLEVBQUE5QyxpQkFBQTIyQixHQUNBcGQsRUFBQTNoQyxXQUFBa3JCLEVBQUErdEQsV0FBQWo1RSxXQUFBa3JCLEVBQUFzdkQsY0FDQTU0QyxFQUFBNWhDLFdBQUFrckIsRUFBQTdCLFlBQUFycEIsV0FBQWtyQixFQUFBM0IsYUFLQSxNQUpBLENBQ0FoQixNQUFBdzJCLEVBQUEzaUIsWUFBQXdGLEVBQ0E5UyxPQUFBaXdCLEVBQUExaUIsYUFBQXNGLEdBWUEsU0FBQTg0QyxFQUFBMVEsR0FDQSxJQUFBNzdELEVBQUEsQ0FBY3llLEtBQUEsUUFBQW9oRCxNQUFBLE9BQUF1SyxPQUFBLE1BQUFsdkUsSUFBQSxVQUNkLE9BQUEyZ0UsRUFBQXJxRSxRQUFBLGtDQUFBZ08sR0FDQSxPQUFBUSxFQUFBUixLQWNBLFNBQUFndEUsRUFBQXJCLEVBQUFzQixFQUFBNVEsR0FDQUEsSUFBQXZvRSxNQUFBLFFBR0EsSUFBQW81RSxFQUFBTCxFQUFBbEIsR0FHQXdCLEVBQUEsQ0FDQXR5RCxNQUFBcXlELEVBQUFyeUQsTUFDQXVHLE9BQUE4ckQsRUFBQTlyRCxRQUlBZ3NELEdBQUEscUJBQUFucEYsUUFBQW80RSxHQUNBZ1IsRUFBQUQsRUFBQSxhQUNBRSxFQUFBRixFQUFBLGFBQ0FHLEVBQUFILEVBQUEsaUJBQ0FJLEVBQUFKLEVBQUEsaUJBU0EsT0FQQUQsRUFBQUUsR0FBQUosRUFBQUksR0FBQUosRUFBQU0sR0FBQSxFQUFBTCxFQUFBSyxHQUFBLEVBRUFKLEVBQUFHLEdBREFqUixJQUFBaVIsRUFDQUwsRUFBQUssR0FBQUosRUFBQU0sR0FFQVAsRUFBQUYsRUFBQU8sSUFHQUgsRUFZQSxTQUFBaHhFLEVBQUEvTixFQUFBekgsR0FFQSxPQUFBZ0wsTUFBQWxQLFVBQUEwWixLQUNBL04sRUFBQStOLEtBQUF4VixHQUlBeUgsRUFBQTZOLE9BQUF0VixHQUFBLEdBcUNBLFNBQUE4bUYsRUFBQWhSLEVBQUFyMUUsRUFBQXNtRixHQW9CQSxZQW5CQXhuRixJQUFBd25GLEVBQUFqUixJQUFBeHlFLE1BQUEsRUExQkEsU0FBQW1FLEVBQUFtZSxFQUFBM25CLEdBRUEsR0FBQStNLE1BQUFsUCxVQUFBa3JGLFVBQ0EsT0FBQXYvRSxFQUFBdS9FLFVBQUEsU0FBQWp6RSxHQUNBLE9BQUFBLEVBQUE2UixLQUFBM25CLElBS0EsSUFBQWdVLEVBQUF1RCxFQUFBL04sRUFBQSxTQUFBMkIsR0FDQSxPQUFBQSxFQUFBd2MsS0FBQTNuQixJQUVBLE9BQUF3SixFQUFBbkssUUFBQTJVLEdBY0ErMEUsQ0FBQWxSLEVBQUEsT0FBQWlSLEtBRUE1aEYsUUFBQSxTQUFBMC9FLEdBQ0FBLEVBQUEsVUFFQXBuRixRQUFBQyxLQUFBLHlEQUVBLElBQUFULEVBQUE0bkYsRUFBQSxVQUFBQSxFQUFBNW5GLEdBQ0E0bkYsRUFBQXhxRSxTQUFBdlAsRUFBQTdOLEtBSUF3RCxFQUFBbTFFLFFBQUFvUCxPQUFBaEIsRUFBQXZqRixFQUFBbTFFLFFBQUFvUCxRQUNBdmtGLEVBQUFtMUUsUUFBQXFQLFVBQUFqQixFQUFBdmpGLEVBQUFtMUUsUUFBQXFQLFdBRUF4a0YsRUFBQXhELEVBQUF3RCxFQUFBb2tGLE1BSUFwa0YsRUEyREEsU0FBQXdtRixFQUFBblIsRUFBQW9SLEdBQ0EsT0FBQXBSLEVBQUFxUixLQUFBLFNBQUF2QixHQUNBLElBQUFob0YsRUFBQWdvRixFQUFBaG9GLEtBRUEsT0FEQWdvRixFQUFBdnJFLFNBQ0F6YyxJQUFBc3BGLElBV0EsU0FBQUUsRUFBQW5nRixHQUlBLElBSEEsSUFBQW9nRixFQUFBLDZCQUNBQyxFQUFBcmdGLEVBQUE0bkQsT0FBQSxHQUFBM2xELGNBQUFqQyxFQUFBM0QsTUFBQSxHQUVBOUQsRUFBQSxFQUFpQkEsRUFBQTZuRixFQUFBNW5GLE9BQUEsRUFBeUJELElBQUEsQ0FDMUMsSUFBQWs1QixFQUFBMnVELEVBQUE3bkYsR0FDQStuRixFQUFBN3VELEVBQUEsR0FBQUEsRUFBQTR1RCxFQUFBcmdGLEVBQ0EsWUFBQTdFLFNBQUFtbUIsS0FBQWxCLE1BQUFrZ0UsR0FDQSxPQUFBQSxFQUdBLFlBbUNBLFNBQUFDLEVBQUE5OEIsR0FDQSxJQUFBcjRDLEVBQUFxNEMsRUFBQXI0QyxjQUNBLE9BQUFBLElBQUF5QyxZQUFBdlosT0FvQkEsU0FBQWtzRixFQUFBeEMsRUFBQW5pRixFQUFBd2YsRUFBQW9sRSxHQUVBcGxFLEVBQUFvbEUsY0FDQUYsRUFBQXZDLEdBQUFqd0UsaUJBQUEsU0FBQXNOLEVBQUFvbEUsWUFBQSxDQUFzRUMsU0FBQSxJQUd0RSxJQUFBQyxFQUFBdkYsRUFBQTRDLEdBS0EsT0E1QkEsU0FBQTRDLEVBQUFwRCxFQUFBaDVELEVBQUFuc0IsRUFBQXdvRixHQUNBLElBQUFDLEVBQUEsU0FBQXRELEVBQUE3eEUsU0FDQWhJLEVBQUFtOUUsRUFBQXRELEVBQUFweUUsY0FBQXlDLFlBQUEydkUsRUFDQTc1RSxFQUFBb0ssaUJBQUF5VyxFQUFBbnNCLEVBQUEsQ0FBNENxb0YsU0FBQSxJQUU1Q0ksR0FDQUYsRUFBQXhGLEVBQUF6M0UsRUFBQXRDLFlBQUFtakIsRUFBQW5zQixFQUFBd29GLEdBRUFBLEVBQUF2cUYsS0FBQXFOLEdBZ0JBaTlFLENBQUFELEVBQUEsU0FBQXRsRSxFQUFBb2xFLFlBQUFwbEUsRUFBQXdsRSxlQUNBeGxFLEVBQUFzbEUsZ0JBQ0F0bEUsRUFBQTBsRSxlQUFBLEVBRUExbEUsRUE2Q0EsU0FBQTJsRSxJQXhCQSxJQUFBaEQsRUFBQTNpRSxFQXlCQS9hLEtBQUErYSxNQUFBMGxFLGdCQUNBMWdCLHFCQUFBLy9ELEtBQUFndUUsZ0JBQ0FodUUsS0FBQSthLE9BM0JBMmlFLEVBMkJBMTlFLEtBQUEwOUUsVUEzQkEzaUUsRUEyQkEvYSxLQUFBK2EsTUF6QkFrbEUsRUFBQXZDLEdBQUFsZ0Usb0JBQUEsU0FBQXpDLEVBQUFvbEUsYUFHQXBsRSxFQUFBd2xFLGNBQUEzaUYsUUFBQSxTQUFBeUYsR0FDQUEsRUFBQW1hLG9CQUFBLFNBQUF6QyxFQUFBb2xFLGVBSUFwbEUsRUFBQW9sRSxZQUFBLEtBQ0FwbEUsRUFBQXdsRSxjQUFBLEdBQ0F4bEUsRUFBQXNsRSxjQUFBLEtBQ0F0bEUsRUFBQTBsRSxlQUFBLEVBQ0ExbEUsSUF3QkEsU0FBQTdXLEVBQUExRSxHQUNBLFdBQUFBLElBQUEyRSxNQUFBQyxXQUFBNUUsS0FBQW94QixTQUFBcHhCLEdBV0EsU0FBQW1oRixFQUFBeDlCLEVBQUE3ekIsR0FDQWg3QixPQUFBcUosS0FBQTJ4QixHQUFBMXhCLFFBQUEsU0FBQXlnQixHQUNBLElBQUFzQyxFQUFBLElBRUEscURBQUE1cUIsUUFBQXNvQixJQUFBbmEsRUFBQW9yQixFQUFBalIsTUFDQXNDLEVBQUEsTUFFQXdpQyxFQUFBcmpDLE1BQUF6QixHQUFBaVIsRUFBQWpSLEdBQUFzQyxJQXVMQSxTQUFBaWdFLEVBQUFyUyxFQUFBc1MsRUFBQUMsR0FDQSxJQUFBQyxFQUFBOXlFLEVBQUFzZ0UsRUFBQSxTQUFBOFAsR0FFQSxPQURBQSxFQUFBaG9GLE9BQ0F3cUYsSUFHQUcsSUFBQUQsR0FBQXhTLEVBQUFxUixLQUFBLFNBQUF0QyxHQUNBLE9BQUFBLEVBQUFqbkYsT0FBQXlxRixHQUFBeEQsRUFBQXhxRSxTQUFBd3FFLEVBQUFudEQsTUFBQTR3RCxFQUFBNXdELFFBR0EsSUFBQTZ3RCxFQUFBLENBQ0EsSUFBQUMsRUFBQSxJQUFBSixFQUFBLElBQ0FLLEVBQUEsSUFBQUosRUFBQSxJQUNBNXFGLFFBQUFDLEtBQUErcUYsRUFBQSw0QkFBQUQsRUFBQSw0REFBQUEsRUFBQSxLQUVBLE9BQUFELEVBb0lBLElBQUFHLEVBQUEsbUtBR0FDLEVBQUFELEVBQUFwbEYsTUFBQSxHQVlBLFNBQUFzbEYsRUFBQWxULEdBQ0EsSUFBQW1ULEVBQUE1K0UsVUFBQXhLLE9BQUEsUUFBQUYsSUFBQTBLLFVBQUEsSUFBQUEsVUFBQSxHQUVBK1YsRUFBQTJvRSxFQUFBcnJGLFFBQUFvNEUsR0FDQWp1RSxFQUFBa2hGLEVBQUFybEYsTUFBQTBjLEVBQUEsR0FBQWxjLE9BQUE2a0YsRUFBQXJsRixNQUFBLEVBQUEwYyxJQUNBLE9BQUE2b0UsRUFBQXBoRixFQUFBaVosVUFBQWpaLEVBR0EsSUFBQXFoRixFQUFBLENBQ0FDLEtBQUEsT0FDQUMsVUFBQSxZQUNBQyxpQkFBQSxvQkEwTEEsU0FBQUMsRUFBQWovQyxFQUFBdThDLEVBQUFGLEVBQUE2QyxHQUNBLElBQUF2VCxFQUFBLE1BS0F3VCxHQUFBLHFCQUFBOXJGLFFBQUE2ckYsR0FJQUUsRUFBQXAvQyxFQUFBOThCLE1BQUEsV0FBQTVKLElBQUEsU0FBQStsRixHQUNBLE9BQUFBLEVBQUFwOUUsU0FLQXE5RSxFQUFBRixFQUFBL3JGLFFBQUFrWSxFQUFBNnpFLEVBQUEsU0FBQUMsR0FDQSxXQUFBQSxFQUFBOXRDLE9BQUEsV0FHQTZ0QyxFQUFBRSxLQUFBLElBQUFGLEVBQUFFLEdBQUFqc0YsUUFBQSxNQUNBRyxRQUFBQyxLQUFBLGdGQUtBLElBQUE4ckYsRUFBQSxjQUNBQyxHQUFBLElBQUFGLEVBQUEsQ0FBQUYsRUFBQS9sRixNQUFBLEVBQUFpbUYsR0FBQXpsRixPQUFBLENBQUF1bEYsRUFBQUUsR0FBQXA4RSxNQUFBcThFLEdBQUEsTUFBQUgsRUFBQUUsR0FBQXA4RSxNQUFBcThFLEdBQUEsSUFBQTFsRixPQUFBdWxGLEVBQUEvbEYsTUFBQWltRixFQUFBLE1BQUFGLEdBcUNBLE9BbENBSSxJQUFBbG1GLElBQUEsU0FBQW1tRixFQUFBMXBFLEdBRUEsSUFBQTRtRSxHQUFBLElBQUE1bUUsR0FBQW9wRSxLQUFBLGlCQUNBTyxHQUFBLEVBQ0EsT0FBQUQsRUFHQUUsT0FBQSxTQUFBNWxGLEVBQUFDLEdBQ0EsV0FBQUQsSUFBQXZFLE9BQUEsbUJBQUFuQyxRQUFBMkcsSUFDQUQsSUFBQXZFLE9BQUEsR0FBQXdFLEVBQ0EwbEYsR0FBQSxFQUNBM2xGLEdBQ08ybEYsR0FDUDNsRixJQUFBdkUsT0FBQSxJQUFBd0UsRUFDQTBsRixHQUFBLEVBQ0EzbEYsR0FFQUEsRUFBQUYsT0FBQUcsSUFFSyxJQUVMVixJQUFBLFNBQUFzbUYsR0FDQSxPQXhHQSxTQUFBQSxFQUFBakQsRUFBQUosRUFBQUYsR0FFQSxJQUFBbjVFLEVBQUEwOEUsRUFBQTUzRSxNQUFBLDZCQUNBaFUsR0FBQWtQLEVBQUEsR0FDQSthLEVBQUEvYSxFQUFBLEdBR0EsSUFBQWxQLEVBQ0EsT0FBQTRyRixFQUdBLE9BQUEzaEUsRUFBQTVxQixRQUFBLE1BQ0EsSUFBQW90RCxPQUFBLEVBQ0EsT0FBQXhpQyxHQUNBLFNBQ0F3aUMsRUFBQTg3QixFQUNBLE1BQ0EsUUFDQSxTQUNBLFFBQ0E5N0IsRUFBQTQ3QixFQUlBLE9BREF0QyxFQUFBdDVCLEdBQ0FrOEIsR0FBQSxJQUFBM29GLEVBQ0csVUFBQWlxQixHQUFBLE9BQUFBLEVBUUgsT0FMQSxPQUFBQSxFQUNBL2MsS0FBQXNyQixJQUFBcjBCLFNBQUFzUyxnQkFBQTZrRSxhQUFBaCtFLE9BQUFnbEYsYUFBQSxHQUVBcDFFLEtBQUFzckIsSUFBQXIwQixTQUFBc1MsZ0JBQUEwbEUsWUFBQTcrRSxPQUFBbytFLFlBQUEsSUFFQSxJQUFBMTdFLEVBSUEsT0FBQUEsRUFtRUE2ckYsQ0FBQUQsRUFBQWpELEVBQUFKLEVBQUFGLFFBS0FuaEYsUUFBQSxTQUFBdWtGLEVBQUExcEUsR0FDQTBwRSxFQUFBdmtGLFFBQUEsU0FBQW1rRixFQUFBUyxHQUNBdCtFLEVBQUE2OUUsS0FDQTFULEVBQUE1MUQsSUFBQXNwRSxHQUFBLE1BQUFJLEVBQUFLLEVBQUEsY0FJQW5VLEVBdU5BLElBa1ZBb1UsRUFBQSxDQUtBdFUsVUFBQSxTQU1Bc1MsZUFBQSxFQU9BaUMsaUJBQUEsRUFRQXBOLFNBQUEsYUFVQUcsU0FBQSxhQU9BbEgsVUE3WEEsQ0FTQXhpRSxNQUFBLENBRUFva0IsTUFBQSxJQUVBcmQsU0FBQSxFQUVBcGQsR0E5SEEsU0FBQXdELEdBQ0EsSUFBQWkxRSxFQUFBajFFLEVBQUFpMUUsVUFDQXlULEVBQUF6VCxFQUFBdm9FLE1BQUEsUUFDQSs4RSxFQUFBeFUsRUFBQXZvRSxNQUFBLFFBR0EsR0FBQSs4RSxFQUFBLENBQ0EsSUFBQUMsRUFBQTFwRixFQUFBbTFFLFFBQ0FxUCxFQUFBa0YsRUFBQWxGLFVBQ0FELEVBQUFtRixFQUFBbkYsT0FFQW9GLEdBQUEscUJBQUE5c0YsUUFBQTZyRixHQUNBa0IsRUFBQUQsRUFBQSxhQUNBeEQsRUFBQXdELEVBQUEsaUJBRUFFLEVBQUEsQ0FDQXZ4RSxNQUFBN2EsRUFBQSxHQUE4Qm1zRixFQUFBcEYsRUFBQW9GLElBQzlCLy9FLElBQUFwTSxFQUFBLEdBQTRCbXNGLEVBQUFwRixFQUFBb0YsR0FBQXBGLEVBQUEyQixHQUFBNUIsRUFBQTRCLEtBRzVCbm1GLEVBQUFtMUUsUUFBQW9QLE9BQUF0YyxFQUFBLEdBQXFDc2MsRUFBQXNGLEVBQUFKLElBR3JDLE9BQUF6cEYsSUFnSkF3cEMsT0FBQSxDQUVBdlMsTUFBQSxJQUVBcmQsU0FBQSxFQUVBcGQsR0F6UUEsU0FBQXdELEVBQUFtbEYsR0FDQSxJQUFBMzdDLEVBQUEyN0MsRUFBQTM3QyxPQUNBeXJDLEVBQUFqMUUsRUFBQWkxRSxVQUNBeVUsRUFBQTFwRixFQUFBbTFFLFFBQ0FvUCxFQUFBbUYsRUFBQW5GLE9BQ0FDLEVBQUFrRixFQUFBbEYsVUFFQWtFLEVBQUF6VCxFQUFBdm9FLE1BQUEsUUFFQXlvRSxPQUFBLEVBc0JBLE9BcEJBQSxFQURBbnFFLEdBQUF3K0IsR0FDQSxFQUFBQSxFQUFBLEdBRUFpL0MsRUFBQWovQyxFQUFBKzZDLEVBQUFDLEVBQUFrRSxHQUdBLFNBQUFBLEdBQ0FuRSxFQUFBandFLEtBQUE2Z0UsRUFBQSxHQUNBb1AsRUFBQTFzRCxNQUFBczlDLEVBQUEsSUFDRyxVQUFBdVQsR0FDSG5FLEVBQUFqd0UsS0FBQTZnRSxFQUFBLEdBQ0FvUCxFQUFBMXNELE1BQUFzOUMsRUFBQSxJQUNHLFFBQUF1VCxHQUNIbkUsRUFBQTFzRCxNQUFBczlDLEVBQUEsR0FDQW9QLEVBQUFqd0UsS0FBQTZnRSxFQUFBLElBQ0csV0FBQXVULElBQ0huRSxFQUFBMXNELE1BQUFzOUMsRUFBQSxHQUNBb1AsRUFBQWp3RSxLQUFBNmdFLEVBQUEsSUFHQW4xRSxFQUFBdWtGLFNBQ0F2a0YsR0E4T0F3cEMsT0FBQSxHQW9CQThyQyxnQkFBQSxDQUVBcitDLE1BQUEsSUFFQXJkLFNBQUEsRUFFQXBkLEdBOVBBLFNBQUF3RCxFQUFBcUMsR0FDQSxJQUFBa3pFLEVBQUFsekUsRUFBQWt6RSxtQkFBQXVNLEVBQUE5aEYsRUFBQW9qRixTQUFBbUIsUUFLQXZrRixFQUFBb2pGLFNBQUFvQixZQUFBalAsSUFDQUEsRUFBQXVNLEVBQUF2TSxJQUdBLElBQUFrUCxFQUFBSCxFQUFBdGtGLEVBQUFvakYsU0FBQW1CLE9BQUF2a0YsRUFBQW9qRixTQUFBb0IsVUFBQW5pRixFQUFBMDFCLFFBQUF3OUMsR0FDQWx6RSxFQUFBb2lGLGFBRUEsSUFBQXh0RCxFQUFBNTBCLEVBQUF5bkYsU0FDQXZGLEVBQUF2a0YsRUFBQW0xRSxRQUFBb1AsT0FFQWhsRixFQUFBLENBQ0F3cUYsUUFBQSxTQUFBOVUsR0FDQSxJQUFBejNFLEVBQUErbUYsRUFBQXRQLEdBSUEsT0FIQXNQLEVBQUF0UCxHQUFBd1AsRUFBQXhQLEtBQUE1eUUsRUFBQTJuRixzQkFDQXhzRixFQUFBa04sS0FBQXNyQixJQUFBdXVELEVBQUF0UCxHQUFBd1AsRUFBQXhQLEtBRUF4M0UsRUFBQSxHQUE4QnczRSxFQUFBejNFLElBRTlCeXNGLFVBQUEsU0FBQWhWLEdBQ0EsSUFBQWdSLEVBQUEsVUFBQWhSLEVBQUEsYUFDQXozRSxFQUFBK21GLEVBQUEwQixHQUlBLE9BSEExQixFQUFBdFAsR0FBQXdQLEVBQUF4UCxLQUFBNXlFLEVBQUEybkYsc0JBQ0F4c0YsRUFBQWtOLEtBQUEyK0MsSUFBQWs3QixFQUFBMEIsR0FBQXhCLEVBQUF4UCxJQUFBLFVBQUFBLEVBQUFzUCxFQUFBOXdELE1BQUE4d0QsRUFBQXZxRCxVQUVBdjhCLEVBQUEsR0FBOEJ3b0YsRUFBQXpvRixLQVc5QixPQVBBeTVCLEVBQUF2eUIsUUFBQSxTQUFBdXdFLEdBQ0EsSUFBQTJVLEdBQUEsbUJBQUEvc0YsUUFBQW80RSxHQUFBLHNCQUNBc1AsRUFBQXRjLEVBQUEsR0FBd0JzYyxFQUFBaGxGLEVBQUFxcUYsR0FBQTNVLE1BR3hCajFFLEVBQUFtMUUsUUFBQW9QLFNBRUF2a0YsR0EyTkE4cEYsU0FBQSxnQ0FPQS94RCxRQUFBLEVBTUF3OUMsa0JBQUEsZ0JBWUEyVSxhQUFBLENBRUFqekQsTUFBQSxJQUVBcmQsU0FBQSxFQUVBcGQsR0E5ZUEsU0FBQXdELEdBQ0EsSUFBQTBwRixFQUFBMXBGLEVBQUFtMUUsUUFDQW9QLEVBQUFtRixFQUFBbkYsT0FDQUMsRUFBQWtGLEVBQUFsRixVQUVBdlAsRUFBQWoxRSxFQUFBaTFFLFVBQUF2b0UsTUFBQSxRQUNBeTlFLEVBQUF6L0UsS0FBQXkvRSxNQUNBUixHQUFBLHFCQUFBOXNGLFFBQUFvNEUsR0FDQTJVLEVBQUFELEVBQUEsaUJBQ0FTLEVBQUFULEVBQUEsYUFDQXhELEVBQUF3RCxFQUFBLGlCQVNBLE9BUEFwRixFQUFBcUYsR0FBQU8sRUFBQTNGLEVBQUE0RixNQUNBcHFGLEVBQUFtMUUsUUFBQW9QLE9BQUE2RixHQUFBRCxFQUFBM0YsRUFBQTRGLElBQUE3RixFQUFBNEIsSUFFQTVCLEVBQUE2RixHQUFBRCxFQUFBM0YsRUFBQW9GLE1BQ0E1cEYsRUFBQW0xRSxRQUFBb1AsT0FBQTZGLEdBQUFELEVBQUEzRixFQUFBb0YsS0FHQTVwRixJQXdlQW04RSxNQUFBLENBRUFsbEQsTUFBQSxJQUVBcmQsU0FBQSxFQUVBcGQsR0F6dkJBLFNBQUF3RCxFQUFBcUMsR0FDQSxJQUFBZ29GLEVBR0EsSUFBQTNDLEVBQUExbkYsRUFBQW9qRixTQUFBL04sVUFBQSx3QkFDQSxPQUFBcjFFLEVBR0EsSUFBQXNxRixFQUFBam9GLEVBQUE0bkQsUUFHQSxvQkFBQXFnQyxHQUlBLEtBSEFBLEVBQUF0cUYsRUFBQW9qRixTQUFBbUIsT0FBQWdHLGNBQUFELElBSUEsT0FBQXRxRixPQUtBLElBQUFBLEVBQUFvakYsU0FBQW1CLE9BQUE1MkUsU0FBQTI4RSxHQUVBLE9BREF0dEYsUUFBQUMsS0FBQSxpRUFDQStDLEVBSUEsSUFBQWkxRSxFQUFBajFFLEVBQUFpMUUsVUFBQXZvRSxNQUFBLFFBQ0FnOUUsRUFBQTFwRixFQUFBbTFFLFFBQ0FvUCxFQUFBbUYsRUFBQW5GLE9BQ0FDLEVBQUFrRixFQUFBbEYsVUFFQW1GLEdBQUEscUJBQUE5c0YsUUFBQW80RSxHQUVBcnJFLEVBQUErL0UsRUFBQSxpQkFDQWEsRUFBQWIsRUFBQSxhQUNBQyxFQUFBWSxFQUFBNzlFLGNBQ0E4OUUsRUFBQWQsRUFBQSxhQUNBUyxFQUFBVCxFQUFBLGlCQUNBZSxFQUFBakYsRUFBQTZFLEdBQUExZ0YsR0FRQTQ2RSxFQUFBNEYsR0FBQU0sRUFBQW5HLEVBQUFxRixLQUNBNXBGLEVBQUFtMUUsUUFBQW9QLE9BQUFxRixJQUFBckYsRUFBQXFGLElBQUFwRixFQUFBNEYsR0FBQU0sSUFHQWxHLEVBQUFvRixHQUFBYyxFQUFBbkcsRUFBQTZGLEtBQ0FwcUYsRUFBQW0xRSxRQUFBb1AsT0FBQXFGLElBQUFwRixFQUFBb0YsR0FBQWMsRUFBQW5HLEVBQUE2RixJQUVBcHFGLEVBQUFtMUUsUUFBQW9QLE9BQUFoQixFQUFBdmpGLEVBQUFtMUUsUUFBQW9QLFFBR0EsSUFBQW9HLEVBQUFuRyxFQUFBb0YsR0FBQXBGLEVBQUE1NkUsR0FBQSxFQUFBOGdGLEVBQUEsRUFJQTVqRSxFQUFBNDZELEVBQUExaEYsRUFBQW9qRixTQUFBbUIsUUFDQXFHLEVBQUExL0UsV0FBQTRiLEVBQUEsU0FBQTBqRSxHQUFBLElBQ0FLLEVBQUEzL0UsV0FBQTRiLEVBQUEsU0FBQTBqRSxFQUFBLGFBQ0FNLEVBQUFILEVBQUEzcUYsRUFBQW0xRSxRQUFBb1AsT0FBQXFGLEdBQUFnQixFQUFBQyxFQVFBLE9BTEFDLEVBQUFwZ0YsS0FBQXNyQixJQUFBdHJCLEtBQUEyK0MsSUFBQWs3QixFQUFBMzZFLEdBQUE4Z0YsRUFBQUksR0FBQSxHQUVBOXFGLEVBQUFzcUYsZUFDQXRxRixFQUFBbTFFLFFBQUFnSCxPQUFnRDErRSxFQUFoRDRzRixFQUFBLEdBQWdEVCxFQUFBbC9FLEtBQUFxZ0YsTUFBQUQsSUFBQXJ0RixFQUFBNHNGLEVBQUFJLEVBQUEsSUFBQUosR0FFaERycUYsR0FtckJBaXFELFFBQUEsYUFjQWlxQixLQUFBLENBRUFqOUMsTUFBQSxJQUVBcmQsU0FBQSxFQUVBcGQsR0FqbkJBLFNBQUF3RCxFQUFBcUMsR0FFQSxHQUFBbWtGLEVBQUF4bUYsRUFBQW9qRixTQUFBL04sVUFBQSxTQUNBLE9BQUFyMUUsRUFHQSxHQUFBQSxFQUFBZ3JGLFNBQUFockYsRUFBQWkxRSxZQUFBajFFLEVBQUFxOEUsa0JBRUEsT0FBQXI4RSxFQUdBLElBQUF5a0YsRUFBQUgsRUFBQXRrRixFQUFBb2pGLFNBQUFtQixPQUFBdmtGLEVBQUFvakYsU0FBQW9CLFVBQUFuaUYsRUFBQTAxQixRQUFBMTFCLEVBQUFrekUsbUJBRUFOLEVBQUFqMUUsRUFBQWkxRSxVQUFBdm9FLE1BQUEsUUFDQXUrRSxFQUFBdEYsRUFBQTFRLEdBQ0FzUSxFQUFBdmxGLEVBQUFpMUUsVUFBQXZvRSxNQUFBLFlBRUF3K0UsRUFBQSxHQUVBLE9BQUE3b0YsRUFBQTY1RSxVQUNBLEtBQUFtTSxFQUFBQyxLQUNBNEMsRUFBQSxDQUFBalcsRUFBQWdXLEdBQ0EsTUFDQSxLQUFBNUMsRUFBQUUsVUFDQTJDLEVBQUEvQyxFQUFBbFQsR0FDQSxNQUNBLEtBQUFvVCxFQUFBRyxpQkFDQTBDLEVBQUEvQyxFQUFBbFQsR0FBQSxHQUNBLE1BQ0EsUUFDQWlXLEVBQUE3b0YsRUFBQTY1RSxTQWtEQSxPQS9DQWdQLEVBQUF4bUYsUUFBQSxTQUFBazBCLEVBQUFyWixHQUNBLEdBQUEwMUQsSUFBQXI4QyxHQUFBc3lELEVBQUFsc0YsU0FBQXVnQixFQUFBLEVBQ0EsT0FBQXZmLEVBR0FpMUUsRUFBQWoxRSxFQUFBaTFFLFVBQUF2b0UsTUFBQSxRQUNBdStFLEVBQUF0RixFQUFBMVEsR0FFQSxJQUFBOFEsRUFBQS9sRixFQUFBbTFFLFFBQUFvUCxPQUNBNEcsRUFBQW5yRixFQUFBbTFFLFFBQUFxUCxVQUdBMkYsRUFBQXovRSxLQUFBeS9FLE1BQ0FpQixFQUFBLFNBQUFuVyxHQUFBa1YsRUFBQXBFLEVBQUE5TSxPQUFBa1IsRUFBQWdCLEVBQUF0ekQsT0FBQSxVQUFBbzlDLEdBQUFrVixFQUFBcEUsRUFBQWx1RCxNQUFBc3lELEVBQUFnQixFQUFBbFMsUUFBQSxRQUFBaEUsR0FBQWtWLEVBQUFwRSxFQUFBdkMsUUFBQTJHLEVBQUFnQixFQUFBNzJFLE1BQUEsV0FBQTJnRSxHQUFBa1YsRUFBQXBFLEVBQUF6eEUsS0FBQTYxRSxFQUFBZ0IsRUFBQTNILFFBRUE2SCxFQUFBbEIsRUFBQXBFLEVBQUFsdUQsTUFBQXN5RCxFQUFBMUYsRUFBQTVzRCxNQUNBeXpELEVBQUFuQixFQUFBcEUsRUFBQTlNLE9BQUFrUixFQUFBMUYsRUFBQXhMLE9BQ0FzUyxFQUFBcEIsRUFBQXBFLEVBQUF6eEUsS0FBQTYxRSxFQUFBMUYsRUFBQW53RSxLQUNBazNFLEVBQUFyQixFQUFBcEUsRUFBQXZDLFFBQUEyRyxFQUFBMUYsRUFBQWpCLFFBRUFpSSxFQUFBLFNBQUF4VyxHQUFBb1csR0FBQSxVQUFBcFcsR0FBQXFXLEdBQUEsUUFBQXJXLEdBQUFzVyxHQUFBLFdBQUF0VyxHQUFBdVcsRUFHQTdCLEdBQUEscUJBQUE5c0YsUUFBQW80RSxHQUNBeVcsSUFBQXJwRixFQUFBc3BGLGlCQUFBaEMsR0FBQSxVQUFBcEUsR0FBQThGLEdBQUExQixHQUFBLFFBQUFwRSxHQUFBK0YsSUFBQTNCLEdBQUEsVUFBQXBFLEdBQUFnRyxJQUFBNUIsR0FBQSxRQUFBcEUsR0FBQWlHLElBRUFKLEdBQUFLLEdBQUFDLEtBRUExckYsRUFBQWdyRixTQUFBLEdBRUFJLEdBQUFLLEtBQ0F4VyxFQUFBaVcsRUFBQTNyRSxFQUFBLElBR0Ftc0UsSUFDQW5HLEVBaEpBLFNBQUFBLEdBQ0EsY0FBQUEsRUFDQSxRQUNHLFVBQUFBLEVBQ0gsTUFFQUEsRUEwSUFxRyxDQUFBckcsSUFHQXZsRixFQUFBaTFFLGFBQUFzUSxFQUFBLElBQUFBLEVBQUEsSUFJQXZsRixFQUFBbTFFLFFBQUFvUCxPQUFBdGMsRUFBQSxHQUF1Q2pvRSxFQUFBbTFFLFFBQUFvUCxPQUFBcUIsRUFBQTVsRixFQUFBb2pGLFNBQUFtQixPQUFBdmtGLEVBQUFtMUUsUUFBQXFQLFVBQUF4a0YsRUFBQWkxRSxZQUV2Q2oxRSxFQUFBcW1GLEVBQUFybUYsRUFBQW9qRixTQUFBL04sVUFBQXIxRSxFQUFBLFdBR0FBLEdBd2lCQWs4RSxTQUFBLE9BS0Fua0QsUUFBQSxFQU9BdzlDLGtCQUFBLFlBVUFzVyxNQUFBLENBRUE1MEQsTUFBQSxJQUVBcmQsU0FBQSxFQUVBcGQsR0FyUEEsU0FBQXdELEdBQ0EsSUFBQWkxRSxFQUFBajFFLEVBQUFpMUUsVUFDQXlULEVBQUF6VCxFQUFBdm9FLE1BQUEsUUFDQWc5RSxFQUFBMXBGLEVBQUFtMUUsUUFDQW9QLEVBQUFtRixFQUFBbkYsT0FDQUMsRUFBQWtGLEVBQUFsRixVQUVBd0IsR0FBQSxxQkFBQW5wRixRQUFBNnJGLEdBRUFvRCxHQUFBLG1CQUFBanZGLFFBQUE2ckYsR0FPQSxPQUxBbkUsRUFBQXlCLEVBQUEsY0FBQXhCLEVBQUFrRSxJQUFBb0QsRUFBQXZILEVBQUF5QixFQUFBLHFCQUVBaG1GLEVBQUFpMUUsVUFBQTBRLEVBQUExUSxHQUNBajFFLEVBQUFtMUUsUUFBQW9QLE9BQUFoQixFQUFBZ0IsR0FFQXZrRixJQWtQQWtvQixLQUFBLENBRUErTyxNQUFBLElBRUFyZCxTQUFBLEVBRUFwZCxHQTlTQSxTQUFBd0QsR0FDQSxJQUFBMG5GLEVBQUExbkYsRUFBQW9qRixTQUFBL04sVUFBQSwwQkFDQSxPQUFBcjFFLEVBR0EsSUFBQWdsRixFQUFBaGxGLEVBQUFtMUUsUUFBQXFQLFVBQ0F1SCxFQUFBaDNFLEVBQUEvVSxFQUFBb2pGLFNBQUEvTixVQUFBLFNBQUErTyxHQUNBLDBCQUFBQSxFQUFBam5GLE9BQ0dzbkYsV0FFSCxHQUFBTyxFQUFBeEIsT0FBQXVJLEVBQUF6M0UsS0FBQTB3RSxFQUFBbnRELEtBQUFrMEQsRUFBQTlTLE9BQUErTCxFQUFBMXdFLElBQUF5M0UsRUFBQXZJLFFBQUF3QixFQUFBL0wsTUFBQThTLEVBQUFsMEQsS0FBQSxDQUVBLFFBQUE3M0IsRUFBQWtvQixLQUNBLE9BQUFsb0IsRUFHQUEsRUFBQWtvQixNQUFBLEVBQ0Fsb0IsRUFBQXlPLFdBQUEsOEJBQ0csQ0FFSCxRQUFBek8sRUFBQWtvQixLQUNBLE9BQUFsb0IsRUFHQUEsRUFBQWtvQixNQUFBLEVBQ0Fsb0IsRUFBQXlPLFdBQUEsMEJBR0EsT0FBQXpPLElBb1NBZ3NGLGFBQUEsQ0FFQS8wRCxNQUFBLElBRUFyZCxTQUFBLEVBRUFwZCxHQXY5QkEsU0FBQXdELEVBQUFxQyxHQUNBLElBQUF3cUMsRUFBQXhxQyxFQUFBd3FDLEVBQ0FDLEVBQUF6cUMsRUFBQXlxQyxFQUNBeTNDLEVBQUF2a0YsRUFBQW0xRSxRQUFBb1AsT0FJQTBILEVBQUFsM0UsRUFBQS9VLEVBQUFvakYsU0FBQS9OLFVBQUEsU0FBQStPLEdBQ0EscUJBQUFBLEVBQUFqbkYsT0FDRyt1RixxQkFDSHB0RixJQUFBbXRGLEdBQ0FqdkYsUUFBQUMsS0FBQSxpSUFFQSxJQUFBaXZGLE9BQUFwdEYsSUFBQW10RixJQUFBNXBGLEVBQUE2cEYsZ0JBR0FDLEVBQUF2MEQsRUFEQWtxRCxFQUFBOWhGLEVBQUFvakYsU0FBQW1CLFNBSUFudUQsRUFBQSxDQUNBakIsU0FBQW92RCxFQUFBcHZELFVBSUFnZ0QsRUFBQSxDQUNBdDlDLEtBQUFudEIsS0FBQXkvRSxNQUFBNUYsRUFBQTFzRCxNQUNBdmpCLElBQUE1SixLQUFBeS9FLE1BQUE1RixFQUFBandFLEtBQ0FrdkUsT0FBQTk0RSxLQUFBeS9FLE1BQUE1RixFQUFBZixRQUNBdkssTUFBQXZ1RSxLQUFBeS9FLE1BQUE1RixFQUFBdEwsUUFHQTBKLEVBQUEsV0FBQTkxQyxFQUFBLGVBQ0ErMUMsRUFBQSxVQUFBOTFDLEVBQUEsZUFLQXMvQyxFQUFBekYsRUFBQSxhQVdBOXVELE9BQUEsRUFDQXZqQixPQUFBLEVBV0EsR0FUQUEsRUFEQSxXQUFBcXVFLEdBQ0F3SixFQUFBbnlELE9BQUFtN0MsRUFBQXFPLE9BRUFyTyxFQUFBN2dFLElBR0F1akIsRUFEQSxVQUFBK3FELEdBQ0F1SixFQUFBMTRELE1BQUEwaEQsRUFBQThELE1BRUE5RCxFQUFBdDlDLEtBRUFxMEQsR0FBQUUsRUFDQWgyRCxFQUFBZzJELEdBQUEsZUFBQXYwRCxFQUFBLE9BQUF2akIsRUFBQSxTQUNBOGhCLEVBQUF1c0QsR0FBQSxFQUNBdnNELEVBQUF3c0QsR0FBQSxFQUNBeHNELEVBQUFpMkQsV0FBQSxnQkFDRyxDQUVILElBQUFDLEVBQUEsV0FBQTNKLEdBQUEsSUFDQTRKLEVBQUEsVUFBQTNKLEdBQUEsSUFDQXhzRCxFQUFBdXNELEdBQUFydUUsRUFBQWc0RSxFQUNBbDJELEVBQUF3c0QsR0FBQS9xRCxFQUFBMDBELEVBQ0FuMkQsRUFBQWkyRCxXQUFBMUosRUFBQSxLQUFBQyxFQUlBLElBQUFuMEUsRUFBQSxDQUNBKzlFLGNBQUF4c0YsRUFBQWkxRSxXQVFBLE9BSkFqMUUsRUFBQXlPLFdBQUF3NUQsRUFBQSxHQUErQng1RCxFQUFBek8sRUFBQXlPLFlBQy9Cek8sRUFBQW8yQixPQUFBNnhDLEVBQUEsR0FBMkI3eEMsRUFBQXAyQixFQUFBbzJCLFFBQzNCcDJCLEVBQUF5c0YsWUFBQXhrQixFQUFBLEdBQWdDam9FLEVBQUFtMUUsUUFBQWdILE1BQUFuOEUsRUFBQXlzRixhQUVoQ3pzRixHQXk0QkFrc0YsaUJBQUEsRUFNQXIvQyxFQUFBLFNBTUFDLEVBQUEsU0FrQkE0L0MsV0FBQSxDQUVBejFELE1BQUEsSUFFQXJkLFNBQUEsRUFFQXBkLEdBdmpDQSxTQUFBd0QsR0FwQkEsSUFBQWlxRCxFQUFBeDdDLEVBb0NBLE9BWEFnNUUsRUFBQXpuRixFQUFBb2pGLFNBQUFtQixPQUFBdmtGLEVBQUFvMkIsUUF6QkE2ekIsRUE2QkFqcUQsRUFBQW9qRixTQUFBbUIsT0E3QkE5MUUsRUE2QkF6TyxFQUFBeU8sV0E1QkFyVCxPQUFBcUosS0FBQWdLLEdBQUEvSixRQUFBLFNBQUF5Z0IsSUFFQSxJQURBMVcsRUFBQTBXLEdBRUE4a0MsRUFBQTUzQyxhQUFBOFMsRUFBQTFXLEVBQUEwVyxJQUVBOGtDLEVBQUF2M0MsZ0JBQUF5UyxLQTBCQW5sQixFQUFBc3FGLGNBQUFsdkYsT0FBQXFKLEtBQUF6RSxFQUFBeXNGLGFBQUF6dEYsUUFDQXlvRixFQUFBem5GLEVBQUFzcUYsYUFBQXRxRixFQUFBeXNGLGFBR0F6c0YsR0F5aUNBMnNGLE9BNWhDQSxTQUFBbkksRUFBQUQsRUFBQWxpRixFQUFBdXFGLEVBQUEvcUUsR0FFQSxJQUFBZ2tFLEVBQUFMLEVBQUEzakUsRUFBQTBpRSxFQUFBQyxHQUtBdlAsRUFBQThQLEVBQUExaUYsRUFBQTR5RSxVQUFBNFEsRUFBQXRCLEVBQUFDLEVBQUFuaUYsRUFBQWd6RSxVQUFBbkIsS0FBQXFCLGtCQUFBbHpFLEVBQUFnekUsVUFBQW5CLEtBQUFuOEMsU0FRQSxPQU5Bd3NELEVBQUFseUUsYUFBQSxjQUFBNGlFLEdBSUF3UyxFQUFBbEQsRUFBQSxDQUFxQnB2RCxTQUFBLGFBRXJCOXlCLEdBb2hDQTZwRixxQkFBQXB0RixLQWlHQTRvRSxFQUFBLFdBU0EsU0FBQUEsRUFBQThjLEVBQUFELEdBQ0EsSUFBQWxjLEVBQUF2aEUsS0FFQXpFLEVBQUFtSCxVQUFBeEssT0FBQSxRQUFBRixJQUFBMEssVUFBQSxHQUFBQSxVQUFBLE1BQ0EyNUUsRUFBQXI4RSxLQUFBNGdFLEdBRUE1Z0UsS0FBQWd1RSxlQUFBLFdBQ0EsT0FBQXA3QyxzQkFBQTJ1QyxFQUFBbG5FLFNBSUEyRixLQUFBM0YsT0FBQW9nRixFQUFBejZFLEtBQUEzRixPQUFBa0YsS0FBQVMsT0FHQUEsS0FBQXpFLFFBQUE0bEUsRUFBQSxHQUE4QlAsRUFBQTZoQixTQUFBbG5GLEdBRzlCeUUsS0FBQSthLE1BQUEsQ0FDQWdyRSxhQUFBLEVBQ0FDLFdBQUEsRUFDQXpGLGNBQUEsSUFJQXZnRixLQUFBMDlFLGVBQUEzN0UsT0FBQTI3RSxFQUFBLEdBQUFBLEVBQ0ExOUUsS0FBQXk5RSxZQUFBMTdFLE9BQUEwN0UsRUFBQSxHQUFBQSxFQUdBejlFLEtBQUF6RSxRQUFBZ3pFLFVBQUEsR0FDQWo2RSxPQUFBcUosS0FBQXdqRSxFQUFBLEdBQTJCUCxFQUFBNmhCLFNBQUFsVSxVQUFBaHpFLEVBQUFnekUsWUFBQTN3RSxRQUFBLFNBQUF2SCxHQUMzQmtyRSxFQUFBaG1FLFFBQUFnekUsVUFBQWw0RSxHQUFBOHFFLEVBQUEsR0FBaURQLEVBQUE2aEIsU0FBQWxVLFVBQUFsNEUsSUFBQSxHQUF1Q2tGLEVBQUFnekUsVUFBQWh6RSxFQUFBZ3pFLFVBQUFsNEUsR0FBQSxNQUl4RjJKLEtBQUF1dUUsVUFBQWo2RSxPQUFBcUosS0FBQXFDLEtBQUF6RSxRQUFBZ3pFLFdBQUF2eUUsSUFBQSxTQUFBM0YsR0FDQSxPQUFBOHFFLEVBQUEsQ0FDQTlxRSxRQUNPa3JFLEVBQUFobUUsUUFBQWd6RSxVQUFBbDRFLE1BR1AyTSxLQUFBLFNBQUF2RyxFQUFBQyxHQUNBLE9BQUFELEVBQUEwekIsTUFBQXp6QixFQUFBeXpCLFFBT0Fud0IsS0FBQXV1RSxVQUFBM3dFLFFBQUEsU0FBQWtvRixHQUNBQSxFQUFBaHpFLFNBQUF2UCxFQUFBdWlGLEVBQUFELFNBQ0FDLEVBQUFELE9BQUF0a0IsRUFBQW1jLFVBQUFuYyxFQUFBa2MsT0FBQWxjLEVBQUFobUUsUUFBQXVxRixFQUFBdmtCLEVBQUF4bUQsU0FLQS9hLEtBQUEzRixTQUVBLElBQUFvbUYsRUFBQXpnRixLQUFBekUsUUFBQWtsRixjQUNBQSxHQUVBemdGLEtBQUFpbUYsdUJBR0FqbUYsS0FBQSthLE1BQUEwbEUsZ0JBcURBLE9BOUNBbEUsRUFBQTNiLEVBQUEsRUFDQXRoRSxJQUFBLFNBQ0E1SSxNQUFBLFdBQ0EsT0FoL0NBLFdBRUEsSUFBQXNKLEtBQUErYSxNQUFBZ3JFLFlBQUEsQ0FJQSxJQUFBN3NGLEVBQUEsQ0FDQW9qRixTQUFBdDhFLEtBQ0FzdkIsT0FBQSxHQUNBcTJELFlBQUEsR0FDQWgrRSxXQUFBLEdBQ0F1OEUsU0FBQSxFQUNBN1YsUUFBQSxJQUlBbjFFLEVBQUFtMUUsUUFBQXFQLFVBQUFnQixFQUFBMStFLEtBQUErYSxNQUFBL2EsS0FBQXk5RSxPQUFBejlFLEtBQUEwOUUsV0FLQXhrRixFQUFBaTFFLFVBQUE4UCxFQUFBaitFLEtBQUF6RSxRQUFBNHlFLFVBQUFqMUUsRUFBQW0xRSxRQUFBcVAsVUFBQTE5RSxLQUFBeTlFLE9BQUF6OUUsS0FBQTA5RSxVQUFBMTlFLEtBQUF6RSxRQUFBZ3pFLFVBQUFuQixLQUFBcUIsa0JBQUF6dUUsS0FBQXpFLFFBQUFnekUsVUFBQW5CLEtBQUFuOEMsU0FHQS8zQixFQUFBcThFLGtCQUFBcjhFLEVBQUFpMUUsVUFHQWoxRSxFQUFBbTFFLFFBQUFvUCxPQUFBcUIsRUFBQTkrRSxLQUFBeTlFLE9BQUF2a0YsRUFBQW0xRSxRQUFBcVAsVUFBQXhrRixFQUFBaTFFLFdBQ0FqMUUsRUFBQW0xRSxRQUFBb1AsT0FBQXB2RCxTQUFBLFdBR0FuMUIsRUFBQXFtRixFQUFBdi9FLEtBQUF1dUUsVUFBQXIxRSxHQUlBOEcsS0FBQSthLE1BQUFpckUsVUFJQWhtRixLQUFBekUsUUFBQWs2RSxTQUFBdjhFLElBSEE4RyxLQUFBK2EsTUFBQWlyRSxXQUFBLEVBQ0FobUYsS0FBQXpFLFFBQUErNUUsU0FBQXA4RSxNQTI4Q0F6RSxLQUFBdUwsUUFFRyxDQUNIVixJQUFBLFVBQ0E1SSxNQUFBLFdBQ0EsT0FsNkNBLFdBbUJBLE9BbEJBc0osS0FBQSthLE1BQUFnckUsYUFBQSxFQUdBckcsRUFBQTEvRSxLQUFBdXVFLFVBQUEsZ0JBQ0F2dUUsS0FBQXk5RSxPQUFBN3hFLGdCQUFBLGVBQ0E1TCxLQUFBeTlFLE9BQUEzOUQsTUFBQWlSLEtBQUEsR0FDQS93QixLQUFBeTlFLE9BQUEzOUQsTUFBQXVPLFNBQUEsR0FDQXJ1QixLQUFBeTlFLE9BQUEzOUQsTUFBQXRTLElBQUEsR0FDQXhOLEtBQUF5OUUsT0FBQTM5RCxNQUFBKy9ELEVBQUEsa0JBR0E3L0UsS0FBQTBnRix3QkFJQTFnRixLQUFBekUsUUFBQW1uRixpQkFDQTFpRixLQUFBeTlFLE9BQUExOEUsV0FBQUMsWUFBQWhCLEtBQUF5OUUsUUFFQXo5RSxNQSs0Q0F2TCxLQUFBdUwsUUFFRyxDQUNIVixJQUFBLHVCQUNBNUksTUFBQSxXQUNBLE9BbDJDQSxXQUNBc0osS0FBQSthLE1BQUEwbEUsZ0JBQ0F6Z0YsS0FBQSthLE1BQUFtbEUsRUFBQWxnRixLQUFBMDlFLFVBQUExOUUsS0FBQXpFLFFBQUF5RSxLQUFBK2EsTUFBQS9hLEtBQUFndUUsa0JBZzJDQXY1RSxLQUFBdUwsUUFFRyxDQUNIVixJQUFBLHdCQUNBNUksTUFBQSxXQUNBLE9BQUFncUYsRUFBQWpzRixLQUFBdUwsVUE0QkE0Z0UsRUE3SEEsR0FxSkFBLEVBQUFzbEIsT0FBQSxvQkFBQWx5RixjQUFBNkwsR0FBQXNtRixZQUNBdmxCLEVBQUF1Z0IsYUFDQXZnQixFQUFBNmhCLFdBRWV0SSxFQUFBLDIwQkNoMkVBaU0sK1VBaENBLFNBQUF4dkYsR0FBSyxJQUFBeXZGLEVBQ1M5a0IsRUFBS3I2QyxNQUF0Qmh1QixFQURRbXRGLEVBQ1JudEYsS0FBTW1CLEVBREVnc0YsRUFDRmhzRixPQUNSM0QsRUFBUUUsRUFBRXlNLE9BQU8zTSxNQUFNbVAsY0FNN0J4TCxFQUFPLENBQ0xuQixLQUxhQSxFQUFLNlUsT0FBTyxTQUFBdTRFLEdBQ3pCLE9BQU9BLEVBQUtqd0YsS0FBS3dQLGNBQWMwZ0YsU0FBUzd2RixLQUt4Q2IsT0FBUSxFQUNSMndGLEtBQU05dkYsd1dBWlkrdkYsSUFBTWo5QyxrREFnQm5CLElBQ0NnOUMsRUFBU3htRixLQUFLa25CLE1BQWRzL0QsS0FDUixPQUNFRSxFQUFBanFGLEVBQUEzQixjQUFBLE9BQUs2UyxVQUFVLGVBQ2IrNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxTQUNFNlMsVUFBVSxlQUNWdlIsS0FBSyxPQUNMdXFGLGFBQVcsU0FDWGp3RixNQUFPOHZGLEVBQ1BJLFlBQVksb0JBQ1pDLFNBQVU3bUYsS0FBSzhtRixtREMxQlZDLEVBQUEsU0FBQTFJLEdBQTBCLElBQXZCbmxGLEVBQXVCbWxGLEVBQXZCbmxGLEtBQU04dEYsRUFBaUIzSSxFQUFqQjJJLFdBQ3RCLElBQUs5dEYsSUFBU0EsRUFBSzh0RixHQUFhLE9BQU9OLEVBQUFqcUYsRUFBQTNCLGNBQUEsa0NBRXZDLElBQU13ckYsRUFBT3B0RixFQUFLOHRGLEdBRWxCLE9BQ0VOLEVBQUFqcUYsRUFBQTNCLGNBQUEsT0FBSzZTLFVBQVUsaUNBQ2IrNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxPQUFLNlMsVUFBVSxlQUFlM1MsSUFBRyxVQUFBdUIsT0FBWStwRixFQUFLenlFLE1BQWpCLFFBQThCb3pFLElBQUtYLEVBQUt6eUUsUUFFekU2eUUsRUFBQWpxRixFQUFBM0IsY0FBQSxPQUFLNlMsVUFBVSxxQkFDYis0RSxFQUFBanFGLEVBQUEzQixjQUFBLFNBQU82UyxVQUFVLG9DQUNmKzRFLEVBQUFqcUYsRUFBQTNCLGNBQUEsYUFDRTRyRixFQUFBanFGLEVBQUEzQixjQUFBLFVBQ0U0ckYsRUFBQWpxRixFQUFBM0IsY0FBQSxvQkFDQTRyRixFQUFBanFGLEVBQUEzQixjQUFBLFVBQUt3ckYsRUFBS2p3RixPQUVacXdGLEVBQUFqcUYsRUFBQTNCLGNBQUEsVUFDRTRyRixFQUFBanFGLEVBQUEzQixjQUFBLGtCQUNBNHJGLEVBQUFqcUYsRUFBQTNCLGNBQUEsVUFBS3dyRixFQUFLWSxNQUVaUixFQUFBanFGLEVBQUEzQixjQUFBLFVBQ0U0ckYsRUFBQWpxRixFQUFBM0IsY0FBQSwrQkFDQTRyRixFQUFBanFGLEVBQUEzQixjQUFBLFVBQUt3ckYsRUFBS3p5RSxRQUVaNnlFLEVBQUFqcUYsRUFBQTNCLGNBQUEsVUFDRTRyRixFQUFBanFGLEVBQUEzQixjQUFBLHFCQUNBNHJGLEVBQUFqcUYsRUFBQTNCLGNBQUEsVUFBS3dyRixFQUFLYSxVQUtoQlQsRUFBQWpxRixFQUFBM0IsY0FBQSxXQUNFNHJGLEVBQUFqcUYsRUFBQTNCLGNBQUEsUUFBTTZTLFVBQVUsSUFBRys0RSxFQUFBanFGLEVBQUEzQixjQUFBLHFCQUNuQjRyRixFQUFBanFGLEVBQUEzQixjQUFBLFdBQ0E0ckYsRUFBQWpxRixFQUFBM0IsY0FBQSxjQUFZNlMsVUFBVSxvQkFDcEIrNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxLQUFHNlMsVUFBVSxrQ0FDWHk1RSxjQUFZLFNBQ2JkLEVBQUtlLE9BQ05YLEVBQUFqcUYsRUFBQTNCLGNBQUEsZ0JDdENHd3NGLEVBQUEsU0FBQWpKLEdBQW1DLElBQWhDaUksRUFBZ0NqSSxFQUFoQ2lJLEtBQU1qc0YsRUFBMEJna0YsRUFBMUJoa0YsT0FBUW9lLEVBQWtCNGxFLEVBQWxCNWxFLE1BQU92ZixFQUFXbWxGLEVBQVhubEYsS0FDN0IyYSxFQUE0Qnl5RSxFQUE1Qnp5RSxNQUFPeGQsRUFBcUJpd0YsRUFBckJqd0YsS0FBTTZ3RixFQUFlWixFQUFmWSxJQUFLQyxFQUFVYixFQUFWYSxNQXVCMUIsT0FDRVQsRUFBQWpxRixFQUFBM0IsY0FBQSxNQUFJbzdELFFBQVMsa0JBQU03N0QsRUFBTyxDQUFFeEUsT0FBUTRpQixNQUNsQ2l1RSxFQUFBanFGLEVBQUEzQixjQUFBLE1BQUk2UyxVQUFVLGVBQ1orNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxPQUFLRSxJQUFHLFVBQUF1QixPQUFZc1gsRUFBWixRQUF5Qm96RSxJQUFLcHpFLEVBQU9sRyxVQUFVLGdCQUV6RCs0RSxFQUFBanFGLEVBQUEzQixjQUFBLE1BQUk2UyxVQUFVLGNBQ1orNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxVQUFLekUsSUFFUHF3RixFQUFBanFGLEVBQUEzQixjQUFBLE1BQUk2UyxVQUFVLGFBQWF1NUUsR0FDM0JSLEVBQUFqcUYsRUFBQTNCLGNBQUEsTUFBSTZTLFVBQVUsZUFBZCxLQUErQnc1RSxHQUMvQlQsRUFBQWpxRixFQUFBM0IsY0FBQSxVQUNFNHJGLEVBQUFqcUYsRUFBQTNCLGNBQUEsVUFDRXBFLE1BQU9MLEVBQ1BzWCxVQUFVLGtCQUNWdW9ELFFBQVMsU0FBQXQvRCxHQUFDLE9BbkNPLFNBQUFBLEdBQ3ZCQSxFQUFFcXZCLGlCQUNGLElBQU01dkIsRUFBT08sRUFBRXlNLE9BQU8zTSxNQUNoQjR2RixFQUFPcHRGLEVBQUsrVSxLQUFLLFNBQUE2M0IsR0FFckIsT0FBT0EsRUFBRXloRCxNQUFRbHhGLElBRWJteEYsRUFBVXR1RixFQUNoQnN1RixFQUFRaHZGLE9BQU9pZ0IsRUFBTyxHQUN0Qmd2RSxXQUFVLEdBQUFsckYsT0FBSW1yRixRQUFKLGVBQUFuckYsT0FBeUJrYyxFQUFRLEdBQUs2dEUsR0FDN0N2dkYsS0FBSyxTQUFBc0UsR0FDVXJELE1BQVZxRCxHQUFpQyxNQUFWQSxHQUN6QmhCLEVBQU8sQ0FDTG5CLEtBQU1zdUYsTUFJWHZzRSxNQUFNLFNBQUE3YyxHQUFLLE9BQUlsSSxRQUFRa0ksTUFBTSxTQUFVQSxLQUN2Q3JILEtBQUssU0FBQXNvQyxHQUFRLE9BQUlucEMsUUFBUXl4RixJQUFJLFdBQVl0b0QsS0FpQnhCdW9ELENBQWlCaHhGLEtBSGpDLHd6QkNsQ2FpeEYsZ2FBQWlCcEIsSUFBTWo5QyxrREFDakMsSUFBQTY4QyxFQUNrQnJtRixLQUFLa25CLE1BQXRCaHVCLEVBRERtdEYsRUFDQ250RixLQUFNbUIsRUFEUGdzRixFQUNPaHNGLE9BRWQsSUFBS25CLEVBQU0sT0FBT3d0RixFQUFBanFGLEVBQUEzQixjQUFBLHlCQUVsQixJQUFNZ3RGLEVBQVE1dUYsRUFBSzhDLElBQUksU0FBQ3NxRixFQUFNN3RFLEdBQzVCLE9BQ0VpdUUsRUFBQWpxRixFQUFBM0IsY0FBQ3dzRixFQUFELENBQ0VoQixLQUFNQSxFQUNON3RFLE1BQU9BLEVBQ1B2ZixLQUFNQSxFQUNOb0csSUFBRyxVQUFBL0MsT0FBWWtjLEdBQ2ZwZSxPQUFRQSxNQUtkLE9BQ0Vxc0YsRUFBQWpxRixFQUFBM0IsY0FBQSxTQUFPNlMsVUFBVSxzQ0FDZis0RSxFQUFBanFGLEVBQUEzQixjQUFBLGFBQ0U0ckYsRUFBQWpxRixFQUFBM0IsY0FBQSxVQUNFNHJGLEVBQUFqcUYsRUFBQTNCLGNBQUEsbUJBQ0E0ckYsRUFBQWpxRixFQUFBM0IsY0FBQSxrQkFDQTRyRixFQUFBanFGLEVBQUEzQixjQUFBLGlCQUNBNHJGLEVBQUFqcUYsRUFBQTNCLGNBQUEsbUJBQ0E0ckYsRUFBQWpxRixFQUFBM0IsY0FBQSxhQUdKNHJGLEVBQUFqcUYsRUFBQTNCLGNBQUEsYUFBUWd0Rix5Q0M5QkRDLEVBQUEsU0FBQTFKLEdBQTRDLElBQXpDaGtGLEVBQXlDZ2tGLEVBQXpDaGtGLE9BQVFuQixFQUFpQ21sRixFQUFqQ25sRixLQUFrQjh1RixHQUFlM0osRUFBM0I0SixXQUEyQjVKLEVBQWYySixVQUVwQ2hsRixFQUFPLFNBQUE1RyxHQUNYLElBRUl5ckUsRUFGYW1nQixFQUFTNXJGLEdBRUMsR0FBSyxFQUU1QjhyRixFQUFTaHZGLEVBQUs2QyxRQUFRaUgsS0FBSyxTQUFDdkcsRUFBR0MsR0FDakMsT0FBSUQsRUFBRUwsS0FBVU0sRUFBRU4sR0FBYyxFQUN6QkssRUFBRUwsR0FBUU0sRUFBRU4sR0FBUXlyRSxHQUF5QixFQUFiQSxJQUd6QyxHQUFhLFNBQVR6ckUsRUFBaUIsQ0FDbkIsSUFBTStyRixFQUFZN3pGLE9BQU95d0MsT0FDdkIsR0FDQSxDQUFFMXVDLE1BQU8yeEYsRUFBUSxLQUFVZCxJQUFLYyxFQUFRLE1BRTFDM3RGLEVBQU8sQ0FDTDJzRixXQUFZLEVBQ1o5dEYsS0FBTWd2RixFQUNORixTQUFVRyxJQUlkLEdBQWEsUUFBVC9yRixFQUFnQixDQUNsQixJQUFNK3JGLEVBQVk3ekYsT0FBT3l3QyxPQUN2QixHQUNBLENBQUUxdUMsS0FBTTJ4RixFQUFRLEtBQVVkLEtBQU1jLEVBQVEsTUFFMUMzdEYsRUFBTyxDQUNMMnNGLFdBQVksRUFDWjl0RixLQUFNZ3ZGLEVBQ05GLFNBQVVHLE1BS2hCLE9BQ0V6QixFQUFBanFGLEVBQUEzQixjQUFBLE9BQUs2UyxVQUFVLG1CQUNiKzRFLEVBQUFqcUYsRUFBQTNCLGNBQUEsT0FBSzZTLFVBQVUsZ0NBQ2IrNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxVQUNFNlMsVUFBVSx1REFDVnVvRCxRQUFTLFdBQ1BsekQsRUFBSyxVQUdQMGpGLEVBQUFqcUYsRUFBQTNCLGNBQUEsS0FDRTZTLFVBQ0VxNkUsRUFBUzN4RixLQUFPLHdCQUEwQix5QkFSaEQsY0FhQXF3RixFQUFBanFGLEVBQUEzQixjQUFBLFVBQ0U2UyxVQUFVLHNEQUNWdW9ELFFBQVMsV0FDUGx6RCxFQUFLLFNBR1AwakYsRUFBQWpxRixFQUFBM0IsY0FBQSxLQUNFNlMsVUFDRXE2RSxFQUFTZCxJQUNMLDBCQUNBLDJCQVZWLDRsQ0NsRGFrQixjQUVuQixTQUFBQSxFQUFZbGhFLEdBQU8sSUFBQXE2QyxNQUFBLG1HQUFBOG1CLENBQUFyb0YsS0FBQW9vRixLQUNqQnBvRixNQUFBdWhFLE1BQUErbUIsRUFBQUYsR0FBQTN6RixLQUFBdUwsS0FBTWtuQixtREFFRG5NLE1BQVEsQ0FDWDFrQixLQUFNLEdBQ042d0YsSUFBSyxFQUNMcnpFLE1BQU8sR0FDUHN6RSxNQUFPLEdBQ1BFLE9BQVEsSUFHVjlsQixFQUFLZ25CLGFBQWVobkIsRUFBS2duQixhQUFhaHBGLEtBQWxCaXBGLEVBQUFqbkIsSUFDcEJBLEVBQUtrbkIsbUJBQXFCbG5CLEVBQUtrbkIsbUJBQW1CbHBGLEtBQXhCaXBGLEVBQUFqbkIsSUFDMUJBLEVBQUttbkIsa0JBQW9Cbm5CLEVBQUttbkIsa0JBQWtCbnBGLEtBQXZCaXBGLEVBQUFqbkIsSUFDekJBLEVBQUtvbkIsb0JBQXNCcG5CLEVBQUtvbkIsb0JBQW9CcHBGLEtBQXpCaXBGLEVBQUFqbkIsSUFDM0JBLEVBQUtxbkIsb0JBQXNCcm5CLEVBQUtxbkIsb0JBQW9CcnBGLEtBQXpCaXBGLEVBQUFqbkIsSUFDM0JBLEVBQUtzbkIscUJBQXVCdG5CLEVBQUtzbkIscUJBQXFCdHBGLEtBQTFCaXBGLEVBQUFqbkIsSUFoQlhBLHdQQUZnQmtsQixJQUFNajlDLDZEQXNCdkM5RSxJQUFFMWtDLEtBQUs4b0YsT0FBT0EsTUFBTSxRQUNwQnBrRCxJQUFFMWtDLEtBQUs4b0YsT0FBT2hsRSxHQUFHLGtCQUFtQjlqQixLQUFLa25CLE1BQU1ndkMsMENBR3hDd3hCLEVBQVNxQixHQUFVLElBQUExQyxFQUNEcm1GLEtBQUtrbkIsTUFBdEI3c0IsRUFEa0Jnc0YsRUFDbEJoc0YsT0FBUW5CLEVBRFVtdEYsRUFDVm50RixNQ2hDTCxTQUFjK2lDLEVBQUsvaUMsR0FDOUIsT0FBTzh2RixNQUFNL3NELEVBQUssQ0FDZHRpQixPQUFRLE9BQ1JvbEIsUUFBUyxDQUNMa3FELE9BQVUsbUJBQ1ZDLGVBQWdCLG9CQUVwQmxvRSxLQUFNMW1CLEtBQUt5akUsVUFBVTdrRSxHQUNyQjJTLE1BQU8sUUFDUHhVLEtBQU0sT0FDTjh4RixTQUFVLFNBQ1ZDLFNBQVUsV0FDWHJ5RixLQUFLLFNBQUFzb0MsR0FBUSxPQUFJQSxFQUFTN0MsU0FDMUJ2aEIsTUFBTSxTQUFBN2MsR0FBSyxPQUFJLElBQUk1RSxNQUFNLDZERG9CNUI2dkYsQ0FBSzNCLEVBQVNxQixHQUNYaHlGLEtBQUssU0FBQXV2RixHQUNKanNGLEVBQU8sQ0FDTG5CLEtBQUksR0FBQXFELE9BQUErc0YsRUFBTXB3RixHQUFOLENBQVlvdEYsUUFHbkJyckUsTUFBTSxTQUFBN2MsR0FBSyxPQUFJbEksUUFBUWtJLE1BQU0sU0FBVUEsS0FDdkNySCxLQUFLLFNBQUFzb0MsR0FBUSxPQUFJbnBDLFFBQVF5eEYsSUFBSSxXQUFZdG9ELDBDQUdqQ3pvQyxHQUNYQSxFQUFFcXZCLGlCQUNGLElBQU0rM0MsRUFBTyxDQUNYM25FLEtBQU0ySixLQUFLK2EsTUFBTTFrQixLQUNqQjZ3RixJQUFLbG5GLEtBQUsrYSxNQUFNbXNFLElBQ2hCQyxNQUFPbm5GLEtBQUsrYSxNQUFNb3NFLE1BQ2xCRSxPQUFRcm5GLEtBQUsrYSxNQUFNc3NFLE9BQ25CeHpFLE1BQU83VCxLQUFLK2EsTUFBTWxILE9BRXBCN1QsS0FBS3VwRixTQUFMLEdBQUFodEYsT0FBaUJtckYsUUFBakIsY0FBc0MxcEIsR0FDdEN0NUIsSUFBRTFrQyxLQUFLOG9GLE9BQU9BLE1BQU0sbURBR0hseUYsR0FDakJBLEVBQUVxdkIsaUJBQ0YsSUFBTTV2QixFQUFPTyxFQUFFeU0sT0FBTzNNLE1BQ3RCc0osS0FBS3FuQyxTQUFTLENBQ1poeEMsbURBSWNPLEdBQ2hCQSxFQUFFcXZCLGlCQUNGLElBQU1paEUsRUFBTXR3RixFQUFFeU0sT0FBTzNNLE1BQ3JCc0osS0FBS3FuQyxTQUFTLENBQ1o2L0Msb0RBSWdCdHdGLEdBQ2xCQSxFQUFFcXZCLGlCQUNGLElBQU1wUyxFQUFRamQsRUFBRXlNLE9BQU8zTSxNQUN2QnNKLEtBQUtxbkMsU0FBUyxDQUNaeHpCLHNEQUlnQmpkLEdBQ2xCQSxFQUFFcXZCLGlCQUNGLElBQU1raEUsRUFBUXZ3RixFQUFFeU0sT0FBTzNNLE1BQ3ZCc0osS0FBS3FuQyxTQUFTLENBQ1o4L0MsdURBSWlCdndGLEdBQ25CQSxFQUFFcXZCLGlCQUNGLElBQU1vaEUsRUFBU3p3RixFQUFFeU0sT0FBTzNNLE1BQ3hCc0osS0FBS3FuQyxTQUFTLENBQ1pnZ0QsNENBSUssSUFBQXZmLEVBQUE5bkUsS0FDUCxPQUNFMG1GLEVBQUFqcUYsRUFBQTNCLGNBQUEsT0FBSzZTLFVBQVUsMkJBQ2JrNkIsSUFBSyxTQUFBaWhELEdBQUssT0FBSWhoQixFQUFLZ2hCLE1BQVFBLEdBQU92dkYsR0FBRyxRQUNyQ3NaLFNBQVMsS0FDVDIyRSxLQUFLLFNBQ0xDLGtCQUFnQixvQkFDaEJyQyxjQUFZLFFBQ1pWLEVBQUFqcUYsRUFBQTNCLGNBQUEsT0FBSzZTLFVBQVUsZUFBZTY3RSxLQUFLLFlBQ2pDOUMsRUFBQWpxRixFQUFBM0IsY0FBQSxPQUFLNlMsVUFBVSxpQkFDYis0RSxFQUFBanFGLEVBQUEzQixjQUFBLE9BQUs2UyxVQUFVLGdCQUNiKzRFLEVBQUFqcUYsRUFBQTNCLGNBQUEsTUFBSTZTLFVBQVUsMEJBQWQsb0JBQ0ErNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxVQUFRc0IsS0FBSyxTQUFTdVIsVUFBVSxhQUFhKzdFLGVBQWEsUUFBUS9DLGFBQVcsU0FDM0VELEVBQUFqcUYsRUFBQTNCLGNBQUEsUUFBTXNzRixjQUFZLFFBQWxCLE9BRUpWLEVBQUFqcUYsRUFBQTNCLGNBQUEsT0FBSzZTLFVBQVUsY0FDYis0RSxFQUFBanFGLEVBQUEzQixjQUFBLFFBQU02dUYsU0FBVTNwRixLQUFLdW9GLGFBQWNodkYsR0FBRyxhQUNwQ210RixFQUFBanFGLEVBQUEzQixjQUFBLE9BQUs2UyxVQUFVLGNBQ2IrNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxTQUFPOHVGLFFBQVEsaUJBQWlCajhFLFVBQVUsa0JBQTFDLFNBQ0ErNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxTQUNFcEUsTUFBT3NKLEtBQUsrYSxNQUFNMWtCLEtBQ2xCd3dGLFNBQVU3bUYsS0FBS3lvRixtQkFDZnB5RixLQUFLLE9BQ0wrRixLQUFLLE9BQ0x1UixVQUFVLGVBQ1ZwVSxHQUFHLG9CQUVQbXRGLEVBQUFqcUYsRUFBQTNCLGNBQUEsT0FBSzZTLFVBQVUsY0FDYis0RSxFQUFBanFGLEVBQUEzQixjQUFBLFNBQU84dUYsUUFBUSxnQkFBZ0JqOEUsVUFBVSxrQkFBekMsUUFDQSs0RSxFQUFBanFGLEVBQUEzQixjQUFBLFNBQ0VwRSxNQUFPc0osS0FBSythLE1BQU1tc0UsSUFDbEJMLFNBQVU3bUYsS0FBSzBvRixrQkFDZnJ5RixLQUFLLE1BQ0wrRixLQUFLLE9BQ0x1UixVQUFVLGVBQ1ZwVSxHQUFHLG1CQUVQbXRGLEVBQUFqcUYsRUFBQTNCLGNBQUEsT0FBSzZTLFVBQVUsY0FDYis0RSxFQUFBanFGLEVBQUEzQixjQUFBLFNBQU84dUYsUUFBUSxtQkFBbUJqOEUsVUFBVSxrQkFBNUMscUJBQ0ErNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxTQUNFcEUsTUFBT3NKLEtBQUsrYSxNQUFNbEgsTUFDbEJnekUsU0FBVTdtRixLQUFLMm9GLG9CQUNmdHlGLEtBQUssUUFDTCtGLEtBQUssT0FDTHVSLFVBQVUsZUFDVnBVLEdBQUcsc0JBRVBtdEYsRUFBQWpxRixFQUFBM0IsY0FBQSxPQUFLNlMsVUFBVSxjQUNiKzRFLEVBQUFqcUYsRUFBQTNCLGNBQUEsU0FBTzh1RixRQUFRLGtCQUFrQmo4RSxVQUFVLGtCQUEzQyxVQUNBKzRFLEVBQUFqcUYsRUFBQTNCLGNBQUEsU0FDRXBFLE1BQU9zSixLQUFLK2EsTUFBTW9zRSxNQUNsQk4sU0FBVTdtRixLQUFLNG9GLG9CQUNmdnlGLEtBQUssUUFDTCtGLEtBQUssT0FDTHVSLFVBQVUsZUFDVnBVLEdBQUcscUJBRVBtdEYsRUFBQWpxRixFQUFBM0IsY0FBQSxPQUFLNlMsVUFBVSxjQUNiKzRFLEVBQUFqcUYsRUFBQTNCLGNBQUEsU0FBTzh1RixRQUFRLGlCQUFpQmo4RSxVQUFVLGtCQUExQyxXQUNBKzRFLEVBQUFqcUYsRUFBQTNCLGNBQUEsWUFDRXBFLE1BQU9zSixLQUFLK2EsTUFBTXNzRSxPQUNsQlIsU0FBVTdtRixLQUFLNm9GLHFCQUNmeHlGLEtBQUssU0FDTHNYLFVBQVUsZUFDVnBVLEdBQUcscUJBSVRtdEYsRUFBQWpxRixFQUFBM0IsY0FBQSxPQUFLNlMsVUFBVSxnQkFDYis0RSxFQUFBanFGLEVBQUEzQixjQUFBLFVBQ0VzQixLQUFLLFNBQ0x1UixVQUFVLGtCQUNWKzdFLGVBQWEsUUFDYnh6QixRQUFTbDJELEtBQUs2cEYsY0FKaEIsU0FRQW5ELEVBQUFqcUYsRUFBQTNCLGNBQUEsVUFDRTZTLFVBQVUsa0JBQ1Z1b0QsUUFBU2wyRCxLQUFLdW9GLGNBRmhCLHc5QkVuS0t1QixjQUNuQixTQUFBQSxFQUFZNWlFLEdBQU8sSUFBQXE2QyxZQUFBLG1HQUFBd29CLENBQUEvcEYsS0FBQThwRixLQUNqQjlwRixPQUFBZ3FGLEVBQUFGLEdBQUFyMUYsS0FBQXVMLEtBQU1rbkIsR0FBTnE2QyxxREFEaUIwb0IsRUFBQTFvQixLQWtDTixTQUFBeG1ELEdBQ1h3bUQsRUFBS2w2QixTQUFTdHNCLE9BbkNHLHdHQUdqQndtRCxFQUFLeG1ELE1BQVEsQ0FDWDdoQixLQUFNLEtBQ044dEYsV0FBWSxFQUNaUixLQUFNLEdBQ053QixTQUFVLENBQUUzeEYsTUFBTSxFQUFNNndGLEtBQUssR0FDN0JnRCxhQUFhLEdBR2Yzb0IsRUFBSzRvQixZQUFjNW9CLEVBQUs0b0IsWUFBWTVxRixLQUFqQjBxRixFQUFBMW9CLElBQ25CQSxFQUFLc29CLGFBQWV0b0IsRUFBS3NvQixhQUFhdHFGLEtBQWxCMHFGLEVBQUExb0IsSUFaSEEsd1BBRFlrbEIsSUFBTWo5QyxvREFnQjFCLElDMUJFdk4sRUQwQkY2ckMsRUFBQTluRSxLQUNEOUcsRUFBUzhHLEtBQUtrbkIsTUFBZGh1QixNQzNCRytpQyxFRDZCTi9pQyxFQzVCRSxJQUFJUSxRQUFRLFNBQUNDLEVBQVNDLEdBQ3pCLElBQU1qRSxFQUFVLElBQUlrRSxlQUNwQmxFLEVBQVFxRSxLQUFLLE1BQU9paUMsR0FBSyxHQUV6QnRtQyxFQUFROFgsaUJBQWlCLE9BQVEsV0FDN0I5WCxFQUFRa0QsUUFBUyxLQUFPbEQsRUFBUWtELE9BQVMsSUFDdkNjLEVBQVFoRSxFQUFRNkUsY0FDaEJaLEdBQU8sSUFBSUosTUFBSixDQUFENHdGLElBQStCejBGLEVBQVE4b0MsZUFHbkQ5b0MsRUFBUThYLGlCQUFpQixRQUFTLFdBQzlCN1QsRUFBTyxJQUFJSixNQUFNLG9CQUdyQjdELEVBQVF1RSxVRGVUbkQsS0FBSyxTQUFBK3dGLEdBQ0poZ0IsRUFBS3VpQixZQUFjL3ZGLEtBQUtDLE1BQU11dEYsR0FDOUJoZ0IsRUFBS3pnQyxTQUFTLENBQ1pudUMsS0FBTTR1RSxFQUFLdWlCLGdCQUdkcHZFLE1BQU0sU0FBQWhrQixHQUNMZixRQUFReXhGLElBQUkxd0YsaURBS2hCK0ksS0FBS3NxRixpREFRTHRxRixLQUFLcW5DLFNBQVMsQ0FDWjZpRCxhQUFjbHFGLEtBQUsrYSxNQUFNbXZFLHFEQUszQmxxRixLQUFLcW5DLFNBQVMsQ0FDWjZpRCxhQUFjbHFGLEtBQUsrYSxNQUFNbXZFLCtDQUlwQixJQUFBSyxFQUNtRHZxRixLQUFLK2EsTUFBdkRpc0UsRUFERHVELEVBQ0N2RCxXQUFZUixFQURiK0QsRUFDYS9ELEtBQU10dEYsRUFEbkJxeEYsRUFDbUJyeEYsS0FBTTh1RixFQUR6QnVDLEVBQ3lCdkMsU0FBVWtDLEVBRG5DSyxFQUNtQ0wsWUFDMUMsT0FDRXhELEVBQUFqcUYsRUFBQTNCLGNBQUEsT0FBSzZTLFVBQVUsdUJBQ2IrNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxPQUFLNlMsVUFBVSxZQUNiKzRFLEVBQUFqcUYsRUFBQTNCLGNBQUEsT0FBSzZTLFVBQVUsVUFDYis0RSxFQUFBanFGLEVBQUEzQixjQUFDMHZGLEVBQUQsQ0FDRWhFLEtBQU1BLEVBQ050dEYsS0FBTThHLEtBQUtxcUYsWUFDWGh3RixPQUFRMkYsS0FBS3lxRixlQUluQi9ELEVBQUFqcUYsRUFBQTNCLGNBQUEsT0FBSzZTLFVBQVUsaUJBQ2IrNEUsRUFBQWpxRixFQUFBM0IsY0FBQ2l0RixFQUFELENBQ0UxdEYsT0FBUTJGLEtBQUt5cUYsV0FDYnZ4RixLQUFNQSxFQUNOOHVGLFNBQVVBLEVBQ1ZxQyxZQUFhcnFGLEtBQUtxcUYsWUFDbEJyRCxXQUFZQSxJQUVkTixFQUFBanFGLEVBQUEzQixjQUFBLFVBQ0VzQixLQUFLLFNBQ0x1UixVQUFVLGtFQUNWdW9ELFFBQVNsMkQsS0FBS21xRixhQUhoQixpQkFRRnpELEVBQUFqcUYsRUFBQTNCLGNBQUEsT0FBSzZTLFVBQVUsc0JBQ2IrNEUsRUFBQWpxRixFQUFBM0IsY0FBQSxPQUFLNlMsVUFBVSxnREFDYis0RSxFQUFBanFGLEVBQUEzQixjQUFDNHZGLEVBQUQsQ0FBVXh4RixLQUFNQSxFQUFNbUIsT0FBUTJGLEtBQUt5cUYsY0FFckMvRCxFQUFBanFGLEVBQUEzQixjQUFBLE9BQUs2UyxVQUFVLDBDQUNiKzRFLEVBQUFqcUYsRUFBQTNCLGNBQUNpc0YsRUFBRCxDQUFZQyxXQUFZQSxFQUFZOXRGLEtBQU1BLEtBRzFDZ3hGLEVBQ0F4RCxFQUFBanFGLEVBQUEzQixjQUFDNnZGLEVBQUQsQ0FDRXR3RixPQUFRMkYsS0FBS3lxRixXQUNiUCxZQUFhQSxFQUNiaDBCLFFBQVNsMkQsS0FBSzZwRixhQUNkM3dGLEtBQU1BLElBRUosa0RFbEdoQjB4RixJQUFTemdELE9BQU91OEMsRUFBQWpxRixFQUFBM0IsY0FBQyt2RixFQUFELENBQUszeEYsS0FBSyxjQUFnQjJCLFNBQVNtUSxlQUFlIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdGZ1bmN0aW9uIGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKSB7XG4gXHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHR9XG4gXHR2YXIgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2sgPSB3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuIFx0d2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXSA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdFx0aWYgKHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKSBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHR9IDtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gXHRcdHNjcmlwdC5jaGFyc2V0ID0gXCJ1dGYtOFwiO1xuIFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xuIFx0XHRpZiAobnVsbCkgc2NyaXB0LmNyb3NzT3JpZ2luID0gbnVsbDtcbiBcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHtcbiBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcbiBcdFx0XHR9XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcbiBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XG4gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbiBcdFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuIFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4gXHRcdFx0XHRcdHJlamVjdChcbiBcdFx0XHRcdFx0XHRuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpXG4gXHRcdFx0XHRcdCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcbiBcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuIFx0XHRcdFx0XHRyZXNvbHZlKCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xuIFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXG4gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdC8vIHN1Y2Nlc3NcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcbiBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XG4gXHRcdFx0XHRcdFx0cmV0dXJuO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcIjk0YWU4NjRmZDNhOWYzNWQ5NTc2XCI7XG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRpZiAoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuIFx0XHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdCk7XG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbiBcdFx0fTtcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdFx0fSxcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH07XG4gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCIgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwidFwiXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicmVhZHlcIikgaG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbiBcdFx0XHRcdHRocm93IGVycjtcbiBcdFx0XHR9KTtcblxuIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbiBcdFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XG4gXHRcdFx0XHRcdGlmICghaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XG4gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9O1xuIFx0XHRmbi50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0XHRpZiAobW9kZSAmIDEpIHZhbHVlID0gZm4odmFsdWUpO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnQodmFsdWUsIG1vZGUgJiB+MSk7XG4gXHRcdH07XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIGhvdCA9IHtcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0fSxcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXG4gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxuIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcbiBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGlmICghbCkgcmV0dXJuIGhvdFN0YXR1cztcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcbiBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cbiBcdFx0fTtcbiBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuIFx0XHRyZXR1cm4gaG90O1xuIFx0fVxuXG4gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcblxuIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XG4gXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaG90U3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG4gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuIFx0fVxuXG4gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XG4gXHR2YXIgaG90Q2h1bmtzTG9hZGluZyA9IDA7XG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RBdmFpbGFibGVGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdERlZmVycmVkO1xuXG4gXHQvLyBUaGUgdXBkYXRlIGluZm9cbiBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcbiBcdFx0dmFyIGlzTnVtYmVyID0gK2lkICsgXCJcIiA9PT0gaWQ7XG4gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcImlkbGVcIikge1xuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuIFx0XHR9XG4gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xuIFx0XHRcdGlmICghdXBkYXRlKSB7XG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRcdFx0cmV0dXJuIG51bGw7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcbiBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XG5cbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRob3REZWZlcnJlZCA9IHtcbiBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcbiBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3RcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0aG90VXBkYXRlID0ge307XG4gXHRcdFx0dmFyIGNodW5rSWQgPSAwO1xuIFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xuIFx0XHRcdHtcbiBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJlxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvciAodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuIFx0XHRpZiAoIWRlZmVycmVkKSByZXR1cm47XG4gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbiBcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4gXHRcdFx0XHR9KVxuIFx0XHRcdFx0LnRoZW4oXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiBcdFx0XHRcdFx0fSxcbiBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdCk7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gXHRcdHZhciBjYjtcbiBcdFx0dmFyIGk7XG4gXHRcdHZhciBqO1xuIFx0XHR2YXIgbW9kdWxlO1xuIFx0XHR2YXIgbW9kdWxlSWQ7XG5cbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCkubWFwKGZ1bmN0aW9uKGlkKSB7XG4gXHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcbiBcdFx0XHRcdFx0aWQ6IGlkXG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG4gXHRcdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmICghbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCkgY29udGludWU7XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdFx0Y29udGludWU7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG5cbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuIFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG4gXHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcbiBcdFx0XHR9O1xuIFx0XHR9XG5cbiBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuIFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuIFx0XHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cbiBcdFx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSgpIHtcbiBcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuIFx0XHRcdCk7XG4gXHRcdH07XG5cbiBcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0bW9kdWxlSWQgPSB0b01vZHVsZUlkKGlkKTtcbiBcdFx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cbiBcdFx0XHRcdHZhciByZXN1bHQ7XG4gXHRcdFx0XHRpZiAoaG90VXBkYXRlW2lkXSkge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IGlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuIFx0XHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcbiBcdFx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcbiBcdFx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuIFx0XHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0ZGVmYXVsdDpcbiBcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcbiBcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiYWJvcnRcIik7XG4gXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChhYm9ydEVycm9yKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0FwcGx5KSB7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gaG90VXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRcdFx0XHRpZiAoXG4gXHRcdFx0XHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcyxcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdFx0XHRcdClcbiBcdFx0XHRcdFx0XHQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG4gXHRcdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdClcbiBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcbiBcdFx0XHRcdFx0bW9kdWxlOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdFx0fSk7XG4gXHRcdH1cblxuIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcbiBcdFx0T2JqZWN0LmtleXMoaG90QXZhaWxhYmxlRmlsZXNNYXApLmZvckVhY2goZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSA9PT0gZmFsc2UpIHtcbiBcdFx0XHRcdGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdH0pO1xuXG4gXHRcdHZhciBpZHg7XG4gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuIFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG4gXHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG4gXHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuIFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0Y2IgPSBkaXNwb3NlSGFuZGxlcnNbal07XG4gXHRcdFx0XHRjYihkYXRhKTtcbiBcdFx0XHR9XG4gXHRcdFx0aG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdID0gZGF0YTtcblxuIFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG4gXHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuIFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuIFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcbiBcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgY2hpbGQgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZS5jaGlsZHJlbltqXV07XG4gXHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIHtcbiBcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuIFx0XHR2YXIgZGVwZW5kZW5jeTtcbiBcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuIFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuIFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm90IGluIFwiYXBwbHlcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuIFx0XHRob3RDdXJyZW50SGFzaCA9IGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG4gXHRcdGZvciAobW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXBwbGllZFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG4gXHRcdHZhciBlcnJvciA9IG51bGw7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXTtcbiBcdFx0XHRcdFx0XHRjYiA9IG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuIFx0XHRcdFx0XHRcdGlmIChjYikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGNiKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goY2IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0Y2IgPSBjYWxsYmFja3NbaV07XG4gXHRcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRcdGNiKG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcbiBcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbaV07XG4gXHRcdFx0bW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcbiBcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuIFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnIyO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG4gXHRcdGlmIChlcnJvcikge1xuIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XG4gXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiBcdFx0fVxuXG4gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gXHRcdFx0cmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuIFx0XHRcdHBhcmVudHM6IChob3RDdXJyZW50UGFyZW50c1RlbXAgPSBob3RDdXJyZW50UGFyZW50cywgaG90Q3VycmVudFBhcmVudHMgPSBbXSwgaG90Q3VycmVudFBhcmVudHNUZW1wKSxcbiBcdFx0XHRjaGlsZHJlbjogW11cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoNSkoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4yLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE3LTAzLTIwVDE4OjU5WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxuXG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy4yLjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBBcnJheS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0XHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdFx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0XHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdERPTUV2YWwoIGNvZGUgKTtcblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbXBsZSBzZWxlY3RvciB0aGF0IGNhbiBiZSBmaWx0ZXJlZCBkaXJlY3RseSwgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0fVxuXG5cdC8vIENvbXBsZXggc2VsZWN0b3IsIGNvbXBhcmUgdGhlIHR3byBzZXRzLCByZW1vdmluZyBub24tRWxlbWVudHNcblx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90ICYmIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwiaWZyYW1lXCIgKSApIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuICAgICAgICAvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcbiAgICAgICAgLy8gZG9uJ3Qgc3VwcG9ydCBpdC5cbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG4gICAgICAgICAgICBlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCxcblx0XHRzY2FsZSA9IDEsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0ZG8ge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cblx0XHR9IHdoaWxlIChcblx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXG5cdFx0KTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGpRdWVyeS5pc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBcIj50Ym9keVwiLCBlbGVtIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXG5cdGlmICggbWF0Y2ggKSB7XG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCBpc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJtYXJnaW4gPSAoIC9ebWFyZ2luLyApO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSBkaXZTdHlsZS5tYXJnaW5MZWZ0ID09PSBcIjJweFwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcblx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXG5cdFx0XCJwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cbi8vIGEgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5LlxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdO1xuXHRpZiAoICFyZXQgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSxcblx0XHR2YWwgPSAwO1xuXG5cdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRpZiAoIGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0aSA9IDQ7XG5cblx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHR9IGVsc2Uge1xuXHRcdGkgPSBuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL0hlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0aWYgKCB2YWwgPT09IFwiYXV0b1wiICkge1xuXHRcdHZhbCA9IGVsZW1bIFwib2Zmc2V0XCIgKyBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSBdO1xuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG5cdHJldHVybiAoIHZhbCArXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0bmFtZSxcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXNcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1lcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZnJhc3RydWN0dXJlLmh0bWwjc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciBkb2MsIGRvY0VsZW0sIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0d2luID0gZG9jLmRlZmF1bHRWaWV3O1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdH07XG5cdH0sXG5cblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG5cdFx0Ly8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIW5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldCA9IHtcblx0XHRcdFx0dG9wOiBwYXJlbnRPZmZzZXQudG9wICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApLFxuXHRcdFx0XHRsZWZ0OiBwYXJlbnRPZmZzZXQubGVmdCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlIClcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSx5PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHo9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsYWE9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LGJhPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gY2EoYSxiLGQsYyxlLGcsaCxmKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bZCxjLGUsZyxoLGZdLG09MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW20rK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZD1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZCs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7Y2EoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixkKX12YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRD17fTtcbmZ1bmN0aW9uIEUoYSxiLGQpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZHx8Q31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9CKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7ayhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGQpe3ZhciBjPXZvaWQgMCxlPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1lW2NdJiYoZVtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZSxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIGRhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGQsYyl7aWYoUC5sZW5ndGgpe3ZhciBlPVAucG9wKCk7ZS5yZXN1bHQ9YTtlLmtleVByZWZpeD1iO2UuZnVuYz1kO2UuY29udGV4dD1jO2UuY291bnQ9MDtyZXR1cm4gZX1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpkLGNvbnRleHQ6Yyxjb3VudDowfX1cbmZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsZCxjKXt2YXIgZT10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZXx8XCJib29sZWFuXCI9PT1lKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gZChjLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtlPWFbaF07dmFyIGY9YitUKGUsaCk7Zys9UyhlLGYsZCxjKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUEmJmFbQV18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaD1cbjA7IShlPWEubmV4dCgpKS5kb25lOyllPWUudmFsdWUsZj1iK1QoZSxoKyspLGcrPVMoZSxmLGQsYyk7ZWxzZVwib2JqZWN0XCI9PT1lJiYoZD1cIlwiK2EsQihcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWQ/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZCxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVShhLGIsZCl7cmV0dXJuIG51bGw9PWE/MDpTKGEsXCJcIixiLGQpfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIGVhKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGZhKGEsYixkKXt2YXIgYz1hLnJlc3VsdCxlPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1YoYSxjLGQsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTihhKSYmKGE9ZGEoYSxlKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKStkKSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixkLGMsZSl7dmFyIGc9XCJcIjtudWxsIT1kJiYoZz0oXCJcIitkKS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpO2I9UShiLGcsYyxlKTtVKGEsZmEsYik7UihiKX1mdW5jdGlvbiBXKCl7dmFyIGE9SS5jdXJyZW50O251bGw9PT1hP0IoXCIzMDdcIik6dm9pZCAwO3JldHVybiBhfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VihhLGMsbnVsbCxiLGQpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixkKTtVKGEsZWEsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TihhKT92b2lkIDA6QihcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RSxQdXJlQ29tcG9uZW50OkcsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOmJhLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOmFhLHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNhbGxiYWNrKGEsYil9LHVzZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNvbnRleHQoYSxiKX0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VFZmZlY3QoYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLFxuYixkKXtyZXR1cm4gVygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGQpfSx1c2VEZWJ1Z1ZhbHVlOmZ1bmN0aW9uKCl7fSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUxheW91dEVmZmVjdChhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VNZW1vKGEsYil9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBXKCkudXNlUmVkdWNlcihhLGIsZCl9LHVzZVJlZjpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVJlZihhKX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VTdGF0ZShhKX0sRnJhZ21lbnQ6cixTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eixjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixkKXtudWxsPT09YXx8dm9pZCAwPT09YT9CKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxlPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9XG5iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpOLHZlcnNpb246XCIxNi44LjJcIixcbnVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlOngsdW5zdGFibGVfUHJvZmlsZXI6dSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpJLFJlYWN0Q3VycmVudE93bmVyOkosYXNzaWduOmt9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjguMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtjLGQsZSxmLGcsaF0saz0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbaysrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHgoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtiYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDp4KFwiMjI3XCIpO2Z1bmN0aW9uIGNhKGEsYixjLGQsZSxmLGcsaCxsKXt2YXIgaz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxrKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGRhPSExLGVhPW51bGwsZmE9ITEsaGE9bnVsbCxpYT17b25FcnJvcjpmdW5jdGlvbihhKXtkYT0hMDtlYT1hfX07ZnVuY3Rpb24gamEoYSxiLGMsZCxlLGYsZyxoLGwpe2RhPSExO2VhPW51bGw7Y2EuYXBwbHkoaWEsYXJndW1lbnRzKX1mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsbCl7amEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGRhKXtpZihkYSl7dmFyIGs9ZWE7ZGE9ITE7ZWE9bnVsbH1lbHNlIHgoXCIxOThcIiksaz12b2lkIDA7ZmF8fChmYT0hMCxoYT1rKX19dmFyIGxhPW51bGwsbWE9e307XG5mdW5jdGlvbiBuYSgpe2lmKGxhKWZvcih2YXIgYSBpbiBtYSl7dmFyIGI9bWFbYV0sYz1sYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOngoXCI5NlwiLGEpO2lmKCFvYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDp4KFwiOTdcIixhKTtvYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3BhLmhhc093blByb3BlcnR5KGgpP3goXCI5OVwiLGgpOnZvaWQgMDtwYVtoXT1mO3ZhciBsPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYobCl7Zm9yKGUgaW4gbClsLmhhc093blByb3BlcnR5KGUpJiZxYShsW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8ocWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDp4KFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gcWEoYSxiLGMpe3JhW2FdP3goXCIxMDBcIixhKTp2b2lkIDA7cmFbYV09YjtzYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBvYT1bXSxwYT17fSxyYT17fSxzYT17fSx0YT1udWxsLHVhPW51bGwsdmE9bnVsbDtmdW5jdGlvbiB3YShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9dmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1mdW5jdGlvbiB4YShhLGIpe251bGw9PWI/eChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB5YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgemE9bnVsbDtmdW5jdGlvbiBBYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspd2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmd2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fVxudmFyIEJhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe2xhP3goXCIxMDFcIik6dm9pZCAwO2xhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO25hKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTttYS5oYXNPd25Qcm9wZXJ0eShjKSYmbWFbY109PT1kfHwobWFbY10/eChcIjEwMlwiLGMpOnZvaWQgMCxtYVtjXT1kLGI9ITApfWImJm5hKCl9fTtcbmZ1bmN0aW9uIENhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9dGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIERhKGEpe251bGwhPT1hJiYoemE9eGEoemEsYSkpO2E9emE7emE9bnVsbDtpZihhJiYoeWEoYSxBYSksemE/eChcIjk1XCIpOnZvaWQgMCxmYSkpdGhyb3cgYT1oYSxmYT0hMSxoYT1udWxsLGE7fXZhciBFYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGYT1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0VhLEdhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrRWE7ZnVuY3Rpb24gSGEoYSl7aWYoYVtGYV0pcmV0dXJuIGFbRmFdO2Zvcig7IWFbRmFdOylpZihhLnBhcmVudE5vZGUpYT1hLnBhcmVudE5vZGU7ZWxzZSByZXR1cm4gbnVsbDthPWFbRmFdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gSWEoYSl7YT1hW0ZhXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfVxuZnVuY3Rpb24gSmEoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3goXCIzM1wiKX1mdW5jdGlvbiBLYShhKXtyZXR1cm4gYVtHYV18fG51bGx9ZnVuY3Rpb24gTGEoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBNYShhLGIsYyl7aWYoYj1DYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gTmEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1MYShiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspTWEoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylNYShjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBPYShhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1DYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFBhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmT2EoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gUWEoYSl7eWEoYSxOYSl9dmFyIFJhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuZG9jdW1lbnR8fCF3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7ZnVuY3Rpb24gU2EoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGE9e2FuaW1hdGlvbmVuZDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNhKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWE9e30sVmE9e307XG5SYSYmKFZhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRhLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRhLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRhLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2EoYSl7aWYoVWFbYV0pcmV0dXJuIFVhW2FdO2lmKCFUYVthXSlyZXR1cm4gYTt2YXIgYj1UYVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYSlyZXR1cm4gVWFbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYT1XYShcImFuaW1hdGlvbmVuZFwiKSxZYT1XYShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYT1XYShcImFuaW1hdGlvbnN0YXJ0XCIpLCRhPVdhKFwidHJhbnNpdGlvbmVuZFwiKSxhYj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmI9bnVsbCxjYj1udWxsLGRiPW51bGw7XG5mdW5jdGlvbiBlYigpe2lmKGRiKXJldHVybiBkYjt2YXIgYSxiPWNiLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGJiP2JiLnZhbHVlOmJiLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGRiPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gZmIoKXtyZXR1cm4hMH1mdW5jdGlvbiBnYigpe3JldHVybiExfVxuZnVuY3Rpb24geShhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/ZmI6Z2I7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1nYjtyZXR1cm4gdGhpc31cbm4oeS5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1mYil9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1mYil9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1mYn0saXNQZXJzaXN0ZW50OmdiLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWdiO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7eS5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG55LmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2hiKGMpO3JldHVybiBjfTtoYih5KTtmdW5jdGlvbiBpYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBqYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6eChcIjI3OVwiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9XG5mdW5jdGlvbiBoYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1pYjthLnJlbGVhc2U9amJ9dmFyIGtiPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxsYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbWI9WzksMTMsMjcsMzJdLG5iPVJhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxvYj1udWxsO1JhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihvYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHBiPVJhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhb2IscWI9UmEmJighbmJ8fG9iJiY4PG9iJiYxMT49b2IpLHJiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLHNiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHRiPSExO1xuZnVuY3Rpb24gdWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1tYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHZiKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHdiPSExO2Z1bmN0aW9uIHhiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB2YihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7dGI9ITA7cmV0dXJuIHJiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PXJiJiZ0Yj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB5YihhLGIpe2lmKHdiKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFuYiYmdWIoYSxiKT8oYT1lYigpLGRiPWNiPWJiPW51bGwsd2I9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHFiJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB6Yj17ZXZlbnRUeXBlczpzYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYobmIpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT1zYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT1zYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9c2IuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIHdiP3ViKGEsYykmJihlPXNiLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9c2IuY29tcG9zaXRpb25TdGFydCk7ZT8ocWImJlwia29cIiE9PWMubG9jYWxlJiYod2J8fGUhPT1zYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1zYi5jb21wb3NpdGlvbkVuZCYmd2ImJihmPWViKCkpOihiYj1kLGNiPVwidmFsdWVcImluIGJiP2JiLnZhbHVlOmJiLnRleHRDb250ZW50LHdiPVxuITApKSxlPWtiLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1mOihmPXZiKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxRYShlKSxmPWUpOmY9bnVsbDsoYT1wYj94YihhLGMpOnliKGEsYykpPyhiPWxiLmdldFBvb2xlZChzYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsUWEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sQWI9bnVsbCxCYj1udWxsLENiPW51bGw7ZnVuY3Rpb24gRGIoYSl7aWYoYT11YShhKSl7XCJmdW5jdGlvblwiIT09dHlwZW9mIEFiP3goXCIyODBcIik6dm9pZCAwO3ZhciBiPXRhKGEuc3RhdGVOb2RlKTtBYihhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIEViKGEpe0JiP0NiP0NiLnB1c2goYSk6Q2I9W2FdOkJiPWF9ZnVuY3Rpb24gRmIoKXtpZihCYil7dmFyIGE9QmIsYj1DYjtDYj1CYj1udWxsO0RiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylEYihiW2FdKX19XG5mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj0hMTtmdW5jdGlvbiBLYihhLGIpe2lmKEpiKXJldHVybiBhKGIpO0piPSEwO3RyeXtyZXR1cm4gR2IoYSxiKX1maW5hbGx5e2lmKEpiPSExLG51bGwhPT1CYnx8bnVsbCE9PUNiKUliKCksRmIoKX19dmFyIExiPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIE1iKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhTGJbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxuZnVuY3Rpb24gTmIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIE9iKGEpe2lmKCFSYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBQYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gUWIoYSl7dmFyIGI9UGIoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFJiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1RYihhKSl9ZnVuY3Rpb24gU2IoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVBiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9dmFyIFRiPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1RiLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1xudmFyIFViPS9eKC4qKVtcXFxcXFwvXS8sej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFZiPXo/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsV2I9ej9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LFhiPXo/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LFliPXo/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LFpiPXo/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LCRiPXo/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGFjPXo/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsYmM9ej9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGNjPXo/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGRjPXo/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGVjPXo/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxmYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGdjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBoYyhhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9Z2MmJmFbZ2NdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBpYyhhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGJjOnJldHVyblwiQ29uY3VycmVudE1vZGVcIjtjYXNlIFhiOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIFdiOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBaYjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBZYjpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGRjOnJldHVyblwiU3VzcGVuc2VcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgYWM6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSAkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGNjOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXG5cIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBlYzpyZXR1cm4gaWMoYS50eXBlKTtjYXNlIGZjOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gaWMoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gamMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPWljKGEudHlwZSk7Yz1udWxsO2QmJihjPWljKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoVWIsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBrYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxtYz17fSxuYz17fTtcbmZ1bmN0aW9uIG9jKGEpe2lmKGxjLmNhbGwobmMsYSkpcmV0dXJuITA7aWYobGMuY2FsbChtYyxhKSlyZXR1cm4hMTtpZihrYy50ZXN0KGEpKXJldHVybiBuY1thXT0hMDttY1thXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwwLCExLGEsbnVsbCl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQyhiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwyLCExLGEsbnVsbCl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMywhMCxhLG51bGwpfSk7XG5bXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw0LCExLGEsbnVsbCl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDYsITEsYSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIHJjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2MoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsXG5zYyk7RFtiXT1uZXcgQyhiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmMsc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbmZ1bmN0aW9uIHRjKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHFjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gdWMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHZjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIHdjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXVjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24geGMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24geWMoYSxiKXt4YyhhLGIpO3ZhciBjPXVjKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP3pjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJnpjKGEsYi50eXBlLHVjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gQWMoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gemMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBCYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBDYyhhLGIsYyl7YT15LmdldFBvb2xlZChCYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0ViKGMpO1FhKGEpO3JldHVybiBhfXZhciBEYz1udWxsLEVjPW51bGw7ZnVuY3Rpb24gRmMoYSl7RGEoYSl9XG5mdW5jdGlvbiBHYyhhKXt2YXIgYj1KYShhKTtpZihTYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBIYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBJYz0hMTtSYSYmKEljPU9iKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIEpjKCl7RGMmJihEYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixLYyksRWM9RGM9bnVsbCl9ZnVuY3Rpb24gS2MoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkdjKEVjKSYmKGE9Q2MoRWMsYSxOYihhKSksS2IoRmMsYSkpfWZ1bmN0aW9uIExjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhKYygpLERjPWIsRWM9YyxEYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixLYykpOlwiYmx1clwiPT09YSYmSmMoKX1mdW5jdGlvbiBNYyhhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBHYyhFYyl9XG5mdW5jdGlvbiBOYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIEdjKGIpfWZ1bmN0aW9uIE9jKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIEdjKGIpfVxudmFyIFBjPXtldmVudFR5cGVzOkJjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6SWMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP0phKGIpOndpbmRvdyxmPXZvaWQgMCxnPXZvaWQgMCxoPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09aHx8XCJpbnB1dFwiPT09aCYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1IYzpNYihlKT9JYz9mPU9jOihmPU1jLGc9TGMpOihoPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1oLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPU5jKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBDYyhmLGMsZCk7ZyYmZyhhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJnpjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFFjPXkuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxSYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBTYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVJjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gVGMoKXtyZXR1cm4gU2N9XG52YXIgVWM9MCxWYz0wLFdjPSExLFhjPSExLFljPVFjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpUYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1VYztVYz1hLnNjcmVlblg7cmV0dXJuIFdjP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooV2M9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1WYztWYz1hLnNjcmVlblk7cmV0dXJuIFhjP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooWGM9ITAsMCl9fSksWmM9WWMuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLCRjPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxhZD17ZXZlbnRUeXBlczokYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9IYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGg9dm9pZCAwLGw9dm9pZCAwLGs9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9WWMsaD0kYy5tb3VzZUxlYXZlLGw9JGMubW91c2VFbnRlcixrPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9WmMsaD0kYy5wb2ludGVyTGVhdmUsbD0kYy5wb2ludGVyRW50ZXIsaz1cInBvaW50ZXJcIjt2YXIgbT1udWxsPT1mP2U6SmEoZik7ZT1udWxsPT1iP2U6SmEoYik7YT1nLmdldFBvb2xlZChoLGYsYyxkKTthLnR5cGU9aytcImxlYXZlXCI7YS50YXJnZXQ9bTthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGwsYixjLGQpO2MudHlwZT1rK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1tO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7az0wO2ZvcihnPWI7ZztnPUxhKGcpKWsrKztnPTA7Zm9yKGw9ZTtsO2w9TGEobCkpZysrO2Zvcig7MDxrLWc7KWI9TGEoYiksay0tO2Zvcig7MDxnLWs7KWU9TGEoZSksZy0tO2Zvcig7ay0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9TGEoYik7ZT1MYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7az1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1rJiZrPT09ZSlicmVhaztiLnB1c2goZik7Zj1MYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2s9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWsmJms9PT1lKWJyZWFrO2YucHVzaChkKTtkPUxhKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspT2EoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspT2EoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fTtmdW5jdGlvbiBiZChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGNkPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBkZChhLGIpe2lmKGJkKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighY2QuY2FsbChiLGNbZF0pfHwhYmQoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBlZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7Yi5yZXR1cm47KWlmKGI9Yi5yZXR1cm4sMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMX1yZXR1cm4gMz09PWIudGFnPzI6M31mdW5jdGlvbiBmZChhKXsyIT09ZWQoYSk/eChcIjE4OFwiKTp2b2lkIDB9XG5mdW5jdGlvbiBnZChhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYilyZXR1cm4gYj1lZChhKSwzPT09Yj94KFwiMTg4XCIpOnZvaWQgMCwxPT09Yj9udWxsOmE7Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXJldHVybiBmZChlKSxhO2lmKGc9PT1kKXJldHVybiBmZChlKSxiO2c9Zy5zaWJsaW5nfXgoXCIxODhcIil9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zz0hMTtmb3IodmFyIGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9Zz9cbnZvaWQgMDp4KFwiMTg5XCIpfX1jLmFsdGVybmF0ZSE9PWQ/eChcIjE5MFwiKTp2b2lkIDB9MyE9PWMudGFnP3goXCIxODhcIik6dm9pZCAwO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGQoYSl7YT1nZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciBpZD15LmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksamQ9eS5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxrZD1RYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIGxkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIG1kPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxuZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sb2Q9UWMuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPW1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPWxkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9uZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGMsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/bGQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/bGQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxwZD1ZYy5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSkscWQ9UWMuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGN9KSxyZD15LmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxzZD1ZYy5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHRkPVtbXCJhYm9ydFwiLFwiYWJvcnRcIl0sW1hhLFwiYW5pbWF0aW9uRW5kXCJdLFtZYSxcImFuaW1hdGlvbkl0ZXJhdGlvblwiXSxbWmEsXCJhbmltYXRpb25TdGFydFwiXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiXSxbXCJkcmFnXCIsXCJkcmFnXCJdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCJdLFtcImRyYWdleGl0XCIsXCJkcmFnRXhpdFwiXSxbXCJkcmFnbGVhdmVcIixcImRyYWdMZWF2ZVwiXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCJdLFtcImVtcHRpZWRcIixcImVtcHRpZWRcIl0sW1wiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIl0sXG5bXCJlbmRlZFwiLFwiZW5kZWRcIl0sW1wiZXJyb3JcIixcImVycm9yXCJdLFtcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJsb2FkXCIsXCJsb2FkXCJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIl0sW1wibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCJdLFtcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCJdLFtcIm1vdXNlbW92ZVwiLFwibW91c2VNb3ZlXCJdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiXSxbXCJtb3VzZW92ZXJcIixcIm1vdXNlT3ZlclwiXSxbXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCJdLFtcInBvaW50ZXJtb3ZlXCIsXCJwb2ludGVyTW92ZVwiXSxbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyT3V0XCJdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiXSxbXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIl0sW1wic2Nyb2xsXCIsXCJzY3JvbGxcIl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCJdLFxuW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiXSxbXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCJdLFtcInRvZ2dsZVwiLFwidG9nZ2xlXCJdLFtcInRvdWNobW92ZVwiLFwidG91Y2hNb3ZlXCJdLFskYSxcInRyYW5zaXRpb25FbmRcIl0sW1wid2FpdGluZ1wiLFwid2FpdGluZ1wiXSxbXCJ3aGVlbFwiLFwid2hlZWxcIl1dLHVkPXt9LHZkPXt9O2Z1bmN0aW9uIHdkKGEsYil7dmFyIGM9YVswXTthPWFbMV07dmFyIGQ9XCJvblwiKyhhWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSk7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07dWRbYV09Yjt2ZFtjXT1ifVxuW1tcImJsdXJcIixcImJsdXJcIl0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIl0sW1wiY2xpY2tcIixcImNsaWNrXCJdLFtcImNsb3NlXCIsXCJjbG9zZVwiXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIl0sW1wiY29weVwiLFwiY29weVwiXSxbXCJjdXRcIixcImN1dFwiXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIl0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCJdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIl0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIl0sW1wiZHJvcFwiLFwiZHJvcFwiXSxbXCJmb2N1c1wiLFwiZm9jdXNcIl0sW1wiaW5wdXRcIixcImlucHV0XCJdLFtcImludmFsaWRcIixcImludmFsaWRcIl0sW1wia2V5ZG93blwiLFwia2V5RG93blwiXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIl0sW1wia2V5dXBcIixcImtleVVwXCJdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCJdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIl0sW1wicGFzdGVcIixcInBhc3RlXCJdLFtcInBhdXNlXCIsXCJwYXVzZVwiXSxbXCJwbGF5XCIsXCJwbGF5XCJdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIl0sXG5bXCJwb2ludGVyZG93blwiLFwicG9pbnRlckRvd25cIl0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIl0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiXSxbXCJyZXNldFwiLFwicmVzZXRcIl0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIl0sW1wic3VibWl0XCIsXCJzdWJtaXRcIl0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCJdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCJdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3dkKGEsITApfSk7dGQuZm9yRWFjaChmdW5jdGlvbihhKXt3ZChhLCExKX0pO1xudmFyIHhkPXtldmVudFR5cGVzOnVkLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPXZkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12ZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PWxkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1vZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9a2Q7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1ZYzticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxucGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT1xZDticmVhaztjYXNlIFhhOmNhc2UgWWE6Y2FzZSBaYTphPWlkO2JyZWFrO2Nhc2UgJGE6YT1yZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1RYzticmVhaztjYXNlIFwid2hlZWxcIjphPXNkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9amQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1aYzticmVhaztkZWZhdWx0OmE9eX1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1FhKGIpO3JldHVybiBifX0seWQ9eGQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFxuemQ9W107ZnVuY3Rpb24gQWQoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZDtmb3IoZD1jO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighZClicmVhazthLmFuY2VzdG9ycy5wdXNoKGMpO2M9SGEoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9TmIoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTtmb3IodmFyIGY9YS5uYXRpdmVFdmVudCxnPW51bGwsaD0wO2g8b2EubGVuZ3RoO2grKyl7dmFyIGw9b2FbaF07bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUpKSYmKGc9eGEoZyxsKSl9RGEoZyl9fXZhciBCZD0hMDtcbmZ1bmN0aW9uIEUoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oeWQoYSk/Q2Q6RGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCExKX1mdW5jdGlvbiBFZChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPSh5ZChhKT9DZDpEZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApfWZ1bmN0aW9uIENkKGEsYil7SGIoRGQsYSxiKX1cbmZ1bmN0aW9uIERkKGEsYil7aWYoQmQpe3ZhciBjPU5iKGIpO2M9SGEoYyk7bnVsbD09PWN8fFwibnVtYmVyXCIhPT10eXBlb2YgYy50YWd8fDI9PT1lZChjKXx8KGM9bnVsbCk7aWYoemQubGVuZ3RoKXt2YXIgZD16ZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtLYihBZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPnpkLmxlbmd0aCYmemQucHVzaChhKX19fXZhciBGZD17fSxHZD0wLEhkPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcbmZ1bmN0aW9uIElkKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLEhkKXx8KGFbSGRdPUdkKyssRmRbYVtIZF1dPXt9KTtyZXR1cm4gRmRbYVtIZF1dfWZ1bmN0aW9uIEpkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBLZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZChhLGIpe3ZhciBjPUtkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtkKGMpfX1mdW5jdGlvbiBNZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01kKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5kKCl7Zm9yKHZhciBhPXdpbmRvdyxiPUpkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7YT1iLmNvbnRlbnREb2N1bWVudC5kZWZhdWx0Vmlld31jYXRjaChjKXticmVha31iPUpkKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9kKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBQZCgpe3ZhciBhPU5kKCk7aWYoT2QoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2I9KGI9YS5vd25lckRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBjPWIuZ2V0U2VsZWN0aW9uJiZiLmdldFNlbGVjdGlvbigpO2lmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQSl7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxnPS0xLGg9LTEsbD0wLGs9MCxtPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHQ7Oyl7bSE9PWJ8fDAhPT1kJiYzIT09bS5ub2RlVHlwZXx8KGc9ZitkKTttIT09ZXx8MCE9PWMmJjMhPT1tLm5vZGVUeXBlfHwoaD1mK2MpOzM9PT1tLm5vZGVUeXBlJiYoZis9bS5ub2RlVmFsdWUubGVuZ3RoKTtcbmlmKG51bGw9PT0odD1tLmZpcnN0Q2hpbGQpKWJyZWFrO3A9bTttPXR9Zm9yKDs7KXtpZihtPT09YSlicmVhayBiO3A9PT1iJiYrK2w9PT1kJiYoZz1mKTtwPT09ZSYmKytrPT09YyYmKGg9Zik7aWYobnVsbCE9PSh0PW0ubmV4dFNpYmxpbmcpKWJyZWFrO209cDtwPW0ucGFyZW50Tm9kZX1tPXR9Yj0tMT09PWd8fC0xPT09aD9udWxsOntzdGFydDpnLGVuZDpofX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtyZXR1cm57Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifX1cbmZ1bmN0aW9uIFFkKGEpe3ZhciBiPU5kKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZNZChjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmT2QoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9TGQoYyxmKTt2YXIgZz1MZChjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFJkPVJhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsU2Q9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFRkPW51bGwsVWQ9bnVsbCxWZD1udWxsLFdkPSExO1xuZnVuY3Rpb24gWGQoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihXZHx8bnVsbD09VGR8fFRkIT09SmQoYykpcmV0dXJuIG51bGw7Yz1UZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZPZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBWZCYmZGQoVmQsYyk/bnVsbDooVmQ9YyxhPXkuZ2V0UG9vbGVkKFNkLnNlbGVjdCxVZCxhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PVRkLFFhKGEpLGEpfVxudmFyIFlkPXtldmVudFR5cGVzOlNkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQsZjtpZighKGY9IWUpKXthOntlPUlkKGUpO2Y9c2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107aWYoIWUuaGFzT3duUHJvcGVydHkoaCl8fCFlW2hdKXtlPSExO2JyZWFrIGF9fWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9KYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKE1iKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKVRkPWUsVWQ9YixWZD1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6VmQ9VWQ9VGQ9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6V2Q9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBXZD0hMSxYZChjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihSZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIFhkKGMsZCl9cmV0dXJuIG51bGx9fTtCYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3RhPUthO3VhPUlhO3ZhPUphO0JhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46eGQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmFkLENoYW5nZUV2ZW50UGx1Z2luOlBjLFNlbGVjdEV2ZW50UGx1Z2luOllkLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46emJ9KTtmdW5jdGlvbiBaZChhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRkKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9WmQoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIGFlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIit1YyhjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gYmUoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3goXCI5MVwiKTp2b2lkIDA7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gY2UoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz94KFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6eChcIjkzXCIpLGI9YlswXSksYz1iKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6dWMoYyl9fVxuZnVuY3Rpb24gZGUoYSxiKXt2YXIgYz11YyhiLnZhbHVlKSxkPXVjKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gZWUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIGZlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGdlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gaGUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2dlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIGllPXZvaWQgMCxqZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1mZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtpZT1pZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1pZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBrZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIGxlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LG1lPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhsZSkuZm9yRWFjaChmdW5jdGlvbihhKXttZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2xlW2JdPWxlW2FdfSl9KTtmdW5jdGlvbiBuZShhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8bGUuaGFzT3duUHJvcGVydHkoYSkmJmxlW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIG9lKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPW5lKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHBlPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBxZShhLGIpe2ImJihwZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/eChcIjEzN1wiLGEsXCJcIik6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj94KFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOngoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP3goXCI2MlwiLFwiXCIpOnZvaWQgMCl9XG5mdW5jdGlvbiByZShhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19XG5mdW5jdGlvbiBzZShhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1JZChhKTtiPXNhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2lmKCFjLmhhc093blByb3BlcnR5KGUpfHwhY1tlXSl7c3dpdGNoKGUpe2Nhc2UgXCJzY3JvbGxcIjpFZChcInNjcm9sbFwiLGEpO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6RWQoXCJmb2N1c1wiLGEpO0VkKFwiYmx1clwiLGEpO2MuYmx1cj0hMDtjLmZvY3VzPSEwO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpPYihlKSYmRWQoZSxhKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWIuaW5kZXhPZihlKSYmRShlLGEpfWNbZV09ITB9fX1mdW5jdGlvbiB0ZSgpe312YXIgdWU9bnVsbCx2ZT1udWxsO1xuZnVuY3Rpb24gd2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfWZ1bmN0aW9uIHhlKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciB5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCx6ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQWU9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEJlPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s7XG5mdW5jdGlvbiBDZShhLGIsYyxkLGUpe2FbR2FdPWU7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJnhjKGEsZSk7cmUoYyxkKTtkPXJlKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/b2UoYSxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP2plKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9rZShhLGgpOnRjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjp5YyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmRlKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/YWUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP2FlKGEsISFlLm11bHRpcGxlLGUuZGVmYXVsdFZhbHVlLFxuITApOmFlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1mdW5jdGlvbiBEZShhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIEVlKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1uZXcgU2V0O3ZhciBGZT1bXSxHZT0tMTtmdW5jdGlvbiBGKGEpezA+R2V8fChhLmN1cnJlbnQ9RmVbR2VdLEZlW0dlXT1udWxsLEdlLS0pfWZ1bmN0aW9uIEcoYSxiKXtHZSsrO0ZlW0dlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEhlPXt9LEg9e2N1cnJlbnQ6SGV9LEk9e2N1cnJlbnQ6ITF9LEllPUhlO1xuZnVuY3Rpb24gSmUoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBIZTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBKKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gS2UoYSl7RihJLGEpO0YoSCxhKX1mdW5jdGlvbiBMZShhKXtGKEksYSk7RihILGEpfVxuZnVuY3Rpb24gTWUoYSxiLGMpe0guY3VycmVudCE9PUhlP3goXCIxNjhcIik6dm9pZCAwO0coSCxiLGEpO0coSSxjLGEpfWZ1bmN0aW9uIE5lKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZCllIGluIGE/dm9pZCAwOngoXCIxMDhcIixpYyhiKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIG4oe30sYyxkKX1mdW5jdGlvbiBPZShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEhlO0llPUguY3VycmVudDtHKEgsYixhKTtHKEksSS5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gUGUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2Q/dm9pZCAwOngoXCIxNjlcIik7Yz8oYj1OZShhLGIsSWUpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixGKEksYSksRihILGEpLEcoSCxiLGEpKTpGKEksYSk7RyhJLGMsYSl9dmFyIFFlPW51bGwsUmU9bnVsbDtmdW5jdGlvbiBTZShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dHJ5e3JldHVybiBhKGIpfWNhdGNoKGMpe319fVxuZnVuY3Rpb24gVGUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7UWU9U2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO1JlPVNlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBVZShhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuY29udGV4dERlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBLKGEsYixjLGQpe3JldHVybiBuZXcgVWUoYSxiLGMsZCl9XG5mdW5jdGlvbiBWZShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFdlKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBWZShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Y2MpcmV0dXJuIDExO2lmKGE9PT1lYylyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBYZShhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUsoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2MuY29udGV4dERlcGVuZGVuY2llcz1hLmNvbnRleHREZXBlbmRlbmNpZXM7Yy5zaWJsaW5nPWEuc2libGluZztcbmMuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFllKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlWZShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBYYjpyZXR1cm4gWmUoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBiYzpyZXR1cm4gJGUoYyxlfDMsZixiKTtjYXNlIFliOnJldHVybiAkZShjLGV8MixmLGIpO2Nhc2UgWmI6cmV0dXJuIGE9SygxMixjLGIsZXw0KSxhLmVsZW1lbnRUeXBlPVpiLGEudHlwZT1aYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGRjOnJldHVybiBhPUsoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9ZGMsYS50eXBlPWRjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSAkYjpnPTEwO2JyZWFrIGE7Y2FzZSBhYzpnPTk7YnJlYWsgYTtjYXNlIGNjOmc9MTE7YnJlYWsgYTtjYXNlIGVjOmc9XG4xNDticmVhayBhO2Nhc2UgZmM6Zz0xNjtkPW51bGw7YnJlYWsgYX14KFwiMTMwXCIsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpfWI9SyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFplKGEsYixjLGQpe2E9Syg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gJGUoYSxiLGMsZCl7YT1LKDgsYSxkLGIpO2I9MD09PShiJjEpP1liOmJjO2EuZWxlbWVudFR5cGU9YjthLnR5cGU9YjthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gYWYoYSxiLGMpe2E9Syg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBiZihhLGIsYyl7Yj1LKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifWZ1bmN0aW9uIGNmKGEsYil7YS5kaWRFcnJvcj0hMTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7MD09PWM/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9YjpjPGI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWI6YS5sYXRlc3RQZW5kaW5nVGltZT5iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1iKTtkZihiLGEpfVxuZnVuY3Rpb24gZWYoYSxiKXthLmRpZEVycm9yPSExO2lmKDA9PT1iKWEuZWFybGllc3RQZW5kaW5nVGltZT0wLGEubGF0ZXN0UGVuZGluZ1RpbWU9MCxhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wO2Vsc2V7YjxhLmxhdGVzdFBpbmdlZFRpbWUmJihhLmxhdGVzdFBpbmdlZFRpbWU9MCk7dmFyIGM9YS5sYXRlc3RQZW5kaW5nVGltZTswIT09YyYmKGM+Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT0wOmEuZWFybGllc3RQZW5kaW5nVGltZT5iJiYoYS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWUpKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2NmKGEsYik6YjxhLmxhdGVzdFN1c3BlbmRlZFRpbWU/KGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RQaW5nZWRUaW1lPTAsY2YoYSxiKSk6XG5iPmMmJmNmKGEsYil9ZGYoMCxhKX1mdW5jdGlvbiBmZihhLGIpe2EuZGlkRXJyb3I9ITE7YS5sYXRlc3RQaW5nZWRUaW1lPj1iJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZSxkPWEubGF0ZXN0UGVuZGluZ1RpbWU7Yz09PWI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWQ9PT1iP2EubGF0ZXN0UGVuZGluZ1RpbWU9MDpkOmQ9PT1iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1jKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2Q9YS5sYXRlc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWEubGF0ZXN0U3VzcGVuZGVkVGltZT1iOmM8Yj9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1iOmQ+YiYmKGEubGF0ZXN0U3VzcGVuZGVkVGltZT1iKTtkZihiLGEpfVxuZnVuY3Rpb24gZ2YoYSxiKXt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7YT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtjPmImJihiPWMpO2E+YiYmKGI9YSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZGYoYSxiKXt2YXIgYz1iLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWIubGF0ZXN0U3VzcGVuZGVkVGltZSxlPWIuZWFybGllc3RQZW5kaW5nVGltZSxmPWIubGF0ZXN0UGluZ2VkVGltZTtlPTAhPT1lP2U6ZjswPT09ZSYmKDA9PT1hfHxkPGEpJiYoZT1kKTthPWU7MCE9PWEmJmM+YSYmKGE9Yyk7Yi5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1lO2IuZXhwaXJhdGlvblRpbWU9YX1mdW5jdGlvbiBMKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifVxuZnVuY3Rpb24gaGYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OmEuX3N0YXR1cz0wO2I9YS5fY3RvcjtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pO3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYS5fcmVzdWx0O2Nhc2UgMjp0aHJvdyBhLl9yZXN1bHQ7fWEuX3Jlc3VsdD1iO3Rocm93IGI7fX12YXIgamY9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBrZihhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciB0Zj17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWVkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWxmKCk7ZD1tZihkLGEpO3ZhciBlPW5mKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtvZigpO3BmKGEsZSk7cWYoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9bGYoKTtkPW1mKGQsYSk7dmFyIGU9bmYoZCk7ZS50YWc9cmY7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO29mKCk7cGYoYSxlKTtxZihhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1sZigpO2M9bWYoYyxhKTt2YXIgZD1uZihjKTtkLnRhZz1cbnNmO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtvZigpO3BmKGEsZCk7cWYoYSxjKX19O2Z1bmN0aW9uIHVmKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWRkKGMsZCl8fCFkZChlLGYpOiEwfVxuZnVuY3Rpb24gdmYoYSxiLGMpe3ZhciBkPSExLGU9SGU7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9TShmKTooZT1KKGIpP0llOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0plKGEsZSk6SGUpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj10ZjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiB3ZihhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmdGYuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiB4ZihhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWpmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9TShmKTooZj1KKGIpP0llOkguY3VycmVudCxlLmNvbnRleHQ9SmUoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoeWYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtmKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJnRmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKHlmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgemY9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIEFmKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDEhPT1jLnRhZz94KFwiMzA5XCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDp4KFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1qZiYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT94KFwiMjg0XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6eChcIjI5MFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gQmYoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJngoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIENmKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9WGUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1hZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9QWYoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVllKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPUFmKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9YmYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WmUoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWFmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBjPVllKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPUFmKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSBXYjpyZXR1cm4gYj1iZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoemYoYil8fFxuaGMoYikpcmV0dXJuIGI9WmUoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7QmYoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB0KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09WGI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmwoYSxiLGMsZCk6bnVsbDtjYXNlIFdiOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsfWlmKHpmKGMpfHxoYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7QmYoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBBKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgVmI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PVhiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6bChiLGEsZCxlKTtjYXNlIFdiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpfWlmKHpmKGQpfHxoYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7QmYoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB2KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCxxPWcsdT1nPTAsQj1udWxsO251bGwhPT1xJiZ1PGgubGVuZ3RoO3UrKyl7cS5pbmRleD51PyhCPXEscT1udWxsKTpCPXEuc2libGluZzt2YXIgdz10KGUscSxoW3VdLGspO2lmKG51bGw9PT13KXtudWxsPT09cSYmKHE9Qik7YnJlYWt9YSYmXG5xJiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSxxKTtnPWYodyxnLHUpO251bGw9PT1tP2w9dzptLnNpYmxpbmc9dzttPXc7cT1CfWlmKHU9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHEpLGw7aWYobnVsbD09PXEpe2Zvcig7dTxoLmxlbmd0aDt1KyspaWYocT1wKGUsaFt1XSxrKSlnPWYocSxnLHUpLG51bGw9PT1tP2w9cTptLnNpYmxpbmc9cSxtPXE7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpO3U8aC5sZW5ndGg7dSsrKWlmKEI9QShxLGUsdSxoW3VdLGspKWEmJm51bGwhPT1CLmFsdGVybmF0ZSYmcS5kZWxldGUobnVsbD09PUIua2V5P3U6Qi5rZXkpLGc9ZihCLGcsdSksbnVsbD09PW0/bD1COm0uc2libGluZz1CLG09QjthJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIFIoZSxnLGgsayl7dmFyIGw9aGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/eChcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD94KFwiMTUxXCIpOnZvaWQgMDtcbmZvcih2YXIgbT1sPW51bGwscT1nLHU9Zz0wLEI9bnVsbCx3PWgubmV4dCgpO251bGwhPT1xJiYhdy5kb25lO3UrKyx3PWgubmV4dCgpKXtxLmluZGV4PnU/KEI9cSxxPW51bGwpOkI9cS5zaWJsaW5nO3ZhciB2PXQoZSxxLHcudmFsdWUsayk7aWYobnVsbD09PXYpe3F8fChxPUIpO2JyZWFrfWEmJnEmJm51bGw9PT12LmFsdGVybmF0ZSYmYihlLHEpO2c9Zih2LGcsdSk7bnVsbD09PW0/bD12Om0uc2libGluZz12O209djtxPUJ9aWYody5kb25lKXJldHVybiBjKGUscSksbDtpZihudWxsPT09cSl7Zm9yKDshdy5kb25lO3UrKyx3PWgubmV4dCgpKXc9cChlLHcudmFsdWUsayksbnVsbCE9PXcmJihnPWYodyxnLHUpLG51bGw9PT1tP2w9dzptLnNpYmxpbmc9dyxtPXcpO3JldHVybiBsfWZvcihxPWQoZSxxKTshdy5kb25lO3UrKyx3PWgubmV4dCgpKXc9QShxLGUsdSx3LnZhbHVlLGspLG51bGwhPT13JiYoYSYmbnVsbCE9PXcuYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09dy5rZXk/dTpcbncua2V5KSxnPWYodyxnLHUpLG51bGw9PT1tP2w9dzptLnNpYmxpbmc9dyxtPXcpO2EmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PVhiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFZiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09WGI6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09WGI/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPUFmKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9XG5rLnNpYmxpbmd9Zi50eXBlPT09WGI/KGQ9WmUoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVllKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPUFmKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSBXYjphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWJmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVxuXCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1hZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZih6ZihmKSlyZXR1cm4gdihhLGQsZixoKTtpZihoYyhmKSlyZXR1cm4gUihhLGQsZixoKTtsJiZCZihhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOmg9YS50eXBlLHgoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBEZj1DZighMCksRWY9Q2YoITEpLEZmPXt9LE49e2N1cnJlbnQ6RmZ9LEdmPXtjdXJyZW50OkZmfSxIZj17Y3VycmVudDpGZn07ZnVuY3Rpb24gSWYoYSl7YT09PUZmP3goXCIxNzRcIik6dm9pZCAwO3JldHVybiBhfVxuZnVuY3Rpb24gSmYoYSxiKXtHKEhmLGIsYSk7RyhHZixhLGEpO0coTixGZixhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpoZShudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9aGUoYixjKX1GKE4sYSk7RyhOLGIsYSl9ZnVuY3Rpb24gS2YoYSl7RihOLGEpO0YoR2YsYSk7RihIZixhKX1mdW5jdGlvbiBMZihhKXtJZihIZi5jdXJyZW50KTt2YXIgYj1JZihOLmN1cnJlbnQpO3ZhciBjPWhlKGIsYS50eXBlKTtiIT09YyYmKEcoR2YsYSxhKSxHKE4sYyxhKSl9ZnVuY3Rpb24gTWYoYSl7R2YuY3VycmVudD09PWEmJihGKE4sYSksRihHZixhKSl9XG52YXIgTmY9MCxPZj0yLFBmPTQsUWY9OCxSZj0xNixTZj0zMixUZj02NCxVZj0xMjgsVmY9VGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixXZj0wLFhmPW51bGwsTz1udWxsLFA9bnVsbCxZZj1udWxsLFE9bnVsbCxaZj1udWxsLCRmPTAsYWc9bnVsbCxiZz0wLGNnPSExLGRnPW51bGwsZWc9MDtmdW5jdGlvbiBmZygpe3goXCIzMDdcIil9ZnVuY3Rpb24gZ2coYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighYmQoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIGhnKGEsYixjLGQsZSxmKXtXZj1mO1hmPWI7UD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtWZi5jdXJyZW50PW51bGw9PT1QP2lnOmpnO2I9YyhkLGUpO2lmKGNnKXtkbyBjZz0hMSxlZys9MSxQPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsLFpmPVlmLGFnPVE9Tz1udWxsLFZmLmN1cnJlbnQ9amcsYj1jKGQsZSk7d2hpbGUoY2cpO2RnPW51bGw7ZWc9MH1WZi5jdXJyZW50PWtnO2E9WGY7YS5tZW1vaXplZFN0YXRlPVlmO2EuZXhwaXJhdGlvblRpbWU9JGY7YS51cGRhdGVRdWV1ZT1hZzthLmVmZmVjdFRhZ3w9Ymc7YT1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtXZj0wO1pmPVE9WWY9UD1PPVhmPW51bGw7JGY9MDthZz1udWxsO2JnPTA7YT94KFwiMzAwXCIpOnZvaWQgMDtyZXR1cm4gYn1mdW5jdGlvbiBsZygpe1ZmLmN1cnJlbnQ9a2c7V2Y9MDtaZj1RPVlmPVA9Tz1YZj1udWxsOyRmPTA7YWc9bnVsbDtiZz0wO2NnPSExO2RnPW51bGw7ZWc9MH1cbmZ1bmN0aW9uIG1nKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxxdWV1ZTpudWxsLGJhc2VVcGRhdGU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1RP1lmPVE9YTpRPVEubmV4dD1hO3JldHVybiBRfWZ1bmN0aW9uIG5nKCl7aWYobnVsbCE9PVpmKVE9WmYsWmY9US5uZXh0LE89UCxQPW51bGwhPT1PP08ubmV4dDpudWxsO2Vsc2V7bnVsbD09PVA/eChcIjMxMFwiKTp2b2lkIDA7Tz1QO3ZhciBhPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUscXVldWU6Ty5xdWV1ZSxiYXNlVXBkYXRlOk8uYmFzZVVwZGF0ZSxuZXh0Om51bGx9O1E9bnVsbD09PVE/WWY9YTpRLm5leHQ9YTtQPU8ubmV4dH1yZXR1cm4gUX1mdW5jdGlvbiBvZyhhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHBnKGEpe3ZhciBiPW5nKCksYz1iLnF1ZXVlO251bGw9PT1jP3goXCIzMTFcIik6dm9pZCAwO2lmKDA8ZWcpe3ZhciBkPWMuZGlzcGF0Y2g7aWYobnVsbCE9PWRnKXt2YXIgZT1kZy5nZXQoYyk7aWYodm9pZCAwIT09ZSl7ZGcuZGVsZXRlKGMpO3ZhciBmPWIubWVtb2l6ZWRTdGF0ZTtkbyBmPWEoZixlLmFjdGlvbiksZT1lLm5leHQ7d2hpbGUobnVsbCE9PWUpO2JkKGYsYi5tZW1vaXplZFN0YXRlKXx8KHFnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9PT1jLmxhc3QmJihiLmJhc2VTdGF0ZT1mKTtyZXR1cm5bZixkXX19cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxkXX1kPWMubGFzdDt2YXIgZz1iLmJhc2VVcGRhdGU7Zj1iLmJhc2VTdGF0ZTtudWxsIT09Zz8obnVsbCE9PWQmJihkLm5leHQ9bnVsbCksZD1nLm5leHQpOmQ9bnVsbCE9PWQ/ZC5uZXh0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBoPWU9bnVsbCxsPWQsaz0hMTtkb3t2YXIgbT1sLmV4cGlyYXRpb25UaW1lO1xubTxXZj8oa3x8KGs9ITAsaD1nLGU9ZiksbT4kZiYmKCRmPW0pKTpmPWwuZWFnZXJSZWR1Y2VyPT09YT9sLmVhZ2VyU3RhdGU6YShmLGwuYWN0aW9uKTtnPWw7bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1kKTtrfHwoaD1nLGU9Zik7YmQoZixiLm1lbW9pemVkU3RhdGUpfHwocWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT1oO2IuYmFzZVN0YXRlPWU7Yy5lYWdlclJlZHVjZXI9YTtjLmVhZ2VyU3RhdGU9Zn1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gcmcoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O251bGw9PT1hZz8oYWc9e2xhc3RFZmZlY3Q6bnVsbH0sYWcubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGI9YWcubGFzdEVmZmVjdCxudWxsPT09Yj9hZy5sYXN0RWZmZWN0PWEubmV4dD1hOihjPWIubmV4dCxiLm5leHQ9YSxhLm5leHQ9YyxhZy5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzZyhhLGIsYyxkKXt2YXIgZT1tZygpO2JnfD1hO2UubWVtb2l6ZWRTdGF0ZT1yZyhiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHRnKGEsYixjLGQpe3ZhciBlPW5nKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmZ2coZCxnLmRlcHMpKXtyZyhOZixjLGYsZCk7cmV0dXJufX1iZ3w9YTtlLm1lbW9pemVkU3RhdGU9cmcoYixjLGYsZCl9ZnVuY3Rpb24gdWcoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB2Zygpe31cbmZ1bmN0aW9uIHdnKGEsYixjKXsyNT5lZz92b2lkIDA6eChcIjMwMVwiKTt2YXIgZD1hLmFsdGVybmF0ZTtpZihhPT09WGZ8fG51bGwhPT1kJiZkPT09WGYpaWYoY2c9ITAsYT17ZXhwaXJhdGlvblRpbWU6V2YsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sbnVsbD09PWRnJiYoZGc9bmV3IE1hcCksYz1kZy5nZXQoYiksdm9pZCAwPT09YylkZy5zZXQoYixhKTtlbHNle2ZvcihiPWM7bnVsbCE9PWIubmV4dDspYj1iLm5leHQ7Yi5uZXh0PWF9ZWxzZXtvZigpO3ZhciBlPWxmKCk7ZT1tZihlLGEpO3ZhciBmPXtleHBpcmF0aW9uVGltZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5sYXN0O2lmKG51bGw9PT1nKWYubmV4dD1mO2Vsc2V7dmFyIGg9Zy5uZXh0O251bGwhPT1oJiYoZi5uZXh0PWgpO2cubmV4dD1mfWIubGFzdD1mO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PVxuZHx8MD09PWQuZXhwaXJhdGlvblRpbWUpJiYoZD1iLmVhZ2VyUmVkdWNlcixudWxsIT09ZCkpdHJ5e3ZhciBsPWIuZWFnZXJTdGF0ZSxrPWQobCxjKTtmLmVhZ2VyUmVkdWNlcj1kO2YuZWFnZXJTdGF0ZT1rO2lmKGJkKGssbCkpcmV0dXJufWNhdGNoKG0pe31maW5hbGx5e31xZihhLGUpfX1cbnZhciBrZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmZyx1c2VDb250ZXh0OmZnLHVzZUVmZmVjdDpmZyx1c2VJbXBlcmF0aXZlSGFuZGxlOmZnLHVzZUxheW91dEVmZmVjdDpmZyx1c2VNZW1vOmZnLHVzZVJlZHVjZXI6ZmcsdXNlUmVmOmZnLHVzZVN0YXRlOmZnLHVzZURlYnVnVmFsdWU6Zmd9LGlnPXtyZWFkQ29udGV4dDpNLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7bWcoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBzZyg1MTYsVWZ8VGYsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHNnKDQsUGZ8U2YsdWcuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBzZyg0LFBmfFNmLGEsYil9LFxudXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPW1nKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPW1nKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGVhZ2VyUmVkdWNlcjphLGVhZ2VyU3RhdGU6Yn07YT1hLmRpc3BhdGNoPXdnLmJpbmQobnVsbCxYZixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9bWcoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7dmFyIGI9bWcoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGVhZ2VyUmVkdWNlcjpvZyxcbmVhZ2VyU3RhdGU6YX07YT1hLmRpc3BhdGNoPXdnLmJpbmQobnVsbCxYZixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfSx1c2VEZWJ1Z1ZhbHVlOnZnfSxqZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe3ZhciBjPW5nKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZnZyhiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNLHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0Zyg1MTYsVWZ8VGYsYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRnKDQsUGZ8U2YsdWcuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0Zyg0LFBmfFNmLGEsYil9LFxudXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPW5nKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZnZyhiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpwZyx1c2VSZWY6ZnVuY3Rpb24oKXtyZXR1cm4gbmcoKS5tZW1vaXplZFN0YXRlfSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gcGcob2csYSl9LHVzZURlYnVnVmFsdWU6dmd9LHhnPW51bGwseWc9bnVsbCx6Zz0hMTtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9Syg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIEJnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBDZyhhKXtpZih6Zyl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQmcoYSxiKSl7Yj1EZShjKTtpZighYnx8IUJnKGEsYikpe2EuZWZmZWN0VGFnfD0yO3pnPSExO3hnPWE7cmV0dXJufUFnKHhnLGMpfXhnPWE7eWc9RWUoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix6Zz0hMSx4Zz1hfX1mdW5jdGlvbiBEZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjE4IT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1mdW5jdGlvbiBFZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIXpnKXJldHVybiBEZyhhKSx6Zz0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIXhlKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj15ZztiOylBZyhhLGIpLGI9RGUoYik7RGcoYSk7eWc9eGc/RGUoYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gRmcoKXt5Zz14Zz1udWxsO3pnPSExfVxudmFyIEdnPVRiLlJlYWN0Q3VycmVudE93bmVyLHFnPSExO2Z1bmN0aW9uIFMoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9FZihiLG51bGwsYyxkKTpEZihiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBIZyhhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7SWcoYixlKTtkPWhnKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXFnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksSmcoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBLZyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIVZlKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLExnKGEsYixnLGQsZSxmKTthPVllKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6ZGQsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gSmcoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9WGUoZyxkLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIExnKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmRkKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHFnPSExLGU8Zik/SmcoYSxiLGYpOk1nKGEsYixjLGQsZil9ZnVuY3Rpb24gTmcoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBNZyhhLGIsYyxkLGUpe3ZhciBmPUooYyk/SWU6SC5jdXJyZW50O2Y9SmUoYixmKTtJZyhiLGUpO2M9aGcoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxKZyhhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UyhhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIE9nKGEsYixjLGQsZSl7aWYoSihjKSl7dmFyIGY9ITA7T2UoYil9ZWxzZSBmPSExO0lnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSx2ZihiLGMsZCxlKSx4ZihiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgbD1nLmNvbnRleHQsaz1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1NKGspOihrPUooYyk/SWU6SC5jdXJyZW50LGs9SmUoYixrKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxsIT09aykmJndmKGIsZyxkLGspO1BnPSExO3ZhciB0PWIubWVtb2l6ZWRTdGF0ZTtsPWcuc3RhdGU9dDt2YXIgQT1iLnVwZGF0ZVF1ZXVlO251bGwhPT1BJiYoeWYoYixBLGQsZyxlKSxsPWIubWVtb2l6ZWRTdGF0ZSk7aCE9PWR8fHQhPT1sfHxJLmN1cnJlbnR8fFBnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtmKGIsYyxtLGQpLGw9Yi5tZW1vaXplZFN0YXRlKSwoaD1QZ3x8dWYoYixjLGgsZCx0LGwsaykpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9bCksZy5wcm9wcz1kLGcuc3RhdGU9bCxnLmNvbnRleHQ9ayxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TChiLnR5cGUsaCksbD1nLmNvbnRleHQsaz1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1NKGspOihrPUooYyk/SWU6SC5jdXJyZW50LGs9SmUoYixrKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocD1cImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGwhPT1rKSYmd2YoYixnLGQsayksUGc9ITEsbD1iLm1lbW9pemVkU3RhdGUsdD1nLnN0YXRlPWwsQT1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1BJiYoeWYoYixBLGQsZyxlKSx0PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGwhPT10fHxJLmN1cnJlbnR8fFBnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtmKGIsYyxtLGQpLHQ9Yi5tZW1vaXplZFN0YXRlKSwobT1QZ3x8dWYoYixjLGgsZCxsLHQsaykpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsdCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHQsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPVxudCksZy5wcm9wcz1kLGcuc3RhdGU9dCxnLmNvbnRleHQ9ayxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJmw9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gUWcoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gUWcoYSxiLGMsZCxlLGYpe05nKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZQZShiLGMsITEpLEpnKGEsYixmKTtkPWIuc3RhdGVOb2RlO0dnLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPURmKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9RGYoYixudWxsLGgsZikpOlMoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmUGUoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBSZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P01lKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJk1lKGEsYi5jb250ZXh0LCExKTtKZihhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBTZyhhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkU3RhdGU7aWYoMD09PShiLmVmZmVjdFRhZyY2NCkpe2Y9bnVsbDt2YXIgZz0hMX1lbHNlIGY9e3RpbWVkT3V0QXQ6bnVsbCE9PWY/Zi50aW1lZE91dEF0OjB9LGc9ITAsYi5lZmZlY3RUYWcmPS02NTtpZihudWxsPT09YSlpZihnKXt2YXIgaD1lLmZhbGxiYWNrO2E9WmUobnVsbCxkLDAsbnVsbCk7MD09PShiLm1vZGUmMSkmJihhLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKTtkPVplKGgsZCxjLG51bGwpO2Euc2libGluZz1kO2M9YTtjLnJldHVybj1kLnJldHVybj1ifWVsc2UgYz1kPUVmKGIsbnVsbCxlLmNoaWxkcmVuLGMpO2Vsc2UgbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZT8oZD1hLmNoaWxkLGg9ZC5zaWJsaW5nLGc/KGM9ZS5mYWxsYmFjayxlPVhlKGQsZC5wZW5kaW5nUHJvcHMsMCksMD09PShiLm1vZGUmMSkmJihnPW51bGwhPT1cbmIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWQuY2hpbGQmJihlLmNoaWxkPWcpKSxkPWUuc2libGluZz1YZShoLGMsaC5leHBpcmF0aW9uVGltZSksYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmM9ZD1EZihiLGQuY2hpbGQsZS5jaGlsZHJlbixjKSk6KGg9YS5jaGlsZCxnPyhnPWUuZmFsbGJhY2ssZT1aZShudWxsLGQsMCxudWxsKSxlLmNoaWxkPWgsMD09PShiLm1vZGUmMSkmJihlLmNoaWxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkKSxkPWUuc2libGluZz1aZShnLGQsYyxudWxsKSxkLmVmZmVjdFRhZ3w9MixjPWUsZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsYy5yZXR1cm49ZC5yZXR1cm49Yik6ZD1jPURmKGIsaCxlLmNoaWxkcmVuLGMpKSxiLnN0YXRlTm9kZT1hLnN0YXRlTm9kZTtiLm1lbW9pemVkU3RhdGU9ZjtiLmNoaWxkPWM7cmV0dXJuIGR9XG5mdW5jdGlvbiBKZyhhLGIsYyl7bnVsbCE9PWEmJihiLmNvbnRleHREZXBlbmRlbmNpZXM9YS5jb250ZXh0RGVwZW5kZW5jaWVzKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/eChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVhlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVhlKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIFRnKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxJLmN1cnJlbnQpcWc9ITA7ZWxzZXtpZihkPGMpe3FnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOlJnKGIpO0ZnKCk7YnJlYWs7Y2FzZSA1OkxmKGIpO2JyZWFrO2Nhc2UgMTpKKGIudHlwZSkmJk9lKGIpO2JyZWFrO2Nhc2UgNDpKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6VWcoYixiLm1lbW9pemVkUHJvcHMudmFsdWUpO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMCE9PWQmJmQ+PWMpcmV0dXJuIFNnKGEsYixjKTtiPUpnKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9fXJldHVybiBKZyhhLGIsYyl9fWVsc2UgcWc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9XG5iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPUplKGIsSC5jdXJyZW50KTtJZyhiLGMpO2U9aGcobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtsZygpO2lmKEooZCkpe3ZhciBmPSEwO09lKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZrZihiLGQsZyxhKTtlLnVwZGF0ZXI9dGY7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9Yjt4ZihiLGQsYSxjKTtiPVFnKG51bGwsYixkLCEwLGYsXG5jKX1lbHNlIGIudGFnPTAsUyhudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2Y9Yi5wZW5kaW5nUHJvcHM7YT1oZihlKTtiLnR5cGU9YTtlPWIudGFnPVdlKGEpO2Y9TChhLGYpO2c9dm9pZCAwO3N3aXRjaChlKXtjYXNlIDA6Zz1NZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTpnPU9nKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxMTpnPUhnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxNDpnPUtnKG51bGwsYixhLEwoYS50eXBlLGYpLGQsYyk7YnJlYWs7ZGVmYXVsdDp4KFwiMzA2XCIsYSxcIlwiKX1yZXR1cm4gZztjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkwoZCxlKSxNZyhhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxcbmU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksT2coYSxiLGQsZSxjKTtjYXNlIDM6UmcoYik7ZD1iLnVwZGF0ZVF1ZXVlO251bGw9PT1kP3goXCIyODJcIik6dm9pZCAwO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWYoYixkLGIucGVuZGluZ1Byb3BzLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlGZygpLGI9SmcoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihlPShudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZlLmh5ZHJhdGUpeWc9RWUoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbykseGc9YixlPXpnPSEwO2U/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9RWYoYixudWxsLGQsYykpOihTKGEsYixkLGMpLEZnKCkpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIExmKGIpLG51bGw9PT1hJiZDZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsXG5nPWUuY2hpbGRyZW4seGUoZCxlKT9nPW51bGw6bnVsbCE9PWYmJnhlKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLE5nKGEsYiksMSE9PWMmJmIubW9kZSYxJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihTKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZDZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIFNnKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEpmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPURmKGIsbnVsbCxkLGMpOlMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksSGcoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO1VnKGIsZik7aWYobnVsbCE9PWcpe3ZhciBoPWcudmFsdWU7Zj1iZChoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDA7aWYoMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSS5jdXJyZW50KXtiPUpnKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBsPWguY29udGV4dERlcGVuZGVuY2llcztpZihudWxsIT09bCl7Zz1oLmNoaWxkO2Zvcih2YXIgaz1sLmZpcnN0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCYmMCE9PVxuKGsub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihrPW5mKGMpLGsudGFnPXNmLHBmKGgsaykpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7az1oLmFsdGVybmF0ZTtudWxsIT09ayYmay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTtrPWM7Zm9yKHZhciBtPWgucmV0dXJuO251bGwhPT1tOyl7dmFyIHA9bS5hbHRlcm5hdGU7aWYobS5jaGlsZEV4cGlyYXRpb25UaW1lPGspbS5jaGlsZEV4cGlyYXRpb25UaW1lPWssbnVsbCE9PXAmJnAuY2hpbGRFeHBpcmF0aW9uVGltZTxrJiYocC5jaGlsZEV4cGlyYXRpb25UaW1lPWspO2Vsc2UgaWYobnVsbCE9PXAmJnAuY2hpbGRFeHBpcmF0aW9uVGltZTxrKXAuY2hpbGRFeHBpcmF0aW9uVGltZT1rO2Vsc2UgYnJlYWs7bT1tLnJldHVybn1sLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/XG5udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z319UyhhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixJZyhiLGMpLGU9TShlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUyhhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9TChlLGIucGVuZGluZ1Byb3BzKSxmPUwoZS50eXBlLGYpLEtnKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBMZyhhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1cbmQ/ZTpMKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsSihkKT8oYT0hMCxPZShiKSk6YT0hMSxJZyhiLGMpLHZmKGIsZCxlLGMpLHhmKGIsZCxlLGMpLFFnKG51bGwsYixkLCEwLGEsYyl9eChcIjE1NlwiKX12YXIgVmc9e2N1cnJlbnQ6bnVsbH0sV2c9bnVsbCxYZz1udWxsLFlnPW51bGw7ZnVuY3Rpb24gVWcoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7RyhWZyxjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gWmcoYSl7dmFyIGI9VmcuY3VycmVudDtGKFZnLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gSWcoYSxiKXtXZz1hO1lnPVhnPW51bGw7dmFyIGM9YS5jb250ZXh0RGVwZW5kZW5jaWVzO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPj1iJiYocWc9ITApO2EuY29udGV4dERlcGVuZGVuY2llcz1udWxsfVxuZnVuY3Rpb24gTShhLGIpe2lmKFlnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilZZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtudWxsPT09WGc/KG51bGw9PT1XZz94KFwiMzA4XCIpOnZvaWQgMCxYZz1iLFdnLmNvbnRleHREZXBlbmRlbmNpZXM9e2ZpcnN0OmIsZXhwaXJhdGlvblRpbWU6MH0pOlhnPVhnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciAkZz0wLHJmPTEsc2Y9MixhaD0zLFBnPSExO2Z1bmN0aW9uIGJoKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIGNoKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBuZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6JGcscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gZGgoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gcGYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPWJoKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1jaChlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1jaChkKSk7bnVsbD09PWV8fGQ9PT1lP2RoKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8oZGgoZCxiKSxkaChlLGIpKTooZGgoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBlaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPWJoKGEubWVtb2l6ZWRTdGF0ZSk6ZmgoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1jaChiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBnaChhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIHJmOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSBhaDphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMjA0OXw2NDtjYXNlICRnOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBuKHt9LGQsZSk7Y2FzZSBzZjpQZz0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIHlmKGEsYixjLGQsZSl7UGc9ITE7Yj1maChhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGw9Yi5maXJzdFVwZGF0ZSxrPWY7bnVsbCE9PWw7KXt2YXIgbT1sLmV4cGlyYXRpb25UaW1lO208ZT8obnVsbD09PWcmJihnPWwsZj1rKSxoPG0mJihoPW0pKTooaz1naChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsbC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1sOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1sLGIubGFzdEVmZmVjdD1sKSkpO2w9bC5uZXh0fW09bnVsbDtmb3IobD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWw7KXt2YXIgcD1sLmV4cGlyYXRpb25UaW1lO3A8ZT8obnVsbD09PW0mJihtPWwsbnVsbD09PWcmJihmPWspKSxoPHAmJihoPXApKTooaz1naChhLGIsbCxrLGMsZCksbnVsbCE9PWwuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9XG4zMixsLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWw6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9bCxiLmxhc3RDYXB0dXJlZEVmZmVjdD1sKSkpO2w9bC5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1tP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09bSYmKGY9ayk7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPW07YS5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1rfVxuZnVuY3Rpb24gaGgoYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO2loKGIuZmlyc3RFZmZlY3QsYyk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtpaChiLmZpcnN0Q2FwdHVyZWRFZmZlY3QsYyk7Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGx9ZnVuY3Rpb24gaWgoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5jYWxsYmFjaztpZihudWxsIT09Yyl7YS5jYWxsYmFjaz1udWxsO3ZhciBkPWI7XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/eChcIjE5MVwiLGMpOnZvaWQgMDtjLmNhbGwoZCl9YT1hLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gamgoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpqYyhiKX19ZnVuY3Rpb24ga2goYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGxoPXZvaWQgMCxtaD12b2lkIDAsbmg9dm9pZCAwLG9oPXZvaWQgMDtsaD1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07bWg9ZnVuY3Rpb24oKXt9O1xubmg9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO0lmKE4uY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPXZjKGcsZik7ZD12YyhnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9JGQoZyxmKTtkPSRkKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9YmUoZyxmKTtkPWJlKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9dGUpfXFlKGMsZCk7Zz1jPXZvaWQgMDt2YXIgaD1udWxsO2ZvcihjIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoYykmJmYuaGFzT3duUHJvcGVydHkoYykmJm51bGwhPWZbY10paWYoXCJzdHlsZVwiPT09XG5jKXt2YXIgbD1mW2NdO2ZvcihnIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShnKSYmKGh8fChoPXt9KSxoW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1jJiZcImNoaWxkcmVuXCIhPT1jJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJlwiYXV0b0ZvY3VzXCIhPT1jJiYocmEuaGFzT3duUHJvcGVydHkoYyk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGMsbnVsbCkpO2ZvcihjIGluIGQpe3ZhciBrPWRbY107bD1udWxsIT1mP2ZbY106dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYykmJmshPT1sJiYobnVsbCE9a3x8bnVsbCE9bCkpaWYoXCJzdHlsZVwiPT09YylpZihsKXtmb3IoZyBpbiBsKSFsLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoaHx8KGg9e30pLGhbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZsW2ddIT09a1tnXSYmKGh8fFxuKGg9e30pLGhbZ109a1tnXSl9ZWxzZSBofHwoYXx8KGE9W10pLGEucHVzaChjLGgpKSxoPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWM/KGs9az9rLl9faHRtbDp2b2lkIDAsbD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1rJiZsIT09ayYmKGE9YXx8W10pLnB1c2goYyxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1jP2w9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGE9YXx8W10pLnB1c2goYyxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmKHJhLmhhc093blByb3BlcnR5KGMpPyhudWxsIT1rJiZzZShlLGMpLGF8fGw9PT1rfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGMsaykpfWgmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixoKTtlPWE7KGIudXBkYXRlUXVldWU9ZSkmJmtoKGIpfX07b2g9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJmtoKGIpfTtcbnZhciBwaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBxaChhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPWpjKGMpKTtudWxsIT09YyYmaWMoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmaWMoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gcmgoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7c2goYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gdGgoYSxiLGMpe2M9Yy51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkb3tpZigoZC50YWcmYSkhPT1OZil7dmFyIGU9ZC5kZXN0cm95O2QuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZSYmZSgpfShkLnRhZyZiKSE9PU5mJiYoZT1kLmNyZWF0ZSxkLmRlc3Ryb3k9ZSgpKTtkPWQubmV4dH13aGlsZShkIT09Yyl9fVxuZnVuY3Rpb24gdWgoYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PW5lKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09Yy50YWcmJm51bGwhPT1jLm1lbW9pemVkU3RhdGUpe2Q9Yy5jaGlsZC5zaWJsaW5nO2QucmV0dXJuPWM7Yz1kO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8XG5jLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiB2aChhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgUmUmJlJlKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OnZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIubGFzdEVmZmVjdCxudWxsIT09Yikpe3ZhciBjPWI9Yi5uZXh0O2Rve3ZhciBkPWMuZGVzdHJveTtpZih2b2lkIDAhPT1kKXt2YXIgZT1hO3RyeXtkKCl9Y2F0Y2goZil7c2goZSxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWIpfWJyZWFrO2Nhc2UgMTpyaChhKTtiPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7c2goYSxmKX1icmVhaztjYXNlIDU6cmgoYSk7YnJlYWs7Y2FzZSA0OndoKGEpfX1cbmZ1bmN0aW9uIHhoKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24geWgoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoeGgoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXgoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp4KFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYoa2UoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fHhoKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJlxuMiljb250aW51ZSBiO2lmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpaWYoYylpZihkKXt2YXIgZj1iLGc9ZS5zdGF0ZU5vZGUsaD1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxoKTpmLmluc2VydEJlZm9yZShnLGgpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZS5zdGF0ZU5vZGUsYyk7ZWxzZSBkPyhnPWIsaD1lLnN0YXRlTm9kZSw4PT09Zy5ub2RlVHlwZT8oZj1nLnBhcmVudE5vZGUsZi5pbnNlcnRCZWZvcmUoaCxnKSk6KGY9ZyxmLmFwcGVuZENoaWxkKGgpKSxnPWcuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09ZyYmdm9pZCAwIT09Z3x8bnVsbCE9PWYub25jbGlja3x8KGYub25jbGljaz10ZSkpOmIuYXBwZW5kQ2hpbGQoZS5zdGF0ZU5vZGUpO1xuZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIHdoKGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9Yi5yZXR1cm47YTpmb3IoOzspe251bGw9PT1jP3goXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Yy5yZXR1cm59Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyl7YTpmb3IodmFyIGY9YixnPWY7OylpZih2aChnKSxudWxsIT09Zy5jaGlsZCYmNCE9PWcudGFnKWcuY2hpbGQucmV0dXJuPWcsZz1nLmNoaWxkO2Vsc2V7aWYoZz09PWYpYnJlYWs7Zm9yKDtudWxsPT09Zy5zaWJsaW5nOyl7aWYobnVsbD09PWcucmV0dXJufHxnLnJldHVybj09PWYpYnJlYWsgYTtnPWcucmV0dXJufWcuc2libGluZy5yZXR1cm49Zy5yZXR1cm47Zz1nLnNpYmxpbmd9ZT9cbihmPWQsZz1iLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6Zi5yZW1vdmVDaGlsZChnKSk6ZC5yZW1vdmVDaGlsZChiLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yi50YWcpe2lmKG51bGwhPT1iLmNoaWxkKXtkPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX19ZWxzZSBpZih2aChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuO2I9Yi5yZXR1cm47ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319XG5mdW5jdGlvbiB6aChhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OnRoKFBmLFFmLGIpO2JyZWFrO2Nhc2UgMTpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJkNlKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjJcIik6dm9pZCAwO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpjPWIubWVtb2l6ZWRTdGF0ZTtkPXZvaWQgMDthPWI7bnVsbD09PWM/ZD0hMTooZD0hMCxhPWIuY2hpbGQsMD09PWMudGltZWRPdXRBdCYmKGMudGltZWRPdXRBdD1sZigpKSk7bnVsbCE9PWEmJnVoKGEsZCk7Yz1cbmIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMpe2IudXBkYXRlUXVldWU9bnVsbDt2YXIgZz1iLnN0YXRlTm9kZTtudWxsPT09ZyYmKGc9Yi5zdGF0ZU5vZGU9bmV3IHBoKTtjLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGM9QWguYmluZChudWxsLGIsYSk7Zy5oYXMoYSl8fChnLmFkZChhKSxhLnRoZW4oYyxjKSl9KX1icmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6eChcIjE2M1wiKX19dmFyIEJoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIENoKGEsYixjKXtjPW5mKGMpO2MudGFnPWFoO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtEaChkKTtxaChhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIEVoKGEsYixjKXtjPW5mKGMpO2MudGFnPWFoO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1GaD9GaD1uZXcgU2V0KFt0aGlzXSk6RmguYWRkKHRoaXMpKTt2YXIgYz1iLnZhbHVlLGU9Yi5zdGFjaztxaChhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWU/ZTpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIEdoKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkooYS50eXBlKSYmS2UoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gS2YoYSksTGUoYSksYj1hLmVmZmVjdFRhZywwIT09KGImNjQpP3goXCIyODVcIik6dm9pZCAwLGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYTtjYXNlIDU6cmV0dXJuIE1mKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gYj1hLmVmZmVjdFRhZyxiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDE4OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gS2YoYSksbnVsbDtjYXNlIDEwOnJldHVybiBaZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEhoPVRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsSWg9VGIuUmVhY3RDdXJyZW50T3duZXIsSmg9MTA3Mzc0MTgyMixLaD0hMSxUPW51bGwsTGg9bnVsbCxVPTAsTWg9LTEsTmg9ITEsVj1udWxsLE9oPSExLFBoPW51bGwsUWg9bnVsbCxSaD1udWxsLEZoPW51bGw7ZnVuY3Rpb24gU2goKXtpZihudWxsIT09VClmb3IodmFyIGE9VC5yZXR1cm47bnVsbCE9PWE7KXt2YXIgYj1hO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnZhciBjPWIudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09YyYmdm9pZCAwIT09YyYmS2UoYik7YnJlYWs7Y2FzZSAzOktmKGIpO0xlKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTticmVhaztjYXNlIDQ6S2YoYik7YnJlYWs7Y2FzZSAxMDpaZyhiKX1hPWEucmV0dXJufUxoPW51bGw7VT0wO01oPS0xO05oPSExO1Q9bnVsbH1cbmZ1bmN0aW9uIFRoKCl7Zm9yKDtudWxsIT09Vjspe3ZhciBhPVYuZWZmZWN0VGFnO2EmMTYmJmtlKFYuc3RhdGVOb2RlLFwiXCIpO2lmKGEmMTI4KXt2YXIgYj1WLmFsdGVybmF0ZTtudWxsIT09YiYmKGI9Yi5yZWYsbnVsbCE9PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKG51bGwpOmIuY3VycmVudD1udWxsKSl9c3dpdGNoKGEmMTQpe2Nhc2UgMjp5aChWKTtWLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OnloKFYpO1YuZWZmZWN0VGFnJj0tMzt6aChWLmFsdGVybmF0ZSxWKTticmVhaztjYXNlIDQ6emgoVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA4OmE9Vix3aChhKSxhLnJldHVybj1udWxsLGEuY2hpbGQ9bnVsbCxhLm1lbW9pemVkU3RhdGU9bnVsbCxhLnVwZGF0ZVF1ZXVlPW51bGwsYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGEucmV0dXJuPW51bGwsYS5jaGlsZD1udWxsLGEubWVtb2l6ZWRTdGF0ZT1udWxsLGEudXBkYXRlUXVldWU9bnVsbCl9Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gVWgoKXtmb3IoO251bGwhPT1WOyl7aWYoVi5lZmZlY3RUYWcmMjU2KWE6e3ZhciBhPVYuYWx0ZXJuYXRlLGI9Vjtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGgoT2YsTmYsYik7YnJlYWsgYTtjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpMKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9YnJlYWsgYTtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhayBhO2RlZmF1bHQ6eChcIjE2M1wiKX19Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gVmgoYSxiKXtmb3IoO251bGwhPT1WOyl7dmFyIGM9Vi5lZmZlY3RUYWc7aWYoYyYzNil7dmFyIGQ9Vi5hbHRlcm5hdGUsZT1WLGY9Yjtzd2l0Y2goZS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGgoUmYsU2YsZSk7YnJlYWs7Y2FzZSAxOnZhciBnPWUuc3RhdGVOb2RlO2lmKGUuZWZmZWN0VGFnJjQpaWYobnVsbD09PWQpZy5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGg9ZS5lbGVtZW50VHlwZT09PWUudHlwZT9kLm1lbW9pemVkUHJvcHM6TChlLnR5cGUsZC5tZW1vaXplZFByb3BzKTtnLmNvbXBvbmVudERpZFVwZGF0ZShoLGQubWVtb2l6ZWRTdGF0ZSxnLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1kPWUudXBkYXRlUXVldWU7bnVsbCE9PWQmJmhoKGUsZCxnLGYpO2JyZWFrO2Nhc2UgMzpkPWUudXBkYXRlUXVldWU7aWYobnVsbCE9PWQpe2c9bnVsbDtpZihudWxsIT09ZS5jaGlsZClzd2l0Y2goZS5jaGlsZC50YWcpe2Nhc2UgNTpnPVxuZS5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmc9ZS5jaGlsZC5zdGF0ZU5vZGV9aGgoZSxkLGcsZil9YnJlYWs7Y2FzZSA1OmY9ZS5zdGF0ZU5vZGU7bnVsbD09PWQmJmUuZWZmZWN0VGFnJjQmJndlKGUudHlwZSxlLm1lbW9pemVkUHJvcHMpJiZmLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OngoXCIxNjNcIil9fWMmMTI4JiYoZT1WLnJlZixudWxsIT09ZSYmKGY9Vi5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGU/ZShmKTplLmN1cnJlbnQ9ZikpO2MmNTEyJiYoUGg9YSk7Vj1WLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gV2goYSxiKXtSaD1RaD1QaD1udWxsO3ZhciBjPVc7Vz0hMDtkb3tpZihiLmVmZmVjdFRhZyY1MTIpe3ZhciBkPSExLGU9dm9pZCAwO3RyeXt2YXIgZj1iO3RoKFVmLE5mLGYpO3RoKE5mLFRmLGYpfWNhdGNoKGcpe2Q9ITAsZT1nfWQmJnNoKGIsZSl9Yj1iLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PWIpO1c9YztjPWEuZXhwaXJhdGlvblRpbWU7MCE9PWMmJlhoKGEsYyk7WHx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9ZnVuY3Rpb24gb2YoKXtudWxsIT09UWgmJkJlKFFoKTtudWxsIT09UmgmJlJoKCl9XG5mdW5jdGlvbiBaaChhLGIpe09oPUtoPSEwO2EuY3VycmVudD09PWI/eChcIjE3N1wiKTp2b2lkIDA7dmFyIGM9YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWM/eChcIjI2MVwiKTp2b2lkIDA7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZD1iLmV4cGlyYXRpb25UaW1lLGU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2VmKGEsZT5kP2U6ZCk7SWguY3VycmVudD1udWxsO2Q9dm9pZCAwOzE8Yi5lZmZlY3RUYWc/bnVsbCE9PWIubGFzdEVmZmVjdD8oYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YixkPWIuZmlyc3RFZmZlY3QpOmQ9YjpkPWIuZmlyc3RFZmZlY3Q7dWU9QmQ7dmU9UGQoKTtCZD0hMTtmb3IoVj1kO251bGwhPT1WOyl7ZT0hMTt2YXIgZj12b2lkIDA7dHJ5e1VoKCl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWZvcihWPWQ7bnVsbCE9PVY7KXtlPSExO1xuZj12b2lkIDA7dHJ5e1RoKCl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfVFkKHZlKTt2ZT1udWxsO0JkPSEhdWU7dWU9bnVsbDthLmN1cnJlbnQ9Yjtmb3IoVj1kO251bGwhPT1WOyl7ZT0hMTtmPXZvaWQgMDt0cnl7VmgoYSxjKX1jYXRjaChoKXtlPSEwLGY9aH1lJiYobnVsbD09PVY/eChcIjE3OFwiKTp2b2lkIDAsc2goVixmKSxudWxsIT09ViYmKFY9Vi5uZXh0RWZmZWN0KSl9aWYobnVsbCE9PWQmJm51bGwhPT1QaCl7dmFyIGc9V2guYmluZChudWxsLGEsZCk7UWg9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxmdW5jdGlvbigpe3JldHVybiBBZShnKX0pO1JoPWd9S2g9T2g9ITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIFFlJiZRZShiLnN0YXRlTm9kZSk7Yz1iLmV4cGlyYXRpb25UaW1lO2I9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2I9XG5iPmM/YjpjOzA9PT1iJiYoRmg9bnVsbCk7JGgoYSxiKX1cbmZ1bmN0aW9uIGFpKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjEwMjQpKXtUPWE7YTp7dmFyIGU9YjtiPWE7dmFyIGY9VTt2YXIgZz1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDE2OmJyZWFrO2Nhc2UgMTU6Y2FzZSAwOmJyZWFrO2Nhc2UgMTpKKGIudHlwZSkmJktlKGIpO2JyZWFrO2Nhc2UgMzpLZihiKTtMZShiKTtnPWIuc3RhdGVOb2RlO2cucGVuZGluZ0NvbnRleHQmJihnLmNvbnRleHQ9Zy5wZW5kaW5nQ29udGV4dCxnLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1lfHxudWxsPT09ZS5jaGlsZClFZyhiKSxiLmVmZmVjdFRhZyY9LTM7bWgoYik7YnJlYWs7Y2FzZSA1Ok1mKGIpO3ZhciBoPUlmKEhmLmN1cnJlbnQpO2Y9Yi50eXBlO2lmKG51bGwhPT1lJiZudWxsIT1iLnN0YXRlTm9kZSluaChlLGIsZixnLGgpLGUucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9XG4xMjgpO2Vsc2UgaWYoZyl7dmFyIGw9SWYoTi5jdXJyZW50KTtpZihFZyhiKSl7Zz1iO2U9Zy5zdGF0ZU5vZGU7dmFyIGs9Zy50eXBlLG09Zy5tZW1vaXplZFByb3BzLHA9aDtlW0ZhXT1nO2VbR2FdPW07Zj12b2lkIDA7aD1rO3N3aXRjaChoKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkUoXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGs9MDtrPGFiLmxlbmd0aDtrKyspRShhYltrXSxlKTticmVhaztjYXNlIFwic291cmNlXCI6RShcImVycm9yXCIsZSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RShcImVycm9yXCIsZSk7RShcImxvYWRcIixlKTticmVhaztjYXNlIFwiZm9ybVwiOkUoXCJyZXNldFwiLGUpO0UoXCJzdWJtaXRcIixlKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkUoXCJ0b2dnbGVcIixlKTticmVhaztjYXNlIFwiaW5wdXRcIjp3YyhlLG0pO0UoXCJpbnZhbGlkXCIsZSk7c2UocCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtFKFwiaW52YWxpZFwiLGUpO3NlKHAsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjZShlLG0pLEUoXCJpbnZhbGlkXCIsZSksc2UocCxcIm9uQ2hhbmdlXCIpfXFlKGgsbSk7az1udWxsO2ZvcihmIGluIG0pbS5oYXNPd25Qcm9wZXJ0eShmKSYmKGw9bVtmXSxcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD9lLnRleHRDb250ZW50IT09bCYmKGs9W1wiY2hpbGRyZW5cIixsXSk6XCJudW1iZXJcIj09PXR5cGVvZiBsJiZlLnRleHRDb250ZW50IT09XCJcIitsJiYoaz1bXCJjaGlsZHJlblwiLFwiXCIrbF0pOnJhLmhhc093blByb3BlcnR5KGYpJiZudWxsIT1sJiZzZShwLGYpKTtzd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6UmIoZSk7QWMoZSxtLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpSYihlKTtlZShlLG0pO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS5vbkNsaWNrJiZcbihlLm9uY2xpY2s9dGUpfWY9aztnLnVwZGF0ZVF1ZXVlPWY7Zz1udWxsIT09Zj8hMDohMTtnJiZraChiKX1lbHNle209YjtlPWY7cD1nO2s9OT09PWgubm9kZVR5cGU/aDpoLm93bmVyRG9jdW1lbnQ7bD09PWZlLmh0bWwmJihsPWdlKGUpKTtsPT09ZmUuaHRtbD9cInNjcmlwdFwiPT09ZT8oZT1rLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixrPWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBwLmlzP2s9ay5jcmVhdGVFbGVtZW50KGUse2lzOnAuaXN9KTooaz1rLmNyZWF0ZUVsZW1lbnQoZSksXCJzZWxlY3RcIj09PWUmJnAubXVsdGlwbGUmJihrLm11bHRpcGxlPSEwKSk6az1rLmNyZWF0ZUVsZW1lbnROUyhsLGUpO2U9aztlW0ZhXT1tO2VbR2FdPWc7bGgoZSxiLCExLCExKTtwPWU7az1mO209Zzt2YXIgdD1oLEE9cmUoayxtKTtzd2l0Y2goayl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpFKFwibG9hZFwiLFxucCk7aD1tO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYi5sZW5ndGg7aCsrKUUoYWJbaF0scCk7aD1tO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpFKFwiZXJyb3JcIixwKTtoPW07YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RShcImVycm9yXCIscCk7RShcImxvYWRcIixwKTtoPW07YnJlYWs7Y2FzZSBcImZvcm1cIjpFKFwicmVzZXRcIixwKTtFKFwic3VibWl0XCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RShcInRvZ2dsZVwiLHApO2g9bTticmVhaztjYXNlIFwiaW5wdXRcIjp3YyhwLG0pO2g9dmMocCxtKTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD0kZChwLG0pO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpwLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07aD1uKHt9LG0se3ZhbHVlOnZvaWQgMH0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmNlKHAsXG5tKTtoPWJlKHAsbSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPW19cWUoayxoKTtsPXZvaWQgMDt2YXIgdj1rLFI9cCx1PWg7Zm9yKGwgaW4gdSlpZih1Lmhhc093blByb3BlcnR5KGwpKXt2YXIgcT11W2xdO1wic3R5bGVcIj09PWw/b2UoUixxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhxPXE/cS5fX2h0bWw6dm9pZCAwLG51bGwhPXEmJmplKFIscSkpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIj09PXR5cGVvZiBxPyhcInRleHRhcmVhXCIhPT12fHxcIlwiIT09cSkmJmtlKFIscSk6XCJudW1iZXJcIj09PXR5cGVvZiBxJiZrZShSLFwiXCIrcSk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKHJhLmhhc093blByb3BlcnR5KGwpP251bGwhPXEmJnNlKHQsbCk6bnVsbCE9cSYmdGMoUixsLHEsQSkpfXN3aXRjaChrKXtjYXNlIFwiaW5wdXRcIjpSYihwKTtcbkFjKHAsbSwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6UmIocCk7ZWUocCxtKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9bS52YWx1ZSYmcC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrdWMobS52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpoPXA7aC5tdWx0aXBsZT0hIW0ubXVsdGlwbGU7cD1tLnZhbHVlO251bGwhPXA/YWUoaCwhIW0ubXVsdGlwbGUscCwhMSk6bnVsbCE9bS5kZWZhdWx0VmFsdWUmJmFlKGgsISFtLm11bHRpcGxlLG0uZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihwLm9uY2xpY2s9dGUpfShnPXdlKGYsZykpJiZraChiKTtiLnN0YXRlTm9kZT1lfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgbnVsbD09PWIuc3RhdGVOb2RlP3goXCIxNjZcIik6dm9pZCAwO2JyZWFrO2Nhc2UgNjplJiZudWxsIT1iLnN0YXRlTm9kZT9vaChlLGIsZS5tZW1vaXplZFByb3BzLGcpOihcInN0cmluZ1wiIT09XG50eXBlb2YgZyYmKG51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTY2XCIpOnZvaWQgMCksZT1JZihIZi5jdXJyZW50KSxJZihOLmN1cnJlbnQpLEVnKGIpPyhnPWIsZj1nLnN0YXRlTm9kZSxlPWcubWVtb2l6ZWRQcm9wcyxmW0ZhXT1nLChnPWYubm9kZVZhbHVlIT09ZSkmJmtoKGIpKTooZj1iLGc9KDk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShnKSxnW0ZhXT1iLGYuc3RhdGVOb2RlPWcpKTticmVhaztjYXNlIDExOmJyZWFrO2Nhc2UgMTM6Zz1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpe2IuZXhwaXJhdGlvblRpbWU9ZjtUPWI7YnJlYWsgYX1nPW51bGwhPT1nO2Y9bnVsbCE9PWUmJm51bGwhPT1lLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJiFnJiZmJiYoZT1lLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihoPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWg/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9aCk6KGIuZmlyc3RFZmZlY3Q9XG5iLmxhc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpO2lmKGd8fGYpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpLZihiKTttaChiKTticmVhaztjYXNlIDEwOlpnKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6SihiLnR5cGUpJiZLZShiKTticmVhaztjYXNlIDE4OmJyZWFrO2RlZmF1bHQ6eChcIjE1NlwiKX1UPW51bGx9Yj1hO2lmKDE9PT1VfHwxIT09Yi5jaGlsZEV4cGlyYXRpb25UaW1lKXtnPTA7Zm9yKGY9Yi5jaGlsZDtudWxsIT09ZjspZT1mLmV4cGlyYXRpb25UaW1lLGg9Zi5jaGlsZEV4cGlyYXRpb25UaW1lLGU+ZyYmKGc9ZSksaD5nJiYoZz1oKSxmPWYuc2libGluZztiLmNoaWxkRXhwaXJhdGlvblRpbWU9Z31pZihudWxsIT09VClyZXR1cm4gVDtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyYxMDI0KSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiZcbihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJihudWxsIT09Yy5sYXN0RWZmZWN0JiYoYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YS5maXJzdEVmZmVjdCksYy5sYXN0RWZmZWN0PWEubGFzdEVmZmVjdCksMTxhLmVmZmVjdFRhZyYmKG51bGwhPT1jLmxhc3RFZmZlY3Q/Yy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKX1lbHNle2E9R2goYSxVKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTEwMjMsYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGwsYy5lZmZlY3RUYWd8PTEwMjQpfWlmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNlIGJyZWFrfXJldHVybiBudWxsfVxuZnVuY3Rpb24gYmkoYSl7dmFyIGI9VGcoYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWFpKGEpKTtJaC5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBjaShhLGIpe0toP3goXCIyNDNcIik6dm9pZCAwO29mKCk7S2g9ITA7dmFyIGM9SGguY3VycmVudDtIaC5jdXJyZW50PWtnO3ZhciBkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT247aWYoZCE9PVV8fGEhPT1MaHx8bnVsbD09PVQpU2goKSxMaD1hLFU9ZCxUPVhlKExoLmN1cnJlbnQsbnVsbCxVKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBlPSExO2Rve3RyeXtpZihiKWZvcig7bnVsbCE9PVQmJiFkaSgpOylUPWJpKFQpO2Vsc2UgZm9yKDtudWxsIT09VDspVD1iaShUKX1jYXRjaCh1KXtpZihZZz1YZz1XZz1udWxsLGxnKCksbnVsbD09PVQpZT0hMCxEaCh1KTtlbHNle251bGw9PT1UP3goXCIyNzFcIik6dm9pZCAwO3ZhciBmPVQsZz1mLnJldHVybjtpZihudWxsPT09ZyllPSEwLERoKHUpO2Vsc2V7YTp7dmFyIGg9YSxsPWcsaz1mLG09dTtnPVU7ay5lZmZlY3RUYWd8PTEwMjQ7ay5maXJzdEVmZmVjdD1rLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09XG5tJiZcIm9iamVjdFwiPT09dHlwZW9mIG0mJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLnRoZW4pe3ZhciBwPW07bT1sO3ZhciB0PS0xLEE9LTE7ZG97aWYoMTM9PT1tLnRhZyl7dmFyIHY9bS5hbHRlcm5hdGU7aWYobnVsbCE9PXYmJih2PXYubWVtb2l6ZWRTdGF0ZSxudWxsIT09dikpe0E9MTAqKDEwNzM3NDE4MjItdi50aW1lZE91dEF0KTticmVha312PW0ucGVuZGluZ1Byb3BzLm1heER1cmF0aW9uO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgdilpZigwPj12KXQ9MDtlbHNlIGlmKC0xPT09dHx8djx0KXQ9dn1tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPWw7ZG97aWYodj0xMz09PW0udGFnKXY9dm9pZCAwPT09bS5tZW1vaXplZFByb3BzLmZhbGxiYWNrPyExOm51bGw9PT1tLm1lbW9pemVkU3RhdGU7aWYodil7bD1tLnVwZGF0ZVF1ZXVlO251bGw9PT1sPyhsPW5ldyBTZXQsbC5hZGQocCksbS51cGRhdGVRdWV1ZT1sKTpsLmFkZChwKTtpZigwPT09KG0ubW9kZSYxKSl7bS5lZmZlY3RUYWd8PVxuNjQ7ay5lZmZlY3RUYWcmPS0xOTU3OzE9PT1rLnRhZyYmKG51bGw9PT1rLmFsdGVybmF0ZT9rLnRhZz0xNzooZz1uZigxMDczNzQxODIzKSxnLnRhZz1zZixwZihrLGcpKSk7ay5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2JyZWFrIGF9az1oO2w9Zzt2YXIgUj1rLnBpbmdDYWNoZTtudWxsPT09Uj8oUj1rLnBpbmdDYWNoZT1uZXcgQmgsdj1uZXcgU2V0LFIuc2V0KHAsdikpOih2PVIuZ2V0KHApLHZvaWQgMD09PXYmJih2PW5ldyBTZXQsUi5zZXQocCx2KSkpO3YuaGFzKGwpfHwodi5hZGQobCksaz1laS5iaW5kKG51bGwsayxwLGwpLHAudGhlbihrLGspKTstMT09PXQ/aD0xMDczNzQxODIzOigtMT09PUEmJihBPTEwKigxMDczNzQxODIyLWdmKGgsZykpLTVFMyksaD1BK3QpOzA8PWgmJk1oPGgmJihNaD1oKTttLmVmZmVjdFRhZ3w9MjA0ODttLmV4cGlyYXRpb25UaW1lPWc7YnJlYWsgYX1tPW0ucmV0dXJufXdoaWxlKG51bGwhPT1tKTttPUVycm9yKChpYyhrLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1xuXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitqYyhrKSl9Tmg9ITA7bT1qaChtLGspO2g9bDtkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoLmVmZmVjdFRhZ3w9MjA0ODtoLmV4cGlyYXRpb25UaW1lPWc7Zz1DaChoLG0sZyk7ZWgoaCxnKTticmVhayBhO2Nhc2UgMTppZih0PW0sQT1oLnR5cGUsaz1oLnN0YXRlTm9kZSwwPT09KGguZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBBLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PWsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUZofHwhRmguaGFzKGspKSkpe2guZWZmZWN0VGFnfD0yMDQ4O1xuaC5leHBpcmF0aW9uVGltZT1nO2c9RWgoaCx0LGcpO2VoKGgsZyk7YnJlYWsgYX19aD1oLnJldHVybn13aGlsZShudWxsIT09aCl9VD1haShmKTtjb250aW51ZX19fWJyZWFrfXdoaWxlKDEpO0toPSExO0hoLmN1cnJlbnQ9YztZZz1YZz1XZz1udWxsO2xnKCk7aWYoZSlMaD1udWxsLGEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZSBpZihudWxsIT09VClhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2V7Yz1hLmN1cnJlbnQuYWx0ZXJuYXRlO251bGw9PT1jP3goXCIyODFcIik6dm9pZCAwO0xoPW51bGw7aWYoTmgpe2U9YS5sYXRlc3RQZW5kaW5nVGltZTtmPWEubGF0ZXN0U3VzcGVuZGVkVGltZTtnPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwIT09ZSYmZTxkfHwwIT09ZiYmZjxkfHwwIT09ZyYmZzxkKXtmZihhLGQpO2ZpKGEsYyxkLGEuZXhwaXJhdGlvblRpbWUsLTEpO3JldHVybn1pZighYS5kaWRFcnJvciYmYil7YS5kaWRFcnJvcj0hMDtkPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZDtcbmI9YS5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2ZpKGEsYyxkLGIsLTEpO3JldHVybn19YiYmLTEhPT1NaD8oZmYoYSxkKSxiPTEwKigxMDczNzQxODIyLWdmKGEsZCkpLGI8TWgmJihNaD1iKSxiPTEwKigxMDczNzQxODIyLWxmKCkpLGI9TWgtYixmaShhLGMsZCxhLmV4cGlyYXRpb25UaW1lLDA+Yj8wOmIpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9ZCxhLmZpbmlzaGVkV29yaz1jKX19XG5mdW5jdGlvbiBzaChhLGIpe2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GaHx8IUZoLmhhcyhkKSkpe2E9amgoYixhKTthPUVoKGMsYSwxMDczNzQxODIzKTtwZihjLGEpO3FmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWJyZWFrO2Nhc2UgMzphPWpoKGIsYSk7YT1DaChjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtxZihjLDEwNzM3NDE4MjMpO3JldHVybn1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9amgoYixhKSxjPUNoKGEsYywxMDczNzQxODIzKSxwZihhLGMpLHFmKGEsMTA3Mzc0MTgyMykpfVxuZnVuY3Rpb24gbWYoYSxiKXt2YXIgYz1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsKCksZD12b2lkIDA7aWYoMD09PShiLm1vZGUmMSkpZD0xMDczNzQxODIzO2Vsc2UgaWYoS2gmJiFPaClkPVU7ZWxzZXtzd2l0Y2goYyl7Y2FzZSByLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5OmQ9MTA3Mzc0MTgyMzticmVhaztjYXNlIHIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk6ZD0xMDczNzQxODIyLTEwKigoKDEwNzM3NDE4MjItYSsxNSkvMTB8MCkrMSk7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5OmQ9MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWErNTAwKS8yNXwwKSsxKTticmVhaztjYXNlIHIudW5zdGFibGVfTG93UHJpb3JpdHk6Y2FzZSByLnVuc3RhYmxlX0lkbGVQcmlvcml0eTpkPTE7YnJlYWs7ZGVmYXVsdDp4KFwiMzEzXCIpfW51bGwhPT1MaCYmZD09PVUmJi0tZH1jPT09ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSYmXG4oMD09PWdpfHxkPGdpKSYmKGdpPWQpO3JldHVybiBkfWZ1bmN0aW9uIGVpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7aWYobnVsbCE9PUxoJiZVPT09YylMaD1udWxsO2Vsc2UgaWYoYj1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWEubGF0ZXN0U3VzcGVuZGVkVGltZSwwIT09YiYmYzw9YiYmYz49ZCl7YS5kaWRFcnJvcj0hMTtiPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwPT09Ynx8Yj5jKWEubGF0ZXN0UGluZ2VkVGltZT1jO2RmKGMsYSk7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZYaChhLGMpfX1mdW5jdGlvbiBBaChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPWxmKCk7Yj1tZihiLGEpO2E9aGkoYSxiKTtudWxsIT09YSYmKGNmKGEsYiksYj1hLmV4cGlyYXRpb25UaW1lLDAhPT1iJiZYaChhLGIpKX1cbmZ1bmN0aW9uIGhpKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59cmV0dXJuIGV9XG5mdW5jdGlvbiBxZihhLGIpe2E9aGkoYSxiKTtudWxsIT09YSYmKCFLaCYmMCE9PVUmJmI+VSYmU2goKSxjZihhLGIpLEtoJiYhT2gmJkxoPT09YXx8WGgoYSxhLmV4cGlyYXRpb25UaW1lKSxpaT5qaSYmKGlpPTAseChcIjE4NVwiKSkpfWZ1bmN0aW9uIGtpKGEsYixjLGQsZSl7cmV0dXJuIHIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfXZhciBsaT1udWxsLFk9bnVsbCxtaT0wLG5pPXZvaWQgMCxXPSExLG9pPW51bGwsWj0wLGdpPTAscGk9ITEscWk9bnVsbCxYPSExLHJpPSExLHNpPW51bGwsdGk9ci51bnN0YWJsZV9ub3coKSx1aT0xMDczNzQxODIyLSh0aS8xMHwwKSx2aT11aSxqaT01MCxpaT0wLHdpPW51bGw7ZnVuY3Rpb24geGkoKXt1aT0xMDczNzQxODIyLSgoci51bnN0YWJsZV9ub3coKS10aSkvMTB8MCl9XG5mdW5jdGlvbiB5aShhLGIpe2lmKDAhPT1taSl7aWYoYjxtaSlyZXR1cm47bnVsbCE9PW5pJiZyLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrKG5pKX1taT1iO2E9ci51bnN0YWJsZV9ub3coKS10aTtuaT1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soemkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjItYiktYX0pfWZ1bmN0aW9uIGZpKGEsYixjLGQsZSl7YS5leHBpcmF0aW9uVGltZT1kOzAhPT1lfHxkaSgpPzA8ZSYmKGEudGltZW91dEhhbmRsZT15ZShBaS5iaW5kKG51bGwsYSxiLGMpLGUpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmZpbmlzaGVkV29yaz1iKX1mdW5jdGlvbiBBaShhLGIsYyl7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YzthLmZpbmlzaGVkV29yaz1iO3hpKCk7dmk9dWk7QmkoYSxjKX1mdW5jdGlvbiAkaChhLGIpe2EuZXhwaXJhdGlvblRpbWU9YjthLmZpbmlzaGVkV29yaz1udWxsfVxuZnVuY3Rpb24gbGYoKXtpZihXKXJldHVybiB2aTtDaSgpO2lmKDA9PT1afHwxPT09Wil4aSgpLHZpPXVpO3JldHVybiB2aX1mdW5jdGlvbiBYaChhLGIpe251bGw9PT1hLm5leHRTY2hlZHVsZWRSb290PyhhLmV4cGlyYXRpb25UaW1lPWIsbnVsbD09PVk/KGxpPVk9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihZPVkubmV4dFNjaGVkdWxlZFJvb3Q9YSxZLm5leHRTY2hlZHVsZWRSb290PWxpKSk6Yj5hLmV4cGlyYXRpb25UaW1lJiYoYS5leHBpcmF0aW9uVGltZT1iKTtXfHwoWD9yaSYmKG9pPWEsWj0xMDczNzQxODIzLERpKGEsMTA3Mzc0MTgyMywhMSkpOjEwNzM3NDE4MjM9PT1iP1loKDEwNzM3NDE4MjMsITEpOnlpKGEsYikpfVxuZnVuY3Rpb24gQ2koKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09WSlmb3IodmFyIGM9WSxkPWxpO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1ZP3goXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsaT1ZPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1saSlsaT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsWS5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1ZKXtZPWM7WS5uZXh0U2NoZWR1bGVkUm9vdD1saTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2U+YSYmKGE9ZSxiPWQpO2lmKGQ9PT1ZKWJyZWFrO2lmKDEwNzM3NDE4MjM9PT1cbmEpYnJlYWs7Yz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19b2k9YjtaPWF9dmFyIEVpPSExO2Z1bmN0aW9uIGRpKCl7cmV0dXJuIEVpPyEwOnIudW5zdGFibGVfc2hvdWxkWWllbGQoKT9FaT0hMDohMX1mdW5jdGlvbiB6aSgpe3RyeXtpZighZGkoKSYmbnVsbCE9PWxpKXt4aSgpO3ZhciBhPWxpO2Rve3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7MCE9PWImJnVpPD1iJiYoYS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj11aSk7YT1hLm5leHRTY2hlZHVsZWRSb290fXdoaWxlKGEhPT1saSl9WWgoMCwhMCl9ZmluYWxseXtFaT0hMX19XG5mdW5jdGlvbiBZaChhLGIpe0NpKCk7aWYoYilmb3IoeGkoKSx2aT11aTtudWxsIT09b2kmJjAhPT1aJiZhPD1aJiYhKEVpJiZ1aT5aKTspRGkob2ksWix1aT5aKSxDaSgpLHhpKCksdmk9dWk7ZWxzZSBmb3IoO251bGwhPT1vaSYmMCE9PVomJmE8PVo7KURpKG9pLFosITEpLENpKCk7YiYmKG1pPTAsbmk9bnVsbCk7MCE9PVomJnlpKG9pLFopO2lpPTA7d2k9bnVsbDtpZihudWxsIT09c2kpZm9yKGE9c2ksc2k9bnVsbCxiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtwaXx8KHBpPSEwLHFpPWQpfX1pZihwaSl0aHJvdyBhPXFpLHFpPW51bGwscGk9ITEsYTt9ZnVuY3Rpb24gQmkoYSxiKXtXP3goXCIyNTNcIik6dm9pZCAwO29pPWE7Wj1iO0RpKGEsYiwhMSk7WWgoMTA3Mzc0MTgyMywhMSl9XG5mdW5jdGlvbiBEaShhLGIsYyl7Vz94KFwiMjQ1XCIpOnZvaWQgMDtXPSEwO2lmKGMpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kP0ZpKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsemUoZCkpLGNpKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmKGRpKCk/YS5maW5pc2hlZFdvcms9ZDpGaShhLGQsYikpKX1lbHNlIGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQ/RmkoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSx6ZShkKSksY2koYSxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiZGaShhLGQsYikpO1c9ITF9XG5mdW5jdGlvbiBGaShhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZT49YyYmKG51bGw9PT1zaT9zaT1bZF06c2kucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5leHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO2E9PT13aT9paSsrOih3aT1hLGlpPTApO3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZnVuY3Rpb24oKXtaaChhLGIpfSl9ZnVuY3Rpb24gRGgoYSl7bnVsbD09PW9pP3goXCIyNDZcIik6dm9pZCAwO29pLmV4cGlyYXRpb25UaW1lPTA7cGl8fChwaT0hMCxxaT1hKX1mdW5jdGlvbiBHaShhLGIpe3ZhciBjPVg7WD0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoWD1jKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fVxuZnVuY3Rpb24gSGkoYSxiKXtpZihYJiYhcmkpe3JpPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e3JpPSExfX1yZXR1cm4gYShiKX1mdW5jdGlvbiBJaShhLGIsYyl7WHx8V3x8MD09PWdpfHwoWWgoZ2ksITEpLGdpPTApO3ZhciBkPVg7WD0hMDt0cnl7cmV0dXJuIHIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMpfSl9ZmluYWxseXsoWD1kKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fVxuZnVuY3Rpb24gSmkoYSxiLGMsZCxlKXt2YXIgZj1iLmN1cnJlbnQ7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOnsyPT09ZWQoYykmJjE9PT1jLnRhZz92b2lkIDA6eChcIjE3MFwiKTt2YXIgZz1jO2Rve3N3aXRjaChnLnRhZyl7Y2FzZSAzOmc9Zy5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihKKGcudHlwZSkpe2c9Zy5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19Zz1nLnJldHVybn13aGlsZShudWxsIT09Zyk7eChcIjE3MVwiKTtnPXZvaWQgMH1pZigxPT09Yy50YWcpe3ZhciBoPWMudHlwZTtpZihKKGgpKXtjPU5lKGMsaCxnKTticmVhayBhfX1jPWd9ZWxzZSBjPUhlO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9ZTtlPW5mKGQpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtcbm9mKCk7cGYoZixlKTtxZihmLGQpO3JldHVybiBkfWZ1bmN0aW9uIEtpKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPWxmKCk7ZT1tZihmLGUpO3JldHVybiBKaShhLGIsYyxlLGQpfWZ1bmN0aW9uIExpKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gTWkoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpXYixrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbkFiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6eWMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUthKGQpO2U/dm9pZCAwOngoXCI5MFwiKTtTYihkKTt5YyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZGUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmFlKGEsISFjLm11bHRpcGxlLGIsITEpfX07XG5mdW5jdGlvbiBOaShhKXt2YXIgYj0xMDczNzQxODIyLTI1KigoKDEwNzM3NDE4MjItbGYoKSs1MDApLzI1fDApKzEpO2I+PUpoJiYoYj1KaC0xKTt0aGlzLl9leHBpcmF0aW9uVGltZT1KaD1iO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9TmkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6eChcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IE9pO0ppKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbk5pLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbk5pLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDp4KFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP3goXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7QmkoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07TmkucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIE9pKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9T2kucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbk9pLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O1xuZnVuY3Rpb24gUGkoYSxiLGMpe2I9SygzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxwaW5nQ2FjaGU6bnVsbCxlYXJsaWVzdFBlbmRpbmdUaW1lOjAsbGF0ZXN0UGVuZGluZ1RpbWU6MCxlYXJsaWVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0UGluZ2VkVGltZTowLGRpZEVycm9yOiExLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLHRpbWVvdXRIYW5kbGU6LTEsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLG5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uOjAsZXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07dGhpcy5faW50ZXJuYWxSb290PWIuc3RhdGVOb2RlPWF9XG5QaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IE9pO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTtLaShhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1BpLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBPaTthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7S2kobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtQaS5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9pbnRlcm5hbFJvb3QsZT1uZXcgT2k7Yz12b2lkIDA9PT1jP251bGw6YztudWxsIT09YyYmZS50aGVuKGMpO0tpKGIsZCxhLGUuX29uQ29tbWl0KTtyZXR1cm4gZX07XG5QaS5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTmkodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZT49YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtmdW5jdGlvbiBRaShhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9R2I9R2k7SGI9SWk7SWI9ZnVuY3Rpb24oKXtXfHwwPT09Z2l8fChZaChnaSwhMSksZ2k9MCl9O1xuZnVuY3Rpb24gUmkoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBQaShhLCExLGIpfVxuZnVuY3Rpb24gU2koYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPUxpKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1udWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9UmkoYyxkKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9TGkoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fUhpKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBMaShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gVGkoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gTWkoYSxiLG51bGwsYyl9XG52YXIgVmk9e2NyZWF0ZVBvcnRhbDpUaSxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP3goXCIxODhcIik6eChcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1oZChiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe1FpKGIpP3ZvaWQgMDp4KFwiMjAwXCIpO3JldHVybiBTaShudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gU2kobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe1FpKGMpP3ZvaWQgMDp4KFwiMjAwXCIpO251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9cbngoXCIzOFwiKTp2b2lkIDA7cmV0dXJuIFNpKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe1FpKGEpP3ZvaWQgMDp4KFwiNDBcIik7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oSGkoZnVuY3Rpb24oKXtTaShudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsfSl9KSwhMCk6ITF9LHVuc3RhYmxlX2NyZWF0ZVBvcnRhbDpmdW5jdGlvbigpe3JldHVybiBUaS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKX0sdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6R2ksdW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzOklpLGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1c/eChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9WDtYPSEwO3RyeXtyZXR1cm4ga2koYSxiKX1maW5hbGx5e1g9YyxZaCgxMDczNzQxODIzLCExKX19LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6VWksdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPVxuWDtYPSEwO3RyeXtraShhKX1maW5hbGx5eyhYPWIpfHxXfHxZaCgxMDczNzQxODIzLCExKX19LF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudHM6W0lhLEphLEthLEJhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxwYSxRYSxmdW5jdGlvbihhKXt5YShhLFBhKX0sRWIsRmIsRGQsRGFdfX07ZnVuY3Rpb24gVWkoYSxiKXtRaShhKT92b2lkIDA6eChcIjI5OVwiLFwidW5zdGFibGVfY3JlYXRlUm9vdFwiKTtyZXR1cm4gbmV3IFBpKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfVxuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFRlKG4oe30sYSx7b3ZlcnJpZGVQcm9wczpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOlRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpIYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjguMlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBXaT17ZGVmYXVsdDpWaX0sWGk9V2kmJlZpfHxXaTttb2R1bGUuZXhwb3J0cz1YaS5kZWZhdWx0fHxYaTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTMuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBkPW51bGwsZT0hMSxnPTMsaz0tMSxsPS0xLG09ITEsbj0hMTtmdW5jdGlvbiBwKCl7aWYoIW0pe3ZhciBhPWQuZXhwaXJhdGlvblRpbWU7bj9xKCk6bj0hMDtyKHQsYSl9fVxuZnVuY3Rpb24gdSgpe3ZhciBhPWQsYj1kLm5leHQ7aWYoZD09PWIpZD1udWxsO2Vsc2V7dmFyIGM9ZC5wcmV2aW91cztkPWMubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsO2M9YS5jYWxsYmFjaztiPWEuZXhwaXJhdGlvblRpbWU7YT1hLnByaW9yaXR5TGV2ZWw7dmFyIGY9ZyxRPWw7Zz1hO2w9Yjt0cnl7dmFyIGg9YygpfWZpbmFsbHl7Zz1mLGw9UX1pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaClpZihoPXtjYWxsYmFjazpoLHByaW9yaXR5TGV2ZWw6YSxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfSxudWxsPT09ZClkPWgubmV4dD1oLnByZXZpb3VzPWg7ZWxzZXtjPW51bGw7YT1kO2Rve2lmKGEuZXhwaXJhdGlvblRpbWU+PWIpe2M9YTticmVha31hPWEubmV4dH13aGlsZShhIT09ZCk7bnVsbD09PWM/Yz1kOmM9PT1kJiYoZD1oLHAoKSk7Yj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWg7aC5uZXh0PWM7aC5wcmV2aW91cz1cbmJ9fWZ1bmN0aW9uIHYoKXtpZigtMT09PWsmJm51bGwhPT1kJiYxPT09ZC5wcmlvcml0eUxldmVsKXttPSEwO3RyeXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpfWZpbmFsbHl7bT0hMSxudWxsIT09ZD9wKCk6bj0hMX19fWZ1bmN0aW9uIHQoYSl7bT0hMDt2YXIgYj1lO2U9YTt0cnl7aWYoYSlmb3IoO251bGwhPT1kOyl7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihkLmV4cGlyYXRpb25UaW1lPD1jKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJmQuZXhwaXJhdGlvblRpbWU8PWMpfWVsc2UgYnJlYWt9ZWxzZSBpZihudWxsIT09ZCl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiYhdygpKX19ZmluYWxseXttPSExLGU9YixudWxsIT09ZD9wKCk6bj0hMSx2KCl9fVxudmFyIHg9RGF0ZSx5PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6dm9pZCAwLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lP2NhbmNlbEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxDLEQ7ZnVuY3Rpb24gRShhKXtDPUEoZnVuY3Rpb24oYil7eihEKTthKGIpfSk7RD15KGZ1bmN0aW9uKCl7QihDKTthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSwxMDApfVxuaWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIEY9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRi5ub3coKX19ZWxzZSBleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpfTt2YXIgcixxLHcsRz1udWxsO1widW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93P0c9d2luZG93OlwidW5kZWZpbmVkXCIhPT10eXBlb2YgZ2xvYmFsJiYoRz1nbG9iYWwpO1xuaWYoRyYmRy5fc2NoZWRNb2NrKXt2YXIgSD1HLl9zY2hlZE1vY2s7cj1IWzBdO3E9SFsxXTt3PUhbMl07ZXhwb3J0cy51bnN0YWJsZV9ub3c9SFszXX1lbHNlIGlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBJPW51bGwsSj1mdW5jdGlvbihhKXtpZihudWxsIT09SSl0cnl7SShhKX1maW5hbGx5e0k9bnVsbH19O3I9ZnVuY3Rpb24oYSl7bnVsbCE9PUk/c2V0VGltZW91dChyLDAsYSk6KEk9YSxzZXRUaW1lb3V0KEosMCwhMSkpfTtxPWZ1bmN0aW9uKCl7ST1udWxsfTt3PWZ1bmN0aW9uKCl7cmV0dXJuITF9fWVsc2V7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiYoXCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIiksXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgQiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpKTt2YXIgSz1udWxsLEw9ITEsTT0tMSxOPSExLE89ITEsUD0wLFI9MzMsUz0zMzt3PWZ1bmN0aW9uKCl7cmV0dXJuIFA8PWV4cG9ydHMudW5zdGFibGVfbm93KCl9O3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtMPSExO3ZhciBhPUssYj1NO0s9bnVsbDtNPS0xO3ZhciBjPWV4cG9ydHMudW5zdGFibGVfbm93KCksZj0hMTtpZigwPj1QLWMpaWYoLTEhPT1iJiZiPD1jKWY9ITA7ZWxzZXtOfHwoTj0hMCxFKFYpKTtLPWE7TT1iO3JldHVybn1pZihudWxsIT09YSl7Tz0hMDt0cnl7YShmKX1maW5hbGx5e089ITF9fX07XG52YXIgVj1mdW5jdGlvbihhKXtpZihudWxsIT09Syl7RShWKTt2YXIgYj1hLVArUztiPFMmJlI8Uz8oOD5iJiYoYj04KSxTPWI8Uj9SOmIpOlI9YjtQPWErUztMfHwoTD0hMCxVLnBvc3RNZXNzYWdlKHZvaWQgMCkpfWVsc2UgTj0hMX07cj1mdW5jdGlvbihhLGIpe0s9YTtNPWI7T3x8MD5iP1UucG9zdE1lc3NhZ2Uodm9pZCAwKTpOfHwoTj0hMCxFKFYpKX07cT1mdW5jdGlvbigpe0s9bnVsbDtMPSExO009LTF9fWV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O1xuZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1nLGY9aztnPWE7az1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKGcpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPWd9dmFyIGM9ZyxmPWs7Zz1iO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2c9YyxrPWYsdigpfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXt2YXIgYz0tMSE9PWs/azpleHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0KWI9YytiLnRpbWVvdXQ7ZWxzZSBzd2l0Y2goZyl7Y2FzZSAxOmI9YystMTticmVhaztjYXNlIDI6Yj1jKzI1MDticmVhaztjYXNlIDU6Yj1jKzEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmI9YysxRTQ7YnJlYWs7ZGVmYXVsdDpiPWMrNUUzfWE9e2NhbGxiYWNrOmEscHJpb3JpdHlMZXZlbDpnLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9O2lmKG51bGw9PT1kKWQ9YS5uZXh0PWEucHJldmlvdXM9YSxwKCk7ZWxzZXtjPW51bGw7dmFyIGY9ZDtkb3tpZihmLmV4cGlyYXRpb25UaW1lPmIpe2M9ZjticmVha31mPWYubmV4dH13aGlsZShmIT09ZCk7bnVsbD09PWM/Yz1kOmM9PT1kJiYoZD1hLHAoKSk7XG5iPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9YTthLm5leHQ9YzthLnByZXZpb3VzPWJ9cmV0dXJuIGF9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9YS5uZXh0O2lmKG51bGwhPT1iKXtpZihiPT09YSlkPW51bGw7ZWxzZXthPT09ZCYmKGQ9Yik7dmFyIGM9YS5wcmV2aW91cztjLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbH19O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWc7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9ZyxmPWs7Zz1iO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Zz1jLGs9Zix2KCl9fX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBnfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hZSYmKG51bGwhPT1kJiZkLmV4cGlyYXRpb25UaW1lPGx8fHcoKSl9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtudWxsIT09ZCYmcCgpfTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGR9O1xuIiwiLyohXG4gICogQm9vdHN0cmFwIHY0LjAuMCAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tKVxuICAqIENvcHlyaWdodCAyMDExLTIwMTggVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcbiAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdqcXVlcnknKSwgcmVxdWlyZSgncG9wcGVyLmpzJykpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cycsICdqcXVlcnknLCAncG9wcGVyLmpzJ10sIGZhY3RvcnkpIDpcblx0KGZhY3RvcnkoKGdsb2JhbC5ib290c3RyYXAgPSB7fSksZ2xvYmFsLmpRdWVyeSxnbG9iYWwuUG9wcGVyKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cywkLFBvcHBlcikgeyAndXNlIHN0cmljdCc7XG5cbiQgPSAkICYmICQuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/ICRbJ2RlZmF1bHQnXSA6ICQ7XG5Qb3BwZXIgPSBQb3BwZXIgJiYgUG9wcGVyLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBQb3BwZXJbJ2RlZmF1bHQnXSA6IFBvcHBlcjtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wKTogdXRpbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIFV0aWwgPSBmdW5jdGlvbiAoJCQkMSkge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIFByaXZhdGUgVHJhbnNpdGlvbkVuZCBIZWxwZXJzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgdmFyIHRyYW5zaXRpb24gPSBmYWxzZTtcbiAgdmFyIE1BWF9VSUQgPSAxMDAwMDAwOyAvLyBTaG91dG91dCBBbmd1c0Nyb2xsIChodHRwczovL2dvby5nbC9weHdRR3ApXG5cbiAgZnVuY3Rpb24gdG9UeXBlKG9iaikge1xuICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16QS1aXSspLylbMV0udG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJpbmRUeXBlOiB0cmFuc2l0aW9uLmVuZCxcbiAgICAgIGRlbGVnYXRlVHlwZTogdHJhbnNpdGlvbi5lbmQsXG4gICAgICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgICAgICBpZiAoJCQkMShldmVudC50YXJnZXQpLmlzKHRoaXMpKSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kVGVzdCgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlFVbml0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVuZDogJ3RyYW5zaXRpb25lbmQnXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmRFbXVsYXRvcihkdXJhdGlvbikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgJCQkMSh0aGlzKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgIFV0aWwudHJpZ2dlclRyYW5zaXRpb25FbmQoX3RoaXMpO1xuICAgICAgfVxuICAgIH0sIGR1cmF0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCkge1xuICAgIHRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kVGVzdCgpO1xuICAgICQkJDEuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kRW11bGF0b3I7XG5cbiAgICBpZiAoVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSkge1xuICAgICAgJCQkMS5ldmVudC5zcGVjaWFsW1V0aWwuVFJBTlNJVElPTl9FTkRdID0gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVzY2FwZUlkKHNlbGVjdG9yKSB7XG4gICAgLy8gV2UgZXNjYXBlIElEcyBpbiBjYXNlIG9mIHNwZWNpYWwgc2VsZWN0b3JzIChzZWxlY3RvciA9ICcjbXlJZDpzb21ldGhpbmcnKVxuICAgIC8vICQuZXNjYXBlU2VsZWN0b3IgZG9lcyBub3QgZXhpc3QgaW4galF1ZXJ5IDwgM1xuICAgIHNlbGVjdG9yID0gdHlwZW9mICQkJDEuZXNjYXBlU2VsZWN0b3IgPT09ICdmdW5jdGlvbicgPyAkJCQxLmVzY2FwZVNlbGVjdG9yKHNlbGVjdG9yKS5zdWJzdHIoMSkgOiBzZWxlY3Rvci5yZXBsYWNlKC8oOnxcXC58XFxbfFxcXXwsfD18QCkvZywgJ1xcXFwkMScpO1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfVxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogUHVibGljIFV0aWwgQXBpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgdmFyIFV0aWwgPSB7XG4gICAgVFJBTlNJVElPTl9FTkQ6ICdic1RyYW5zaXRpb25FbmQnLFxuICAgIGdldFVJRDogZnVuY3Rpb24gZ2V0VUlEKHByZWZpeCkge1xuICAgICAgZG8ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpOyAvLyBcIn5+XCIgYWN0cyBsaWtlIGEgZmFzdGVyIE1hdGguZmxvb3IoKSBoZXJlXG4gICAgICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKTtcblxuICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9LFxuICAgIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQ6IGZ1bmN0aW9uIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0Jyk7XG5cbiAgICAgIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICcjJykge1xuICAgICAgICBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJyc7XG4gICAgICB9IC8vIElmIGl0J3MgYW4gSURcblxuXG4gICAgICBpZiAoc2VsZWN0b3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBlc2NhcGVJZChzZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciAkc2VsZWN0b3IgPSAkJCQxKGRvY3VtZW50KS5maW5kKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuICRzZWxlY3Rvci5sZW5ndGggPiAwID8gc2VsZWN0b3IgOiBudWxsO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVmbG93OiBmdW5jdGlvbiByZWZsb3coZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIH0sXG4gICAgdHJpZ2dlclRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpIHtcbiAgICAgICQkJDEoZWxlbWVudCkudHJpZ2dlcih0cmFuc2l0aW9uLmVuZCk7XG4gICAgfSxcbiAgICBzdXBwb3J0c1RyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKHRyYW5zaXRpb24pO1xuICAgIH0sXG4gICAgaXNFbGVtZW50OiBmdW5jdGlvbiBpc0VsZW1lbnQob2JqKSB7XG4gICAgICByZXR1cm4gKG9ialswXSB8fCBvYmopLm5vZGVUeXBlO1xuICAgIH0sXG4gICAgdHlwZUNoZWNrQ29uZmlnOiBmdW5jdGlvbiB0eXBlQ2hlY2tDb25maWcoY29tcG9uZW50TmFtZSwgY29uZmlnLCBjb25maWdUeXBlcykge1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gY29uZmlnVHlwZXMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb25maWdUeXBlcywgcHJvcGVydHkpKSB7XG4gICAgICAgICAgdmFyIGV4cGVjdGVkVHlwZXMgPSBjb25maWdUeXBlc1twcm9wZXJ0eV07XG4gICAgICAgICAgdmFyIHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XTtcbiAgICAgICAgICB2YXIgdmFsdWVUeXBlID0gdmFsdWUgJiYgVXRpbC5pc0VsZW1lbnQodmFsdWUpID8gJ2VsZW1lbnQnIDogdG9UeXBlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICghbmV3IFJlZ0V4cChleHBlY3RlZFR5cGVzKS50ZXN0KHZhbHVlVHlwZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjb21wb25lbnROYW1lLnRvVXBwZXJDYXNlKCkgKyBcIjogXCIgKyAoXCJPcHRpb24gXFxcIlwiICsgcHJvcGVydHkgKyBcIlxcXCIgcHJvdmlkZWQgdHlwZSBcXFwiXCIgKyB2YWx1ZVR5cGUgKyBcIlxcXCIgXCIpICsgKFwiYnV0IGV4cGVjdGVkIHR5cGUgXFxcIlwiICsgZXhwZWN0ZWRUeXBlcyArIFwiXFxcIi5cIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKTtcbiAgcmV0dXJuIFV0aWw7XG59KCQpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMCk6IGFsZXJ0LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgQWxlcnQgPSBmdW5jdGlvbiAoJCQkMSkge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIHZhciBOQU1FID0gJ2FsZXJ0JztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuYWxlcnQnO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTA7XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgQ0xPU0U6IFwiY2xvc2VcIiArIEVWRU5UX0tFWSxcbiAgICBDTE9TRUQ6IFwiY2xvc2VkXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEFMRVJUOiAnYWxlcnQnLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgQWxlcnQgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbGVydChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IEFsZXJ0LnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKGVsZW1lbnQpIHtcbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50IHx8IHRoaXMuX2VsZW1lbnQ7XG5cbiAgICAgIHZhciByb290RWxlbWVudCA9IHRoaXMuX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICB2YXIgY3VzdG9tRXZlbnQgPSB0aGlzLl90cmlnZ2VyQ2xvc2VFdmVudChyb290RWxlbWVudCk7XG5cbiAgICAgIGlmIChjdXN0b21FdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlbW92ZUVsZW1lbnQocm9vdEVsZW1lbnQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2dldFJvb3RFbGVtZW50ID0gZnVuY3Rpb24gX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgIHZhciBwYXJlbnQgPSBmYWxzZTtcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHBhcmVudCA9ICQkJDEoc2VsZWN0b3IpWzBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICBwYXJlbnQgPSAkJCQxKGVsZW1lbnQpLmNsb3Nlc3QoXCIuXCIgKyBDbGFzc05hbWUuQUxFUlQpWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3RyaWdnZXJDbG9zZUV2ZW50ID0gZnVuY3Rpb24gX3RyaWdnZXJDbG9zZUV2ZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBjbG9zZUV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5DTE9TRSk7XG4gICAgICAkJCQxKGVsZW1lbnQpLnRyaWdnZXIoY2xvc2VFdmVudCk7XG4gICAgICByZXR1cm4gY2xvc2VFdmVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZW1vdmVFbGVtZW50ID0gZnVuY3Rpb24gX3JlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJCQkMShlbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIGlmICghVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB8fCAhJCQkMShlbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkJCQxKGVsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9kZXN0cm95RWxlbWVudChlbGVtZW50LCBldmVudCk7XG4gICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9kZXN0cm95RWxlbWVudCA9IGZ1bmN0aW9uIF9kZXN0cm95RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAkJCQxKGVsZW1lbnQpLmRldGFjaCgpLnRyaWdnZXIoRXZlbnQuQ0xPU0VEKS5yZW1vdmUoKTtcbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgQWxlcnQuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJCQkMSh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkZWxlbWVudC5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IEFsZXJ0KHRoaXMpO1xuICAgICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZyA9PT0gJ2Nsb3NlJykge1xuICAgICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIEFsZXJ0Ll9oYW5kbGVEaXNtaXNzID0gZnVuY3Rpb24gX2hhbmRsZURpc21pc3MoYWxlcnRJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYWxlcnRJbnN0YW5jZS5jbG9zZSh0aGlzKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhBbGVydCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBBbGVydDtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5ESVNNSVNTLCBBbGVydC5faGFuZGxlRGlzbWlzcyhuZXcgQWxlcnQoKSkpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJCQkMS5mbltOQU1FXSA9IEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBBbGVydDtcblxuICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gQWxlcnQuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gQWxlcnQ7XG59KCQpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMCk6IGJ1dHRvbi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIEJ1dHRvbiA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgdmFyIE5BTUUgPSAnYnV0dG9uJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuYnV0dG9uJztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07XG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgQUNUSVZFOiAnYWN0aXZlJyxcbiAgICBCVVRUT046ICdidG4nLFxuICAgIEZPQ1VTOiAnZm9jdXMnXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBEQVRBX1RPR0dMRV9DQVJST1Q6ICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nLFxuICAgIElOUFVUOiAnaW5wdXQnLFxuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEJVVFRPTjogJy5idG4nXG4gIH07XG4gIHZhciBFdmVudCA9IHtcbiAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIEZPQ1VTX0JMVVJfREFUQV9BUEk6IFwiZm9jdXNcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSArIFwiIFwiICsgKFwiYmx1clwiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZKVxuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBCdXR0b24gPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdXR0b24oZWxlbWVudCkge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBCdXR0b24ucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIHZhciB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSB0cnVlO1xuICAgICAgdmFyIGFkZEFyaWFQcmVzc2VkID0gdHJ1ZTtcbiAgICAgIHZhciByb290RWxlbWVudCA9ICQkJDEodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5EQVRBX1RPR0dMRSlbMF07XG5cbiAgICAgIGlmIChyb290RWxlbWVudCkge1xuICAgICAgICB2YXIgaW5wdXQgPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuSU5QVVQpWzBdO1xuXG4gICAgICAgIGlmIChpbnB1dCkge1xuICAgICAgICAgIGlmIChpbnB1dC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hlY2tlZCAmJiAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2VFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSAkJCQxKHJvb3RFbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRSlbMF07XG5cbiAgICAgICAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAkJCQxKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAgICAgaWYgKGlucHV0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCByb290RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgaW5wdXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpIHx8IHJvb3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSAhJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICAgICQkJDEoaW5wdXQpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgYWRkQXJpYVByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRkQXJpYVByZXNzZWQpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICEkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfTsgLy8gU3RhdGljXG5cblxuICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBCdXR0b24odGhpcyk7XG4gICAgICAgICAgJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIEJ1dHRvbjtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRV9DQVJST1QsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIGJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcblxuICAgIGlmICghJCQkMShidXR0b24pLmhhc0NsYXNzKENsYXNzTmFtZS5CVVRUT04pKSB7XG4gICAgICBidXR0b24gPSAkJCQxKGJ1dHRvbikuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pO1xuICAgIH1cblxuICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMShidXR0b24pLCAndG9nZ2xlJyk7XG4gIH0pLm9uKEV2ZW50LkZPQ1VTX0JMVVJfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGJ1dHRvbiA9ICQkJDEoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFNlbGVjdG9yLkJVVFRPTilbMF07XG4gICAgJCQkMShidXR0b24pLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5GT0NVUywgL15mb2N1cyhpbik/JC8udGVzdChldmVudC50eXBlKSk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJCQkMS5mbltOQU1FXSA9IEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQnV0dG9uO1xuXG4gICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBCdXR0b24uX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gQnV0dG9uO1xufSgkKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjApOiBjYXJvdXNlbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIENhcm91c2VsID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgTkFNRSA9ICdjYXJvdXNlbCc7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmNhcm91c2VsJztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07XG4gIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gNjAwO1xuICB2YXIgQVJST1dfTEVGVF9LRVlDT0RFID0gMzc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGxlZnQgYXJyb3cga2V5XG5cbiAgdmFyIEFSUk9XX1JJR0hUX0tFWUNPREUgPSAzOTsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgcmlnaHQgYXJyb3cga2V5XG5cbiAgdmFyIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgPSA1MDA7IC8vIFRpbWUgZm9yIG1vdXNlIGNvbXBhdCBldmVudHMgdG8gZmlyZSBhZnRlciB0b3VjaFxuXG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIGludGVydmFsOiA1MDAwLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNsaWRlOiBmYWxzZSxcbiAgICBwYXVzZTogJ2hvdmVyJyxcbiAgICB3cmFwOiB0cnVlXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBpbnRlcnZhbDogJyhudW1iZXJ8Ym9vbGVhbiknLFxuICAgIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gICAgc2xpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICBwYXVzZTogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICAgIHdyYXA6ICdib29sZWFuJ1xuICB9O1xuICB2YXIgRGlyZWN0aW9uID0ge1xuICAgIE5FWFQ6ICduZXh0JyxcbiAgICBQUkVWOiAncHJldicsXG4gICAgTEVGVDogJ2xlZnQnLFxuICAgIFJJR0hUOiAncmlnaHQnXG4gIH07XG4gIHZhciBFdmVudCA9IHtcbiAgICBTTElERTogXCJzbGlkZVwiICsgRVZFTlRfS0VZLFxuICAgIFNMSUQ6IFwic2xpZFwiICsgRVZFTlRfS0VZLFxuICAgIEtFWURPV046IFwia2V5ZG93blwiICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZVwiICsgRVZFTlRfS0VZLFxuICAgIFRPVUNIRU5EOiBcInRvdWNoZW5kXCIgKyBFVkVOVF9LRVksXG4gICAgTE9BRF9EQVRBX0FQSTogXCJsb2FkXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIENBUk9VU0VMOiAnY2Fyb3VzZWwnLFxuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgU0xJREU6ICdzbGlkZScsXG4gICAgUklHSFQ6ICdjYXJvdXNlbC1pdGVtLXJpZ2h0JyxcbiAgICBMRUZUOiAnY2Fyb3VzZWwtaXRlbS1sZWZ0JyxcbiAgICBORVhUOiAnY2Fyb3VzZWwtaXRlbS1uZXh0JyxcbiAgICBQUkVWOiAnY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgICBJVEVNOiAnY2Fyb3VzZWwtaXRlbSdcbiAgfTtcbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEFDVElWRV9JVEVNOiAnLmFjdGl2ZS5jYXJvdXNlbC1pdGVtJyxcbiAgICBJVEVNOiAnLmNhcm91c2VsLWl0ZW0nLFxuICAgIE5FWFRfUFJFVjogJy5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXYnLFxuICAgIElORElDQVRPUlM6ICcuY2Fyb3VzZWwtaW5kaWNhdG9ycycsXG4gICAgREFUQV9TTElERTogJ1tkYXRhLXNsaWRlXSwgW2RhdGEtc2xpZGUtdG9dJyxcbiAgICBEQVRBX1JJREU6ICdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIENhcm91c2VsID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2Fyb3VzZWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9ICQkJDEoZWxlbWVudClbMF07XG4gICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9ICQkJDEodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5JTkRJQ0FUT1JTKVswXTtcblxuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IENhcm91c2VsLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5uZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5ORVhUKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLm5leHRXaGVuVmlzaWJsZSA9IGZ1bmN0aW9uIG5leHRXaGVuVmlzaWJsZSgpIHtcbiAgICAgIC8vIERvbid0IGNhbGwgbmV4dCB3aGVuIHRoZSBwYWdlIGlzbid0IHZpc2libGVcbiAgICAgIC8vIG9yIHRoZSBjYXJvdXNlbCBvciBpdHMgcGFyZW50IGlzbid0IHZpc2libGVcbiAgICAgIGlmICghZG9jdW1lbnQuaGlkZGVuICYmICQkJDEodGhpcy5fZWxlbWVudCkuaXMoJzp2aXNpYmxlJykgJiYgJCQkMSh0aGlzLl9lbGVtZW50KS5jc3MoJ3Zpc2liaWxpdHknKSAhPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5wcmV2ID0gZnVuY3Rpb24gcHJldigpIHtcbiAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5QUkVWKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoZXZlbnQpIHtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoJCQkMSh0aGlzLl9lbGVtZW50KS5maW5kKFNlbGVjdG9yLk5FWFRfUFJFVilbMF0gJiYgVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSkge1xuICAgICAgICBVdGlsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICB0aGlzLmN5Y2xlKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmN5Y2xlID0gZnVuY3Rpb24gY3ljbGUoZXZlbnQpIHtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2ludGVydmFsKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuaW50ZXJ2YWwgJiYgIXRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA/IHRoaXMubmV4dFdoZW5WaXNpYmxlIDogdGhpcy5uZXh0KS5iaW5kKHRoaXMpLCB0aGlzLl9jb25maWcuaW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8udG8gPSBmdW5jdGlvbiB0byhpbmRleCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9ICQkJDEodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkVfSVRFTSlbMF07XG5cbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KTtcblxuICAgICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub25lKEV2ZW50LlNMSUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudG8oaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlSW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgdGhpcy5jeWNsZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkaXJlY3Rpb24gPSBpbmRleCA+IGFjdGl2ZUluZGV4ID8gRGlyZWN0aW9uLk5FWFQgOiBEaXJlY3Rpb24uUFJFVjtcblxuICAgICAgdGhpcy5fc2xpZGUoZGlyZWN0aW9uLCB0aGlzLl9pdGVtc1tpbmRleF0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpO1xuICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gbnVsbDtcbiAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0LCBjb25maWcpO1xuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2FkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5LRVlET1dOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLl9rZXlkb3duKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5NT1VTRUVOVEVSLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLnBhdXNlKGV2ZW50KTtcbiAgICAgICAgfSkub24oRXZlbnQuTU9VU0VMRUFWRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5jeWNsZShldmVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBJZiBpdCdzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2UsIG1vdXNlZW50ZXIvbGVhdmUgYXJlIGZpcmVkIGFzXG4gICAgICAgICAgLy8gcGFydCBvZiB0aGUgbW91c2UgY29tcGF0aWJpbGl0eSBldmVudHMgb24gZmlyc3QgdGFwIC0gdGhlIGNhcm91c2VsXG4gICAgICAgICAgLy8gd291bGQgc3RvcCBjeWNsaW5nIHVudGlsIHVzZXIgdGFwcGVkIG91dCBvZiBpdDtcbiAgICAgICAgICAvLyBoZXJlLCB3ZSBsaXN0ZW4gZm9yIHRvdWNoZW5kLCBleHBsaWNpdGx5IHBhdXNlIHRoZSBjYXJvdXNlbFxuICAgICAgICAgIC8vIChhcyBpZiBpdCdzIHRoZSBzZWNvbmQgdGltZSB3ZSB0YXAgb24gaXQsIG1vdXNlZW50ZXIgY29tcGF0IGV2ZW50XG4gICAgICAgICAgLy8gaXMgTk9UIGZpcmVkKSBhbmQgYWZ0ZXIgYSB0aW1lb3V0ICh0byBhbGxvdyBmb3IgbW91c2UgY29tcGF0aWJpbGl0eVxuICAgICAgICAgIC8vIGV2ZW50cyB0byBmaXJlKSB3ZSBleHBsaWNpdGx5IHJlc3RhcnQgY3ljbGluZ1xuICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuVE9VQ0hFTkQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMi5wYXVzZSgpO1xuXG4gICAgICAgICAgICBpZiAoX3RoaXMyLnRvdWNoVGltZW91dCkge1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMyLnRvdWNoVGltZW91dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzMi50b3VjaFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmN5Y2xlKGV2ZW50KTtcbiAgICAgICAgICAgIH0sIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgKyBfdGhpczIuX2NvbmZpZy5pbnRlcnZhbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9rZXlkb3duID0gZnVuY3Rpb24gX2tleWRvd24oZXZlbnQpIHtcbiAgICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcbiAgICAgICAgY2FzZSBBUlJPV19MRUZUX0tFWUNPREU6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLnByZXYoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEFSUk9XX1JJR0hUX0tFWUNPREU6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldEl0ZW1JbmRleCA9IGZ1bmN0aW9uIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgICAgdGhpcy5faXRlbXMgPSAkJCQxLm1ha2VBcnJheSgkJCQxKGVsZW1lbnQpLnBhcmVudCgpLmZpbmQoU2VsZWN0b3IuSVRFTSkpO1xuICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmluZGV4T2YoZWxlbWVudCk7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0SXRlbUJ5RGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHZhciBpc05leHREaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUO1xuICAgICAgdmFyIGlzUHJldkRpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVY7XG5cbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcblxuICAgICAgdmFyIGxhc3RJdGVtSW5kZXggPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGlzR29pbmdUb1dyYXAgPSBpc1ByZXZEaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IDAgfHwgaXNOZXh0RGlyZWN0aW9uICYmIGFjdGl2ZUluZGV4ID09PSBsYXN0SXRlbUluZGV4O1xuXG4gICAgICBpZiAoaXNHb2luZ1RvV3JhcCAmJiAhdGhpcy5fY29uZmlnLndyYXApIHtcbiAgICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZWx0YSA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVYgPyAtMSA6IDE7XG4gICAgICB2YXIgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy5faXRlbXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGl0ZW1JbmRleCA9PT0gLTEgPyB0aGlzLl9pdGVtc1t0aGlzLl9pdGVtcy5sZW5ndGggLSAxXSA6IHRoaXMuX2l0ZW1zW2l0ZW1JbmRleF07XG4gICAgfTtcblxuICAgIF9wcm90by5fdHJpZ2dlclNsaWRlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7XG4gICAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgocmVsYXRlZFRhcmdldCk7XG5cbiAgICAgIHZhciBmcm9tSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoJCQkMSh0aGlzLl9lbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRV9JVEVNKVswXSk7XG5cbiAgICAgIHZhciBzbGlkZUV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TTElERSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgICAgZnJvbTogZnJvbUluZGV4LFxuICAgICAgICB0bzogdGFyZ2V0SW5kZXhcbiAgICAgIH0pO1xuICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRlRXZlbnQpO1xuICAgICAgcmV0dXJuIHNsaWRlRXZlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCA9IGZ1bmN0aW9uIF9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIGlmICh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkge1xuICAgICAgICAkJCQxKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG5cbiAgICAgICAgdmFyIG5leHRJbmRpY2F0b3IgPSB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5jaGlsZHJlblt0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudCldO1xuXG4gICAgICAgIGlmIChuZXh0SW5kaWNhdG9yKSB7XG4gICAgICAgICAgJCQkMShuZXh0SW5kaWNhdG9yKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3NsaWRlID0gZnVuY3Rpb24gX3NsaWRlKGRpcmVjdGlvbiwgZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gJCQkMSh0aGlzLl9lbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRV9JVEVNKVswXTtcblxuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcblxuICAgICAgdmFyIG5leHRFbGVtZW50ID0gZWxlbWVudCB8fCBhY3RpdmVFbGVtZW50ICYmIHRoaXMuX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICB2YXIgbmV4dEVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChuZXh0RWxlbWVudCk7XG5cbiAgICAgIHZhciBpc0N5Y2xpbmcgPSBCb29sZWFuKHRoaXMuX2ludGVydmFsKTtcbiAgICAgIHZhciBkaXJlY3Rpb25hbENsYXNzTmFtZTtcbiAgICAgIHZhciBvcmRlckNsYXNzTmFtZTtcbiAgICAgIHZhciBldmVudERpcmVjdGlvbk5hbWU7XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUKSB7XG4gICAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLkxFRlQ7XG4gICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLk5FWFQ7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuUklHSFQ7XG4gICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlBSRVY7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5SSUdIVDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRFbGVtZW50ICYmICQkJDEobmV4dEVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSk7XG5cbiAgICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhY3RpdmVFbGVtZW50IHx8ICFuZXh0RWxlbWVudCkge1xuICAgICAgICAvLyBTb21lIHdlaXJkbmVzcyBpcyBoYXBwZW5pbmcsIHNvIHdlIGJhaWxcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChuZXh0RWxlbWVudCk7XG5cbiAgICAgIHZhciBzbGlkRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNMSUQsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogbmV4dEVsZW1lbnQsXG4gICAgICAgIGRpcmVjdGlvbjogZXZlbnREaXJlY3Rpb25OYW1lLFxuICAgICAgICBmcm9tOiBhY3RpdmVFbGVtZW50SW5kZXgsXG4gICAgICAgIHRvOiBuZXh0RWxlbWVudEluZGV4XG4gICAgICB9KTtcblxuICAgICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0xJREUpKSB7XG4gICAgICAgICQkJDEobmV4dEVsZW1lbnQpLmFkZENsYXNzKG9yZGVyQ2xhc3NOYW1lKTtcbiAgICAgICAgVXRpbC5yZWZsb3cobmV4dEVsZW1lbnQpO1xuICAgICAgICAkJCQxKGFjdGl2ZUVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgJCQkMShuZXh0RWxlbWVudCkuYWRkQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICAkJCQxKGFjdGl2ZUVsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJCQkMShuZXh0RWxlbWVudCkucmVtb3ZlQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUgKyBcIiBcIiArIG9yZGVyQ2xhc3NOYW1lKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICAkJCQxKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUgKyBcIiBcIiArIG9yZGVyQ2xhc3NOYW1lICsgXCIgXCIgKyBkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgICAgX3RoaXMzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAkJCQxKF90aGlzMy5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQkJDEoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICQkJDEobmV4dEVsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgdGhpcy5jeWNsZSgpO1xuICAgICAgfVxuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSBfZXh0ZW5kcyh7fSwgRGVmYXVsdCwgJCQkMSh0aGlzKS5kYXRhKCkpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIF9jb25maWcgPSBfZXh0ZW5kcyh7fSwgX2NvbmZpZywgY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb24gPSB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyA/IGNvbmZpZyA6IF9jb25maWcuc2xpZGU7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgZGF0YS50byhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2FjdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGFjdGlvbiArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2FjdGlvbl0oKTtcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLmludGVydmFsKSB7XG4gICAgICAgICAgZGF0YS5wYXVzZSgpO1xuICAgICAgICAgIGRhdGEuY3ljbGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlDbGlja0hhbmRsZXIoZXZlbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcblxuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0YXJnZXQgPSAkJCQxKHNlbGVjdG9yKVswXTtcblxuICAgICAgaWYgKCF0YXJnZXQgfHwgISQkJDEodGFyZ2V0KS5oYXNDbGFzcyhDbGFzc05hbWUuQ0FST1VTRUwpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbmZpZyA9IF9leHRlbmRzKHt9LCAkJCQxKHRhcmdldCkuZGF0YSgpLCAkJCQxKHRoaXMpLmRhdGEoKSk7XG4gICAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlLXRvJyk7XG5cbiAgICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMSh0YXJnZXQpLCBjb25maWcpO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICAkJCQxKHRhcmdldCkuZGF0YShEQVRBX0tFWSkudG8oc2xpZGVJbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhDYXJvdXNlbCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIENhcm91c2VsO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJCQkMShkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfU0xJREUsIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyKTtcbiAgJCQkMSh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksIGZ1bmN0aW9uICgpIHtcbiAgICAkJCQxKFNlbGVjdG9yLkRBVEFfUklERSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJGNhcm91c2VsID0gJCQkMSh0aGlzKTtcblxuICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSk7XG4gICAgfSk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJCQkMS5mbltOQU1FXSA9IENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDYXJvdXNlbDtcblxuICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gQ2Fyb3VzZWw7XG59KCQpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMCk6IGNvbGxhcHNlLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgQ29sbGFwc2UgPSBmdW5jdGlvbiAoJCQkMSkge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIHZhciBOQU1FID0gJ2NvbGxhcHNlJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuY29sbGFwc2UnO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSA2MDA7XG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICBwYXJlbnQ6ICcnXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICB0b2dnbGU6ICdib29sZWFuJyxcbiAgICBwYXJlbnQ6ICcoc3RyaW5nfGVsZW1lbnQpJ1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVksXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSxcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIFNIT1c6ICdzaG93JyxcbiAgICBDT0xMQVBTRTogJ2NvbGxhcHNlJyxcbiAgICBDT0xMQVBTSU5HOiAnY29sbGFwc2luZycsXG4gICAgQ09MTEFQU0VEOiAnY29sbGFwc2VkJ1xuICB9O1xuICB2YXIgRGltZW5zaW9uID0ge1xuICAgIFdJRFRIOiAnd2lkdGgnLFxuICAgIEhFSUdIVDogJ2hlaWdodCdcbiAgfTtcbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIEFDVElWRVM6ICcuc2hvdywgLmNvbGxhcHNpbmcnLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIENvbGxhcHNlID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29sbGFwc2UoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSAkJCQxLm1ha2VBcnJheSgkJCQxKFwiW2RhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCJdW2hyZWY9XFxcIiNcIiArIGVsZW1lbnQuaWQgKyBcIlxcXCJdLFwiICsgKFwiW2RhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCJdW2RhdGEtdGFyZ2V0PVxcXCIjXCIgKyBlbGVtZW50LmlkICsgXCJcXFwiXVwiKSkpO1xuICAgICAgdmFyIHRhYlRvZ2dsZXMgPSAkJCQxKFNlbGVjdG9yLkRBVEFfVE9HR0xFKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWJUb2dnbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbGVtID0gdGFiVG9nZ2xlc1tpXTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pO1xuXG4gICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiAkJCQxKHNlbGVjdG9yKS5maWx0ZXIoZWxlbWVudCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG5cbiAgICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50ID8gdGhpcy5fZ2V0UGFyZW50KCkgOiBudWxsO1xuXG4gICAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcudG9nZ2xlKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICB9XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBDb2xsYXBzZS5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgaWYgKCQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWN0aXZlcztcbiAgICAgIHZhciBhY3RpdmVzRGF0YTtcblxuICAgICAgaWYgKHRoaXMuX3BhcmVudCkge1xuICAgICAgICBhY3RpdmVzID0gJCQkMS5tYWtlQXJyYXkoJCQkMSh0aGlzLl9wYXJlbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFUykuZmlsdGVyKFwiW2RhdGEtcGFyZW50PVxcXCJcIiArIHRoaXMuX2NvbmZpZy5wYXJlbnQgKyBcIlxcXCJdXCIpKTtcblxuICAgICAgICBpZiAoYWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBhY3RpdmVzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlcykge1xuICAgICAgICBhY3RpdmVzRGF0YSA9ICQkJDEoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKS5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0hPVyk7XG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XG5cbiAgICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQkJDEoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKSwgJ2hpZGUnKTtcblxuICAgICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG4gICAgICAgICAgJCQkMShhY3RpdmVzKS5kYXRhKERBVEFfS0VZLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgICQkJDEodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORyk7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwO1xuXG4gICAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgJCQkMSh0aGlzLl90cmlnZ2VyQXJyYXkpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgJCQkMShfdGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgICBfdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG5cbiAgICAgICAgX3RoaXMuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG5cbiAgICAgICAgJCQkMShfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5TSE9XTik7XG4gICAgICB9O1xuXG4gICAgICBpZiAoIVV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkpIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2FwaXRhbGl6ZWREaW1lbnNpb24gPSBkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSgxKTtcbiAgICAgIHZhciBzY3JvbGxTaXplID0gXCJzY3JvbGxcIiArIGNhcGl0YWxpemVkRGltZW5zaW9uO1xuICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudFtzY3JvbGxTaXplXSArIFwicHhcIjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgISQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LkhJREUpO1xuICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuXG4gICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtkaW1lbnNpb25dICsgXCJweFwiO1xuICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHRyaWdnZXIgPSB0aGlzLl90cmlnZ2VyQXJyYXlbaV07XG4gICAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRyaWdnZXIpO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgJGVsZW0gPSAkJCQxKHNlbGVjdG9yKTtcblxuICAgICAgICAgICAgaWYgKCEkZWxlbS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICAgICAgJCQkMSh0cmlnZ2VyKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBfdGhpczIuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG5cbiAgICAgICAgJCQkMShfdGhpczIuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLnRyaWdnZXIoRXZlbnQuSElEREVOKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuXG4gICAgICBpZiAoIVV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkpIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgfTtcblxuICAgIF9wcm90by5zZXRUcmFuc2l0aW9uaW5nID0gZnVuY3Rpb24gc2V0VHJhbnNpdGlvbmluZyhpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGlzVHJhbnNpdGlvbmluZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBudWxsO1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gbnVsbDtcbiAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0LCBjb25maWcpO1xuICAgICAgY29uZmlnLnRvZ2dsZSA9IEJvb2xlYW4oY29uZmlnLnRvZ2dsZSk7IC8vIENvZXJjZSBzdHJpbmcgdmFsdWVzXG5cbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXREaW1lbnNpb24gPSBmdW5jdGlvbiBfZ2V0RGltZW5zaW9uKCkge1xuICAgICAgdmFyIGhhc1dpZHRoID0gJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhEaW1lbnNpb24uV0lEVEgpO1xuICAgICAgcmV0dXJuIGhhc1dpZHRoID8gRGltZW5zaW9uLldJRFRIIDogRGltZW5zaW9uLkhFSUdIVDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRQYXJlbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBwYXJlbnQgPSBudWxsO1xuXG4gICAgICBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnBhcmVudCkpIHtcbiAgICAgICAgcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudDsgLy8gSXQncyBhIGpRdWVyeSBvYmplY3RcblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQuanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnRbMF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudCA9ICQkJDEodGhpcy5fY29uZmlnLnBhcmVudClbMF07XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxlY3RvciA9IFwiW2RhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCJdW2RhdGEtcGFyZW50PVxcXCJcIiArIHRoaXMuX2NvbmZpZy5wYXJlbnQgKyBcIlxcXCJdXCI7XG4gICAgICAkJCQxKHBhcmVudCkuZmluZChzZWxlY3RvcikuZWFjaChmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICBfdGhpczMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCksIFtlbGVtZW50XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzID0gZnVuY3Rpb24gX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhlbGVtZW50LCB0cmlnZ2VyQXJyYXkpIHtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBpc09wZW4gPSAkJCQxKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgICBpZiAodHJpZ2dlckFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkJCQxKHRyaWdnZXJBcnJheSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCwgIWlzT3BlbikuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3Blbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgIHJldHVybiBzZWxlY3RvciA/ICQkJDEoc2VsZWN0b3IpWzBdIDogbnVsbDtcbiAgICB9O1xuXG4gICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCQkMSh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0LCAkdGhpcy5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyk7XG5cbiAgICAgICAgaWYgKCFkYXRhICYmIF9jb25maWcudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICAgIF9jb25maWcudG9nZ2xlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhDb2xsYXBzZSwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIENvbGxhcHNlO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJCQkMShkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBwcmV2ZW50RGVmYXVsdCBvbmx5IGZvciA8YT4gZWxlbWVudHMgKHdoaWNoIGNoYW5nZSB0aGUgVVJMKSBub3QgaW5zaWRlIHRoZSBjb2xsYXBzaWJsZSBlbGVtZW50XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQudGFnTmFtZSA9PT0gJ0EnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciAkdHJpZ2dlciA9ICQkJDEodGhpcyk7XG4gICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuICAgICQkJDEoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0YXJnZXQgPSAkJCQxKHRoaXMpO1xuICAgICAgdmFyIGRhdGEgPSAkdGFyZ2V0LmRhdGEoREFUQV9LRVkpO1xuICAgICAgdmFyIGNvbmZpZyA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0cmlnZ2VyLmRhdGEoKTtcblxuICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCR0YXJnZXQsIGNvbmZpZyk7XG4gICAgfSk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJCQkMS5mbltOQU1FXSA9IENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDb2xsYXBzZTtcblxuICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gQ29sbGFwc2U7XG59KCQpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMCk6IGRyb3Bkb3duLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoJCQkMSkge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIHZhciBOQU1FID0gJ2Ryb3Bkb3duJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuZHJvcGRvd24nO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgdmFyIEVTQ0FQRV9LRVlDT0RFID0gMjc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcblxuICB2YXIgU1BBQ0VfS0VZQ09ERSA9IDMyOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBzcGFjZSBrZXlcblxuICB2YXIgVEFCX0tFWUNPREUgPSA5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB0YWIga2V5XG5cbiAgdmFyIEFSUk9XX1VQX0tFWUNPREUgPSAzODsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgdXAgYXJyb3cga2V5XG5cbiAgdmFyIEFSUk9XX0RPV05fS0VZQ09ERSA9IDQwOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBkb3duIGFycm93IGtleVxuXG4gIHZhciBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggPSAzOyAvLyBNb3VzZUV2ZW50LndoaWNoIHZhbHVlIGZvciB0aGUgcmlnaHQgYnV0dG9uIChhc3N1bWluZyBhIHJpZ2h0LWhhbmRlZCBtb3VzZSlcblxuICB2YXIgUkVHRVhQX0tFWURPV04gPSBuZXcgUmVnRXhwKEFSUk9XX1VQX0tFWUNPREUgKyBcInxcIiArIEFSUk9XX0RPV05fS0VZQ09ERSArIFwifFwiICsgRVNDQVBFX0tFWUNPREUpO1xuICB2YXIgRXZlbnQgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSxcbiAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIEtFWURPV05fREFUQV9BUEk6IFwia2V5ZG93blwiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIEtFWVVQX0RBVEFfQVBJOiBcImtleXVwXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBESVNBQkxFRDogJ2Rpc2FibGVkJyxcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgRFJPUFVQOiAnZHJvcHVwJyxcbiAgICBEUk9QUklHSFQ6ICdkcm9wcmlnaHQnLFxuICAgIERST1BMRUZUOiAnZHJvcGxlZnQnLFxuICAgIE1FTlVSSUdIVDogJ2Ryb3Bkb3duLW1lbnUtcmlnaHQnLFxuICAgIE1FTlVMRUZUOiAnZHJvcGRvd24tbWVudS1sZWZ0JyxcbiAgICBQT1NJVElPTl9TVEFUSUM6ICdwb3NpdGlvbi1zdGF0aWMnXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyxcbiAgICBGT1JNX0NISUxEOiAnLmRyb3Bkb3duIGZvcm0nLFxuICAgIE1FTlU6ICcuZHJvcGRvd24tbWVudScsXG4gICAgTkFWQkFSX05BVjogJy5uYXZiYXItbmF2JyxcbiAgICBWSVNJQkxFX0lURU1TOiAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCknXG4gIH07XG4gIHZhciBBdHRhY2htZW50TWFwID0ge1xuICAgIFRPUDogJ3RvcC1zdGFydCcsXG4gICAgVE9QRU5EOiAndG9wLWVuZCcsXG4gICAgQk9UVE9NOiAnYm90dG9tLXN0YXJ0JyxcbiAgICBCT1RUT01FTkQ6ICdib3R0b20tZW5kJyxcbiAgICBSSUdIVDogJ3JpZ2h0LXN0YXJ0JyxcbiAgICBSSUdIVEVORDogJ3JpZ2h0LWVuZCcsXG4gICAgTEVGVDogJ2xlZnQtc3RhcnQnLFxuICAgIExFRlRFTkQ6ICdsZWZ0LWVuZCdcbiAgfTtcbiAgdmFyIERlZmF1bHQgPSB7XG4gICAgb2Zmc2V0OiAwLFxuICAgIGZsaXA6IHRydWUsXG4gICAgYm91bmRhcnk6ICdzY3JvbGxQYXJlbnQnXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBvZmZzZXQ6ICcobnVtYmVyfHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIGZsaXA6ICdib29sZWFuJyxcbiAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIERyb3Bkb3duID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRHJvcGRvd24oZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX21lbnUgPSB0aGlzLl9nZXRNZW51RWxlbWVudCgpO1xuICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcblxuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IERyb3Bkb3duLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAkJCQxKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgRHJvcGRvd24uX2NsZWFyTWVudXMoKTtcblxuICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH07XG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TSE9XLCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgICQkJDEocGFyZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBEaXNhYmxlIHRvdGFsbHkgUG9wcGVyLmpzIGZvciBEcm9wZG93biBpbiBOYXZiYXJcblxuXG4gICAgICBpZiAoIXRoaXMuX2luTmF2YmFyKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayBmb3IgUG9wcGVyIGRlcGVuZGVuY3lcbiAgICAgICAgICogUG9wcGVyIC0gaHR0cHM6Ly9wb3BwZXIuanMub3JnXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHlwZW9mIFBvcHBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXAgZHJvcGRvd24gcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5fZWxlbWVudDsgLy8gRm9yIGRyb3B1cCB3aXRoIGFsaWdubWVudCB3ZSB1c2UgdGhlIHBhcmVudCBhcyBwb3BwZXIgY29udGFpbmVyXG5cbiAgICAgICAgaWYgKCQkJDEocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUFVQKSkge1xuICAgICAgICAgIGlmICgkJCQxKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VTEVGVCkgfHwgJCQkMSh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuTUVOVVJJR0hUKSkge1xuICAgICAgICAgICAgZWxlbWVudCA9IHBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gSWYgYm91bmRhcnkgaXMgbm90IGBzY3JvbGxQYXJlbnRgLCB0aGVuIHNldCBwb3NpdGlvbiB0byBgc3RhdGljYFxuICAgICAgICAvLyB0byBhbGxvdyB0aGUgbWVudSB0byBcImVzY2FwZVwiIHRoZSBzY3JvbGwgcGFyZW50J3MgYm91bmRhcmllc1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzI0MjUxXG5cblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgICAgICQkJDEocGFyZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuUE9TSVRJT05fU1RBVElDKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIoZWxlbWVudCwgdGhpcy5fbWVudSwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCkpO1xuICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuXG5cbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgJCQkMShwYXJlbnQpLmNsb3Nlc3QoU2VsZWN0b3IuTkFWQkFSX05BVikubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICQkJDEoJ2JvZHknKS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkJCQxLm5vb3ApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LmZvY3VzKCk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICAgICQkJDEodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgJCQkMShwYXJlbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQkJDEuRXZlbnQoRXZlbnQuU0hPV04sIHJlbGF0ZWRUYXJnZXQpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX21lbnUgPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG5cbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2FkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDSywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIF90aGlzLnRvZ2dsZSgpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9leHRlbmRzKHt9LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsICQkJDEodGhpcy5fZWxlbWVudCkuZGF0YSgpLCBjb25maWcpO1xuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0TWVudUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0TWVudUVsZW1lbnQoKSB7XG4gICAgICBpZiAoIXRoaXMuX21lbnUpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgICB0aGlzLl9tZW51ID0gJCQkMShwYXJlbnQpLmZpbmQoU2VsZWN0b3IuTUVOVSlbMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9tZW51O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFBsYWNlbWVudCA9IGZ1bmN0aW9uIF9nZXRQbGFjZW1lbnQoKSB7XG4gICAgICB2YXIgJHBhcmVudERyb3Bkb3duID0gJCQkMSh0aGlzLl9lbGVtZW50KS5wYXJlbnQoKTtcbiAgICAgIHZhciBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTTsgLy8gSGFuZGxlIGRyb3B1cFxuXG4gICAgICBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QVVApKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QO1xuXG4gICAgICAgIGlmICgkJCQxKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XG4gICAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5UT1BFTkQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QUklHSFQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuUklHSFQ7XG4gICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUExFRlQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuTEVGVDtcbiAgICAgIH0gZWxzZSBpZiAoJCQkMSh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuTUVOVVJJR0hUKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTUVORDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9kZXRlY3ROYXZiYXIgPSBmdW5jdGlvbiBfZGV0ZWN0TmF2YmFyKCkge1xuICAgICAgcmV0dXJuICQkJDEodGhpcy5fZWxlbWVudCkuY2xvc2VzdCgnLm5hdmJhcicpLmxlbmd0aCA+IDA7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0UG9wcGVyQ29uZmlnID0gZnVuY3Rpb24gX2dldFBvcHBlckNvbmZpZygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgb2Zmc2V0Q29uZiA9IHt9O1xuXG4gICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5vZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2Zmc2V0Q29uZi5mbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgZGF0YS5vZmZzZXRzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cywgX3RoaXMyLl9jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cykgfHwge30pO1xuICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0Q29uZi5vZmZzZXQgPSB0aGlzLl9jb25maWcub2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9wcGVyQ29uZmlnID0ge1xuICAgICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxuICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldENvbmYsXG4gICAgICAgICAgZmxpcDoge1xuICAgICAgICAgICAgZW5hYmxlZDogdGhpcy5fY29uZmlnLmZsaXBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBwb3BwZXJDb25maWc7XG4gICAgfTsgLy8gU3RhdGljXG5cblxuICAgIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbDtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgRHJvcGRvd24uX2NsZWFyTWVudXMgPSBmdW5jdGlvbiBfY2xlYXJNZW51cyhldmVudCkge1xuICAgICAgaWYgKGV2ZW50ICYmIChldmVudC53aGljaCA9PT0gUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggIT09IFRBQl9LRVlDT0RFKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0b2dnbGVzID0gJCQkMS5tYWtlQXJyYXkoJCQkMShTZWxlY3Rvci5EQVRBX1RPR0dMRSkpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvZ2dsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0b2dnbGVzW2ldKTtcblxuICAgICAgICB2YXIgY29udGV4dCA9ICQkJDEodG9nZ2xlc1tpXSkuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRvZ2dsZXNbaV1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkcm9wZG93bk1lbnUgPSBjb250ZXh0Ll9tZW51O1xuXG4gICAgICAgIGlmICghJCQkMShwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50ICYmIChldmVudC50eXBlID09PSAnY2xpY2snICYmIC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggPT09IFRBQl9LRVlDT0RFKSAmJiAkJCQxLmNvbnRhaW5zKHBhcmVudCwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhpZGVFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuSElERSwgcmVsYXRlZFRhcmdldCk7XG4gICAgICAgICQkJDEocGFyZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cblxuICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgJCQkMSgnYm9keScpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkJCQxLm5vb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlc1tpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgJCQkMShkcm9wZG93bk1lbnUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcbiAgICAgICAgJCQkMShwYXJlbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQkJDEuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRQYXJlbnRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgcGFyZW50O1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcGFyZW50ID0gJCQkMShzZWxlY3RvcilbMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnQgfHwgZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5cblxuICAgIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIgPSBmdW5jdGlvbiBfZGF0YUFwaUtleWRvd25IYW5kbGVyKGV2ZW50KSB7XG4gICAgICAvLyBJZiBub3QgaW5wdXQvdGV4dGFyZWE6XG4gICAgICAvLyAgLSBBbmQgbm90IGEga2V5IGluIFJFR0VYUF9LRVlET1dOID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgIC8vIElmIGlucHV0L3RleHRhcmVhOlxuICAgICAgLy8gIC0gSWYgc3BhY2Uga2V5ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgIC8vICAtIElmIGtleSBpcyBvdGhlciB0aGFuIGVzY2FwZVxuICAgICAgLy8gICAgLSBJZiBrZXkgaXMgbm90IHVwIG9yIGRvd24gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgLy8gICAgLSBJZiB0cmlnZ2VyIGluc2lkZSB0aGUgbWVudSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgPyBldmVudC53aGljaCA9PT0gU1BBQ0VfS0VZQ09ERSB8fCBldmVudC53aGljaCAhPT0gRVNDQVBFX0tFWUNPREUgJiYgKGV2ZW50LndoaWNoICE9PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgZXZlbnQud2hpY2ggIT09IEFSUk9XX1VQX0tFWUNPREUgfHwgJCQkMShldmVudC50YXJnZXQpLmNsb3Nlc3QoU2VsZWN0b3IuTUVOVSkubGVuZ3RoKSA6ICFSRUdFWFBfS0VZRE9XTi50ZXN0KGV2ZW50LndoaWNoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgJCQkMSh0aGlzKS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzKTtcblxuICAgICAgdmFyIGlzQWN0aXZlID0gJCQkMShwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgaWYgKCFpc0FjdGl2ZSAmJiAoZXZlbnQud2hpY2ggIT09IEVTQ0FQRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoICE9PSBTUEFDRV9LRVlDT0RFKSB8fCBpc0FjdGl2ZSAmJiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFKSkge1xuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgICAgdmFyIHRvZ2dsZSA9ICQkJDEocGFyZW50KS5maW5kKFNlbGVjdG9yLkRBVEFfVE9HR0xFKVswXTtcbiAgICAgICAgICAkJCQxKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQkJDEodGhpcykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbXMgPSAkJCQxKHBhcmVudCkuZmluZChTZWxlY3Rvci5WSVNJQkxFX0lURU1TKS5nZXQoKTtcblxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19VUF9LRVlDT0RFICYmIGluZGV4ID4gMCkge1xuICAgICAgICAvLyBVcFxuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgLy8gRG93blxuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgaXRlbXNbaW5kZXhdLmZvY3VzKCk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGU7XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBEcm9wZG93bjtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihFdmVudC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3Rvci5NRU5VLCBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihFdmVudC5DTElDS19EQVRBX0FQSSArIFwiIFwiICsgRXZlbnQuS0VZVVBfREFUQV9BUEksIERyb3Bkb3duLl9jbGVhck1lbnVzKS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMSh0aGlzKSwgJ3RvZ2dsZScpO1xuICB9KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRk9STV9DSElMRCwgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQkJDEuZm5bTkFNRV0gPSBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gRHJvcGRvd247XG5cbiAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIERyb3Bkb3duO1xufSgkLCBQb3BwZXIpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMCk6IG1vZGFsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgTW9kYWwgPSBmdW5jdGlvbiAoJCQkMSkge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIHZhciBOQU1FID0gJ21vZGFsJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMubW9kYWwnO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDA7XG4gIHZhciBCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuICB2YXIgRVNDQVBFX0tFWUNPREUgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuXG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIGZvY3VzOiB0cnVlLFxuICAgIHNob3c6IHRydWVcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlID0ge1xuICAgIGJhY2tkcm9wOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gICAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgICBmb2N1czogJ2Jvb2xlYW4nLFxuICAgIHNob3c6ICdib29sZWFuJ1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgRk9DVVNJTjogXCJmb2N1c2luXCIgKyBFVkVOVF9LRVksXG4gICAgUkVTSVpFOiBcInJlc2l6ZVwiICsgRVZFTlRfS0VZLFxuICAgIENMSUNLX0RJU01JU1M6IFwiY2xpY2suZGlzbWlzc1wiICsgRVZFTlRfS0VZLFxuICAgIEtFWURPV05fRElTTUlTUzogXCJrZXlkb3duLmRpc21pc3NcIiArIEVWRU5UX0tFWSxcbiAgICBNT1VTRVVQX0RJU01JU1M6IFwibW91c2V1cC5kaXNtaXNzXCIgKyBFVkVOVF9LRVksXG4gICAgTU9VU0VET1dOX0RJU01JU1M6IFwibW91c2Vkb3duLmRpc21pc3NcIiArIEVWRU5UX0tFWSxcbiAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgU0NST0xMQkFSX01FQVNVUkVSOiAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnLFxuICAgIEJBQ0tEUk9QOiAnbW9kYWwtYmFja2Ryb3AnLFxuICAgIE9QRU46ICdtb2RhbC1vcGVuJyxcbiAgICBGQURFOiAnZmFkZScsXG4gICAgU0hPVzogJ3Nob3cnXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBESUFMT0c6ICcubW9kYWwtZGlhbG9nJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJyxcbiAgICBEQVRBX0RJU01JU1M6ICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLFxuICAgIEZJWEVEX0NPTlRFTlQ6ICcuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wJyxcbiAgICBTVElDS1lfQ09OVEVOVDogJy5zdGlja3ktdG9wJyxcbiAgICBOQVZCQVJfVE9HR0xFUjogJy5uYXZiYXItdG9nZ2xlcidcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgTW9kYWwgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2RhbChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9kaWFsb2cgPSAkJCQxKGVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuRElBTE9HKVswXTtcbiAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICB0aGlzLl9vcmlnaW5hbEJvZHlQYWRkaW5nID0gMDtcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gMDtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IE1vZGFsLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgdGhpcy5faXNTaG93bikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG93RXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1csIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNTaG93biA9IHRydWU7XG5cbiAgICAgIHRoaXMuX2NoZWNrU2Nyb2xsYmFyKCk7XG5cbiAgICAgIHRoaXMuX3NldFNjcm9sbGJhcigpO1xuXG4gICAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcblxuICAgICAgJCQkMShkb2N1bWVudC5ib2R5KS5hZGRDbGFzcyhDbGFzc05hbWUuT1BFTik7XG5cbiAgICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XG5cbiAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0tfRElTTUlTUywgU2VsZWN0b3IuREFUQV9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhpZGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgICAkJCQxKHRoaXMuX2RpYWxvZykub24oRXZlbnQuTU9VU0VET1dOX0RJU01JU1MsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCQkMShfdGhpcy5fZWxlbWVudCkub25lKEV2ZW50Lk1PVVNFVVBfRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKCQkJDEoZXZlbnQudGFyZ2V0KS5pcyhfdGhpcy5fZWxlbWVudCkpIHtcbiAgICAgICAgICAgIF90aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgIXRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGlkZUV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5ISURFKTtcbiAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICBpZiAoIXRoaXMuX2lzU2hvd24gfHwgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuICAgICAgdmFyIHRyYW5zaXRpb24gPSBVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpO1xuXG4gICAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgICAkJCQxKGRvY3VtZW50KS5vZmYoRXZlbnQuRk9DVVNJTik7XG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcbiAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50LkNMSUNLX0RJU01JU1MpO1xuICAgICAgJCQkMSh0aGlzLl9kaWFsb2cpLm9mZihFdmVudC5NT1VTRURPV05fRElTTUlTUyk7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuX2hpZGVNb2RhbChldmVudCk7XG4gICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faGlkZU1vZGFsKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICAkJCQxKHdpbmRvdywgZG9jdW1lbnQsIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2JhY2tkcm9wKS5vZmYoRVZFTlRfS0VZKTtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2RpYWxvZyA9IG51bGw7XG4gICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1Nob3duID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gbnVsbDtcbiAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSBudWxsO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaGFuZGxlVXBkYXRlID0gZnVuY3Rpb24gaGFuZGxlVXBkYXRlKCkge1xuICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfZXh0ZW5kcyh7fSwgRGVmYXVsdCwgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zaG93RWxlbWVudCA9IGZ1bmN0aW9uIF9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHRyYW5zaXRpb24gPSBVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuXG4gICAgICBpZiAoIXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSB8fCB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIC8vIERvbid0IG1vdmUgbW9kYWwncyBET00gcG9zaXRpb25cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wID0gMDtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgICQkJDEodGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgIHRoaXMuX2VuZm9yY2VGb2N1cygpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvd25FdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0hPV04sIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG5cbiAgICAgIHZhciB0cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiB0cmFuc2l0aW9uQ29tcGxldGUoKSB7XG4gICAgICAgIGlmIChfdGhpczMuX2NvbmZpZy5mb2N1cykge1xuICAgICAgICAgIF90aGlzMy5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgICAgJCQkMShfdGhpczMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd25FdmVudCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAkJCQxKHRoaXMuX2RpYWxvZykub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIHRyYW5zaXRpb25Db21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2l0aW9uQ29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9lbmZvcmNlRm9jdXMgPSBmdW5jdGlvbiBfZW5mb3JjZUZvY3VzKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICQkJDEoZG9jdW1lbnQpLm9mZihFdmVudC5GT0NVU0lOKSAvLyBHdWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICAgIC5vbihFdmVudC5GT0NVU0lOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50ICE9PSBldmVudC50YXJnZXQgJiYgX3RoaXM0Ll9lbGVtZW50ICE9PSBldmVudC50YXJnZXQgJiYgJCQkMShfdGhpczQuX2VsZW1lbnQpLmhhcyhldmVudC50YXJnZXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIF90aGlzNC5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRFc2NhcGVFdmVudCA9IGZ1bmN0aW9uIF9zZXRFc2NhcGVFdmVudCgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5LRVlET1dOX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIF90aGlzNS5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQuS0VZRE9XTl9ESVNNSVNTKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRSZXNpemVFdmVudCA9IGZ1bmN0aW9uIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgICAkJCQxKHdpbmRvdykub24oRXZlbnQuUkVTSVpFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM2LmhhbmRsZVVwZGF0ZShldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCQkMSh3aW5kb3cpLm9mZihFdmVudC5SRVNJWkUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2hpZGVNb2RhbCA9IGZ1bmN0aW9uIF9oaWRlTW9kYWwoKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLk9QRU4pO1xuXG4gICAgICAgIF90aGlzNy5fcmVzZXRBZGp1c3RtZW50cygpO1xuXG4gICAgICAgIF90aGlzNy5fcmVzZXRTY3JvbGxiYXIoKTtcblxuICAgICAgICAkJCQxKF90aGlzNy5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5ISURERU4pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fcmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiBfcmVtb3ZlQmFja2Ryb3AoKSB7XG4gICAgICBpZiAodGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zaG93QmFja2Ryb3AgPSBmdW5jdGlvbiBfc2hvd0JhY2tkcm9wKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgdmFyIGFuaW1hdGUgPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSA/IENsYXNzTmFtZS5GQURFIDogJyc7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duICYmIHRoaXMuX2NvbmZpZy5iYWNrZHJvcCkge1xuICAgICAgICB2YXIgZG9BbmltYXRlID0gVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiBhbmltYXRlO1xuICAgICAgICB0aGlzLl9iYWNrZHJvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc05hbWUgPSBDbGFzc05hbWUuQkFDS0RST1A7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAkJCQxKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhhbmltYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQkJDEodGhpcy5fYmFja2Ryb3ApLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpO1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChfdGhpczguX2lnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgICAgIF90aGlzOC5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX3RoaXM4Ll9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgICBfdGhpczguX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXM4LmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChkb0FuaW1hdGUpIHtcbiAgICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9iYWNrZHJvcCk7XG4gICAgICAgIH1cblxuICAgICAgICAkJCQxKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZG9BbmltYXRlKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkJCQxKHRoaXMuX2JhY2tkcm9wKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2spLmVtdWxhdGVUcmFuc2l0aW9uRW5kKEJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93biAmJiB0aGlzLl9iYWNrZHJvcCkge1xuICAgICAgICAkJCQxKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gY2FsbGJhY2tSZW1vdmUoKSB7XG4gICAgICAgICAgX3RoaXM4Ll9yZW1vdmVCYWNrZHJvcCgpO1xuXG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAgICQkJDEodGhpcy5fYmFja2Ryb3ApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjYWxsYmFja1JlbW92ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2tSZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyB0aGUgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuICAgIC8vIHRvZG8gKGZhdCk6IHRoZXNlIHNob3VsZCBwcm9iYWJseSBiZSByZWZhY3RvcmVkIG91dCBvZiBtb2RhbC5qc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG4gICAgX3Byb3RvLl9hZGp1c3REaWFsb2cgPSBmdW5jdGlvbiBfYWRqdXN0RGlhbG9nKCkge1xuICAgICAgdmFyIGlzTW9kYWxPdmVyZmxvd2luZyA9IHRoaXMuX2VsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcblxuICAgICAgaWYgKCF0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiBpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IHRoaXMuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHRoaXMuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3Jlc2V0QWRqdXN0bWVudHMgPSBmdW5jdGlvbiBfcmVzZXRBZGp1c3RtZW50cygpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSAnJztcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJyc7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiBfY2hlY2tTY3JvbGxiYXIoKSB7XG4gICAgICB2YXIgcmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IHJlY3QubGVmdCArIHJlY3QucmlnaHQgPCB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gdGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiBfc2V0U2Nyb2xsYmFyKCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZykge1xuICAgICAgICAvLyBOb3RlOiBET01Ob2RlLnN0eWxlLnBhZGRpbmdSaWdodCByZXR1cm5zIHRoZSBhY3R1YWwgdmFsdWUgb3IgJycgaWYgbm90IHNldFxuICAgICAgICAvLyAgIHdoaWxlICQoRE9NTm9kZSkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgcmV0dXJucyB0aGUgY2FsY3VsYXRlZCB2YWx1ZSBvciAwIGlmIG5vdCBzZXRcbiAgICAgICAgLy8gQWRqdXN0IGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgICAgICAkJCQxKFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGFjdHVhbFBhZGRpbmcgPSAkJCQxKGVsZW1lbnQpWzBdLnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkJCQxKGVsZW1lbnQpLmNzcygncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAgICQkJDEoZWxlbWVudCkuZGF0YSgncGFkZGluZy1yaWdodCcsIGFjdHVhbFBhZGRpbmcpLmNzcygncGFkZGluZy1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZFBhZGRpbmcpICsgX3RoaXM5Ll9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgIH0pOyAvLyBBZGp1c3Qgc3RpY2t5IGNvbnRlbnQgbWFyZ2luXG5cbiAgICAgICAgJCQkMShTZWxlY3Rvci5TVElDS1lfQ09OVEVOVCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgYWN0dWFsTWFyZ2luID0gJCQkMShlbGVtZW50KVswXS5zdHlsZS5tYXJnaW5SaWdodDtcbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZE1hcmdpbiA9ICQkJDEoZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgICAkJCQxKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcsIGFjdHVhbE1hcmdpbikuY3NzKCdtYXJnaW4tcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRNYXJnaW4pIC0gX3RoaXM5Ll9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgIH0pOyAvLyBBZGp1c3QgbmF2YmFyLXRvZ2dsZXIgbWFyZ2luXG5cbiAgICAgICAgJCQkMShTZWxlY3Rvci5OQVZCQVJfVE9HR0xFUikuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgYWN0dWFsTWFyZ2luID0gJCQkMShlbGVtZW50KVswXS5zdHlsZS5tYXJnaW5SaWdodDtcbiAgICAgICAgICB2YXIgY2FsY3VsYXRlZE1hcmdpbiA9ICQkJDEoZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgICAkJCQxKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcsIGFjdHVhbE1hcmdpbikuY3NzKCdtYXJnaW4tcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRNYXJnaW4pICsgX3RoaXM5Ll9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgIH0pOyAvLyBBZGp1c3QgYm9keSBwYWRkaW5nXG5cbiAgICAgICAgdmFyIGFjdHVhbFBhZGRpbmcgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJCQkMSgnYm9keScpLmNzcygncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAkJCQxKCdib2R5JykuZGF0YSgncGFkZGluZy1yaWdodCcsIGFjdHVhbFBhZGRpbmcpLmNzcygncGFkZGluZy1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZFBhZGRpbmcpICsgdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCIpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3Jlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3Jlc2V0U2Nyb2xsYmFyKCkge1xuICAgICAgLy8gUmVzdG9yZSBmaXhlZCBjb250ZW50IHBhZGRpbmdcbiAgICAgICQkJDEoU2VsZWN0b3IuRklYRURfQ09OVEVOVCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHBhZGRpbmcgPSAkJCQxKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTtcblxuICAgICAgICBpZiAodHlwZW9mIHBhZGRpbmcgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgJCQkMShlbGVtZW50KS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYWRkaW5nKS5yZW1vdmVEYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBSZXN0b3JlIHN0aWNreSBjb250ZW50IGFuZCBuYXZiYXItdG9nZ2xlciBtYXJnaW5cblxuICAgICAgJCQkMShTZWxlY3Rvci5TVElDS1lfQ09OVEVOVCArIFwiLCBcIiArIFNlbGVjdG9yLk5BVkJBUl9UT0dHTEVSKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICB2YXIgbWFyZ2luID0gJCQkMShlbGVtZW50KS5kYXRhKCdtYXJnaW4tcmlnaHQnKTtcblxuICAgICAgICBpZiAodHlwZW9mIG1hcmdpbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAkJCQxKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0JywgbWFyZ2luKS5yZW1vdmVEYXRhKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIFJlc3RvcmUgYm9keSBwYWRkaW5nXG5cbiAgICAgIHZhciBwYWRkaW5nID0gJCQkMSgnYm9keScpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTtcblxuICAgICAgaWYgKHR5cGVvZiBwYWRkaW5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAkJCQxKCdib2R5JykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFkZGluZykucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFNjcm9sbGJhcldpZHRoID0gZnVuY3Rpb24gX2dldFNjcm9sbGJhcldpZHRoKCkge1xuICAgICAgLy8gdGh4IGQud2Fsc2hcbiAgICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSBDbGFzc05hbWUuU0NST0xMQkFSX01FQVNVUkVSO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoO1xuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSBfZXh0ZW5kcyh7fSwgTW9kYWwuRGVmYXVsdCwgJCQkMSh0aGlzKS5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10ocmVsYXRlZFRhcmdldCk7XG4gICAgICAgIH0gZWxzZSBpZiAoX2NvbmZpZy5zaG93KSB7XG4gICAgICAgICAgZGF0YS5zaG93KHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKE1vZGFsLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gTW9kYWw7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgIHZhciB0YXJnZXQ7XG4gICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICB0YXJnZXQgPSAkJCQxKHNlbGVjdG9yKVswXTtcbiAgICB9XG5cbiAgICB2YXIgY29uZmlnID0gJCQkMSh0YXJnZXQpLmRhdGEoREFUQV9LRVkpID8gJ3RvZ2dsZScgOiBfZXh0ZW5kcyh7fSwgJCQkMSh0YXJnZXQpLmRhdGEoKSwgJCQkMSh0aGlzKS5kYXRhKCkpO1xuXG4gICAgaWYgKHRoaXMudGFnTmFtZSA9PT0gJ0EnIHx8IHRoaXMudGFnTmFtZSA9PT0gJ0FSRUEnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciAkdGFyZ2V0ID0gJCQkMSh0YXJnZXQpLm9uZShFdmVudC5TSE9XLCBmdW5jdGlvbiAoc2hvd0V2ZW50KSB7XG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIC8vIE9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkdGFyZ2V0Lm9uZShFdmVudC5ISURERU4sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCQkJDEoX3RoaXMxMCkuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICBfdGhpczEwLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTW9kYWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQkJDEodGFyZ2V0KSwgY29uZmlnLCB0aGlzKTtcbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkJCQxLmZuW05BTUVdID0gTW9kYWwuX2pRdWVyeUludGVyZmFjZTtcbiAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IE1vZGFsO1xuXG4gICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBNb2RhbDtcbn0oJCk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wKTogdG9vbHRpcC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIFRvb2x0aXAgPSBmdW5jdGlvbiAoJCQkMSkge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIHZhciBOQU1FID0gJ3Rvb2x0aXAnO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMCc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy50b29sdGlwJztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICB2YXIgVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MDtcbiAgdmFyIENMQVNTX1BSRUZJWCA9ICdicy10b29sdGlwJztcbiAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIiArIENMQVNTX1BSRUZJWCArIFwiXFxcXFMrXCIsICdnJyk7XG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgICB0ZW1wbGF0ZTogJ3N0cmluZycsXG4gICAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgICB0cmlnZ2VyOiAnc3RyaW5nJyxcbiAgICBkZWxheTogJyhudW1iZXJ8b2JqZWN0KScsXG4gICAgaHRtbDogJ2Jvb2xlYW4nLFxuICAgIHNlbGVjdG9yOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgcGxhY2VtZW50OiAnKHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nKScsXG4gICAgY29udGFpbmVyOiAnKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pJyxcbiAgICBmYWxsYmFja1BsYWNlbWVudDogJyhzdHJpbmd8YXJyYXkpJyxcbiAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknXG4gIH07XG4gIHZhciBBdHRhY2htZW50TWFwID0ge1xuICAgIEFVVE86ICdhdXRvJyxcbiAgICBUT1A6ICd0b3AnLFxuICAgIFJJR0hUOiAncmlnaHQnLFxuICAgIEJPVFRPTTogJ2JvdHRvbScsXG4gICAgTEVGVDogJ2xlZnQnXG4gIH07XG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgKyAnPGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj48L2Rpdj4nLFxuICAgIHRyaWdnZXI6ICdob3ZlciBmb2N1cycsXG4gICAgdGl0bGU6ICcnLFxuICAgIGRlbGF5OiAwLFxuICAgIGh0bWw6IGZhbHNlLFxuICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIG9mZnNldDogMCxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIGZhbGxiYWNrUGxhY2VtZW50OiAnZmxpcCcsXG4gICAgYm91bmRhcnk6ICdzY3JvbGxQYXJlbnQnXG4gIH07XG4gIHZhciBIb3ZlclN0YXRlID0ge1xuICAgIFNIT1c6ICdzaG93JyxcbiAgICBPVVQ6ICdvdXQnXG4gIH07XG4gIHZhciBFdmVudCA9IHtcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVksXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSxcbiAgICBJTlNFUlRFRDogXCJpbnNlcnRlZFwiICsgRVZFTlRfS0VZLFxuICAgIENMSUNLOiBcImNsaWNrXCIgKyBFVkVOVF9LRVksXG4gICAgRk9DVVNJTjogXCJmb2N1c2luXCIgKyBFVkVOVF9LRVksXG4gICAgRk9DVVNPVVQ6IFwiZm9jdXNvdXRcIiArIEVWRU5UX0tFWSxcbiAgICBNT1VTRUVOVEVSOiBcIm1vdXNlZW50ZXJcIiArIEVWRU5UX0tFWSxcbiAgICBNT1VTRUxFQVZFOiBcIm1vdXNlbGVhdmVcIiArIEVWRU5UX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIFRPT0xUSVA6ICcudG9vbHRpcCcsXG4gICAgVE9PTFRJUF9JTk5FUjogJy50b29sdGlwLWlubmVyJyxcbiAgICBBUlJPVzogJy5hcnJvdydcbiAgfTtcbiAgdmFyIFRyaWdnZXIgPSB7XG4gICAgSE9WRVI6ICdob3ZlcicsXG4gICAgRk9DVVM6ICdmb2N1cycsXG4gICAgQ0xJQ0s6ICdjbGljaycsXG4gICAgTUFOVUFMOiAnbWFudWFsJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBUb29sdGlwID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVG9vbHRpcChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XG4gICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICAgICAqL1xuICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcCB0b29sdGlwcyByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpO1xuICAgICAgfSAvLyBwcml2YXRlXG5cblxuICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSAwO1xuICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnO1xuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IHt9O1xuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDsgLy8gUHJvdGVjdGVkXG5cbiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLmNvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy50aXAgPSBudWxsO1xuXG4gICAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IFRvb2x0aXAucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBfcHJvdG8udG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uIHRvZ2dsZUVuYWJsZWQoKSB7XG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSAhdGhpcy5faXNFbmFibGVkO1xuICAgIH07XG5cbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKGV2ZW50KSB7XG4gICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XG4gICAgICAgIHZhciBjb250ZXh0ID0gJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgICAkJCQxKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gIWNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2s7XG5cbiAgICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICAgIGNvbnRleHQuX2VudGVyKG51bGwsIGNvbnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuX2xlYXZlKG51bGwsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgdGhpcy5fbGVhdmUobnVsbCwgdGhpcyk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lbnRlcihudWxsLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSk7XG4gICAgICAkJCQxKHRoaXMuZWxlbWVudCkub2ZmKHRoaXMuY29uc3RydWN0b3IuRVZFTlRfS0VZKTtcbiAgICAgICQkJDEodGhpcy5lbGVtZW50KS5jbG9zZXN0KCcubW9kYWwnKS5vZmYoJ2hpZGUuYnMubW9kYWwnKTtcblxuICAgICAgaWYgKHRoaXMudGlwKSB7XG4gICAgICAgICQkJDEodGhpcy50aXApLnJlbW92ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSBudWxsO1xuXG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy50aXAgPSBudWxsO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoJCQkMSh0aGlzLmVsZW1lbnQpLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50cycpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJCQkMS5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1cpO1xuXG4gICAgICBpZiAodGhpcy5pc1dpdGhDb250ZW50KCkgJiYgdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICAgICQkJDEodGhpcy5lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG4gICAgICAgIHZhciBpc0luVGhlRG9tID0gJCQkMS5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhaXNJblRoZURvbSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICAgICAgdmFyIHRpcElkID0gVXRpbC5nZXRVSUQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKTtcbiAgICAgICAgdGlwLnNldEF0dHJpYnV0ZSgnaWQnLCB0aXBJZCk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCB0aXBJZCk7XG4gICAgICAgIHRoaXMuc2V0Q29udGVudCgpO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgICAkJCQxKHRpcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy5wbGFjZW1lbnQuY2FsbCh0aGlzLCB0aXAsIHRoaXMuZWxlbWVudCkgOiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQ7XG5cbiAgICAgICAgdmFyIGF0dGFjaG1lbnQgPSB0aGlzLl9nZXRBdHRhY2htZW50KHBsYWNlbWVudCk7XG5cbiAgICAgICAgdGhpcy5hZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCk7XG4gICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmNvbmZpZy5jb250YWluZXIgPT09IGZhbHNlID8gZG9jdW1lbnQuYm9keSA6ICQkJDEodGhpcy5jb25maWcuY29udGFpbmVyKTtcbiAgICAgICAgJCQkMSh0aXApLmRhdGEodGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSwgdGhpcyk7XG5cbiAgICAgICAgaWYgKCEkJCQxLmNvbnRhaW5zKHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgdGhpcy50aXApKSB7XG4gICAgICAgICAgJCQkMSh0aXApLmFwcGVuZFRvKGNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICAkJCQxKHRoaXMuZWxlbWVudCkudHJpZ2dlcih0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LklOU0VSVEVEKTtcbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcih0aGlzLmVsZW1lbnQsIHRpcCwge1xuICAgICAgICAgIHBsYWNlbWVudDogYXR0YWNobWVudCxcbiAgICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICAgIG9mZnNldDoge1xuICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMuY29uZmlnLm9mZnNldFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZsaXA6IHtcbiAgICAgICAgICAgICAgYmVoYXZpb3I6IHRoaXMuY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJyb3c6IHtcbiAgICAgICAgICAgICAgZWxlbWVudDogU2VsZWN0b3IuQVJST1dcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6IHRoaXMuY29uZmlnLmJvdW5kYXJ5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgIT09IGRhdGEucGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSkge1xuICAgICAgICAgICAgX3RoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAkJCQxKHRpcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpOyAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuXG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAkJCQxKCdib2R5JykuY2hpbGRyZW4oKS5vbignbW91c2VvdmVyJywgbnVsbCwgJCQkMS5ub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgIGlmIChfdGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5fZml4VHJhbnNpdGlvbigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBwcmV2SG92ZXJTdGF0ZSA9IF90aGlzLl9ob3ZlclN0YXRlO1xuICAgICAgICAgIF90aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcbiAgICAgICAgICAkJCQxKF90aGlzLmVsZW1lbnQpLnRyaWdnZXIoX3RoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pO1xuXG4gICAgICAgICAgaWYgKHByZXZIb3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLk9VVCkge1xuICAgICAgICAgICAgX3RoaXMuX2xlYXZlKG51bGwsIF90aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCQkMSh0aGlzLnRpcCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgICAgJCQkMSh0aGlzLnRpcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUb29sdGlwLl9UUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZShjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkJCQxLkV2ZW50KHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSElERSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBpZiAoX3RoaXMyLl9ob3ZlclN0YXRlICE9PSBIb3ZlclN0YXRlLlNIT1cgJiYgdGlwLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICB0aXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aXApO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLl9jbGVhblRpcENsYXNzKCk7XG5cbiAgICAgICAgX3RoaXMyLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7XG5cbiAgICAgICAgJCQkMShfdGhpczIuZWxlbWVudCkudHJpZ2dlcihfdGhpczIuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKTtcblxuICAgICAgICBpZiAoX3RoaXMyLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgICBfdGhpczIuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkJCQxKHRoaXMuZWxlbWVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICBpZiAoaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCQkMSh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTsgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgJCQkMSgnYm9keScpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkJCQxLm5vb3ApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuQ0xJQ0tdID0gZmFsc2U7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuRk9DVVNdID0gZmFsc2U7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuSE9WRVJdID0gZmFsc2U7XG5cbiAgICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQkJDEodGhpcy50aXApLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAkJCQxKHRpcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSAnJztcbiAgICB9O1xuXG4gICAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfTsgLy8gUHJvdGVjdGVkXG5cblxuICAgIF9wcm90by5pc1dpdGhDb250ZW50ID0gZnVuY3Rpb24gaXNXaXRoQ29udGVudCgpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgfTtcblxuICAgIF9wcm90by5hZGRBdHRhY2htZW50Q2xhc3MgPSBmdW5jdGlvbiBhZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgICAgJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYICsgXCItXCIgKyBhdHRhY2htZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldFRpcEVsZW1lbnQgPSBmdW5jdGlvbiBnZXRUaXBFbGVtZW50KCkge1xuICAgICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkJCQxKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXTtcbiAgICAgIHJldHVybiB0aGlzLnRpcDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNldENvbnRlbnQgPSBmdW5jdGlvbiBzZXRDb250ZW50KCkge1xuICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLlRPT0xUSVBfSU5ORVIpLCB0aGlzLmdldFRpdGxlKCkpO1xuICAgICAgJHRpcC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuRkFERSArIFwiIFwiICsgQ2xhc3NOYW1lLlNIT1cpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0RWxlbWVudENvbnRlbnQgPSBmdW5jdGlvbiBzZXRFbGVtZW50Q29udGVudCgkZWxlbWVudCwgY29udGVudCkge1xuICAgICAgdmFyIGh0bWwgPSB0aGlzLmNvbmZpZy5odG1sO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnICYmIChjb250ZW50Lm5vZGVUeXBlIHx8IGNvbnRlbnQuanF1ZXJ5KSkge1xuICAgICAgICAvLyBDb250ZW50IGlzIGEgRE9NIG5vZGUgb3IgYSBqUXVlcnlcbiAgICAgICAgaWYgKGh0bWwpIHtcbiAgICAgICAgICBpZiAoISQkJDEoY29udGVudCkucGFyZW50KCkuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5lbXB0eSgpLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQudGV4dCgkJCQxKGNvbnRlbnQpLnRleHQoKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRlbGVtZW50W2h0bWwgPyAnaHRtbCcgOiAndGV4dCddKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZ2V0VGl0bGUgPSBmdW5jdGlvbiBnZXRUaXRsZSgpIHtcbiAgICAgIHZhciB0aXRsZSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKTtcblxuICAgICAgaWYgKCF0aXRsZSkge1xuICAgICAgICB0aXRsZSA9IHR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZSA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLnRpdGxlLmNhbGwodGhpcy5lbGVtZW50KSA6IHRoaXMuY29uZmlnLnRpdGxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGl0bGU7XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2dldEF0dGFjaG1lbnQgPSBmdW5jdGlvbiBfZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpIHtcbiAgICAgIHJldHVybiBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfc2V0TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciB0cmlnZ2VycyA9IHRoaXMuY29uZmlnLnRyaWdnZXIuc3BsaXQoJyAnKTtcbiAgICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgICAkJCQxKF90aGlzMy5lbGVtZW50KS5vbihfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuQ0xJQ0ssIF90aGlzMy5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy50b2dnbGUoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT09IFRyaWdnZXIuTUFOVUFMKSB7XG4gICAgICAgICAgdmFyIGV2ZW50SW4gPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSID8gX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFRU5URVIgOiBfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNJTjtcbiAgICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSID8gX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkUgOiBfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7XG4gICAgICAgICAgJCQkMShfdGhpczMuZWxlbWVudCkub24oZXZlbnRJbiwgX3RoaXMzLmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLl9lbnRlcihldmVudCk7XG4gICAgICAgICAgfSkub24oZXZlbnRPdXQsIF90aGlzMy5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5fbGVhdmUoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgJCQkMShfdGhpczMuZWxlbWVudCkuY2xvc2VzdCgnLm1vZGFsJykub24oJ2hpZGUuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5zZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IF9leHRlbmRzKHt9LCB0aGlzLmNvbmZpZywge1xuICAgICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuICAgICAgICAgIHNlbGVjdG9yOiAnJ1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2ZpeFRpdGxlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZml4VGl0bGUgPSBmdW5jdGlvbiBfZml4VGl0bGUoKSB7XG4gICAgICB2YXIgdGl0bGVUeXBlID0gdHlwZW9mIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKTtcblxuICAgICAgaWYgKHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgdGl0bGVUeXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCAnJyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgJycpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2VudGVyID0gZnVuY3Rpb24gX2VudGVyKGV2ZW50LCBjb250ZXh0KSB7XG4gICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XG4gICAgICBjb250ZXh0ID0gY29udGV4dCB8fCAkJCQxKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSk7XG5cbiAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZXZlbnQuY3VycmVudFRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7XG4gICAgICAgICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbZXZlbnQudHlwZSA9PT0gJ2ZvY3VzaW4nID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJdID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCQkJDEoY29udGV4dC5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSB8fCBjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcbiAgICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPVztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XG4gICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5TSE9XO1xuXG4gICAgICBpZiAoIWNvbnRleHQuY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0LmNvbmZpZy5kZWxheS5zaG93KSB7XG4gICAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhvdmVyU3RhdGUuU0hPVykge1xuICAgICAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9LCBjb250ZXh0LmNvbmZpZy5kZWxheS5zaG93KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9sZWF2ZSA9IGZ1bmN0aW9uIF9sZWF2ZShldmVudCwgY29udGV4dCkge1xuICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO1xuICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICAkJCQxKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c291dCcgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUl0gPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KTtcbiAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLk9VVDtcblxuICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSkge1xuICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLk9VVCkge1xuICAgICAgICAgIGNvbnRleHQuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBjb250ZXh0LmNvbmZpZy5kZWxheS5oaWRlKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9pc1dpdGhBY3RpdmVUcmlnZ2VyID0gZnVuY3Rpb24gX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XG4gICAgICBmb3IgKHZhciB0cmlnZ2VyIGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRyaWdnZXJbdHJpZ2dlcl0pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9leHRlbmRzKHt9LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsICQkJDEodGhpcy5lbGVtZW50KS5kYXRhKCksIGNvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLmRlbGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25maWcuZGVsYXkgPSB7XG4gICAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LFxuICAgICAgICAgIGhpZGU6IGNvbmZpZy5kZWxheVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy50aXRsZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uZmlnLnRpdGxlID0gY29uZmlnLnRpdGxlLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy5jb250ZW50ID0gY29uZmlnLmNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0RGVsZWdhdGVDb25maWcgPSBmdW5jdGlvbiBfZ2V0RGVsZWdhdGVDb25maWcoKSB7XG4gICAgICB2YXIgY29uZmlnID0ge307XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jb25maWcpIHtcbiAgICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2tleV0gIT09IHRoaXMuY29uZmlnW2tleV0pIHtcbiAgICAgICAgICAgIGNvbmZpZ1trZXldID0gdGhpcy5jb25maWdba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbGVhblRpcENsYXNzID0gZnVuY3Rpb24gX2NsZWFuVGlwQ2xhc3MoKSB7XG4gICAgICB2YXIgJHRpcCA9ICQkJDEodGhpcy5nZXRUaXBFbGVtZW50KCkpO1xuICAgICAgdmFyIHRhYkNsYXNzID0gJHRpcC5hdHRyKCdjbGFzcycpLm1hdGNoKEJTQ0xTX1BSRUZJWF9SRUdFWCk7XG5cbiAgICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSA9IGZ1bmN0aW9uIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSkge1xuICAgICAgdGhpcy5fY2xlYW5UaXBDbGFzcygpO1xuXG4gICAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KGRhdGEucGxhY2VtZW50KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fZml4VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIF9maXhUcmFuc2l0aW9uKCkge1xuICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgdmFyIGluaXRDb25maWdBbmltYXRpb24gPSB0aGlzLmNvbmZpZy5hbmltYXRpb247XG5cbiAgICAgIGlmICh0aXAuZ2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcpICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCQkMSh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5GQURFKTtcbiAgICAgIHRoaXMuY29uZmlnLmFuaW1hdGlvbiA9IGZhbHNlO1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICAgIHRoaXMuY29uZmlnLmFuaW1hdGlvbiA9IGluaXRDb25maWdBbmltYXRpb247XG4gICAgfTsgLy8gU3RhdGljXG5cblxuICAgIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnO1xuXG4gICAgICAgIGlmICghZGF0YSAmJiAvZGlzcG9zZXxoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFRvb2x0aXAodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoVG9vbHRpcCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiTkFNRVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBOQU1FO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEQVRBX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEQVRBX0tFWTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRXZlbnRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRXZlbnQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkVWRU5UX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFVkVOVF9LRVk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gVG9vbHRpcDtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkJCQxLmZuW05BTUVdID0gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gVG9vbHRpcDtcblxuICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBUb29sdGlwO1xufSgkLCBQb3BwZXIpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMCk6IHBvcG92ZXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBQb3BvdmVyID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgTkFNRSA9ICdwb3BvdmVyJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMucG9wb3Zlcic7XG4gIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgdmFyIENMQVNTX1BSRUZJWCA9ICdicy1wb3BvdmVyJztcbiAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIiArIENMQVNTX1BSRUZJWCArIFwiXFxcXFMrXCIsICdnJyk7XG4gIHZhciBEZWZhdWx0ID0gX2V4dGVuZHMoe30sIFRvb2x0aXAuRGVmYXVsdCwge1xuICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgICB0cmlnZ2VyOiAnY2xpY2snLFxuICAgIGNvbnRlbnQ6ICcnLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPicgKyAnPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+JyArICc8aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+JyArICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+PC9kaXY+J1xuICB9KTtcbiAgdmFyIERlZmF1bHRUeXBlID0gX2V4dGVuZHMoe30sIFRvb2x0aXAuRGVmYXVsdFR5cGUsIHtcbiAgICBjb250ZW50OiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKSdcbiAgfSk7XG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93J1xuICB9O1xuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgVElUTEU6ICcucG9wb3Zlci1oZWFkZXInLFxuICAgIENPTlRFTlQ6ICcucG9wb3Zlci1ib2R5J1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgSU5TRVJURUQ6IFwiaW5zZXJ0ZWRcIiArIEVWRU5UX0tFWSxcbiAgICBDTElDSzogXCJjbGlja1wiICsgRVZFTlRfS0VZLFxuICAgIEZPQ1VTSU46IFwiZm9jdXNpblwiICsgRVZFTlRfS0VZLFxuICAgIEZPQ1VTT1VUOiBcImZvY3Vzb3V0XCIgKyBFVkVOVF9LRVksXG4gICAgTU9VU0VFTlRFUjogXCJtb3VzZWVudGVyXCIgKyBFVkVOVF9LRVksXG4gICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVlcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgUG9wb3ZlciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Ub29sdGlwKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUG9wb3ZlciwgX1Rvb2x0aXApO1xuXG4gICAgZnVuY3Rpb24gUG9wb3ZlcigpIHtcbiAgICAgIHJldHVybiBfVG9vbHRpcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFBvcG92ZXIucHJvdG90eXBlO1xuXG4gICAgLy8gT3ZlcnJpZGVzXG4gICAgX3Byb3RvLmlzV2l0aENvbnRlbnQgPSBmdW5jdGlvbiBpc1dpdGhDb250ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLl9nZXRDb250ZW50KCk7XG4gICAgfTtcblxuICAgIF9wcm90by5hZGRBdHRhY2htZW50Q2xhc3MgPSBmdW5jdGlvbiBhZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgICAgJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYICsgXCItXCIgKyBhdHRhY2htZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldFRpcEVsZW1lbnQgPSBmdW5jdGlvbiBnZXRUaXBFbGVtZW50KCkge1xuICAgICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkJCQxKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXTtcbiAgICAgIHJldHVybiB0aGlzLnRpcDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNldENvbnRlbnQgPSBmdW5jdGlvbiBzZXRDb250ZW50KCkge1xuICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTsgLy8gV2UgdXNlIGFwcGVuZCBmb3IgaHRtbCBvYmplY3RzIHRvIG1haW50YWluIGpzIGV2ZW50c1xuXG4gICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5USVRMRSksIHRoaXMuZ2V0VGl0bGUoKSk7XG5cbiAgICAgIHZhciBjb250ZW50ID0gdGhpcy5fZ2V0Q29udGVudCgpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQuY2FsbCh0aGlzLmVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5DT05URU5UKSwgY29udGVudCk7XG4gICAgICAkdGlwLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5GQURFICsgXCIgXCIgKyBDbGFzc05hbWUuU0hPVyk7XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2dldENvbnRlbnQgPSBmdW5jdGlvbiBfZ2V0Q29udGVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbnRlbnQnKSB8fCB0aGlzLmNvbmZpZy5jb250ZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NsZWFuVGlwQ2xhc3MgPSBmdW5jdGlvbiBfY2xlYW5UaXBDbGFzcygpIHtcbiAgICAgIHZhciAkdGlwID0gJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSk7XG4gICAgICB2YXIgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKTtcblxuICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyh0YWJDbGFzcy5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfTsgLy8gU3RhdGljXG5cblxuICAgIFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsO1xuXG4gICAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoUG9wb3ZlciwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICAvLyBHZXR0ZXJzXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiTkFNRVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBOQU1FO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEQVRBX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEQVRBX0tFWTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRXZlbnRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRXZlbnQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkVWRU5UX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFVkVOVF9LRVk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gUG9wb3ZlcjtcbiAgfShUb29sdGlwKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJCQkMS5mbltOQU1FXSA9IFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZTtcbiAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFBvcG92ZXI7XG5cbiAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gUG9wb3Zlcjtcbn0oJCk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wKTogc2Nyb2xsc3B5LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgU2Nyb2xsU3B5ID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgTkFNRSA9ICdzY3JvbGxzcHknO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMCc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5zY3JvbGxzcHknO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgdmFyIERlZmF1bHQgPSB7XG4gICAgb2Zmc2V0OiAxMCxcbiAgICBtZXRob2Q6ICdhdXRvJyxcbiAgICB0YXJnZXQ6ICcnXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBvZmZzZXQ6ICdudW1iZXInLFxuICAgIG1ldGhvZDogJ3N0cmluZycsXG4gICAgdGFyZ2V0OiAnKHN0cmluZ3xlbGVtZW50KSdcbiAgfTtcbiAgdmFyIEV2ZW50ID0ge1xuICAgIEFDVElWQVRFOiBcImFjdGl2YXRlXCIgKyBFVkVOVF9LRVksXG4gICAgU0NST0xMOiBcInNjcm9sbFwiICsgRVZFTlRfS0VZLFxuICAgIExPQURfREFUQV9BUEk6IFwibG9hZFwiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgRFJPUERPV05fSVRFTTogJ2Ryb3Bkb3duLWl0ZW0nLFxuICAgIERST1BET1dOX01FTlU6ICdkcm9wZG93bi1tZW51JyxcbiAgICBBQ1RJVkU6ICdhY3RpdmUnXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBEQVRBX1NQWTogJ1tkYXRhLXNweT1cInNjcm9sbFwiXScsXG4gICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgTkFWX0xJU1RfR1JPVVA6ICcubmF2LCAubGlzdC1ncm91cCcsXG4gICAgTkFWX0xJTktTOiAnLm5hdi1saW5rJyxcbiAgICBOQVZfSVRFTVM6ICcubmF2LWl0ZW0nLFxuICAgIExJU1RfSVRFTVM6ICcubGlzdC1ncm91cC1pdGVtJyxcbiAgICBEUk9QRE9XTjogJy5kcm9wZG93bicsXG4gICAgRFJPUERPV05fSVRFTVM6ICcuZHJvcGRvd24taXRlbScsXG4gICAgRFJPUERPV05fVE9HR0xFOiAnLmRyb3Bkb3duLXRvZ2dsZSdcbiAgfTtcbiAgdmFyIE9mZnNldE1ldGhvZCA9IHtcbiAgICBPRkZTRVQ6ICdvZmZzZXQnLFxuICAgIFBPU0lUSU9OOiAncG9zaXRpb24nXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIFNjcm9sbFNweSA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknID8gd2luZG93IDogZWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fc2VsZWN0b3IgPSB0aGlzLl9jb25maWcudGFyZ2V0ICsgXCIgXCIgKyBTZWxlY3Rvci5OQVZfTElOS1MgKyBcIixcIiArICh0aGlzLl9jb25maWcudGFyZ2V0ICsgXCIgXCIgKyBTZWxlY3Rvci5MSVNUX0lURU1TICsgXCIsXCIpICsgKHRoaXMuX2NvbmZpZy50YXJnZXQgKyBcIiBcIiArIFNlbGVjdG9yLkRST1BET1dOX0lURU1TKTtcbiAgICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSAwO1xuICAgICAgJCQkMSh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihFdmVudC5TQ1JPTEwsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX3Byb2Nlc3MoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgICAgdGhpcy5fcHJvY2VzcygpO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gU2Nyb2xsU3B5LnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5yZWZyZXNoID0gZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgYXV0b01ldGhvZCA9IHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93ID8gT2Zmc2V0TWV0aG9kLk9GRlNFVCA6IE9mZnNldE1ldGhvZC5QT1NJVElPTjtcbiAgICAgIHZhciBvZmZzZXRNZXRob2QgPSB0aGlzLl9jb25maWcubWV0aG9kID09PSAnYXV0bycgPyBhdXRvTWV0aG9kIDogdGhpcy5fY29uZmlnLm1ldGhvZDtcbiAgICAgIHZhciBvZmZzZXRCYXNlID0gb2Zmc2V0TWV0aG9kID09PSBPZmZzZXRNZXRob2QuUE9TSVRJT04gPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDA7XG4gICAgICB0aGlzLl9vZmZzZXRzID0gW107XG4gICAgICB0aGlzLl90YXJnZXRzID0gW107XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICAgIHZhciB0YXJnZXRzID0gJCQkMS5tYWtlQXJyYXkoJCQkMSh0aGlzLl9zZWxlY3RvcikpO1xuICAgICAgdGFyZ2V0cy5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHRhcmdldDtcbiAgICAgICAgdmFyIHRhcmdldFNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICAgIGlmICh0YXJnZXRTZWxlY3Rvcikge1xuICAgICAgICAgIHRhcmdldCA9ICQkJDEodGFyZ2V0U2VsZWN0b3IpWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgIHZhciB0YXJnZXRCQ1IgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICBpZiAodGFyZ2V0QkNSLndpZHRoIHx8IHRhcmdldEJDUi5oZWlnaHQpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gKGZhdCk6IHJlbW92ZSBza2V0Y2ggcmVsaWFuY2Ugb24galF1ZXJ5IHBvc2l0aW9uL29mZnNldFxuICAgICAgICAgICAgcmV0dXJuIFskJCQxKHRhcmdldClbb2Zmc2V0TWV0aG9kXSgpLnRvcCArIG9mZnNldEJhc2UsIHRhcmdldFNlbGVjdG9yXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGFbMF0gLSBiWzBdO1xuICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBfdGhpczIuX29mZnNldHMucHVzaChpdGVtWzBdKTtcblxuICAgICAgICBfdGhpczIuX3RhcmdldHMucHVzaChpdGVtWzFdKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgJCQkMSh0aGlzLl9zY3JvbGxFbGVtZW50KS5vZmYoRVZFTlRfS0VZKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fc2VsZWN0b3IgPSBudWxsO1xuICAgICAgdGhpcy5fb2Zmc2V0cyA9IG51bGw7XG4gICAgICB0aGlzLl90YXJnZXRzID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSBudWxsO1xuICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX2V4dGVuZHMoe30sIERlZmF1bHQsIGNvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRhcmdldCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGlkID0gJCQkMShjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcpO1xuXG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICBpZCA9IFV0aWwuZ2V0VUlEKE5BTUUpO1xuICAgICAgICAgICQkJDEoY29uZmlnLnRhcmdldCkuYXR0cignaWQnLCBpZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcudGFyZ2V0ID0gXCIjXCIgKyBpZDtcbiAgICAgIH1cblxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFNjcm9sbFRvcCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxUb3AoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gdGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxIZWlnaHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldE9mZnNldEhlaWdodCA9IGZ1bmN0aW9uIF9nZXRPZmZzZXRIZWlnaHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fcHJvY2VzcyA9IGZ1bmN0aW9uIF9wcm9jZXNzKCkge1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuX2dldFNjcm9sbFRvcCgpICsgdGhpcy5fY29uZmlnLm9mZnNldDtcblxuICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuX2dldFNjcm9sbEhlaWdodCgpO1xuXG4gICAgICB2YXIgbWF4U2Nyb2xsID0gdGhpcy5fY29uZmlnLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuX2dldE9mZnNldEhlaWdodCgpO1xuXG4gICAgICBpZiAodGhpcy5fc2Nyb2xsSGVpZ2h0ICE9PSBzY3JvbGxIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXRzW3RoaXMuX3RhcmdldHMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzWzBdICYmIHRoaXMuX29mZnNldHNbMF0gPiAwKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fY2xlYXIoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9vZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICB2YXIgaXNBY3RpdmVUYXJnZXQgPSB0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRoaXMuX3RhcmdldHNbaV0gJiYgc2Nyb2xsVG9wID49IHRoaXMuX29mZnNldHNbaV0gJiYgKHR5cGVvZiB0aGlzLl9vZmZzZXRzW2kgKyAxXSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1tpICsgMV0pO1xuXG4gICAgICAgIGlmIChpc0FjdGl2ZVRhcmdldCkge1xuICAgICAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX3RhcmdldHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fYWN0aXZhdGUgPSBmdW5jdGlvbiBfYWN0aXZhdGUodGFyZ2V0KSB7XG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSB0YXJnZXQ7XG5cbiAgICAgIHRoaXMuX2NsZWFyKCk7XG5cbiAgICAgIHZhciBxdWVyaWVzID0gdGhpcy5fc2VsZWN0b3Iuc3BsaXQoJywnKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycm93LWJvZHktc3R5bGVcblxuXG4gICAgICBxdWVyaWVzID0gcXVlcmllcy5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RvciArIFwiW2RhdGEtdGFyZ2V0PVxcXCJcIiArIHRhcmdldCArIFwiXFxcIl0sXCIgKyAoc2VsZWN0b3IgKyBcIltocmVmPVxcXCJcIiArIHRhcmdldCArIFwiXFxcIl1cIik7XG4gICAgICB9KTtcbiAgICAgIHZhciAkbGluayA9ICQkJDEocXVlcmllcy5qb2luKCcsJykpO1xuXG4gICAgICBpZiAoJGxpbmsuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BET1dOX0lURU0pKSB7XG4gICAgICAgICRsaW5rLmNsb3Nlc3QoU2VsZWN0b3IuRFJPUERPV04pLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgJGxpbmsuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmsgYXMgYWN0aXZlXG4gICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpOyAvLyBTZXQgdHJpZ2dlcmVkIGxpbmtzIHBhcmVudHMgYXMgYWN0aXZlXG4gICAgICAgIC8vIFdpdGggYm90aCA8dWw+IGFuZCA8bmF2PiBtYXJrdXAgYSBwYXJlbnQgaXMgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YgYW55IG5hdiBhbmNlc3RvclxuXG4gICAgICAgICRsaW5rLnBhcmVudHMoU2VsZWN0b3IuTkFWX0xJU1RfR1JPVVApLnByZXYoU2VsZWN0b3IuTkFWX0xJTktTICsgXCIsIFwiICsgU2VsZWN0b3IuTElTVF9JVEVNUykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7IC8vIEhhbmRsZSBzcGVjaWFsIGNhc2Ugd2hlbiAubmF2LWxpbmsgaXMgaW5zaWRlIC5uYXYtaXRlbVxuXG4gICAgICAgICRsaW5rLnBhcmVudHMoU2VsZWN0b3IuTkFWX0xJU1RfR1JPVVApLnByZXYoU2VsZWN0b3IuTkFWX0lURU1TKS5jaGlsZHJlbihTZWxlY3Rvci5OQVZfTElOS1MpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgfVxuXG4gICAgICAkJCQxKHRoaXMuX3Njcm9sbEVsZW1lbnQpLnRyaWdnZXIoRXZlbnQuQUNUSVZBVEUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGFyZ2V0XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbGVhciA9IGZ1bmN0aW9uIF9jbGVhcigpIHtcbiAgICAgICQkJDEodGhpcy5fc2VsZWN0b3IpLmZpbHRlcihTZWxlY3Rvci5BQ1RJVkUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgU2Nyb2xsU3B5KHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFNjcm9sbFNweSwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFNjcm9sbFNweTtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQkJDEod2luZG93KS5vbihFdmVudC5MT0FEX0RBVEFfQVBJLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFNweXMgPSAkJCQxLm1ha2VBcnJheSgkJCQxKFNlbGVjdG9yLkRBVEFfU1BZKSk7XG5cbiAgICBmb3IgKHZhciBpID0gc2Nyb2xsU3B5cy5sZW5ndGg7IGktLTspIHtcbiAgICAgIHZhciAkc3B5ID0gJCQkMShzY3JvbGxTcHlzW2ldKTtcblxuICAgICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQkJDEuZm5bTkFNRV0gPSBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZTtcbiAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFNjcm9sbFNweTtcblxuICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIFNjcm9sbFNweTtcbn0oJCk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wKTogdGFiLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgVGFiID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgTkFNRSA9ICd0YWInO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMCc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy50YWInO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTA7XG4gIHZhciBFdmVudCA9IHtcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVksXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSxcbiAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgRFJPUERPV05fTUVOVTogJ2Ryb3Bkb3duLW1lbnUnLFxuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgRElTQUJMRUQ6ICdkaXNhYmxlZCcsXG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93J1xuICB9O1xuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgRFJPUERPV046ICcuZHJvcGRvd24nLFxuICAgIE5BVl9MSVNUX0dST1VQOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIEFDVElWRV9VTDogJz4gbGkgPiAuYWN0aXZlJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXSwgW2RhdGEtdG9nZ2xlPVwicGlsbFwiXSwgW2RhdGEtdG9nZ2xlPVwibGlzdFwiXScsXG4gICAgRFJPUERPV05fVE9HR0xFOiAnLmRyb3Bkb3duLXRvZ2dsZScsXG4gICAgRFJPUERPV05fQUNUSVZFX0NISUxEOiAnPiAuZHJvcGRvd24tbWVudSAuYWN0aXZlJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBUYWIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUYWIoZWxlbWVudCkge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBUYWIucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSAmJiB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkgfHwgJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldDtcbiAgICAgIHZhciBwcmV2aW91cztcbiAgICAgIHZhciBsaXN0RWxlbWVudCA9ICQkJDEodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5OQVZfTElTVF9HUk9VUClbMF07XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgIGlmIChsaXN0RWxlbWVudCkge1xuICAgICAgICB2YXIgaXRlbVNlbGVjdG9yID0gbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdVTCcgPyBTZWxlY3Rvci5BQ1RJVkVfVUwgOiBTZWxlY3Rvci5BQ1RJVkU7XG4gICAgICAgIHByZXZpb3VzID0gJCQkMS5tYWtlQXJyYXkoJCQkMShsaXN0RWxlbWVudCkuZmluZChpdGVtU2VsZWN0b3IpKTtcbiAgICAgICAgcHJldmlvdXMgPSBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpZGVFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuSElERSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9KTtcbiAgICAgIHZhciBzaG93RXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1csIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgJCQkMShwcmV2aW91cykudHJpZ2dlcihoaWRlRXZlbnQpO1xuICAgICAgfVxuXG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblxuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgdGFyZ2V0ID0gJCQkMShzZWxlY3RvcilbMF07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX2VsZW1lbnQsIGxpc3RFbGVtZW50KTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIHZhciBoaWRkZW5FdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuSElEREVOLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogX3RoaXMuX2VsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBzaG93bkV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TSE9XTiwge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgICAgIH0pO1xuICAgICAgICAkJCQxKHByZXZpb3VzKS50cmlnZ2VyKGhpZGRlbkV2ZW50KTtcbiAgICAgICAgJCQkMShfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0LCB0YXJnZXQucGFyZW50Tm9kZSwgY29tcGxldGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgX3Byb3RvLl9hY3RpdmF0ZSA9IGZ1bmN0aW9uIF9hY3RpdmF0ZShlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnRzO1xuXG4gICAgICBpZiAoY29udGFpbmVyLm5vZGVOYW1lID09PSAnVUwnKSB7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnRzID0gJCQkMShjb250YWluZXIpLmZpbmQoU2VsZWN0b3IuQUNUSVZFX1VMKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnRzID0gJCQkMShjb250YWluZXIpLmNoaWxkcmVuKFNlbGVjdG9yLkFDVElWRSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY3RpdmUgPSBhY3RpdmVFbGVtZW50c1swXTtcbiAgICAgIHZhciBpc1RyYW5zaXRpb25pbmcgPSBjYWxsYmFjayAmJiBVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmIGFjdGl2ZSAmJiAkJCQxKGFjdGl2ZSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5fdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spO1xuICAgICAgfTtcblxuICAgICAgaWYgKGFjdGl2ZSAmJiBpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgJCQkMShhY3RpdmUpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3RyYW5zaXRpb25Db21wbGV0ZSA9IGZ1bmN0aW9uIF90cmFuc2l0aW9uQ29tcGxldGUoZWxlbWVudCwgYWN0aXZlLCBjYWxsYmFjaykge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAkJCQxKGFjdGl2ZSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cgKyBcIiBcIiArIENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICB2YXIgZHJvcGRvd25DaGlsZCA9ICQkJDEoYWN0aXZlLnBhcmVudE5vZGUpLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fQUNUSVZFX0NISUxEKVswXTtcblxuICAgICAgICBpZiAoZHJvcGRvd25DaGlsZCkge1xuICAgICAgICAgICQkJDEoZHJvcGRvd25DaGlsZCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aXZlLmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAndGFiJykge1xuICAgICAgICAgIGFjdGl2ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJCQkMShlbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblxuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIFV0aWwucmVmbG93KGVsZW1lbnQpO1xuICAgICAgJCQkMShlbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUgJiYgJCQkMShlbGVtZW50LnBhcmVudE5vZGUpLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QRE9XTl9NRU5VKSkge1xuICAgICAgICB2YXIgZHJvcGRvd25FbGVtZW50ID0gJCQkMShlbGVtZW50KS5jbG9zZXN0KFNlbGVjdG9yLkRST1BET1dOKVswXTtcblxuICAgICAgICBpZiAoZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgICAgJCQkMShkcm9wZG93bkVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBUYWIuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCQkMSh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFRhYih0aGlzKTtcbiAgICAgICAgICAkdGhpcy5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGFiLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFRhYjtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIFRhYi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMSh0aGlzKSwgJ3Nob3cnKTtcbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkJCQxLmZuW05BTUVdID0gVGFiLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBUYWI7XG5cbiAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIFRhYi5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBUYWI7XG59KCQpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMC1hbHBoYS42KTogaW5kZXguanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbihmdW5jdGlvbiAoJCQkMSkge1xuICBpZiAodHlwZW9mICQkJDEgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeS4galF1ZXJ5IG11c3QgYmUgaW5jbHVkZWQgYmVmb3JlIEJvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdC4nKTtcbiAgfVxuXG4gIHZhciB2ZXJzaW9uID0gJCQkMS5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpO1xuICB2YXIgbWluTWFqb3IgPSAxO1xuICB2YXIgbHRNYWpvciA9IDI7XG4gIHZhciBtaW5NaW5vciA9IDk7XG4gIHZhciBtaW5QYXRjaCA9IDE7XG4gIHZhciBtYXhNYWpvciA9IDQ7XG5cbiAgaWYgKHZlcnNpb25bMF0gPCBsdE1ham9yICYmIHZlcnNpb25bMV0gPCBtaW5NaW5vciB8fCB2ZXJzaW9uWzBdID09PSBtaW5NYWpvciAmJiB2ZXJzaW9uWzFdID09PSBtaW5NaW5vciAmJiB2ZXJzaW9uWzJdIDwgbWluUGF0Y2ggfHwgdmVyc2lvblswXSA+PSBtYXhNYWpvcikge1xuICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGF0IGxlYXN0IGpRdWVyeSB2MS45LjEgYnV0IGxlc3MgdGhhbiB2NC4wLjAnKTtcbiAgfVxufSkoJCk7XG5cbmV4cG9ydHMuVXRpbCA9IFV0aWw7XG5leHBvcnRzLkFsZXJ0ID0gQWxlcnQ7XG5leHBvcnRzLkJ1dHRvbiA9IEJ1dHRvbjtcbmV4cG9ydHMuQ2Fyb3VzZWwgPSBDYXJvdXNlbDtcbmV4cG9ydHMuQ29sbGFwc2UgPSBDb2xsYXBzZTtcbmV4cG9ydHMuRHJvcGRvd24gPSBEcm9wZG93bjtcbmV4cG9ydHMuTW9kYWwgPSBNb2RhbDtcbmV4cG9ydHMuUG9wb3ZlciA9IFBvcG92ZXI7XG5leHBvcnRzLlNjcm9sbHNweSA9IFNjcm9sbFNweTtcbmV4cG9ydHMuVGFiID0gVGFiO1xuZXhwb3J0cy5Ub29sdGlwID0gVG9vbHRpcDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb3RzdHJhcC5qcy5tYXBcbiIsIi8qKiFcbiAqIEBmaWxlT3ZlcnZpZXcgS2lja2FzcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhbmQgcGxhY2UgcG9wcGVycyBuZWFyIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50cy5cbiAqIEB2ZXJzaW9uIDEuMTIuOVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcbnZhciB0aW1lb3V0RHVyYXRpb24gPSAwO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBsb25nZXJUaW1lb3V0QnJvd3NlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgdGltZW91dER1cmF0aW9uID0gMTtcbiAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xudmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbiAgcmV0dXJuIHByb3BlcnR5ID8gY3NzW3Byb3BlcnR5XSA6IGNzcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQuaG9zdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY3JvbGxpbmcgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdFxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIHN3aXRjaCAoZWxlbWVudC5ub2RlTmFtZSkge1xuICAgIGNhc2UgJ0hUTUwnOlxuICAgIGNhc2UgJ0JPRFknOlxuICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5O1xuICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICByZXR1cm4gZWxlbWVudC5ib2R5O1xuICB9XG5cbiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG5cbiAgdmFyIF9nZXRTdHlsZUNvbXB1dGVkUHJvcCA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1k7XG5cbiAgaWYgKC8oYXV0b3xzY3JvbGwpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvZmZzZXQgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50ICYmIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xuXG4gIGlmICghbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoWydURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cbiAgdmFyIG9yZGVyID0gZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gIHZhciBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7XG4gIHJhbmdlLnNldEVuZChlbmQsIDApO1xuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50XG5cbiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgdmFyIGVsZW1lbnQxcm9vdCA9IGdldFJvb3QoZWxlbWVudDEpO1xuICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHtcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xuXG4gIHZhciB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuXG4vKlxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1YnRyYWN0IC0gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gc3VidHJhY3QgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxuICovXG5mdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuXG4vKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIHZhciBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10sIDEwKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSwgMTApO1xufVxuXG4vKipcbiAqIFRlbGxzIGlmIHlvdSBhcmUgcnVubmluZyBJbnRlcm5ldCBFeHBsb3JlciAxMFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59IGlzSUUxMFxuICovXG52YXIgaXNJRTEwID0gdW5kZWZpbmVkO1xuXG52YXIgaXNJRTEwJDEgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChpc0lFMTAgPT09IHVuZGVmaW5lZCkge1xuICAgIGlzSUUxMCA9IG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoJ01TSUUgMTAnKSAhPT0gLTE7XG4gIH1cbiAgcmV0dXJuIGlzSUUxMDtcbn07XG5cbmZ1bmN0aW9uIGdldFNpemUoYXhpcywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSkge1xuICByZXR1cm4gTWF0aC5tYXgoYm9keVsnb2Zmc2V0JyArIGF4aXNdLCBib2R5WydzY3JvbGwnICsgYXhpc10sIGh0bWxbJ2NsaWVudCcgKyBheGlzXSwgaHRtbFsnb2Zmc2V0JyArIGF4aXNdLCBodG1sWydzY3JvbGwnICsgYXhpc10sIGlzSUUxMCQxKCkgPyBodG1sWydvZmZzZXQnICsgYXhpc10gKyBjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ1RvcCcgOiAnTGVmdCcpXSArIGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCcpXSA6IDApO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTaXplcygpIHtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0lFMTAkMSgpICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFNpemUoJ0hlaWdodCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICAgIHdpZHRoOiBnZXRTaXplKCdXaWR0aCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpXG4gIH07XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywge1xuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgaWYgKGlzSUUxMCQxKCkpIHtcbiAgICB0cnkge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG4gIH0gZWxzZSB7XG4gICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoKSA6IHt9O1xuICB2YXIgd2lkdGggPSBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC5yaWdodCAtIHJlc3VsdC5sZWZ0O1xuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5ib3R0b20gLSByZXN1bHQudG9wO1xuXG4gIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICB2YXIgaXNJRTEwID0gaXNJRTEwJDEoKTtcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgdmFyIHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCwgMTApO1xuICB2YXIgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoLCAxMCk7XG5cbiAgdmFyIG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0XG4gIH0pO1xuICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7XG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XG5cbiAgLy8gU3VidHJhY3QgbWFyZ2lucyBvZiBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBpdCdzIGJlaW5nIHVzZWQgYXMgcGFyZW50XG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xuICAvLyBkaWZmZXJlbnRseSB3aGVuIG1hcmdpbnMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoZSBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpblxuICAvLyB0aGUgYm94IG9mIHRoZSBkb2N1bWVudEVsZW1lbnQsIGluIHRoZSBvdGhlciBjYXNlcyBub3QuXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AsIDEwKTtcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQsIDEwKTtcblxuICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMuYm90dG9tIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcblxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxuICAgIG9mZnNldHMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gIH1cblxuICBpZiAoaXNJRTEwID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudCkgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJykge1xuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcbiAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoZWxlbWVudCwgaHRtbCk7XG4gIHZhciB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGh0bWwpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChodG1sLCAnbGVmdCcpO1xuXG4gIHZhciBvZmZzZXQgPSB7XG4gICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvIFwiaXNGaXhlZD9cIlxuICovXG5mdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGlzRml4ZWQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbi8qKlxuICogQ29tcHV0ZWQgdGhlIGJvdW5kYXJpZXMgbGltaXRzIGFuZCByZXR1cm4gdGhlbVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudCAtIEVsZW1lbnQgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBib3VuZGFyaWVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCk7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMoKSxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0V2luZG93U2l6ZXMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xuXG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIGJvdW5kYXJpZXMubGVmdCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnRvcCArPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IHBhZGRpbmc7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IHBhZGRpbmc7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICB2YXIgc3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3ApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0KSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0KTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHhcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgdmFyIHBvcHBlck9mZnNldHMgPSB7XG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIHZhciBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cblxuLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJvcCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoZnVuY3Rpb24gKGN1cikge1xuICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICB2YXIgbWF0Y2ggPSBmaW5kKGFyciwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIHZhciBmbiA9IG1vZGlmaWVyWydmdW5jdGlvbiddIHx8IG1vZGlmaWVyLmZuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIGlmIChtb2RpZmllci5lbmFibGVkICYmIGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAvLyBBZGQgcHJvcGVydGllcyB0byBvZmZzZXRzIHRvIG1ha2UgdGhlbSBhIGNvbXBsZXRlIGNsaWVudFJlY3Qgb2JqZWN0XG4gICAgICAvLyB3ZSBkbyB0aGlzIGJlZm9yZSBlYWNoIG1vZGlmaWVyIHRvIG1ha2Ugc3VyZSB0aGUgcHJldmlvdXMgb25lIGRvZXNuJ3RcbiAgICAgIC8vIG1lc3Mgd2l0aCB0aGVzZSB2YWx1ZXNcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSk7XG5cbiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge31cbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHModGhpcy5zdGF0ZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudCh0aGlzLm9wdGlvbnMucGxhY2VtZW50LCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcbiAgZGF0YS5vcmlnaW5hbFBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBpcyBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XG4gIHJldHVybiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkO1xuICAgIHJldHVybiBlbmFibGVkICYmIG5hbWUgPT09IG1vZGlmaWVyTmFtZTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgdG9DaGVjayA9IHByZWZpeCA/ICcnICsgcHJlZml4ICsgdXBwZXJQcm9wIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIERlc3Ryb3kgdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgb25VcGRhdGUgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUG9wcGVyLmpzIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBzdGF0ZSkge1xuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgdmFyIHJlZmVyZW5jZU9mZnNldHMgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIHZhciBwbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChvcHRpb25zLnBsYWNlbWVudCwgcmVmZXJlbmNlT2Zmc2V0cywgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnLCBwbGFjZW1lbnQpO1xuXG4gIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2VcbiAgLy8gd2l0aG91dCB0aGUgcG9zaXRpb24gYXBwbGllZCB3ZSBjYW4ndCBndWFyYW50ZWUgY29ycmVjdCBjb21wdXRhdGlvbnNcbiAgc2V0U3R5bGVzKHBvcHBlciwgeyBwb3NpdGlvbjogJ2Fic29sdXRlJyB9KTtcblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIHggPSBvcHRpb25zLngsXG4gICAgICB5ID0gb3B0aW9ucy55O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcblxuICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJztcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7XG4gIH1cbiAgdmFyIGdwdUFjY2VsZXJhdGlvbiA9IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvblxuICB9O1xuXG4gIC8vIGZsb29yIHNpZGVzIHRvIGF2b2lkIGJsdXJyeSB0ZXh0XG4gIHZhciBvZmZzZXRzID0ge1xuICAgIGxlZnQ6IE1hdGguZmxvb3IocG9wcGVyLmxlZnQpLFxuICAgIHRvcDogTWF0aC5mbG9vcihwb3BwZXIudG9wKSxcbiAgICBib3R0b206IE1hdGguZmxvb3IocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IE1hdGguZmxvb3IocG9wcGVyLnJpZ2h0KVxuICB9O1xuXG4gIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIHZhciBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICB2YXIgbGVmdCA9IHZvaWQgMCxcbiAgICAgIHRvcCA9IHZvaWQgMDtcbiAgaWYgKHNpZGVBID09PSAnYm90dG9tJykge1xuICAgIHRvcCA9IC1vZmZzZXRQYXJlbnRSZWN0LmhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICB9IGVsc2Uge1xuICAgIHRvcCA9IG9mZnNldHMudG9wO1xuICB9XG4gIGlmIChzaWRlQiA9PT0gJ3JpZ2h0Jykge1xuICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50UmVjdC53aWR0aCArIG9mZnNldHMucmlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgbGVmdCA9IG9mZnNldHMubGVmdDtcbiAgfVxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uICYmIHByZWZpeGVkUHJvcGVydHkpIHtcbiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSAndHJhbnNsYXRlM2QoJyArIGxlZnQgKyAncHgsICcgKyB0b3AgKyAncHgsIDApJztcbiAgICBzdHlsZXNbc2lkZUFdID0gMDtcbiAgICBzdHlsZXNbc2lkZUJdID0gMDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aHdlcmlzZSwgd2UgdXNlIHRoZSBzdGFuZGFyZCBgdG9wYCwgYGxlZnRgLCBgYm90dG9tYCBhbmQgYHJpZ2h0YCBwcm9wZXJ0aWVzXG4gICAgdmFyIGludmVydFRvcCA9IHNpZGVBID09PSAnYm90dG9tJyA/IC0xIDogMTtcbiAgICB2YXIgaW52ZXJ0TGVmdCA9IHNpZGVCID09PSAncmlnaHQnID8gLTEgOiAxO1xuICAgIHN0eWxlc1tzaWRlQV0gPSB0b3AgKiBpbnZlcnRUb3A7XG4gICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0O1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gc2lkZUEgKyAnLCAnICsgc2lkZUI7XG4gIH1cblxuICAvLyBBdHRyaWJ1dGVzXG4gIHZhciBhdHRyaWJ1dGVzID0ge1xuICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50XG4gIH07XG5cbiAgLy8gVXBkYXRlIGBkYXRhYCBhdHRyaWJ1dGVzLCBzdHlsZXMgYW5kIGFycm93U3R5bGVzXG4gIGRhdGEuYXR0cmlidXRlcyA9IF9leHRlbmRzKHt9LCBhdHRyaWJ1dGVzLCBkYXRhLmF0dHJpYnV0ZXMpO1xuICBkYXRhLnN0eWxlcyA9IF9leHRlbmRzKHt9LCBzdHlsZXMsIGRhdGEuc3R5bGVzKTtcbiAgZGF0YS5hcnJvd1N0eWxlcyA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMuYXJyb3csIGRhdGEuYXJyb3dTdHlsZXMpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGRlcGVuZHMgZnJvbSBhbm90aGVyIG9uZS48YnIgLz5cbiAqIEl0IGNoZWNrcyBpZiB0aGUgbmVlZGVkIG1vZGlmaWVyIGlzIGxpc3RlZCBhbmQgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVycyAtIGxpc3Qgb2YgbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGluZ05hbWUgLSBuYW1lIG9mIHJlcXVlc3RpbmcgbW9kaWZpZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0ZWROYW1lIC0gbmFtZSBvZiByZXF1ZXN0ZWQgbW9kaWZpZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyUmVxdWlyZWQobW9kaWZpZXJzLCByZXF1ZXN0aW5nTmFtZSwgcmVxdWVzdGVkTmFtZSkge1xuICB2YXIgcmVxdWVzdGluZyA9IGZpbmQobW9kaWZpZXJzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgIHJldHVybiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZTtcbiAgfSk7XG5cbiAgdmFyIGlzUmVxdWlyZWQgPSAhIXJlcXVlc3RpbmcgJiYgbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09IHJlcXVlc3RlZE5hbWUgJiYgbW9kaWZpZXIuZW5hYmxlZCAmJiBtb2RpZmllci5vcmRlciA8IHJlcXVlc3Rpbmcub3JkZXI7XG4gIH0pO1xuXG4gIGlmICghaXNSZXF1aXJlZCkge1xuICAgIHZhciBfcmVxdWVzdGluZyA9ICdgJyArIHJlcXVlc3RpbmdOYW1lICsgJ2AnO1xuICAgIHZhciByZXF1ZXN0ZWQgPSAnYCcgKyByZXF1ZXN0ZWROYW1lICsgJ2AnO1xuICAgIGNvbnNvbGUud2FybihyZXF1ZXN0ZWQgKyAnIG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5ICcgKyBfcmVxdWVzdGluZyArICcgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAnICsgX3JlcXVlc3RpbmcgKyAnIScpO1xuICB9XG4gIHJldHVybiBpc1JlcXVpcmVkO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyRhcnJvdztcblxuICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrXG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnYXJyb3cnLCAna2VlcFRvZ2V0aGVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGEgc3RyaW5nLCBzdXBwb3NlIGl0J3MgYSBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIGFycm93RWxlbWVudCBpc24ndCBhIHF1ZXJ5IHNlbGVjdG9yIHdlIG11c3QgY2hlY2sgdGhhdCB0aGVcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcbiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50IScpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XG4gIHZhciBzaWRlID0gc2lkZUNhcGl0YWxpemVkLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbHRTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcbiAgdmFyIGFycm93RWxlbWVudFNpemUgPSBnZXRPdXRlclNpemVzKGFycm93RWxlbWVudClbbGVuXTtcblxuICAvL1xuICAvLyBleHRlbmRzIGtlZXBUb2dldGhlciBiZWhhdmlvciBtYWtpbmcgc3VyZSB0aGUgcG9wcGVyIGFuZCBpdHNcbiAgLy8gcmVmZXJlbmNlIGhhdmUgZW5vdWdoIHBpeGVscyBpbiBjb25qdWN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSwgMTApO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10sIDEwKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgc2lkZSwgTWF0aC5yb3VuZChzaWRlVmFsdWUpKSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgYWx0U2lkZSwgJycpLCBfZGF0YSRvZmZzZXRzJGFycm93KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tcmlnaHRgIChvbiB0aGUgc2lkZSB3aXRoIG1vcmUgc3BhY2UgYXZhaWxhYmxlLCBhbGlnbm1lbnQgZGVwZW5kcyBieSBwbGFjZW1lbnQpXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge0FycmF5fVxuICogQGVudW0ge1N0cmluZ31cbiAqIEByZWFkb25seVxuICogQG1ldGhvZCBwbGFjZW1lbnRzXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBwbGFjZW1lbnRzID0gWydhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYXV0by1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCcsICd0b3AtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3JpZ2h0LWVuZCcsICdib3R0b20tZW5kJywgJ2JvdHRvbScsICdib3R0b20tc3RhcnQnLCAnbGVmdC1lbmQnLCAnbGVmdCcsICdsZWZ0LXN0YXJ0J107XG5cbi8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYFxudmFyIHZhbGlkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuc2xpY2UoMyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHNcbiAqIGNsb2Nrd2lzZSAob3IgY291bnRlci1jbG9ja3dpc2UpLlxuICpcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxuICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlXG4gKiBAcmV0dXJucyB7QXJyYXl9IHBsYWNlbWVudHMgaW5jbHVkaW5nIHRoZWlyIHZhcmlhdGlvbnNcbiAqL1xuZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCkge1xuICB2YXIgY291bnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTtcbiAgdmFyIGFyciA9IHZhbGlkUGxhY2VtZW50cy5zbGljZShpbmRleCArIDEpLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTtcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xufVxuXG52YXIgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJ1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykge1xuICAvLyBpZiBgaW5uZXJgIG1vZGlmaWVyIGlzIGVuYWJsZWQsIHdlIGNhbid0IHVzZSB0aGUgYGZsaXBgIG1vZGlmaWVyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2lubmVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGlmIChkYXRhLmZsaXBwZWQgJiYgZGF0YS5wbGFjZW1lbnQgPT09IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQpIHtcbiAgICAvLyBzZWVtcyBsaWtlIGZsaXAgaXMgdHJ5aW5nIHRvIGxvb3AsIHByb2JhYmx5IHRoZXJlJ3Mgbm90IGVub3VnaCBzcGFjZSBvbiBhbnkgb2YgdGhlIGZsaXBwYWJsZSBzaWRlc1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcyB8fCBmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3BcbiAgICAgIGRhdGEuZmxpcHBlZCA9IHRydWU7XG5cbiAgICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBkYXRhLnBsYWNlbWVudCA9IHBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG5cbiAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aFxuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgcHJvcGVydHkgd2UgbWF5IGFkZCBpbiB0aGUgZnV0dXJlXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5wb3BwZXIsIGdldFBvcHBlck9mZnNldHMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KSk7XG5cbiAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gIGlmIChwb3BwZXJbc2lkZV0gPCBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbb3BTaWRlXSkgLSBwb3BwZXJbbWVhc3VyZW1lbnRdO1xuICB9XG4gIGlmIChwb3BwZXJbb3BTaWRlXSA+IGZsb29yKHJlZmVyZW5jZVtzaWRlXSkpIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW29wU2lkZV0gPSBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgY29udGFpbmluZyB2YWx1ZSArIHVuaXQgaW50byBhIHB4IHZhbHVlIG51bWJlclxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHN0ciAtIFZhbHVlICsgdW5pdCBzdHJpbmdcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGBcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQHJldHVybnMge051bWJlcnxTdHJpbmd9XG4gKiBWYWx1ZSBpbiBwaXhlbHMsIG9yIG9yaWdpbmFsIHN0cmluZyBpZiBubyB2YWx1ZXMgd2VyZSBleHRyYWN0ZWRcbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7XG4gIC8vIHNlcGFyYXRlIHZhbHVlIGZyb20gdW5pdFxuICB2YXIgc3BsaXQgPSBzdHIubWF0Y2goLygoPzpcXC18XFwrKT9cXGQqXFwuP1xcZCopKC4qKS8pO1xuICB2YXIgdmFsdWUgPSArc3BsaXRbMV07XG4gIHZhciB1bml0ID0gc3BsaXRbMl07XG5cbiAgLy8gSWYgaXQncyBub3QgYSBudW1iZXIgaXQncyBhbiBvcGVyYXRvciwgSSBndWVzc1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGlmICh1bml0LmluZGV4T2YoJyUnKSA9PT0gMCkge1xuICAgIHZhciBlbGVtZW50ID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgY2FzZSAnJXAnOlxuICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0cztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICclJzpcbiAgICAgIGNhc2UgJyVyJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVsZW1lbnQgPSByZWZlcmVuY2VPZmZzZXRzO1xuICAgIH1cblxuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdChlbGVtZW50KTtcbiAgICByZXR1cm4gcmVjdFttZWFzdXJlbWVudF0gLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHtcbiAgICAvLyBpZiBpcyBhIHZoIG9yIHZ3LCB3ZSBjYWxjdWxhdGUgdGhlIHNpemUgYmFzZWQgb24gdGhlIHZpZXdwb3J0XG4gICAgdmFyIHNpemUgPSB2b2lkIDA7XG4gICAgaWYgKHVuaXQgPT09ICd2aCcpIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gc2l6ZSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIGlmIGlzIGFuIGV4cGxpY2l0IHBpeGVsIHVuaXQsIHdlIGdldCByaWQgb2YgdGhlIHVuaXQgYW5kIGtlZXAgdGhlIHZhbHVlXG4gICAgLy8gaWYgaXMgYW4gaW1wbGljaXQgdW5pdCwgaXQncyBweCwgYW5kIHdlIHJldHVybiBqdXN0IHRoZSB2YWx1ZVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIFBhcnNlIGFuIGBvZmZzZXRgIHN0cmluZyB0byBleHRyYXBvbGF0ZSBgeGAgYW5kIGB5YCBudW1lcmljIG9mZnNldHMuXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gb2Zmc2V0XG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBiYXNlUGxhY2VtZW50XG4gKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnNcbiAqL1xuZnVuY3Rpb24gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzLCBiYXNlUGxhY2VtZW50KSB7XG4gIHZhciBvZmZzZXRzID0gWzAsIDBdO1xuXG4gIC8vIFVzZSBoZWlnaHQgaWYgcGxhY2VtZW50IGlzIGxlZnQgb3IgcmlnaHQgYW5kIGluZGV4IGlzIDAgb3RoZXJ3aXNlIHVzZSB3aWR0aFxuICAvLyBpbiB0aGlzIHdheSB0aGUgZmlyc3Qgb2Zmc2V0IHdpbGwgdXNlIGFuIGF4aXMgYW5kIHRoZSBzZWNvbmQgb25lXG4gIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmVcbiAgdmFyIHVzZUhlaWdodCA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIC8vIFNwbGl0IHRoZSBvZmZzZXQgc3RyaW5nIHRvIG9idGFpbiBhIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kc1xuICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpXG4gIHZhciBmcmFnbWVudHMgPSBvZmZzZXQuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnRyaW0oKTtcbiAgfSk7XG5cbiAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lXG4gIC8vIHRoZXkgY291bGQgYmUgc2VwYXJhdGVkIGJ5IGNvbW1hIG9yIHNwYWNlXG4gIHZhciBkaXZpZGVyID0gZnJhZ21lbnRzLmluZGV4T2YoZmluZChmcmFnbWVudHMsIGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxccy8pICE9PSAtMTtcbiAgfSkpO1xuXG4gIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHtcbiAgICBjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTtcbiAgfVxuXG4gIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZVxuICAvLyB0aGVtIGJ5IG9mc2V0IFggYW5kIFkuXG4gIHZhciBzcGxpdFJlZ2V4ID0gL1xccyosXFxzKnxcXHMrLztcbiAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107XG5cbiAgLy8gQ29udmVydCB0aGUgdmFsdWVzIHdpdGggdW5pdHMgdG8gYWJzb2x1dGUgcGl4ZWxzIHRvIGFsbG93IG91ciBjb21wdXRhdGlvbnNcbiAgb3BzID0gb3BzLm1hcChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlclxuICAgIHZhciBtZWFzdXJlbWVudCA9IChpbmRleCA9PT0gMSA/ICF1c2VIZWlnaHQgOiB1c2VIZWlnaHQpID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgIHJldHVybiBvcFxuICAgIC8vIFRoaXMgYWdncmVnYXRlcyBhbnkgYCtgIG9yIGAtYCBzaWduIHRoYXQgYXJlbid0IGNvbnNpZGVyZWQgb3BlcmF0b3JzXG4gICAgLy8gZS5nLjogMTAgKyArNSA9PiBbMTAsICssICs1XVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhW2EubGVuZ3RoIC0gMV0gPT09ICcnICYmIFsnKycsICctJ10uaW5kZXhPZihiKSAhPT0gLTEpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdID0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSBpZiAobWVyZ2VXaXRoUHJldmlvdXMpIHtcbiAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfVxuICAgIH0sIFtdKVxuICAgIC8vIEhlcmUgd2UgY29udmVydCB0aGUgc3RyaW5nIHZhbHVlcyBpbnRvIG51bWJlciB2YWx1ZXMgKGluIHB4KVxuICAgIC5tYXAoZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9uc1xuICBvcHMuZm9yRWFjaChmdW5jdGlvbiAob3AsIGluZGV4KSB7XG4gICAgb3AuZm9yRWFjaChmdW5jdGlvbiAoZnJhZywgaW5kZXgyKSB7XG4gICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7XG4gICAgICAgIG9mZnNldHNbaW5kZXhdICs9IGZyYWcgKiAob3BbaW5kZXgyIC0gMV0gPT09ICctJyA/IC0xIDogMSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTBcbiAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBvZmZzZXQoZGF0YSwgX3JlZikge1xuICB2YXIgb2Zmc2V0ID0gX3JlZi5vZmZzZXQ7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCxcbiAgICAgIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgdmFyIG9mZnNldHMgPSB2b2lkIDA7XG4gIGlmIChpc051bWVyaWMoK29mZnNldCkpIHtcbiAgICBvZmZzZXRzID0gWytvZmZzZXQsIDBdO1xuICB9IGVsc2Uge1xuICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTtcbiAgfVxuXG4gIGlmIChiYXNlUGxhY2VtZW50ID09PSAnbGVmdCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAncmlnaHQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgLT0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAnYm90dG9tJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzFdO1xuICB9XG5cbiAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBwcmV2ZW50T3ZlcmZsb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYm91bmRhcmllc0VsZW1lbnQgPSBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50IHx8IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG5cbiAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG9cbiAgLy8gZ28gb25lIHN0ZXAgdXAgYW5kIHVzZSB0aGUgbmV4dCBvZmZzZXRQYXJlbnQgYXMgcmVmZXJlbmNlIHRvXG4gIC8vIGF2b2lkIHRvIG1ha2UgdGhpcyBtb2RpZmllciBjb21wbGV0ZWx5IHVzZWxlc3MgYW5kIGxvb2sgbGlrZSBicm9rZW5cbiAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkge1xuICAgIGJvdW5kYXJpZXNFbGVtZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpO1xuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIHZhciBvcmRlciA9IG9wdGlvbnMucHJpb3JpdHk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIHZhciBjaGVjayA9IHtcbiAgICBwcmltYXJ5OiBmdW5jdGlvbiBwcmltYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW3BsYWNlbWVudF07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPCBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBwbGFjZW1lbnQsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNlY29uZGFyeTogZnVuY3Rpb24gc2Vjb25kYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIG1haW5TaWRlID0gcGxhY2VtZW50ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbbWFpblNpZGVdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihwb3BwZXJbbWFpblNpZGVdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0gLSAocGxhY2VtZW50ID09PSAncmlnaHQnID8gcG9wcGVyLndpZHRoIDogcG9wcGVyLmhlaWdodCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBtYWluU2lkZSwgdmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICB2YXIgc2lkZSA9IFsnbGVmdCcsICd0b3AnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSc7XG4gICAgcG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgY2hlY2tbc2lkZV0ocGxhY2VtZW50KSk7XG4gIH0pO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHNoaWZ0KGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgc2hpZnR2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXJcbiAgaWYgKHNoaWZ0dmFyaWF0aW9uKSB7XG4gICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcjtcblxuICAgIHZhciBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICAgIHZhciBzaGlmdE9mZnNldHMgPSB7XG4gICAgICBzdGFydDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSksXG4gICAgICBlbmQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbWVhc3VyZW1lbnRdIC0gcG9wcGVyW21lYXN1cmVtZW50XSlcbiAgICB9O1xuXG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIHNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBoaWRlKGRhdGEpIHtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdoaWRlJywgJ3ByZXZlbnRPdmVyZmxvdycpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciBib3VuZCA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgfSkuYm91bmRhcmllcztcblxuICBpZiAocmVmUmVjdC5ib3R0b20gPCBib3VuZC50b3AgfHwgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHwgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHwgcmVmUmVjdC5yaWdodCA8IGJvdW5kLmxlZnQpIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IGZhbHNlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNIb3JpeiA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9IHJlZmVyZW5jZVtiYXNlUGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xuXG4gIGRhdGEucGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZFxuICogdG8gaXRzIGBmbmAgcHJvcGVydHkuPGJyIC8+XG4gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgb24gZWFjaCB1cGRhdGUsIHRoaXMgbWVhbnMgdGhhdCB5b3UgbXVzdFxuICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLlxuICpcbiAqIEBmdW5jdGlvbiBNb2RpZmllckZuXG4gKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge2RhdGFPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuXG4vKipcbiAqIE1vZGlmaWVycyBhcmUgcGx1Z2lucyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvciBvZiB5b3VyIHBvcHBlcnMuPGJyIC8+XG4gKiBQb3BwZXIuanMgdXNlcyBhIHNldCBvZiA5IG1vZGlmaWVycyB0byBwcm92aWRlIGFsbCB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzXG4gKiBuZWVkZWQgYnkgdGhlIGxpYnJhcnkuXG4gKlxuICogVXN1YWxseSB5b3UgZG9uJ3Qgd2FudCB0byBvdmVycmlkZSB0aGUgYG9yZGVyYCwgYGZuYCBhbmQgYG9uTG9hZGAgcHJvcHMuXG4gKiBBbGwgdGhlIG90aGVyIHByb3BlcnRpZXMgYXJlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY291bGQgYmUgdHdlYWtlZC5cbiAqIEBuYW1lc3BhY2UgbW9kaWZpZXJzXG4gKi9cbnZhciBtb2RpZmllcnMgPSB7XG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlXG4gICAqIGVsZW1lbnQuPGJyIC8+XG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cbiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgc2hpZnQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAxMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBzaGlmdFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuXG4gICAqXG4gICAqIEl0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyB1bml0czpcbiAgICogLSBgcHhgIG9yIHVuaXRsZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBoZWlnaHQuXG4gICAqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSB2YWx1ZSAoYXMgYE51bWJlcmAgb3IgYFN0cmluZ2ApLCBvciBhIHBhaXIgb2YgdmFsdWVzXG4gICAqIGFzIGBTdHJpbmdgIGRpdmlkZWQgYnkgYSBjb21tYSBvciBvbmUgKG9yIG1vcmUpIHdoaXRlIHNwYWNlcy48YnIgLz5cbiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlXG4gICAqIHJlbW92ZWQgaW4gdjIuPGJyIC8+XG4gICAqIEFkZGl0aW9uYWxseSwgaXQgYWNjZXB0cyBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBiZXR3ZWVuIGRpZmZlcmVudCB1bml0cy5cbiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFZhbGlkIGV4YW1wbGVzIGFyZTpcbiAgICogYGBgXG4gICAqIDEwXG4gICAqICcxMCUnXG4gICAqICcxMCwgMTAnXG4gICAqICcxMCUsIDEwJ1xuICAgKiAnMTAgKyAxMCUnXG4gICAqICcxMCAtIDV2aCArIDMlJ1xuICAgKiAnLTEwcHggKyA1dmgsIDVweCAtIDYlJ1xuICAgKiBgYGBcbiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXBcbiAgICogPiB3aXRoIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50LCB1bmZvcnR1bmF0ZWx5LCB5b3Ugd2lsbCBoYXZlIHRvIGRpc2FibGUgdGhlIGBmbGlwYCBtb2RpZmllci5cbiAgICogPiBNb3JlIG9uIHRoaXMgW3JlYWRpbmcgdGhpcyBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MylcbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIG9mZnNldDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0yMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDIwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IG9mZnNldCxcbiAgICAvKiogQHByb3Age051bWJlcnxTdHJpbmd9IG9mZnNldD0wXG4gICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgb2Zmc2V0OiAwXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cbiAgICpcbiAgICogQW4gc2NlbmFyaW8gZXhpc3RzIHdoZXJlIHRoZSByZWZlcmVuY2UgaXRzZWxmIGlzIG5vdCB3aXRoaW4gdGhlIGJvdW5kYXJpZXMuPGJyIC8+XG4gICAqIFdlIGNhbiBzYXkgaXQgaGFzIFwiZXNjYXBlZCB0aGUgYm91bmRhcmllc1wiIOKAlCBvciBqdXN0IFwiZXNjYXBlZFwiLjxiciAvPlxuICAgKiBJbiB0aGlzIGNhc2Ugd2UgbmVlZCB0byBkZWNpZGUgd2hldGhlciB0aGUgcG9wcGVyIHNob3VsZCBlaXRoZXI6XG4gICAqXG4gICAqIC0gZGV0YWNoIGZyb20gdGhlIHJlZmVyZW5jZSBhbmQgcmVtYWluIFwidHJhcHBlZFwiIGluIHRoZSBib3VuZGFyaWVzLCBvclxuICAgKiAtIGlmIGl0IHNob3VsZCBpZ25vcmUgdGhlIGJvdW5kYXJ5IGFuZCBcImVzY2FwZSB3aXRoIGl0cyByZWZlcmVuY2VcIlxuICAgKlxuICAgKiBXaGVuIGBlc2NhcGVXaXRoUmVmZXJlbmNlYCBpcyBzZXQgdG9gdHJ1ZWAgYW5kIHJlZmVyZW5jZSBpcyBjb21wbGV0ZWx5XG4gICAqIG91dHNpZGUgaXRzIGJvdW5kYXJpZXMsIHRoZSBwb3BwZXIgd2lsbCBvdmVyZmxvdyAob3IgY29tcGxldGVseSBsZWF2ZSlcbiAgICogdGhlIGJvdW5kYXJpZXMgaW4gb3JkZXIgdG8gcmVtYWluIGF0dGFjaGVkIHRvIHRoZSBlZGdlIG9mIHRoZSByZWZlcmVuY2UuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAzMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gICAgLyoqXG4gICAgICogQHByb3Age0FycmF5fSBbcHJpb3JpdHk9WydsZWZ0JywncmlnaHQnLCd0b3AnLCdib3R0b20nXV1cbiAgICAgKiBQb3BwZXIgd2lsbCB0cnkgdG8gcHJldmVudCBvdmVyZmxvdyBmb2xsb3dpbmcgdGhlc2UgcHJpb3JpdGllcyBieSBkZWZhdWx0LFxuICAgICAqIHRoZW4sIGl0IGNvdWxkIG92ZXJmbG93IG9uIHRoZSBsZWZ0IGFuZCBvbiB0b3Agb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwcmlvcml0eTogWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBBbW91bnQgb2YgcGl4ZWwgdXNlZCB0byBkZWZpbmUgYSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvdW5kYXJpZXNcbiAgICAgKiBhbmQgdGhlIHBvcHBlciB0aGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBoYXMgYWx3YXlzIGEgbGl0dGxlIHBhZGRpbmdcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50J1xuICAgICAqIEJvdW5kYXJpZXMgdXNlZCBieSB0aGUgbW9kaWZpZXIsIGNhbiBiZSBgc2Nyb2xsUGFyZW50YCwgYHdpbmRvd2AsXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICdzY3JvbGxQYXJlbnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2hvdGhlcnNcbiAgICogd2l0aG91dCBsZWF2aW5nIGFueSBnYXAgYmV0d2VlbiB0aGUgdHdvLiBFeHBlY2lhbGx5IHVzZWZ1bCB3aGVuIHRoZSBhcnJvdyBpc1xuICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBhc3N1cmUgaXQgdG8gcG9pbnQgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLCB5b3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxuICAgKiBiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGtlZXBUb2dldGhlcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDQwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGtlZXBUb2dldGhlclxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlXG4gICAqIHN1cmUgaXQgaXMgcG9zaXRpb25lZCBiZXR3ZWVuIHRoZSByZWZlcmVuY2UgZWxlbWVudCBhbmQgaXRzIHBvcHBlciBlbGVtZW50LlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIG91dGVyIHNpemUgb2YgdGhlIGBhcnJvd0VsZW1lbnRgIG5vZGUgdG8gZGV0ZWN0IGhvdyBtYW55XG4gICAqIHBpeGVscyBvZiBjb25qdWN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XSdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBmbGlwIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQgd2hlbiBpdCBzdGFydHMgdG8gb3ZlcmxhcCBpdHNcbiAgICogcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICpcbiAgICogKipOT1RFOioqIHRoaXMgbW9kaWZpZXIgd2lsbCBpbnRlcnJ1cHQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlIGFuZCB3aWxsXG4gICAqIHJlc3RhcnQgaXQgaWYgaXQgZGV0ZWN0cyB0aGUgbmVlZCB0byBmbGlwIHRoZSBwbGFjZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBmbGlwOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTYwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogZmxpcCxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEFycmF5fSBiZWhhdmlvcj0nZmxpcCdcbiAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZlxuICAgICAqIGBmbGlwYCwgYGNsb2Nrd2lzZWAsIGBjb3VudGVyY2xvY2t3aXNlYCBvciBhbiBhcnJheSB3aXRoIGEgbGlzdCBvZiB2YWxpZFxuICAgICAqIHBsYWNlbWVudHMgKHdpdGggb3B0aW9uYWwgdmFyaWF0aW9ucykuXG4gICAgICovXG4gICAgYmVoYXZpb3I6ICdmbGlwJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgZmxpcCBpZiBpdCBoaXRzIHRoZSBlZGdlcyBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xuICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24sXG4gICAgICogdGhlIHBvcHBlciB3aWxsIG5ldmVyIGJlIHBsYWNlZCBvdXRzaWRlIG9mIHRoZSBkZWZpbmVkIGJvdW5kYXJpZXNcbiAgICAgKiAoZXhjZXB0IGlmIGtlZXBUb2dldGhlciBpcyBlbmFibGVkKVxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAndmlld3BvcnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSB0aGUgcG9wcGVyIGZsb3cgdG93YXJkIHRoZSBpbm5lciBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHdoZW4gdGhpcyBtb2RpZmllciBpcyBkaXNhYmxlZCwgdGhlIHBvcHBlciB3aWxsIGJlIHBsYWNlZCBvdXRzaWRlXG4gICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGlubmVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTcwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD1mYWxzZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBpbm5lclxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGhpZGUgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXRzaWRlIG9mIHRoZVxuICAgKiBwb3BwZXIgYm91bmRhcmllcy4gSXQgd2lsbCBzZXQgYSBgeC1vdXQtb2YtYm91bmRhcmllc2AgYXR0cmlidXRlIHdoaWNoIGNhblxuICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpc1xuICAgKiBvdXQgb2YgYm91bmRhcmllcy5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaGlkZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDgwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGhpZGVcbiAgfSxcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIHN0eWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgZWxlbWVudCB0byBnZXRzXG4gICAqIHByb3Blcmx5IHBvc2l0aW9uZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGlzIG1vZGlmaWVyIHdpbGwgbm90IHRvdWNoIHRoZSBET00sIGl0IGp1c3QgcHJlcGFyZXMgdGhlIHN0eWxlc1xuICAgKiBzbyB0aGF0IGBhcHBseVN0eWxlYCBtb2RpZmllciBjYW4gYXBwbHkgaXQuIFRoaXMgc2VwYXJhdGlvbiBpcyB1c2VmdWxcbiAgICogaW4gY2FzZSB5b3UgbmVlZCB0byByZXBsYWNlIGBhcHBseVN0eWxlYCB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLlxuICAgKlxuICAgKiBUaGlzIG1vZGlmaWVyIGhhcyBgODUwYCBhcyBgb3JkZXJgIHZhbHVlIHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICogd2l0aCBwcmV2aW91cyB2ZXJzaW9ucyBvZiBQb3BwZXIuanMuIEV4cGVjdCB0aGUgbW9kaWZpZXJzIG9yZGVyaW5nIG1ldGhvZFxuICAgKiB0byBjaGFuZ2UgaW4gZnV0dXJlIG1ham9yIHZlcnNpb25zIG9mIHRoZSBsaWJyYXJ5LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgY29tcHV0ZVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTg1MCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODUwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogY29tcHV0ZVN0eWxlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzZCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2JvdHRvbSddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgYm90dG9tYFxuICAgICAqL1xuICAgIHg6ICdib3R0b20nLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdsZWZ0J11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGByaWdodGBcbiAgICAgKi9cbiAgICB5OiAncmlnaHQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGNvbXB1dGVkIHN0eWxlcyB0byB0aGUgcG9wcGVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgYXJlIGxpbWl0ZWQgdG8gdGhpcyBtb2RpZmllci4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZVxuICAgKiB5b3Ugd2FudCB0byBpbnRlZ3JhdGUgUG9wcGVyLmpzIGluc2lkZSBhIGZyYW1ld29yayBvciB2aWV3IGxpYnJhcnkgYW5kIHlvdVxuICAgKiB3YW50IHRvIGRlbGVnYXRlIGFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgdG8gaXQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3UgZGlzYWJsZSB0aGlzIG1vZGlmaWVyLCB5b3UgbXVzdCBtYWtlIHN1cmUgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIGhhcyBpdHMgcG9zaXRpb24gc2V0IHRvIGBhYnNvbHV0ZWAgYmVmb3JlIFBvcHBlci5qcyBjYW4gZG8gaXRzIHdvcmshXG4gICAqXG4gICAqIEp1c3QgZGlzYWJsZSB0aGlzIG1vZGlmaWVyIGFuZCBkZWZpbmUgeW91IG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFwcGx5U3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA5MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcHBseVN0eWxlLFxuICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovXG4gICAgb25Mb2FkOiBhcHBseVN0eWxlT25Mb2FkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXJcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM2QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWRcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb25zIHVzZWQgYnkgUG9wcGVyLmpzXG4gKiB0aGlzIG9iamVjdCBnZXQgcGFzc2VkIHRvIG1vZGlmaWVycyBhbmQgdG8gdGhlIGBvbkNyZWF0ZWAgYW5kIGBvblVwZGF0ZWAgY2FsbGJhY2tzLlxuICogQG5hbWUgZGF0YU9iamVjdFxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEucGxhY2VtZW50IFBsYWNlbWVudCBhcHBsaWVkIHRvIHBvcHBlclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5oaWRlIFRydWUgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dCBvZiBib3VuZGFyaWVzLCB1c2VmdWwgdG8ga25vdyB3aGVuIHRvIGhpZGUgdGhlIHBvcHBlci5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGRhdGEuYXJyb3dFbGVtZW50IE5vZGUgdXNlZCBhcyBhcnJvdyBieSBhcnJvdyBtb2RpZmllclxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuc3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLCBpdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYXJyb3dTdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIgYXJyb3csIGl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5ib3VuZGFyaWVzIE9mZnNldHMgb2YgdGhlIHBvcHBlciBib3VuZGFyaWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzIFRoZSBtZWFzdXJlbWVudHMgb2YgcG9wcGVyLCByZWZlcmVuY2UgYW5kIGFycm93IGVsZW1lbnRzLlxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5wb3BwZXIgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDBcbiAqL1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+XG4gKiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGVuIHVzaW5nIHRoZSBgb3B0aW9uc2AgYXJndW1lbnQgb2YgUG9wcGVyLmpzLjxiciAvPlxuICogVG8gb3ZlcnJpZGUgYW4gb3B0aW9uLCBzaW1wbHkgcGFzcyBhcyAzcmQgYXJndW1lbnQgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWVcbiAqIHN0cnVjdHVyZSBvZiB0aGlzIG9iamVjdCwgZXhhbXBsZTpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWYsIHBvcCwge1xuICogICBtb2RpZmllcnM6IHtcbiAqICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogZmFsc2UgfVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHN0YXRpY1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgRGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBQb3BwZXIncyBwbGFjZW1lbnRcbiAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgZXZlbnRzIChyZXNpemUsIHNjcm9sbCkgYXJlIGluaXRpYWxseSBlbmFibGVkXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQsIHRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qc1xuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgUG9wcGVyLmpzIGluc3RhbmNlXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlIGFuIHVwZGF0ZSwgaXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZVxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTBcbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuXG5cblBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5Qb3BwZXIucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuY2xhc3MgU2VhcmNoQmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBkYXRhU2VhcmNoID0gZSA9PiB7XHJcbiAgICBjb25zdCB7IGRhdGEsIHVwZGF0ZSB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWUudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICBjb25zdCBmaWx0ZXIgPSBkYXRhLmZpbHRlcih1c2VyID0+IHtcclxuICAgICAgcmV0dXJuIHVzZXIubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHVwZGF0ZSh7XHJcbiAgICAgIGRhdGE6IGZpbHRlcixcclxuICAgICAgYWN0aXZlOiAwLFxyXG4gICAgICB0ZXJtOiB2YWx1ZVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgeyB0ZXJtIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWFyY2gtbmFtZVwiPlxyXG4gICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgIGFyaWEtbGFiZWw9XCJTZWFyY2hcIlxyXG4gICAgICAgICAgdmFsdWU9e3Rlcm19XHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlYXJjaCBpbiBoZXJlLi4uXCJcclxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmRhdGFTZWFyY2h9XHJcbiAgICAgICAgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoQmFyO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoeyBkYXRhLCBhY3RpdmVVc2VyIH0pID0+IHtcclxuICBpZiAoIWRhdGEgfHwgIWRhdGFbYWN0aXZlVXNlcl0pIHJldHVybiA8aDM+Tm90aGluZyB3YXMgZm91bmQuLi48L2gzPjtcclxuXHJcbiAgY29uc3QgdXNlciA9IGRhdGFbYWN0aXZlVXNlcl07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInRodW1ibmFpbCBwb3NpdGlvbi1maXhlZCBtdC01XCI+XHJcbiAgICAgIDxpbWcgY2xhc3NOYW1lPVwiY2FyZC1pbWctdG9wXCIgc3JjPXtgaW1hZ2VzLyR7dXNlci5pbWFnZX0uc3ZnYH0gYWx0PXt1c2VyLmltYWdlfSAvPlxyXG5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aHVtYm5haWwtY2FwdGlvblwiPlxyXG4gICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ1c2VyLWluZm8gdGFibGUgdGFibGUtcmVzcG9uc2l2ZVwiPlxyXG4gICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgPHRkPk5hbWU6IDwvdGQ+XHJcbiAgICAgICAgICAgICAgPHRkPnt1c2VyLm5hbWV9PC90ZD5cclxuICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgIDx0ZD5BZ2U6PC90ZD5cclxuICAgICAgICAgICAgICA8dGQ+e3VzZXIuYWdlfTwvdGQ+XHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICA8dGQ+RmF2b3VyaXRlIGFuaW1hbDo8L3RkPlxyXG4gICAgICAgICAgICAgIDx0ZD57dXNlci5pbWFnZX08L3RkPlxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgPHRkPlBob25lOiA8L3RkPlxyXG4gICAgICAgICAgICAgIDx0ZD57dXNlci5waG9uZX08L3RkPlxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICA8L3RhYmxlPlxyXG5cclxuICAgICAgICA8ZGl2ID5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIlwiPjxiPlBocmF6ZTo8L2I+PC9zcGFuPlxyXG4gICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICA8YmxvY2txdW90ZSBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBtdC00XCI+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXF1b3RlLWxlZnQgbXItMiBhbGlnbi10b3BcIlxyXG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAge3VzZXIucGhyYXNlfVxyXG4gICAgICAgICAgICA8aHIgLz5cclxuICAgICAgICAgIDwvYmxvY2txdW90ZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoeyB1c2VyLCB1cGRhdGUsIGluZGV4LCBkYXRhIH0pID0+IHtcclxuICBjb25zdCB7IGltYWdlLCBuYW1lLCBhZ2UsIHBob25lIH0gPSB1c2VyO1xyXG5cclxuICBjb25zdCBoYW5kbGVEZWxldGVVc2VyID0gZSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCBuYW1lID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICBjb25zdCB1c2VyID0gZGF0YS5maW5kKHUgPT4ge1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgcmV0dXJuIHUuTmFtZSA9PSBuYW1lO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBuZXdEYXRhID0gZGF0YTtcclxuICAgIG5ld0RhdGEuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIGRlbGV0ZVVzZXIoYCR7YmFzZVVybH0vYXBpL3VzZXJzLyR7aW5kZXggKyAxfWAsIHVzZXIpXHJcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3VsdCAhPSB1bmRlZmluZWQgfHwgcmVzdWx0ICE9IG51bGwpIHtcclxuICAgICAgICAgIHVwZGF0ZSh7XHJcbiAgICAgICAgICAgIGRhdGE6IG5ld0RhdGFcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoXCJFcnJvcjpcIiwgZXJyb3IpKVxyXG4gICAgICAudGhlbihyZXNwb25zZSA9PiBjb25zb2xlLmxvZyhcIlN1Y2Nlc3M6XCIsIHJlc3BvbnNlKSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDx0ciBvbkNsaWNrPXsoKSA9PiB1cGRhdGUoeyBhY3RpdmU6IGluZGV4IH0pfT5cclxuICAgICAgPHRkIGNsYXNzTmFtZT1cImltYWdlLXZhbHVlXCI+XHJcbiAgICAgICAgPGltZyBzcmM9e2BpbWFnZXMvJHtpbWFnZX0uc3ZnYH0gYWx0PXtpbWFnZX0gY2xhc3NOYW1lPVwidXNlci1pbWFnZVwiIC8+XHJcbiAgICAgIDwvdGQ+XHJcbiAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lLXZhbHVlXCI+XHJcbiAgICAgICAgPGg0PntuYW1lfTwvaDQ+XHJcbiAgICAgIDwvdGQ+XHJcbiAgICAgIDx0ZCBjbGFzc05hbWU9XCJhZ2UtdmFsdWVcIj57YWdlfTwvdGQ+XHJcbiAgICAgIDx0ZCBjbGFzc05hbWU9XCJwaG9uZS12YWx1ZVwiPjgge3Bob25lfTwvdGQ+XHJcbiAgICAgIDx0ZD5cclxuICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICB2YWx1ZT17bmFtZX1cclxuICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZ1wiXHJcbiAgICAgICAgICBvbkNsaWNrPXtlID0+IGhhbmRsZURlbGV0ZVVzZXIoZSl9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgRGVsZXRlXHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgIDwvdGQ+XHJcbiAgICA8L3RyPlxyXG4gICk7XHJcbn07XHJcblxyXG5cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgVXNlckRhdGEgZnJvbSBcIi4vdXNlckRhdGFcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGRhdGEsIHVwZGF0ZSB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBpZiAoIWRhdGEpIHJldHVybiA8ZGl2PkxvYWRpbmcuLi48L2Rpdj47XHJcblxyXG4gICAgY29uc3QgdXNlcnMgPSBkYXRhLm1hcCgodXNlciwgaW5kZXgpID0+IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8VXNlckRhdGFcclxuICAgICAgICAgIHVzZXI9e3VzZXJ9XHJcbiAgICAgICAgICBpbmRleD17aW5kZXh9XHJcbiAgICAgICAgICBkYXRhPXtkYXRhfVxyXG4gICAgICAgICAga2V5PXtgdXNlciAtICR7aW5kZXh9YH1cclxuICAgICAgICAgIHVwZGF0ZT17dXBkYXRlfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8dGFibGUgY2xhc3NOYW1lPVwidXNlci1saXN0IHRhYmxlIHRhYmxlLXN0cmlwZWQgbXItMlwiPlxyXG4gICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgPHRoPkltYWdlPC90aD5cclxuICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxyXG4gICAgICAgICAgICA8dGg+QWdlPC90aD5cclxuICAgICAgICAgICAgPHRoPlBob25lPC90aD5cclxuICAgICAgICAgICAgPHRoPjwvdGg+XHJcbiAgICAgICAgICA8L3RyPlxyXG4gICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgPHRib2R5Pnt1c2Vyc308L3Rib2R5PlxyXG4gICAgICA8L3RhYmxlPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHsgdXBkYXRlLCBkYXRhLCBpbml0aWxEYXRhLCBpc1NvcnRlZCB9KSA9PiB7XHJcblxyXG4gIGNvbnN0IHNvcnQgPSB0eXBlID0+IHtcclxuICAgIGNvbnN0IGlzc29ydGVkID0gaXNTb3J0ZWRbdHlwZV07XHJcblxyXG4gICAgbGV0IGRpcmVjdGlvbiA9IGlzc29ydGVkID8gMSA6IC0xO1xyXG5cclxuICAgIGxldCBzb3J0ZWQgPSBkYXRhLnNsaWNlKCkuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICBpZiAoYVt0eXBlXSA9PT0gYlt0eXBlXSkgcmV0dXJuIDA7XHJcbiAgICAgIHJldHVybiBhW3R5cGVdID4gYlt0eXBlXSA/IGRpcmVjdGlvbiA6IGRpcmVjdGlvbiAqIC0xO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFwibmFtZVwiKSB7XHJcbiAgICAgIGNvbnN0IG5ld1NvcnRlZCA9IE9iamVjdC5hc3NpZ24oXHJcbiAgICAgICAge30sXHJcbiAgICAgICAgeyBuYW1lOiAhaXNTb3J0ZWRbXCJuYW1lXCJdLCBhZ2U6IGlzU29ydGVkW1wiYWdlXCJdIH1cclxuICAgICAgKTtcclxuICAgICAgdXBkYXRlKHtcclxuICAgICAgICBhY3RpdmVVc2VyOiAwLFxyXG4gICAgICAgIGRhdGE6IHNvcnRlZCxcclxuICAgICAgICBpc1NvcnRlZDogbmV3U29ydGVkXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSBcImFnZVwiKSB7XHJcbiAgICAgIGNvbnN0IG5ld1NvcnRlZCA9IE9iamVjdC5hc3NpZ24oXHJcbiAgICAgICAge30sXHJcbiAgICAgICAgeyBuYW1lOiBpc1NvcnRlZFtcIm5hbWVcIl0sIGFnZTogIWlzU29ydGVkW1wiYWdlXCJdIH1cclxuICAgICAgKTtcclxuICAgICAgdXBkYXRlKHtcclxuICAgICAgICBhY3RpdmVVc2VyOiAwLFxyXG4gICAgICAgIGRhdGE6IHNvcnRlZCxcclxuICAgICAgICBpc1NvcnRlZDogbmV3U29ydGVkXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lci1mbHVpZFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyBwbC0zIG10LTQgc29ydGVkLWJ1dHRvbnNcIj5cclxuICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWRlZmF1bHQgdGV4dC11cHBlcmNhc2UgbWItMiBzb3J0LWJ1dHRvbi1uYW1lXCJcclxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgc29ydChcIm5hbWVcIik7XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxpXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17XHJcbiAgICAgICAgICAgICAgaXNTb3J0ZWQubmFtZSA/IFwiZmEgZmEtc29ydC1hbHBoYS1kZXNjXCIgOiBcImZhIGZhLXNvcnQtYWxwaGEtYXNjXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIFNvcnQgTmFtZXNcclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWRlZmF1bHQgbXItMiB0ZXh0LXVwcGVyY2FzZSBzb3J0LWJ1dHRvbi1hZ2VcIlxyXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICBzb3J0KFwiYWdlXCIpO1xyXG4gICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8aVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9e1xyXG4gICAgICAgICAgICAgIGlzU29ydGVkLmFnZVxyXG4gICAgICAgICAgICAgICAgPyBcImZhIGZhLXNvcnQtbnVtZXJpYy1kZXNjXCJcclxuICAgICAgICAgICAgICAgIDogXCJmYSBmYS1zb3J0LW51bWVyaWMtYXNjXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIFNvcnQgQWdlc1xyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcbmltcG9ydCBzYXZlIGZyb20gJy4uL2FjdGlvbnMvc2F2ZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBZGRVc2VyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBuYW1lOiAnJyxcclxuICAgICAgYWdlOiAwLFxyXG4gICAgICBpbWFnZTogJycsXHJcbiAgICAgIHBob25lOiAnJyxcclxuICAgICAgcGhyYXNlOiAnJ1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaGFuZGxlU3VibWl0ID0gdGhpcy5oYW5kbGVTdWJtaXQuYmluZCh0aGlzKTtcclxuICAgIHRoaXMub25IYW5kbGVDaGFuZ2VOYW1lID0gdGhpcy5vbkhhbmRsZUNoYW5nZU5hbWUuYmluZCh0aGlzKTtcclxuICAgIHRoaXMub25IYW5kbGVDaGFuZ2VBZ2UgPSB0aGlzLm9uSGFuZGxlQ2hhbmdlQWdlLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLm9uSGFuZGxlQ2hhbmdlSW1hZ2UgPSB0aGlzLm9uSGFuZGxlQ2hhbmdlSW1hZ2UuYmluZCh0aGlzKTtcclxuICAgIHRoaXMub25IYW5kbGVDaGFuZ2VQaG9uZSA9IHRoaXMub25IYW5kbGVDaGFuZ2VQaG9uZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbkhhbmRsZUNoYW5nZVBocmFzZSA9IHRoaXMub25IYW5kbGVDaGFuZ2VQaHJhc2UuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgJCh0aGlzLm1vZGFsKS5tb2RhbCgnc2hvdycpO1xyXG4gICAgJCh0aGlzLm1vZGFsKS5vbignaGlkZGVuLmJzLm1vZGFsJywgdGhpcy5wcm9wcy5vbkNsaWNrKTtcclxuICB9XHJcblxyXG4gIHNhdmVVc2VyKGJhc2VVcmwsIGZvcm1EYXRhKSB7XHJcbiAgICBjb25zdCB7IHVwZGF0ZSwgZGF0YSB9ID0gdGhpcy5wcm9wcztcclxuICAgIHNhdmUoYmFzZVVybCwgZm9ybURhdGEpXHJcbiAgICAgIC50aGVuKHVzZXIgPT4ge1xyXG4gICAgICAgIHVwZGF0ZSh7XHJcbiAgICAgICAgICBkYXRhOiBbLi4uZGF0YSwgdXNlcl1cclxuICAgICAgICB9KTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yKSlcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gY29uc29sZS5sb2coJ1N1Y2Nlc3M6JywgcmVzcG9uc2UpKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVN1Ym1pdChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCBmb3JtID0ge1xyXG4gICAgICBuYW1lOiB0aGlzLnN0YXRlLm5hbWUsXHJcbiAgICAgIGFnZTogdGhpcy5zdGF0ZS5hZ2UsXHJcbiAgICAgIHBob25lOiB0aGlzLnN0YXRlLnBob25lLFxyXG4gICAgICBwaHJhc2U6IHRoaXMuc3RhdGUucGhyYXNlLFxyXG4gICAgICBpbWFnZTogdGhpcy5zdGF0ZS5pbWFnZVxyXG4gICAgfVxyXG4gICAgdGhpcy5zYXZlVXNlcihgJHtiYXNlVXJsfS9hcGkvdXNlcnNgLCBmb3JtKTtcclxuICAgICQodGhpcy5tb2RhbCkubW9kYWwoJ2hpZGUnKTtcclxuICB9XHJcblxyXG4gIG9uSGFuZGxlQ2hhbmdlTmFtZShlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCBuYW1lID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgbmFtZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIG9uSGFuZGxlQ2hhbmdlQWdlKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGFnZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGFnZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIG9uSGFuZGxlQ2hhbmdlSW1hZ2UoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgaW1hZ2UgPSBlLnRhcmdldC52YWx1ZTtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBpbWFnZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIG9uSGFuZGxlQ2hhbmdlUGhvbmUoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgcGhvbmUgPSBlLnRhcmdldC52YWx1ZTtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBwaG9uZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIG9uSGFuZGxlQ2hhbmdlUGhyYXNlKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IHBocmFzZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHBocmFzZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwgZmFkZSB1c2VyLWFkZC1mb3JtXCJcclxuICAgICAgICByZWY9e21vZGFsID0+IHRoaXMubW9kYWwgPSBtb2RhbH0gaWQ9XCJNb2RhbFwiXHJcbiAgICAgICAgdGFiSW5kZXg9XCItMVwiXHJcbiAgICAgICAgcm9sZT1cImRpYWxvZ1wiXHJcbiAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwiZXhhbXBsZU1vZGFsTGFiZWxcIlxyXG4gICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtZGlhbG9nXCIgcm9sZT1cImRvY3VtZW50XCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1oZWFkZXJcIiA+XHJcbiAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cIm1vZGFsLXRpdGxlIGZvcm0tdGl0bGVcIj5Vc2VyIGluZm9ybWF0aW9uPC9oND5cclxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJjbG9zZSBtbC0wXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+PC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWJvZHlcIj5cclxuICAgICAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9IGlkPVwiZm9ybU1vZGFsXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJyZWNpcGllbnQtbmFtZVwiIGNsYXNzTmFtZT1cImNvbC1mb3JtLWxhYmVsXCI+TmFtZTo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uSGFuZGxlQ2hhbmdlTmFtZX1cclxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwiTmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJyZWNpcGllbnQtbmFtZVwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInJlY2lwaWVudC1hZ2VcIiBjbGFzc05hbWU9XCJjb2wtZm9ybS1sYWJlbFwiPkFnZTo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5hZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25IYW5kbGVDaGFuZ2VBZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cIkFnZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJyZWNpcGllbnQtYWdlXCIgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwicmVjaXBpZW50LWFuaW1hbFwiIGNsYXNzTmFtZT1cImNvbC1mb3JtLWxhYmVsXCI+RmF2b3VyaXRlIGFuaW1hbDo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5pbWFnZX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkhhbmRsZUNoYW5nZUltYWdlfVxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU9XCJJbWFnZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJyZWNpcGllbnQtYW5pbWFsXCIgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwicmVjaXBpZW50LXBob25lXCIgY2xhc3NOYW1lPVwiY29sLWZvcm0tbGFiZWxcIj5QaG9uZTo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5waG9uZX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkhhbmRsZUNoYW5nZVBob25lfVxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU9XCJQaG9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJyZWNpcGllbnQtcGhvbmVcIiAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJtZXNzYWdlLXBocmFzZVwiIGNsYXNzTmFtZT1cImNvbC1mb3JtLWxhYmVsXCI+UGhyYXNlOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnBocmFzZX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkhhbmRsZUNoYW5nZVBocmFzZX1cclxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwiUGhyYXNlXCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxyXG4gICAgICAgICAgICAgICAgICAgIGlkPVwibWVzc2FnZS1waHJhc2VcIj48L3RleHRhcmVhPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9mb3JtPlxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWZvb3RlclwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0XCJcclxuICAgICAgICAgICAgICAgICAgZGF0YS1kaXNtaXNzPVwibW9kYWxcIlxyXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmNsb3NlQWRkRm9ybX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgQ2xvc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVTdWJtaXR9XHJcbiAgICAgICAgICAgICAgICA+U3VibWl0XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzYXZlKHVybCwgZGF0YSkge1xyXG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICAgICAgY2FjaGU6ICdjYWNoZScsXHJcbiAgICAgICAgbW9kZTogJ2NvcnMnLFxyXG4gICAgICAgIHJlZGlyZWN0OiAnZm9sbG93JyxcclxuICAgICAgICByZWZlcnJlcjogJ2NsaWVudCdcclxuICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gbmV3IEVycm9yKFwiU29tZXRoaW5nIGhhcyBnb25lIHdyb25nLCB0aGUgZGF0YSBoYXMgbm90IGJlaW5nIGFkZGVkXCIpKTtcclxufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbXBvcnQgU2VhcmNoQmFyIGZyb20gXCIuL3NlYXJjaEJhclwiO1xyXG5pbXBvcnQgQWN0aXZlVXNlciBmcm9tIFwiLi9hY3RpdmVVc2VyXCI7XHJcbmltcG9ydCBVc2VyTGlzdCBmcm9tIFwiLi91c2VyTGlzdFwiO1xyXG5pbXBvcnQgVG9vbEJhciBmcm9tIFwiLi90b29sQmFyXCI7XHJcbmltcG9ydCBBZGRVc2VyIGZyb20gXCIuL2FkZFVzZXJcIjtcclxuXHJcbmltcG9ydCBsb2FkIGZyb20gXCIuLi9hY3Rpb25zL2xvYWRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBkYXRhOiBudWxsLFxyXG4gICAgICBhY3RpdmVVc2VyOiAwLFxyXG4gICAgICB0ZXJtOiBcIlwiLFxyXG4gICAgICBpc1NvcnRlZDogeyBuYW1lOiB0cnVlLCBhZ2U6IHRydWUgfSxcclxuICAgICAgc2hvd0FkZFVzZXI6IGZhbHNlXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2hvd0FkZEZvcm0gPSB0aGlzLnNob3dBZGRGb3JtLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLmNsb3NlQWRkRm9ybSA9IHRoaXMuY2xvc2VBZGRGb3JtLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBsb2FkRGF0YSgpIHtcclxuICAgIGNvbnN0IHsgZGF0YSB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBsb2FkKGRhdGEpXHJcbiAgICAgIC50aGVuKHVzZXJzID0+IHtcclxuICAgICAgICB0aGlzLmluaXRpYWxEYXRhID0gSlNPTi5wYXJzZSh1c2Vycyk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBkYXRhOiB0aGlzLmluaXRpYWxEYXRhXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLmxvYWREYXRhKCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVEYXRhID0gc3RhdGUgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XHJcbiAgfTtcclxuXHJcbiAgc2hvd0FkZEZvcm0oKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgc2hvd0FkZFVzZXI6ICF0aGlzLnN0YXRlLnNob3dBZGRVc2VyXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNsb3NlQWRkRm9ybSgpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBzaG93QWRkVXNlcjogIXRoaXMuc3RhdGUuc2hvd0FkZFVzZXJcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgeyBhY3RpdmVVc2VyLCB0ZXJtLCBkYXRhLCBpc1NvcnRlZCwgc2hvd0FkZFVzZXIgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFwcCBjb250YWluZXItZmx1aWRcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyBtdC00XCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMlwiPlxyXG4gICAgICAgICAgICA8U2VhcmNoQmFyXHJcbiAgICAgICAgICAgICAgdGVybT17dGVybX1cclxuICAgICAgICAgICAgICBkYXRhPXt0aGlzLmluaXRpYWxEYXRhfVxyXG4gICAgICAgICAgICAgIHVwZGF0ZT17dGhpcy51cGRhdGVEYXRhfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgbXQtMiBtYi0yXCI+XHJcbiAgICAgICAgICA8VG9vbEJhclxyXG4gICAgICAgICAgICB1cGRhdGU9e3RoaXMudXBkYXRlRGF0YX1cclxuICAgICAgICAgICAgZGF0YT17ZGF0YX1cclxuICAgICAgICAgICAgaXNTb3J0ZWQ9e2lzU29ydGVkfVxyXG4gICAgICAgICAgICBpbml0aWFsRGF0YT17dGhpcy5pbml0aWFsRGF0YX1cclxuICAgICAgICAgICAgYWN0aXZlVXNlcj17YWN0aXZlVXNlcn1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWRlZmF1bHQgbWwtMyB0ZXh0LXVwcGVyY2FzZSBhZGQtbmV3LXVzZXIgZ2xvYmFsLWJ1dHRvbnNcIlxyXG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnNob3dBZGRGb3JtfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICBBZGQgbmV3IHVzZXJcclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IHVzZXItbGlzdC1kYXRhXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtc20tOCBjb2wtbWQtOSBjb2wtbGctMTAgdXNlci1saXN0XCI+XHJcbiAgICAgICAgICAgIDxVc2VyTGlzdCBkYXRhPXtkYXRhfSB1cGRhdGU9e3RoaXMudXBkYXRlRGF0YX0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtc20tNCBjb2wtbWQtMyBjb2wtbGctMiBhY3RpdmUtdXNlclwiPlxyXG4gICAgICAgICAgICA8QWN0aXZlVXNlciBhY3RpdmVVc2VyPXthY3RpdmVVc2VyfSBkYXRhPXtkYXRhfSAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHNob3dBZGRVc2VyID8gXHJcbiAgICAgICAgICAgIDxBZGRVc2VyXHJcbiAgICAgICAgICAgICAgdXBkYXRlPXt0aGlzLnVwZGF0ZURhdGF9XHJcbiAgICAgICAgICAgICAgc2hvd0FkZFVzZXI9e3Nob3dBZGRVc2VyfVxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuY2xvc2VBZGRGb3JtfVxyXG4gICAgICAgICAgICAgIGRhdGE9e2RhdGF9IFxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgOiBudWxsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgdXJsID0+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIHJlcXVlc3Qub3BlbignR0VUJywgdXJsLCB0cnVlKTtcclxuXHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xyXG4gICAgICAgICAgICByZXF1ZXN0LnN0YXR1cyA+PTIwMCAmJiByZXF1ZXN0LnN0YXR1cyA8IDQwMFxyXG4gICAgICAgICAgICA/IHJlc29sdmUocmVxdWVzdC5yZXNwb25zZVRleHQpXHJcbiAgICAgICAgICAgIDogcmVqZWN0KG5ldyBFcnJvcigpYFJlYXVlc3QgZmFpbGVkOiAke3JlcXVlc3Quc3RhdHVzVGV4dH1gKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICgpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignTmV0d29yayBlcnJvcicpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVxdWVzdC5zZW5kKCk7XHJcbiAgICB9KTtcclxufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcbmltcG9ydCBBcHAgZnJvbSBcIi4vY29tcG9uZW50cy9hcHBcIjtcclxuXHJcbmltcG9ydCAnanF1ZXJ5JztcclxuaW1wb3J0ICdib290c3RyYXAnO1xyXG5cclxuUmVhY3RET00ucmVuZGVyKDxBcHAgZGF0YT1cImRhdGEuanNvblwiIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9