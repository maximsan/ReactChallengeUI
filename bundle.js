!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!E[e]||!_[e])return;for(var n in _[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(m[n]=t[n]);0==--v&&0===y&&C()}(e,n),t&&t(e,n)};var n,r=!0,i="b314862ca72c8a8acc2b",o=1e4,a={},l=[],s=[];function u(e){var t=k[e];if(!t)return O;var r=function(r){return t.hot.active?(k[r]?-1===k[r].parents.indexOf(e)&&k[r].parents.push(e):(l=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),l=[]),O(r)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return O[e]},set:function(t){O[e]=t}}};for(var o in O)Object.prototype.hasOwnProperty.call(O,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(e){return"ready"===d&&p("prepare"),y++,O.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===d&&(b[e]||x(e),0===y&&0===v&&C())}},r.t=function(e,t){return 1&t&&(e=r(e)),O.t(e,-2&t)},r}function c(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:w,apply:S,status:function(e){if(!e)return d;f.push(e)},addStatusHandler:function(e){f.push(e)},removeStatusHandler:function(e){var t=f.indexOf(e);t>=0&&f.splice(t,1)},data:a[e]};return n=void 0,t}var f=[],d="idle";function p(e){d=e;for(var t=0;t<f.length;t++)f[t].call(null,e)}var h,m,g,v=0,y=0,b={},_={},E={};function T(e){return+e+""===e?+e:e}function w(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(t=o,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=O.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return p("idle"),null;_={},b={},E=e.c,g=e.h,p("prepare");var t=new Promise(function(e,t){h={resolve:e,reject:t}});m={};return x(0),"prepare"===d&&0===y&&0===v&&C(),t});var t}function x(e){E[e]?(_[e]=!0,v++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=O.p+""+e+"."+i+".hot-update.js",document.head.appendChild(t)}(e)):b[e]=!0}function C(){p("ready");var e=h;if(h=null,e)if(r)Promise.resolve().then(function(){return S(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in m)Object.prototype.hasOwnProperty.call(m,n)&&t.push(T(n));e.resolve(t)}}function S(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var n,r,o,s,u;function c(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var i=r.pop(),o=i.id,a=i.chain;if((s=k[o])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var l=0;l<s.parents.length;l++){var u=s.parents[l],c=k[u];if(c){if(c.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([u]),moduleId:o,parentId:u};-1===t.indexOf(u)&&(c.hot._acceptedDependencies[o]?(n[u]||(n[u]=[]),f(n[u],[o])):(delete n[u],t.push(u),r.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var h={},v=[],y={},b=function(){console.warn("[HMR] unexpected require("+w.moduleId+") to disposed module")};for(var _ in m)if(Object.prototype.hasOwnProperty.call(m,_)){var w;u=T(_);var x=!1,C=!1,S=!1,N="";switch((w=m[_]?c(u):{type:"disposed",moduleId:_}).chain&&(N="\nUpdate propagation: "+w.chain.join(" -> ")),w.type){case"self-declined":t.onDeclined&&t.onDeclined(w),t.ignoreDeclined||(x=new Error("Aborted because of self decline: "+w.moduleId+N));break;case"declined":t.onDeclined&&t.onDeclined(w),t.ignoreDeclined||(x=new Error("Aborted because of declined dependency: "+w.moduleId+" in "+w.parentId+N));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(w),t.ignoreUnaccepted||(x=new Error("Aborted because "+u+" is not accepted"+N));break;case"accepted":t.onAccepted&&t.onAccepted(w),C=!0;break;case"disposed":t.onDisposed&&t.onDisposed(w),S=!0;break;default:throw new Error("Unexception type "+w.type)}if(x)return p("abort"),Promise.reject(x);if(C)for(u in y[u]=m[u],f(v,w.outdatedModules),w.outdatedDependencies)Object.prototype.hasOwnProperty.call(w.outdatedDependencies,u)&&(h[u]||(h[u]=[]),f(h[u],w.outdatedDependencies[u]));S&&(f(v,[w.moduleId]),y[u]=b)}var A,D=[];for(r=0;r<v.length;r++)u=v[r],k[u]&&k[u].hot._selfAccepted&&D.push({module:u,errorHandler:k[u].hot._selfAccepted});p("dispose"),Object.keys(E).forEach(function(e){!1===E[e]&&function(e){delete installedChunks[e]}(e)});for(var I,P,L=v.slice();L.length>0;)if(u=L.pop(),s=k[u]){var R={},j=s.hot._disposeHandlers;for(o=0;o<j.length;o++)(n=j[o])(R);for(a[u]=R,s.hot.active=!1,delete k[u],delete h[u],o=0;o<s.children.length;o++){var H=k[s.children[o]];H&&((A=H.parents.indexOf(u))>=0&&H.parents.splice(A,1))}}for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(s=k[u]))for(P=h[u],o=0;o<P.length;o++)I=P[o],(A=s.children.indexOf(I))>=0&&s.children.splice(A,1);for(u in p("apply"),i=g,y)Object.prototype.hasOwnProperty.call(y,u)&&(e[u]=y[u]);var M=null;for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(s=k[u])){P=h[u];var F=[];for(r=0;r<P.length;r++)if(I=P[r],n=s.hot._acceptedDependencies[I]){if(-1!==F.indexOf(n))continue;F.push(n)}for(r=0;r<F.length;r++){n=F[r];try{n(P)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:P[r],error:e}),t.ignoreErrored||M||(M=e)}}}for(r=0;r<D.length;r++){var U=D[r];u=U.module,l=[u];try{O(u)}catch(e){if("function"==typeof U.errorHandler)try{U.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||M||(M=n),M||(M=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||M||(M=e)}}return M?(p("fail"),Promise.reject(M)):(p("idle"),new Promise(function(e){e(v)}))}var k={};function O(t){if(k[t])return k[t].exports;var n=k[t]={i:t,l:!1,exports:{},hot:c(t),parents:(s=l,l=[],s),children:[]};return e[t].call(n.exports,n,n.exports,u(t)),n.l=!0,n.exports}O.m=e,O.c=k,O.d=function(e,t,n){O.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},O.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},O.t=function(e,t){if(1&t&&(e=O(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(O.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)O.d(n,r,function(t){return e[t]}.bind(null,r));return n},O.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return O.d(t,"a",t),t},O.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},O.p="/",O.h=function(){return i},u(11)(O.s=11)}([function(e,t,n){"use strict";e.exports=n(5)},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,i){"use strict";var o=[],a=n.document,l=Object.getPrototypeOf,s=o.slice,u=o.concat,c=o.push,f=o.indexOf,d={},p=d.toString,h=d.hasOwnProperty,m=h.toString,g=m.call(Object),v={};function y(e,t){var n=(t=t||a).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}var b=function(e,t){return new b.fn.init(e,t)},_=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,E=/^-ms-/,T=/-([a-z])/g,w=function(e,t){return t.toUpperCase()};function x(e){var t=!!e&&"length"in e&&e.length,n=b.type(e);return"function"!==n&&!b.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}b.fn=b.prototype={jquery:"3.2.1",constructor:b,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return b.each(this,e)},map:function(e){return this.pushStack(b.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},b.extend=b.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},l=1,s=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[l]||{},l++),"object"==typeof a||b.isFunction(a)||(a={}),l===s&&(a=this,l--);l<s;l++)if(null!=(e=arguments[l]))for(t in e)n=a[t],a!==(r=e[t])&&(u&&r&&(b.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&b.isPlainObject(n)?n:{},a[t]=b.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},b.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===b.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=b.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e))&&(!(t=l(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&m.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e},globalEval:function(e){y(e)},camelCase:function(e){return e.replace(E,"ms-").replace(T,w)},each:function(e,t){var n,r=0;if(x(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(_,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(x(Object(e))?b.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(x(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return u.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),b.isFunction(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||b.guid++,i},now:Date.now,support:v}),"function"==typeof Symbol&&(b.fn[Symbol.iterator]=o[Symbol.iterator]),b.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){d["[object "+t+"]"]=t.toLowerCase()});var C=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,r,i,o,a,l,s,u,c,f,d,p,h,m,g,v,y,b,_="sizzle"+1*new Date,E=e.document,T=0,w=0,x=ae(),C=ae(),S=ae(),k=function(e,t){return e===t&&(f=!0),0},O={}.hasOwnProperty,N=[],A=N.pop,D=N.push,I=N.push,P=N.slice,L=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",M="\\["+j+"*("+H+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+j+"*\\]",F=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",U=new RegExp(j+"+","g"),W=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),V=new RegExp("^"+j+"*,"+j+"*"),B=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),z=new RegExp("="+j+"*([^\\]'\"]*?)"+j+"*\\]","g"),q=new RegExp(F),G=new RegExp("^"+H+"$"),$={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+j+"?|("+j+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){d()},ie=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{I.apply(N=P.call(E.childNodes),E.childNodes),N[E.childNodes.length].nodeType}catch(e){I={apply:N.length?function(e,t){D.apply(e,P.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function oe(e,t,r,i){var o,l,u,c,f,h,v,y=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&((t?t.ownerDocument||t:E)!==p&&d(t),t=t||p,m)){if(11!==T&&(f=X.exec(e)))if(o=f[1]){if(9===T){if(!(u=t.getElementById(o)))return r;if(u.id===o)return r.push(u),r}else if(y&&(u=y.getElementById(o))&&b(t,u)&&u.id===o)return r.push(u),r}else{if(f[2])return I.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!g||!g.test(e))){if(1!==T)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=_),l=(h=a(e)).length;l--;)h[l]="#"+c+" "+ve(h[l]);v=h.join(","),y=J.test(e)&&me(t.parentNode)||t}if(v)try{return I.apply(r,y.querySelectorAll(v)),r}catch(e){}finally{c===_&&t.removeAttribute("id")}}}return s(e.replace(W,"$1"),t,r,i)}function ae(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function le(e){return e[_]=!0,e}function se(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return le(function(t){return t=+t,le(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},d=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:E;return a!==p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,m=!o(p),E!==p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=se(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=se(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Y.test(p.getElementsByClassName),n.getById=se(function(e){return h.appendChild(e).id=_,!p.getElementsByName||!p.getElementsByName(_).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=Y.test(p.querySelectorAll))&&(se(function(e){h.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+j+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+j+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+_+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||g.push(".#.+[+~]")}),se(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+j+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=Y.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&se(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",F)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Y.test(h.compareDocumentPosition),b=t||Y.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},k=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===p||e.ownerDocument===E&&b(E,e)?-1:t===p||t.ownerDocument===E&&b(E,t)?1:c?L(c,e)-L(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],l=[t];if(!i||!o)return e===p?-1:t===p?1:i?-1:o?1:c?L(c,e)-L(c,t):0;if(i===o)return ce(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[r]===l[r];)r++;return r?ce(a[r],l[r]):a[r]===E?-1:l[r]===E?1:0},p):p},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&d(e),t=t.replace(z,"='$1']"),n.matchesSelector&&m&&!S[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,p,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==p&&d(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==p&&d(e);var i=r.attrHandle[t.toLowerCase()],o=i&&O.call(r.attrHandle,t.toLowerCase())?i(e,t,!m):void 0;return void 0!==o?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(k),f){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return c=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:le,match:$,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return $.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&q.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|"+j+")"+e+"("+j+"|$)"))&&x(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(U," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,s){var u,c,f,d,p,h,m=o!==a?"nextSibling":"previousSibling",g=t.parentNode,v=l&&t.nodeName.toLowerCase(),y=!s&&!l,b=!1;if(g){if(o){for(;m;){for(d=t;d=d[m];)if(l?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&y){for(b=(p=(u=(c=(f=(d=g)[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===T&&u[1])&&u[2],d=p&&g.childNodes[p];d=++p&&d&&d[m]||(b=p=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){c[e]=[T,p,b];break}}else if(y&&(b=p=(u=(c=(f=(d=t)[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===T&&u[1]),!1===b)for(;(d=++p&&d&&d[m]||(b=p=0)||h.pop())&&((l?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(y&&((c=(f=d[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[T,b]),d!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[_]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=L(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:le(function(e){var t=[],n=[],r=l(e.replace(W,"$1"));return r[_]?le(function(e,t,n,i){for(var o,a=r(e,null,i,[]),l=e.length;l--;)(o=a[l])&&(e[l]=!(t[l]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:le(function(e){return function(t){return oe(e,t).length>0}}),contains:le(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:le(function(e){return G.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=de(t);function ge(){}function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,l=w++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,s){var u,c,f,d=[T,l];if(s){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,s))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(c=(f=t[_]||(t[_]={}))[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=c[o])&&u[0]===T&&u[1]===l)return d[2]=u[2];if(c[o]=d,d[2]=e(t,n,s))return!0}return!1}}function be(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function _e(e,t,n,r,i){for(var o,a=[],l=0,s=e.length,u=null!=t;l<s;l++)(o=e[l])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(l)));return a}function Ee(e,t,n,r,i,o){return r&&!r[_]&&(r=Ee(r)),i&&!i[_]&&(i=Ee(i,o)),le(function(o,a,l,s){var u,c,f,d=[],p=[],h=a.length,m=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}(t||"*",l.nodeType?[l]:l,[]),g=!e||!o&&t?m:_e(m,d,e,l,s),v=n?i||(o?e:h||r)?[]:a:g;if(n&&n(g,v,l,s),r)for(u=_e(v,p),r(u,[],l,s),c=u.length;c--;)(f=u[c])&&(v[p[c]]=!(g[p[c]]=f));if(o){if(i||e){if(i){for(u=[],c=v.length;c--;)(f=v[c])&&u.push(g[c]=f);i(null,v=[],u,s)}for(c=v.length;c--;)(f=v[c])&&(u=i?L(o,f):d[c])>-1&&(o[u]=!(a[u]=f))}}else v=_e(v===a?v.splice(h,v.length):v),i?i(null,a,v,s):I.apply(a,v)})}function Te(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],l=a||r.relative[" "],s=a?1:0,c=ye(function(e){return e===t},l,!0),f=ye(function(e){return L(t,e)>-1},l,!0),d=[function(e,n,r){var i=!a&&(r||n!==u)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,i}];s<o;s++)if(n=r.relative[e[s].type])d=[ye(be(d),n)];else{if((n=r.filter[e[s].type].apply(null,e[s].matches))[_]){for(i=++s;i<o&&!r.relative[e[i].type];i++);return Ee(s>1&&be(d),s>1&&ve(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(W,"$1"),n,s<i&&Te(e.slice(s,i)),i<o&&Te(e=e.slice(i)),i<o&&ve(e))}d.push(n)}return be(d)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,a=oe.tokenize=function(e,t){var n,i,o,a,l,s,u,c=C[e+" "];if(c)return t?0:c.slice(0);for(l=e,s=[],u=r.preFilter;l;){for(a in n&&!(i=V.exec(l))||(i&&(l=l.slice(i[0].length)||l),s.push(o=[])),n=!1,(i=B.exec(l))&&(n=i.shift(),o.push({value:n,type:i[0].replace(W," ")}),l=l.slice(n.length)),r.filter)!(i=$[a].exec(l))||u[a]&&!(i=u[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),l=l.slice(n.length));if(!n)break}return t?l.length:l?oe.error(e):C(e,s).slice(0)},l=oe.compile=function(e,t){var n,i=[],o=[],l=S[e+" "];if(!l){for(t||(t=a(e)),n=t.length;n--;)(l=Te(t[n]))[_]?i.push(l):o.push(l);(l=S(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,l,s,c){var f,h,g,v=0,y="0",b=o&&[],_=[],E=u,w=o||i&&r.find.TAG("*",c),x=T+=null==E?1:Math.random()||.1,C=w.length;for(c&&(u=a===p||a||c);y!==C&&null!=(f=w[y]);y++){if(i&&f){for(h=0,a||f.ownerDocument===p||(d(f),l=!m);g=e[h++];)if(g(f,a||p,l)){s.push(f);break}c&&(T=x)}n&&((f=!g&&f)&&v--,o&&b.push(f))}if(v+=y,n&&y!==v){for(h=0;g=t[h++];)g(b,_,a,l);if(o){if(v>0)for(;y--;)b[y]||_[y]||(_[y]=A.call(s));_=_e(_)}I.apply(s,_),c&&!o&&_.length>0&&v+t.length>1&&oe.uniqueSort(s)}return c&&(T=x,u=E),b};return n?le(o):o}(o,i))).selector=e}return l},s=oe.select=function(e,t,n,i){var o,s,u,c,f,d="function"==typeof e&&e,p=!i&&a(e=d.selector||e);if(n=n||[],1===p.length){if((s=p[0]=p[0].slice(0)).length>2&&"ID"===(u=s[0]).type&&9===t.nodeType&&m&&r.relative[s[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(Z,ee),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(s.shift().value.length)}for(o=$.needsContext.test(e)?0:s.length;o--&&(u=s[o],!r.relative[c=u.type]);)if((f=r.find[c])&&(i=f(u.matches[0].replace(Z,ee),J.test(s[0].type)&&me(t.parentNode)||t))){if(s.splice(o,1),!(e=i.length&&ve(s)))return I.apply(n,i),n;break}}return(d||l(e,p))(i,t,!m,n,!t||J.test(e)&&me(t.parentNode)||t),n},n.sortStable=_.split("").sort(k).join("")===_,n.detectDuplicates=!!f,d(),n.sortDetached=se(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),se(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&se(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),se(function(e){return null==e.getAttribute("disabled")})||ue(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(n);b.find=C,b.expr=C.selectors,b.expr[":"]=b.expr.pseudos,b.uniqueSort=b.unique=C.uniqueSort,b.text=C.getText,b.isXMLDoc=C.isXML,b.contains=C.contains,b.escapeSelector=C.escape;var S=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&b(e).is(n))break;r.push(e)}return r},k=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},O=b.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,D=/^.[^:#\[\.,]*$/;function I(e,t,n){return b.isFunction(t)?b.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?b.grep(e,function(e){return e===t!==n}):"string"!=typeof t?b.grep(e,function(e){return f.call(t,e)>-1!==n}):D.test(t)?b.filter(t,e,n):(t=b.filter(t,e),b.grep(e,function(e){return f.call(t,e)>-1!==n&&1===e.nodeType}))}b.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?b.find.matchesSelector(r,e)?[r]:[]:b.find.matches(e,b.grep(t,function(e){return 1===e.nodeType}))},b.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(b(e).filter(function(){for(t=0;t<r;t++)if(b.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)b.find(e,i[t],n);return r>1?b.uniqueSort(n):n},filter:function(e){return this.pushStack(I(this,e||[],!1))},not:function(e){return this.pushStack(I(this,e||[],!0))},is:function(e){return!!I(this,"string"==typeof e&&O.test(e)?b(e):e||[],!1).length}});var P,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(b.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||P,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof b?t[0]:t,b.merge(this,b.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),A.test(r[1])&&b.isPlainObject(t))for(r in t)b.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=a.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b.isFunction(e)?void 0!==n.ready?n.ready(e):e(b):b.makeArray(e,this)}).prototype=b.fn,P=b(a);var R=/^(?:parents|prev(?:Until|All))/,j={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}b.fn.extend({has:function(e){var t=b(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(b.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&b(e);if(!O.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&b.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?b.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?f.call(b(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(b.uniqueSort(b.merge(this.get(),b(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return N(e,"iframe")?e.contentDocument:(N(e,"template")&&(e=e.content||e),b.merge([],e.childNodes))}},function(e,t){b.fn[e]=function(n,r){var i=b.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=b.filter(r,i)),this.length>1&&(j[e]||b.uniqueSort(i),R.test(e)&&i.reverse()),this.pushStack(i)}});var M=/[^\x20\t\r\n\f]+/g;function F(e){return e}function U(e){throw e}function W(e,t,n,r){var i;try{e&&b.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&b.isFunction(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}b.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return b.each(e.match(M)||[],function(e,n){t[n]=!0}),t}(e):b.extend({},e);var t,n,r,i,o=[],a=[],l=-1,s=function(){for(i=i||e.once,r=t=!0;a.length;l=-1)for(n=a.shift();++l<o.length;)!1===o[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(l=o.length-1,a.push(n)),function t(n){b.each(n,function(n,r){b.isFunction(r)?e.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==b.type(r)&&t(r)})}(arguments),n&&!t&&s()),this},remove:function(){return b.each(arguments,function(e,t){for(var n;(n=b.inArray(t,o,n))>-1;)o.splice(n,1),n<=l&&l--}),this},has:function(e){return e?b.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||s()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},b.extend({Deferred:function(e){var t=[["notify","progress",b.Callbacks("memory"),b.Callbacks("memory"),2],["resolve","done",b.Callbacks("once memory"),b.Callbacks("once memory"),0,"resolved"],["reject","fail",b.Callbacks("once memory"),b.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return b.Deferred(function(n){b.each(t,function(t,r){var i=b.isFunction(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&b.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,r,i){var o=0;function a(e,t,r,i){return function(){var l=this,s=arguments,u=function(){var n,u;if(!(e<o)){if((n=r.apply(l,s))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,b.isFunction(u)?i?u.call(n,a(o,t,F,i),a(o,t,U,i)):(o++,u.call(n,a(o,t,F,i),a(o,t,U,i),a(o,t,F,t.notifyWith))):(r!==F&&(l=void 0,s=[n]),(i||t.resolveWith)(l,s))}},c=i?u:function(){try{u()}catch(n){b.Deferred.exceptionHook&&b.Deferred.exceptionHook(n,c.stackTrace),e+1>=o&&(r!==U&&(l=void 0,s=[n]),t.rejectWith(l,s))}};e?c():(b.Deferred.getStackHook&&(c.stackTrace=b.Deferred.getStackHook()),n.setTimeout(c))}}return b.Deferred(function(n){t[0][3].add(a(0,n,b.isFunction(i)?i:F,n.notifyWith)),t[1][3].add(a(0,n,b.isFunction(e)?e:F)),t[2][3].add(a(0,n,b.isFunction(r)?r:U))}).promise()},promise:function(e){return null!=e?b.extend(e,i):i}},o={};return b.each(t,function(e,n){var a=n[2],l=n[5];i[n[1]]=a.add,l&&a.add(function(){r=l},t[3-e][2].disable,t[0][2].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=s.call(arguments),o=b.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(W(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||b.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)W(i[n],a(n),o.reject);return o.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;b.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&V.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},b.readyException=function(e){n.setTimeout(function(){throw e})};var B=b.Deferred();function z(){a.removeEventListener("DOMContentLoaded",z),n.removeEventListener("load",z),b.ready()}b.fn.ready=function(e){return B.then(e).catch(function(e){b.readyException(e)}),this},b.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--b.readyWait:b.isReady)||(b.isReady=!0,!0!==e&&--b.readyWait>0||B.resolveWith(a,[b]))}}),b.ready.then=B.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(b.ready):(a.addEventListener("DOMContentLoaded",z),n.addEventListener("load",z));var q=function(e,t,n,r,i,o,a){var l=0,s=e.length,u=null==n;if("object"===b.type(n))for(l in i=!0,n)q(e,t,l,n[l],!0,o,a);else if(void 0!==r&&(i=!0,b.isFunction(r)||(a=!0),u&&(a?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(b(e),n)})),t))for(;l<s;l++)t(e[l],n,a?r:r.call(e[l],l,t(e[l],n)));return i?e:u?t.call(e):s?t(e[0],n):o},G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function $(){this.expando=b.expando+$.uid++}$.uid=1,$.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[b.camelCase(t)]=n;else for(r in t)i[b.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][b.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(b.camelCase):(t=b.camelCase(t))in r?[t]:t.match(M)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||b.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!b.isEmptyObject(t)}};var K=new $,Q=new $,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,X=/[A-Z]/g;function J(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(X,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Y.test(e)?JSON.parse(e):e)}(n)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}b.extend({hasData:function(e){return Q.hasData(e)||K.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),b.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Q.get(o),1===o.nodeType&&!K.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=b.camelCase(r.slice(5)),J(o,r,i[r]));K.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Q.set(this,e)}):q(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=Q.get(o,e))?n:void 0!==(n=J(o,e))?n:void 0;this.each(function(){Q.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Q.remove(this,e)})}}),b.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=K.get(e,t),n&&(!r||Array.isArray(n)?r=K.access(e,t,b.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=b.queue(e,t),r=n.length,i=n.shift(),o=b._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){b.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:b.Callbacks("once memory").add(function(){K.remove(e,[t+"queue",n])})})}}),b.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?b.queue(this[0],e):void 0===t?this:this.each(function(){var n=b.queue(this,e,t);b._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&b.dequeue(this,e)})},dequeue:function(e){return this.each(function(){b.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=b.Deferred(),o=this,a=this.length,l=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=K.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(l));return l(),i.promise(t)}});var Z=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ee=new RegExp("^(?:([+-])=|)("+Z+")([a-z%]*)$","i"),te=["Top","Right","Bottom","Left"],ne=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&b.contains(e.ownerDocument,e)&&"none"===b.css(e,"display")},re=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function ie(e,t,n,r){var i,o=1,a=20,l=r?function(){return r.cur()}:function(){return b.css(e,t,"")},s=l(),u=n&&n[3]||(b.cssNumber[t]?"":"px"),c=(b.cssNumber[t]||"px"!==u&&+s)&&ee.exec(b.css(e,t));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+s||1;do{c/=o=o||".5",b.style(e,t,c+u)}while(o!==(o=l()/s)&&1!==o&&--a)}return n&&(c=+c||+s||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var oe={};function ae(e){var t,n=e.ownerDocument,r=e.nodeName,i=oe[r];return i||(t=n.body.appendChild(n.createElement(r)),i=b.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),oe[r]=i,i)}function le(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=K.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ne(r)&&(i[o]=ae(r))):"none"!==n&&(i[o]="none",K.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}b.fn.extend({show:function(){return le(this,!0)},hide:function(){return le(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ne(this)?b(this).show():b(this).hide()})}});var se=/^(?:checkbox|radio)$/i,ue=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ce=/^$|\/(?:java|ecma)script/i,fe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function de(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?b.merge([e],n):n}function pe(e,t){for(var n=0,r=e.length;n<r;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}fe.optgroup=fe.option,fe.tbody=fe.tfoot=fe.colgroup=fe.caption=fe.thead,fe.th=fe.td;var he,me,ge=/<|&#?\w+;/;function ve(e,t,n,r,i){for(var o,a,l,s,u,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===b.type(o))b.merge(d,o.nodeType?[o]:o);else if(ge.test(o)){for(a=a||f.appendChild(t.createElement("div")),l=(ue.exec(o)||["",""])[1].toLowerCase(),s=fe[l]||fe._default,a.innerHTML=s[1]+b.htmlPrefilter(o)+s[2],c=s[0];c--;)a=a.lastChild;b.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(o));for(f.textContent="",p=0;o=d[p++];)if(r&&b.inArray(o,r)>-1)i&&i.push(o);else if(u=b.contains(o.ownerDocument,o),a=de(f.appendChild(o),"script"),u&&pe(a),n)for(c=0;o=a[c++];)ce.test(o.type||"")&&n.push(o);return f}he=a.createDocumentFragment().appendChild(a.createElement("div")),(me=a.createElement("input")).setAttribute("type","radio"),me.setAttribute("checked","checked"),me.setAttribute("name","t"),he.appendChild(me),v.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue;var ye=a.documentElement,be=/^key/,_e=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function we(){return!1}function xe(){try{return a.activeElement}catch(e){}}function Ce(e,t,n,r,i,o){var a,l;if("object"==typeof t){for(l in"string"!=typeof n&&(r=r||n,n=void 0),t)Ce(e,l,n,r,t[l],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=we;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return b().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=b.guid++)),e.each(function(){b.event.add(this,t,i,r,n)})}b.event={global:{},add:function(e,t,n,r,i){var o,a,l,s,u,c,f,d,p,h,m,g=K.get(e);if(g)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&b.find.matchesSelector(ye,i),n.guid||(n.guid=b.guid++),(s=g.events)||(s=g.events={}),(a=g.handle)||(a=g.handle=function(t){return void 0!==b&&b.event.triggered!==t.type?b.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(M)||[""]).length;u--;)p=m=(l=Ee.exec(t[u])||[])[1],h=(l[2]||"").split(".").sort(),p&&(f=b.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=b.event.special[p]||{},c=b.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&b.expr.match.needsContext.test(i),namespace:h.join(".")},o),(d=s[p])||((d=s[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),b.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,a,l,s,u,c,f,d,p,h,m,g=K.hasData(e)&&K.get(e);if(g&&(s=g.events)){for(u=(t=(t||"").match(M)||[""]).length;u--;)if(p=m=(l=Ee.exec(t[u])||[])[1],h=(l[2]||"").split(".").sort(),p){for(f=b.event.special[p]||{},d=s[p=(r?f.delegateType:f.bindType)||p]||[],l=l[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)c=d[o],!i&&m!==c.origType||n&&n.guid!==c.guid||l&&!l.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||b.removeEvent(e,p,g.handle),delete s[p])}else for(p in s)b.event.remove(e,p+t[u],n,r,!0);b.isEmptyObject(s)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,l=b.event.fix(e),s=new Array(arguments.length),u=(K.get(this,"events")||{})[l.type]||[],c=b.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(a=b.event.handlers.call(this,l,u),t=0;(i=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(r=((b.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,i,o,a,l=[],s=t.delegateCount,u=e.target;if(s&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<s;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?b(i,this).index(u)>-1:b.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&l.push({elem:u,handlers:o})}return u=this,s<t.length&&l.push({elem:u,handlers:t.slice(s)}),l},addProp:function(e,t){Object.defineProperty(b.Event.prototype,e,{enumerable:!0,configurable:!0,get:b.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[b.expando]?e:new b.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==xe()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===xe()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(e){return N(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},b.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},b.Event=function(e,t){if(!(this instanceof b.Event))return new b.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:we,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&b.extend(this,t),this.timeStamp=e&&e.timeStamp||b.now(),this[b.expando]=!0},b.Event.prototype={constructor:b.Event,isDefaultPrevented:we,isPropagationStopped:we,isImmediatePropagationStopped:we,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},b.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&be.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&_e.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},b.event.addProp),b.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||b.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),b.fn.extend({on:function(e,t,n,r){return Ce(this,e,t,n,r)},one:function(e,t,n,r){return Ce(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,b(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=we),this.each(function(){b.event.remove(this,e,n,t)})}});var Se=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ke=/<script|<style|<link/i,Oe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^true\/(.*)/,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function De(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")&&b(">tbody",e)[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){var t=Ne.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function Le(e,t){var n,r,i,o,a,l,s,u;if(1===t.nodeType){if(K.hasData(e)&&(o=K.access(e),a=K.set(t,o),u=o.events))for(i in delete a.handle,a.events={},u)for(n=0,r=u[i].length;n<r;n++)b.event.add(t,i,u[i][n]);Q.hasData(e)&&(l=Q.access(e),s=b.extend({},l),Q.set(t,s))}}function Re(e,t,n,r){t=u.apply([],t);var i,o,a,l,s,c,f=0,d=e.length,p=d-1,h=t[0],m=b.isFunction(h);if(m||d>1&&"string"==typeof h&&!v.checkClone&&Oe.test(h))return e.each(function(i){var o=e.eq(i);m&&(t[0]=h.call(this,i,o.html())),Re(o,t,n,r)});if(d&&(o=(i=ve(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(l=(a=b.map(de(i,"script"),Ie)).length;f<d;f++)s=i,f!==p&&(s=b.clone(s,!0,!0),l&&b.merge(a,de(s,"script"))),n.call(e[f],s,f);if(l)for(c=a[a.length-1].ownerDocument,b.map(a,Pe),f=0;f<l;f++)s=a[f],ce.test(s.type||"")&&!K.access(s,"globalEval")&&b.contains(c,s)&&(s.src?b._evalUrl&&b._evalUrl(s.src):y(s.textContent.replace(Ae,""),c))}return e}function je(e,t,n){for(var r,i=t?b.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||b.cleanData(de(r)),r.parentNode&&(n&&b.contains(r.ownerDocument,r)&&pe(de(r,"script")),r.parentNode.removeChild(r));return e}b.extend({htmlPrefilter:function(e){return e.replace(Se,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,l,s,u,c=e.cloneNode(!0),f=b.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(a=de(c),r=0,i=(o=de(e)).length;r<i;r++)l=o[r],s=a[r],u=void 0,"input"===(u=s.nodeName.toLowerCase())&&se.test(l.type)?s.checked=l.checked:"input"!==u&&"textarea"!==u||(s.defaultValue=l.defaultValue);if(t)if(n)for(o=o||de(e),a=a||de(c),r=0,i=o.length;r<i;r++)Le(o[r],a[r]);else Le(e,c);return(a=de(c,"script")).length>0&&pe(a,!f&&de(e,"script")),c},cleanData:function(e){for(var t,n,r,i=b.event.special,o=0;void 0!==(n=e[o]);o++)if(G(n)){if(t=n[K.expando]){if(t.events)for(r in t.events)i[r]?b.event.remove(n,r):b.removeEvent(n,r,t.handle);n[K.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),b.fn.extend({detach:function(e){return je(this,e,!0)},remove:function(e){return je(this,e)},text:function(e){return q(this,function(e){return void 0===e?b.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||De(this,e).appendChild(e)})},prepend:function(){return Re(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=De(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(b.cleanData(de(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return b.clone(this,e,t)})},html:function(e){return q(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!ke.test(e)&&!fe[(ue.exec(e)||["",""])[1].toLowerCase()]){e=b.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(b.cleanData(de(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,function(t){var n=this.parentNode;b.inArray(this,e)<0&&(b.cleanData(de(this)),n&&n.replaceChild(t,this))},e)}}),b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){b.fn[e]=function(e){for(var n,r=[],i=b(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),b(i[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}});var He=/^margin/,Me=new RegExp("^("+Z+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)};function Ue(e,t,n){var r,i,o,a,l=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||b.contains(e.ownerDocument,e)||(a=b.style(e,t)),!v.pixelMarginRight()&&Me.test(a)&&He.test(t)&&(r=l.width,i=l.minWidth,o=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=i,l.maxWidth=o)),void 0!==a?a+"":a}function We(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",ye.appendChild(l);var e=n.getComputedStyle(s);t="1%"!==e.top,o="2px"===e.marginLeft,r="4px"===e.width,s.style.marginRight="50%",i="4px"===e.marginRight,ye.removeChild(l),s=null}}var t,r,i,o,l=a.createElement("div"),s=a.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===s.style.backgroundClip,l.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",l.appendChild(s),b.extend(v,{pixelPosition:function(){return e(),t},boxSizingReliable:function(){return e(),r},pixelMarginRight:function(){return e(),i},reliableMarginLeft:function(){return e(),o}}))}();var Ve=/^(none|table(?!-c[ea]).+)/,Be=/^--/,ze={position:"absolute",visibility:"hidden",display:"block"},qe={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],$e=a.createElement("div").style;function Ke(e){var t=b.cssProps[e];return t||(t=b.cssProps[e]=function(e){if(e in $e)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in $e)return e}(e)||e),t}function Qe(e,t,n){var r=ee.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ye(e,t,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=b.css(e,n+te[o],!0,i)),r?("content"===n&&(a-=b.css(e,"padding"+te[o],!0,i)),"margin"!==n&&(a-=b.css(e,"border"+te[o]+"Width",!0,i))):(a+=b.css(e,"padding"+te[o],!0,i),"padding"!==n&&(a+=b.css(e,"border"+te[o]+"Width",!0,i)));return a}function Xe(e,t,n){var r,i=Fe(e),o=Ue(e,t,i),a="border-box"===b.css(e,"boxSizing",!1,i);return Me.test(o)?o:(r=a&&(v.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+Ye(e,t,n||(a?"border":"content"),r,i)+"px")}function Je(e,t,n,r,i){return new Je.prototype.init(e,t,n,r,i)}b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ue(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,l=b.camelCase(t),s=Be.test(t),u=e.style;if(s||(t=Ke(l)),a=b.cssHooks[t]||b.cssHooks[l],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];"string"===(o=typeof n)&&(i=ee.exec(n))&&i[1]&&(n=ie(e,t,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(b.cssNumber[l]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(s?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,a,l=b.camelCase(t);return Be.test(t)||(t=Ke(l)),(a=b.cssHooks[t]||b.cssHooks[l])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ue(e,t,r)),"normal"===i&&t in qe&&(i=qe[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),b.each(["height","width"],function(e,t){b.cssHooks[t]={get:function(e,n,r){if(n)return!Ve.test(b.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Xe(e,t,r):re(e,ze,function(){return Xe(e,t,r)})},set:function(e,n,r){var i,o=r&&Fe(e),a=r&&Ye(e,t,r,"border-box"===b.css(e,"boxSizing",!1,o),o);return a&&(i=ee.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=b.css(e,t)),Qe(0,n,a)}}}),b.cssHooks.marginLeft=We(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ue(e,"marginLeft"))||e.getBoundingClientRect().left-re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),b.each({margin:"",padding:"",border:"Width"},function(e,t){b.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+te[r]+t]=o[r]||o[r-2]||o[0];return i}},He.test(e)||(b.cssHooks[e+t].set=Qe)}),b.fn.extend({css:function(e,t){return q(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Fe(e),i=t.length;a<i;a++)o[t[a]]=b.css(e,t[a],!1,r);return o}return void 0!==n?b.style(e,t,n):b.css(e,t)},e,t,arguments.length>1)}}),b.Tween=Je,Je.prototype={constructor:Je,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||b.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(b.cssNumber[n]?"":"px")},cur:function(){var e=Je.propHooks[this.prop];return e&&e.get?e.get(this):Je.propHooks._default.get(this)},run:function(e){var t,n=Je.propHooks[this.prop];return this.options.duration?this.pos=t=b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Je.propHooks._default.set(this),this}},Je.prototype.init.prototype=Je.prototype,Je.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=b.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[b.cssProps[e.prop]]&&!b.cssHooks[e.prop]?e.elem[e.prop]=e.now:b.style(e.elem,e.prop,e.now+e.unit)}}},Je.propHooks.scrollTop=Je.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},b.fx=Je.prototype.init,b.fx.step={};var Ze,et,tt=/^(?:toggle|show|hide)$/,nt=/queueHooks$/;function rt(){et&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(rt):n.setTimeout(rt,b.fx.interval),b.fx.tick())}function it(){return n.setTimeout(function(){Ze=void 0}),Ze=b.now()}function ot(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=te[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function at(e,t,n){for(var r,i=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function lt(e,t,n){var r,i,o=0,a=lt.prefilters.length,l=b.Deferred().always(function(){delete s.elem}),s=function(){if(i)return!1;for(var t=Ze||it(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(r);return l.notifyWith(e,[u,r,n]),r<1&&a?n:(a||l.notifyWith(e,[u,1,0]),l.resolveWith(e,[u]),!1)},u=l.promise({elem:e,props:b.extend({},t),opts:b.extend(!0,{specialEasing:{},easing:b.easing._default},n),originalProperties:t,originalOptions:n,startTime:Ze||it(),duration:n.duration,tweens:[],createTween:function(t,n){var r=b.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(l.notifyWith(e,[u,1,0]),l.resolveWith(e,[u,t])):l.rejectWith(e,[u,t]),this}}),c=u.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=b.camelCase(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=b.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,u.opts.specialEasing);o<a;o++)if(r=lt.prefilters[o].call(u,e,c,u.opts))return b.isFunction(r.stop)&&(b._queueHooks(u.elem,u.opts.queue).stop=b.proxy(r.stop,r)),r;return b.map(c,at,u),b.isFunction(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),b.fx.timer(b.extend(s,{elem:e,anim:u,queue:u.opts.queue})),u}b.Animation=b.extend(lt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ie(n.elem,e,ee.exec(t),n),n}]},tweener:function(e,t){b.isFunction(e)?(t=e,e=["*"]):e=e.match(M);for(var n,r=0,i=e.length;r<i;r++)n=e[r],lt.tweeners[n]=lt.tweeners[n]||[],lt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,l,s,u,c,f="width"in t||"height"in t,d=this,p={},h=e.style,m=e.nodeType&&ne(e),g=K.get(e,"fxshow");for(r in n.queue||(null==(a=b._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,b.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],tt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;m=!0}p[r]=g&&g[r]||b.style(e,r)}if((s=!b.isEmptyObject(t))||!b.isEmptyObject(p))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=g&&g.display)&&(u=K.get(e,"display")),"none"===(c=b.css(e,"display"))&&(u?c=u:(le([e],!0),u=e.style.display||u,c=b.css(e,"display"),le([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===b.css(e,"float")&&(s||(d.done(function(){h.display=u}),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),s=!1,p)s||(g?"hidden"in g&&(m=g.hidden):g=K.access(e,"fxshow",{display:u}),o&&(g.hidden=!m),m&&le([e],!0),d.done(function(){for(r in m||le([e]),K.remove(e,"fxshow"),p)b.style(e,r,p[r])})),s=at(m?g[r]:0,r,d),r in g||(g[r]=s.start,m&&(s.end=s.start,s.start=0))}],prefilter:function(e,t){t?lt.prefilters.unshift(e):lt.prefilters.push(e)}}),b.speed=function(e,t,n){var r=e&&"object"==typeof e?b.extend({},e):{complete:n||!n&&t||b.isFunction(e)&&e,duration:e,easing:n&&t||t&&!b.isFunction(t)&&t};return b.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in b.fx.speeds?r.duration=b.fx.speeds[r.duration]:r.duration=b.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){b.isFunction(r.old)&&r.old.call(this),r.queue&&b.dequeue(this,r.queue)},r},b.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ne).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=b.isEmptyObject(e),o=b.speed(t,n,r),a=function(){var t=lt(this,b.extend({},e),o);(i||K.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=b.timers,a=K.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&nt.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||b.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=K.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=b.timers,a=r?r.length:0;for(n.finish=!0,b.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),b.each(["toggle","show","hide"],function(e,t){var n=b.fn[t];b.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ot(t,!0),e,r,i)}}),b.each({slideDown:ot("show"),slideUp:ot("hide"),slideToggle:ot("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){b.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),b.timers=[],b.fx.tick=function(){var e,t=0,n=b.timers;for(Ze=b.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||b.fx.stop(),Ze=void 0},b.fx.timer=function(e){b.timers.push(e),b.fx.start()},b.fx.interval=13,b.fx.start=function(){et||(et=!0,rt())},b.fx.stop=function(){et=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fn.delay=function(e,t){return e=b.fx&&b.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var st,ut=b.expr.attrHandle;b.fn.extend({attr:function(e,t){return q(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){b.removeAttr(this,e)})}}),b.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?b.prop(e,t,n):(1===o&&b.isXMLDoc(e)||(i=b.attrHooks[t.toLowerCase()]||(b.expr.match.bool.test(t)?st:void 0)),void 0!==n?null===n?void b.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=b.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(M);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),st={set:function(e,t,n){return!1===t?b.removeAttr(e,n):e.setAttribute(n,n),n}},b.each(b.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ut[t]||b.find.attr;ut[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=ut[a],ut[a]=i,i=null!=n(e,t,r)?a:null,ut[a]=o),i}});var ct=/^(?:input|select|textarea|button)$/i,ft=/^(?:a|area)$/i;function dt(e){return(e.match(M)||[]).join(" ")}function pt(e){return e.getAttribute&&e.getAttribute("class")||""}b.fn.extend({prop:function(e,t){return q(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[b.propFix[e]||e]})}}),b.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&b.isXMLDoc(e)||(t=b.propFix[t]||t,i=b.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=b.find.attr(e,"tabindex");return t?parseInt(t,10):ct.test(e.nodeName)||ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(b.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),b.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){b.propFix[this.toLowerCase()]=this}),b.fn.extend({addClass:function(e){var t,n,r,i,o,a,l,s=0;if(b.isFunction(e))return this.each(function(t){b(this).addClass(e.call(this,t,pt(this)))});if("string"==typeof e&&e)for(t=e.match(M)||[];n=this[s++];)if(i=pt(n),r=1===n.nodeType&&" "+dt(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(l=dt(r))&&n.setAttribute("class",l)}return this},removeClass:function(e){var t,n,r,i,o,a,l,s=0;if(b.isFunction(e))return this.each(function(t){b(this).removeClass(e.call(this,t,pt(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(M)||[];n=this[s++];)if(i=pt(n),r=1===n.nodeType&&" "+dt(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(l=dt(r))&&n.setAttribute("class",l)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):b.isFunction(e)?this.each(function(n){b(this).toggleClass(e.call(this,n,pt(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=b(this),o=e.match(M)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=pt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+dt(pt(n))+" ").indexOf(t)>-1)return!0;return!1}});var ht=/\r/g;b.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=b.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,b(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=b.map(i,function(e){return null==e?"":e+""})),(t=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=b.valHooks[i.type]||b.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(ht,""):null==n?"":n:void 0}}),b.extend({valHooks:{option:{get:function(e){var t=b.find.attr(e,"value");return null!=t?t:dt(b.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,l=a?null:[],s=a?o+1:i.length;for(r=o<0?s:a?o:0;r<s;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=b(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,r,i=e.options,o=b.makeArray(t),a=i.length;a--;)((r=i[a]).selected=b.inArray(b.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),b.each(["radio","checkbox"],function(){b.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=b.inArray(b(e).val(),t)>-1}},v.checkOn||(b.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var mt=/^(?:focusinfocus|focusoutblur)$/;b.extend(b.event,{trigger:function(e,t,r,i){var o,l,s,u,c,f,d,p=[r||a],m=h.call(e,"type")?e.type:e,g=h.call(e,"namespace")?e.namespace.split("."):[];if(l=s=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!mt.test(m+b.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[b.expando]?e:new b.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:b.makeArray(t,[e]),d=b.event.special[m]||{},i||!d.trigger||!1!==d.trigger.apply(r,t))){if(!i&&!d.noBubble&&!b.isWindow(r)){for(u=d.delegateType||m,mt.test(u+m)||(l=l.parentNode);l;l=l.parentNode)p.push(l),s=l;s===(r.ownerDocument||a)&&p.push(s.defaultView||s.parentWindow||n)}for(o=0;(l=p[o++])&&!e.isPropagationStopped();)e.type=o>1?u:d.bindType||m,(f=(K.get(l,"events")||{})[e.type]&&K.get(l,"handle"))&&f.apply(l,t),(f=c&&l[c])&&f.apply&&G(l)&&(e.result=f.apply(l,t),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(p.pop(),t)||!G(r)||c&&b.isFunction(r[m])&&!b.isWindow(r)&&((s=r[c])&&(r[c]=null),b.event.triggered=m,r[m](),b.event.triggered=void 0,s&&(r[c]=s)),e.result}},simulate:function(e,t,n){var r=b.extend(new b.Event,n,{type:e,isSimulated:!0});b.event.trigger(r,null,t)}}),b.fn.extend({trigger:function(e,t){return this.each(function(){b.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return b.event.trigger(e,t,n,!0)}}),b.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){b.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),b.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),v.focusin="onfocusin"in n,v.focusin||b.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){b.event.simulate(t,e.target,b.event.fix(e))};b.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=K.access(r,t);i||r.addEventListener(e,n,!0),K.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=K.access(r,t)-1;i?K.access(r,t,i):(r.removeEventListener(e,n,!0),K.remove(r,t))}}});var gt=n.location,vt=b.now(),yt=/\?/;b.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||b.error("Invalid XML: "+e),t};var bt=/\[\]$/,_t=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,Tt=/^(?:input|select|textarea|keygen)/i;function wt(e,t,n,r){var i;if(Array.isArray(t))b.each(t,function(t,i){n||bt.test(e)?r(e,i):wt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==b.type(t))r(e,t);else for(i in t)wt(e+"["+i+"]",t[i],n,r)}b.param=function(e,t){var n,r=[],i=function(e,t){var n=b.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,function(){i(this.name,this.value)});else for(n in e)wt(n,e[n],t,i);return r.join("&")},b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=b.prop(this,"elements");return e?b.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!b(this).is(":disabled")&&Tt.test(this.nodeName)&&!Et.test(e)&&(this.checked||!se.test(e))}).map(function(e,t){var n=b(this).val();return null==n?null:Array.isArray(n)?b.map(n,function(e){return{name:t.name,value:e.replace(_t,"\r\n")}}):{name:t.name,value:n.replace(_t,"\r\n")}}).get()}});var xt=/%20/g,Ct=/#.*$/,St=/([?&])_=[^&]*/,kt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ot=/^(?:GET|HEAD)$/,Nt=/^\/\//,At={},Dt={},It="*/".concat("*"),Pt=a.createElement("a");function Lt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(M)||[];if(b.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Rt(e,t,n,r){var i={},o=e===Dt;function a(l){var s;return i[l]=!0,b.each(e[l]||[],function(e,l){var u=l(t,n,r);return"string"!=typeof u||o||i[u]?o?!(s=u):void 0:(t.dataTypes.unshift(u),a(u),!1)}),s}return a(t.dataTypes[0])||!i["*"]&&a("*")}function jt(e,t){var n,r,i=b.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&b.extend(!0,e,r),e}Pt.href=gt.href,b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:gt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(gt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":It,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?jt(jt(e,b.ajaxSettings),t):jt(b.ajaxSettings,e)},ajaxPrefilter:Lt(At),ajaxTransport:Lt(Dt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,l,s,u,c,f,d,p,h=b.ajaxSetup({},t),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?b(m):b.event,v=b.Deferred(),y=b.Callbacks("once memory"),_=h.statusCode||{},E={},T={},w="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(c){if(!l)for(l={};t=kt.exec(o);)l[t[1].toLowerCase()]=t[2];t=l[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,E[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)x.always(e[x.status]);else for(t in e)_[t]=[_[t],e[t]];return this},abort:function(e){var t=e||w;return r&&r.abort(t),C(0,t),this}};if(v.promise(x),h.url=((e||h.url||gt.href)+"").replace(Nt,gt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(M)||[""],null==h.crossDomain){u=a.createElement("a");try{u.href=h.url,u.href=u.href,h.crossDomain=Pt.protocol+"//"+Pt.host!=u.protocol+"//"+u.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=b.param(h.data,h.traditional)),Rt(At,h,t,x),c)return x;for(d in(f=b.event&&h.global)&&0==b.active++&&b.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Ot.test(h.type),i=h.url.replace(Ct,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(xt,"+")):(p=h.url.slice(i.length),h.data&&(i+=(yt.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(St,"$1"),p=(yt.test(i)?"&":"?")+"_="+vt+++p),h.url=i+p),h.ifModified&&(b.lastModified[i]&&x.setRequestHeader("If-Modified-Since",b.lastModified[i]),b.etag[i]&&x.setRequestHeader("If-None-Match",b.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&x.setRequestHeader("Content-Type",h.contentType),x.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+It+"; q=0.01":""):h.accepts["*"]),h.headers)x.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(m,x,h)||c))return x.abort();if(w="abort",y.add(h.complete),x.done(h.success),x.fail(h.error),r=Rt(Dt,h,t,x)){if(x.readyState=1,f&&g.trigger("ajaxSend",[x,h]),c)return x;h.async&&h.timeout>0&&(s=n.setTimeout(function(){x.abort("timeout")},h.timeout));try{c=!1,r.send(E,C)}catch(e){if(c)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,a,l){var u,d,p,E,T,w=t;c||(c=!0,s&&n.clearTimeout(s),r=void 0,o=l||"",x.readyState=e>0?4:0,u=e>=200&&e<300||304===e,a&&(E=function(e,t,n){for(var r,i,o,a,l=e.contents,s=e.dataTypes;"*"===s[0];)s.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in l)if(l[i]&&l[i].test(r)){s.unshift(i);break}if(s[0]in n)o=s[0];else{for(i in n){if(!s[0]||e.converters[i+" "+s[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==s[0]&&s.unshift(o),n[o]}(h,x,a)),E=function(e,t,n,r){var i,o,a,l,s,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!s&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),s=o,o=c.shift())if("*"===o)o=s;else if("*"!==s&&s!==o){if(!(a=u[s+" "+o]||u["* "+o]))for(i in u)if((l=i.split(" "))[1]===o&&(a=u[s+" "+l[0]]||u["* "+l[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=l[0],c.unshift(l[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+s+" to "+o}}}return{state:"success",data:t}}(h,E,x,u),u?(h.ifModified&&((T=x.getResponseHeader("Last-Modified"))&&(b.lastModified[i]=T),(T=x.getResponseHeader("etag"))&&(b.etag[i]=T)),204===e||"HEAD"===h.type?w="nocontent":304===e?w="notmodified":(w=E.state,d=E.data,u=!(p=E.error))):(p=w,!e&&w||(w="error",e<0&&(e=0))),x.status=e,x.statusText=(t||w)+"",u?v.resolveWith(m,[d,w,x]):v.rejectWith(m,[x,w,p]),x.statusCode(_),_=void 0,f&&g.trigger(u?"ajaxSuccess":"ajaxError",[x,h,u?d:p]),y.fireWith(m,[x,w]),f&&(g.trigger("ajaxComplete",[x,h]),--b.active||b.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,n){return b.get(e,t,n,"json")},getScript:function(e,t){return b.get(e,void 0,t,"script")}}),b.each(["get","post"],function(e,t){b[t]=function(e,n,r,i){return b.isFunction(n)&&(i=i||r,r=n,n=void 0),b.ajax(b.extend({url:e,type:t,dataType:i,data:n,success:r},b.isPlainObject(e)&&e))}}),b._evalUrl=function(e){return b.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},b.fn.extend({wrapAll:function(e){var t;return this[0]&&(b.isFunction(e)&&(e=e.call(this[0])),t=b(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return b.isFunction(e)?this.each(function(t){b(this).wrapInner(e.call(this,t))}):this.each(function(){var t=b(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b.isFunction(e);return this.each(function(n){b(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){b(this).replaceWith(this.childNodes)}),this}}),b.expr.pseudos.hidden=function(e){return!b.expr.pseudos.visible(e)},b.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},b.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ht={0:200,1223:204},Mt=b.ajaxSettings.xhr();v.cors=!!Mt&&"withCredentials"in Mt,v.ajax=Mt=!!Mt,b.ajaxTransport(function(e){var t,r;if(v.cors||Mt&&!e.crossDomain)return{send:function(i,o){var a,l=e.xhr();if(l.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)l[a]=e.xhrFields[a];for(a in e.mimeType&&l.overrideMimeType&&l.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)l.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=r=l.onload=l.onerror=l.onabort=l.onreadystatechange=null,"abort"===e?l.abort():"error"===e?"number"!=typeof l.status?o(0,"error"):o(l.status,l.statusText):o(Ht[l.status]||l.status,l.statusText,"text"!==(l.responseType||"text")||"string"!=typeof l.responseText?{binary:l.response}:{text:l.responseText},l.getAllResponseHeaders()))}},l.onload=t(),r=l.onerror=t("error"),void 0!==l.onabort?l.onabort=r:l.onreadystatechange=function(){4===l.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{l.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),b.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),b.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),b.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,i){t=b("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var Ft,Ut=[],Wt=/(=)\?(?=&|$)|\?\?/;b.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ut.pop()||b.expando+"_"+vt++;return this[e]=!0,e}}),b.ajaxPrefilter("json jsonp",function(e,t,r){var i,o,a,l=!1!==e.jsonp&&(Wt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(e.data)&&"data");if(l||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=b.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,l?e[l]=e[l].replace(Wt,"$1"+i):!1!==e.jsonp&&(e.url+=(yt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||b.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?b(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Ut.push(i)),a&&b.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),v.createHTMLDocument=((Ft=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ft.childNodes.length),b.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(r)):t=a),o=!n&&[],(i=A.exec(e))?[t.createElement(i[1])]:(i=ve([e],t,o),o&&o.length&&b(o).remove(),b.merge([],i.childNodes)));var r,i,o},b.fn.load=function(e,t,n){var r,i,o,a=this,l=e.indexOf(" ");return l>-1&&(r=dt(e.slice(l)),e=e.slice(0,l)),b.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&b.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?b("<div>").append(b.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},b.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){b.fn[t]=function(e){return this.on(t,e)}}),b.expr.pseudos.animated=function(e){return b.grep(b.timers,function(t){return e===t.elem}).length},b.offset={setOffset:function(e,t,n){var r,i,o,a,l,s,u=b.css(e,"position"),c=b(e),f={};"static"===u&&(e.style.position="relative"),l=c.offset(),o=b.css(e,"top"),s=b.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+s).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(s)||0),b.isFunction(t)&&(t=t.call(e,n,b.extend({},l))),null!=t.top&&(f.top=t.top-l.top+a),null!=t.left&&(f.left=t.left-l.left+i),"using"in t?t.using.call(e,f):c.css(f)}},b.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){b.offset.setOffset(this,e,t)});var t,n,r,i,o=this[0];return o?o.getClientRects().length?(r=o.getBoundingClientRect(),n=(t=o.ownerDocument).documentElement,i=t.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===b.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),N(e[0],"html")||(r=e.offset()),r={top:r.top+b.css(e[0],"borderTopWidth",!0),left:r.left+b.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-b.css(n,"marginTop",!0),left:t.left-r.left-b.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===b.css(e,"position");)e=e.offsetParent;return e||ye})}}),b.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;b.fn[e]=function(r){return q(this,function(e,r,i){var o;if(b.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),b.each(["top","left"],function(e,t){b.cssHooks[t]=We(v.pixelPosition,function(e,n){if(n)return n=Ue(e,t),Me.test(n)?b(e).position()[t]+"px":n})}),b.each({Height:"height",Width:"width"},function(e,t){b.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){b.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),l=n||(!0===i||!0===o?"margin":"border");return q(this,function(t,n,i){var o;return b.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?b.css(t,n,l):b.style(t,n,i,l)},t,a?i:void 0,a)}})}),b.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),b.holdReady=function(e){e?b.readyWait++:b.ready(!0)},b.isArray=Array.isArray,b.parseJSON=JSON.parse,b.nodeName=N,void 0===(r=function(){return b}.apply(t,[]))||(e.exports=r);var Vt=n.jQuery,Bt=n.$;return b.noConflict=function(e){return n.$===b&&(n.$=Bt),e&&n.jQuery===b&&(n.jQuery=Vt),b},i||(n.jQuery=n.$=b),b})},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var u in n=Object(arguments[s]))i.call(n,u)&&(l[u]=n[u]);if(r){a=r(n);for(var c=0;c<a.length;c++)o.call(n,a[c])&&(l[a[c]]=n[a[c]])}}return l}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(6)},function(e,t,n){"use strict";
/** @license React v16.8.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(2),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,l=i?Symbol.for("react.fragment"):60107,s=i?Symbol.for("react.strict_mode"):60108,u=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.concurrent_mode"):60111,p=i?Symbol.for("react.forward_ref"):60112,h=i?Symbol.for("react.suspense"):60113,m=i?Symbol.for("react.memo"):60115,g=i?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,i,o,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,i,o,a,l],u=0;(e=Error(t.replace(/%s/g,function(){return s[u++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_={};function E(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}function T(){}function w(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}E.prototype.isReactComponent={},E.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},E.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},T.prototype=E.prototype;var x=w.prototype=new T;x.constructor=w,r(x,E.prototype),x.isPureReactComponent=!0;var C={current:null},S={current:null},k=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function N(e,t,n){var r=void 0,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!O.hasOwnProperty(r)&&(i[r]=t[r]);var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:S.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var D=/\/+/g,I=[];function P(e,t,n,r){if(I.length){var i=I.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function L(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>I.length&&I.push(e)}function R(e,t,n){return null==e?0:function e(t,n,r,i){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var s=!1;if(null===t)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case o:case a:s=!0}}if(s)return r(i,t,""===n?"."+j(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var c=n+j(l=t[u],u);s+=e(l,c,r,i)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),u=0;!(l=t.next()).done;)s+=e(l=l.value,c=n+j(l,u++),r,i);else"object"===l&&y("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return s}(e,"",t,n)}function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function H(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,function(e){return e}):null!=e&&(A(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(D,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(D,"$&/")+"/"),R(e,M,t=P(t,o,r,i)),L(t)}function U(){var e=C.current;return null===e&&y("307"),e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,H,t=P(null,null,t,n)),L(t)},count:function(e){return R(e,function(){return null},null)},toArray:function(e){var t=[];return F(e,t,null,function(e){return e}),t},only:function(e){return A(e)||y("143"),e}},createRef:function(){return{current:null}},Component:E,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:g,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return U().useCallback(e,t)},useContext:function(e,t){return U().useContext(e,t)},useEffect:function(e,t){return U().useEffect(e,t)},useImperativeHandle:function(e,t,n){return U().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return U().useLayoutEffect(e,t)},useMemo:function(e,t){return U().useMemo(e,t)},useReducer:function(e,t,n){return U().useReducer(e,t,n)},useRef:function(e){return U().useRef(e)},useState:function(e){return U().useState(e)},Fragment:l,StrictMode:s,Suspense:h,createElement:N,cloneElement:function(e,t,n){null==e&&y("267",e);var i=void 0,a=r({},e.props),l=e.key,s=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,u=S.current),void 0!==t.key&&(l=""+t.key);var c=void 0;for(i in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)k.call(t,i)&&!O.hasOwnProperty(i)&&(a[i]=void 0===t[i]&&void 0!==c?c[i]:t[i])}if(1===(i=arguments.length-2))a.children=n;else if(1<i){c=Array(i);for(var f=0;f<i;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:l,ref:s,props:a,_owner:u}},createFactory:function(e){var t=N.bind(null,e);return t.type=e,t},isValidElement:A,version:"16.8.2",unstable_ConcurrentMode:d,unstable_Profiler:u,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:C,ReactCurrentOwner:S,assign:r}},V={default:W},B=V&&W||V;e.exports=B.default||B},function(e,t,n){"use strict";
/** @license React v16.8.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(2),o=n(7);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,i,o,a,l){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,i,o,a,l],u=0;(e=Error(t.replace(/%s/g,function(){return s[u++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var l=!1,s=null,u=!1,c=null,f={onError:function(e){l=!0,s=e}};function d(e,t,n,r,i,o,a,u,c){l=!1,s=null,function(e,t,n,r,i,o,a,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}.apply(f,arguments)}var p=null,h={};function m(){if(p)for(var e in h){var t=h[e],n=p.indexOf(e);if(-1<n||a("96",e),!v[n])for(var r in t.extractEvents||a("97",e),v[n]=t,n=t.eventTypes){var i=void 0,o=n[r],l=t,s=r;y.hasOwnProperty(s)&&a("99",s),y[s]=o;var u=o.phasedRegistrationNames;if(u){for(i in u)u.hasOwnProperty(i)&&g(u[i],l,s);i=!0}else o.registrationName?(g(o.registrationName,l,s),i=!0):i=!1;i||a("98",r,e)}}}function g(e,t,n){b[e]&&a("100",e),b[e]=t,_[e]=t.eventTypes[n].dependencies}var v=[],y={},b={},_={},E=null,T=null,w=null;function x(e,t,n){var r=e.type||"unknown-event";e.currentTarget=w(n),function(e,t,n,r,i,o,f,p,h){if(d.apply(this,arguments),l){if(l){var m=s;l=!1,s=null}else a("198"),m=void 0;u||(u=!0,c=m)}}(r,t,void 0,e),e.currentTarget=null}function C(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function S(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var k=null;function O(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)x(e,t[r],n[r]);else t&&x(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var N={injectEventPluginOrder:function(e){p&&a("101"),p=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&m()}};function A(e,t){var n=e.stateNode;if(!n)return null;var r=E(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function D(e){if(null!==e&&(k=C(k,e)),e=k,k=null,e&&(S(e,O),k&&a("95"),u))throw e=c,u=!1,c=null,e}var I=Math.random().toString(36).slice(2),P="__reactInternalInstance$"+I,L="__reactEventHandlers$"+I;function R(e){if(e[P])return e[P];for(;!e[P];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[P]).tag||6===e.tag?e:null}function j(e){return!(e=e[P])||5!==e.tag&&6!==e.tag?null:e}function H(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function M(e){return e[L]||null}function F(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function U(e,t,n){(t=A(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=F(t);for(t=n.length;0<t--;)U(n[t],"captured",e);for(t=0;t<n.length;t++)U(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=A(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=C(n._dispatchListeners,t),n._dispatchInstances=C(n._dispatchInstances,e))}function B(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function z(e){S(e,W)}var q=!("undefined"==typeof window||!window.document||!window.document.createElement);function G(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var $={animationend:G("Animation","AnimationEnd"),animationiteration:G("Animation","AnimationIteration"),animationstart:G("Animation","AnimationStart"),transitionend:G("Transition","TransitionEnd")},K={},Q={};function Y(e){if(K[e])return K[e];if(!$[e])return e;var t,n=$[e];for(t in n)if(n.hasOwnProperty(t)&&t in Q)return K[e]=n[t];return e}q&&(Q=document.createElement("div").style,"AnimationEvent"in window||(delete $.animationend.animation,delete $.animationiteration.animation,delete $.animationstart.animation),"TransitionEvent"in window||delete $.transitionend.transition);var X=Y("animationend"),J=Y("animationiteration"),Z=Y("animationstart"),ee=Y("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,ie=null;function oe(){if(ie)return ie;var e,t,n=re,r=n.length,i="value"in ne?ne.value:ne.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return ie=i.slice(e,1<t?1-t:void 0)}function ae(){return!0}function le(){return!1}function se(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:le,this.isPropagationStopped=le,this}function ue(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function ce(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ue,e.release=ce}i(se.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),se.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},se.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(se);var de=se.extend({data:null}),pe=se.extend({data:null}),he=[9,13,27,32],me=q&&"CompositionEvent"in window,ge=null;q&&"documentMode"in document&&(ge=document.documentMode);var ve=q&&"TextEvent"in window&&!ge,ye=q&&(!me||ge&&8<ge&&11>=ge),be=String.fromCharCode(32),_e={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Ee=!1;function Te(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function we(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var xe=!1;var Ce={eventTypes:_e,extractEvents:function(e,t,n,r){var i=void 0,o=void 0;if(me)e:{switch(e){case"compositionstart":i=_e.compositionStart;break e;case"compositionend":i=_e.compositionEnd;break e;case"compositionupdate":i=_e.compositionUpdate;break e}i=void 0}else xe?Te(e,n)&&(i=_e.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=_e.compositionStart);return i?(ye&&"ko"!==n.locale&&(xe||i!==_e.compositionStart?i===_e.compositionEnd&&xe&&(o=oe()):(re="value"in(ne=r)?ne.value:ne.textContent,xe=!0)),i=de.getPooled(i,t,n,r),o?i.data=o:null!==(o=we(n))&&(i.data=o),z(i),o=i):o=null,(e=ve?function(e,t){switch(e){case"compositionend":return we(t);case"keypress":return 32!==t.which?null:(Ee=!0,be);case"textInput":return(e=t.data)===be&&Ee?null:e;default:return null}}(e,n):function(e,t){if(xe)return"compositionend"===e||!me&&Te(e,t)?(e=oe(),ie=re=ne=null,xe=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ye&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(_e.beforeInput,t,n,r)).data=e,z(t)):t=null,null===o?t:null===t?o:[o,t]}},Se=null,ke=null,Oe=null;function Ne(e){if(e=T(e)){"function"!=typeof Se&&a("280");var t=E(e.stateNode);Se(e.stateNode,e.type,t)}}function Ae(e){ke?Oe?Oe.push(e):Oe=[e]:ke=e}function De(){if(ke){var e=ke,t=Oe;if(Oe=ke=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}function Ie(e,t){return e(t)}function Pe(e,t,n){return e(t,n)}function Le(){}var Re=!1;function je(e,t){if(Re)return e(t);Re=!0;try{return Ie(e,t)}finally{Re=!1,(null!==ke||null!==Oe)&&(Le(),De())}}var He={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Me(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!He[e.type]:"textarea"===t}function Fe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ue(e){if(!q)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function We(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=We(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Be(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=We(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var ze=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;ze.hasOwnProperty("ReactCurrentDispatcher")||(ze.ReactCurrentDispatcher={current:null});var qe=/^(.*)[\\\/]/,Ge="function"==typeof Symbol&&Symbol.for,$e=Ge?Symbol.for("react.element"):60103,Ke=Ge?Symbol.for("react.portal"):60106,Qe=Ge?Symbol.for("react.fragment"):60107,Ye=Ge?Symbol.for("react.strict_mode"):60108,Xe=Ge?Symbol.for("react.profiler"):60114,Je=Ge?Symbol.for("react.provider"):60109,Ze=Ge?Symbol.for("react.context"):60110,et=Ge?Symbol.for("react.concurrent_mode"):60111,tt=Ge?Symbol.for("react.forward_ref"):60112,nt=Ge?Symbol.for("react.suspense"):60113,rt=Ge?Symbol.for("react.memo"):60115,it=Ge?Symbol.for("react.lazy"):60116,ot="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=ot&&e[ot]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Qe:return"Fragment";case Ke:return"Portal";case Xe:return"Profiler";case Ye:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Je:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return lt(e.type);case it:if(e=1===e._status?e._result:null)return lt(e)}return null}function st(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=lt(e.type);n=null,r&&(n=lt(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(qe,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var ut=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},dt={};function pt(e,t,n,r,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new pt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new pt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new pt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new pt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var i=ht.hasOwnProperty(t)?ht[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!ct.call(dt,e)||!ct.call(ft,e)&&(ut.test(e)?dt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function yt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _t(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=yt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Et(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function Tt(e,t){Et(e,t);var n=yt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?xt(e,t.type,n):t.hasOwnProperty("defaultValue")&&xt(e,t.type,yt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function wt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function xt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,gt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){ht[e]=new pt(e,1,!1,e.toLowerCase(),null)});var Ct={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function St(e,t,n){return(e=se.getPooled(Ct.change,e,t,n)).type="change",Ae(n),z(e),e}var kt=null,Ot=null;function Nt(e){D(e)}function At(e){if(Be(H(e)))return e}function Dt(e,t){if("change"===e)return t}var It=!1;function Pt(){kt&&(kt.detachEvent("onpropertychange",Lt),Ot=kt=null)}function Lt(e){"value"===e.propertyName&&At(Ot)&&je(Nt,e=St(Ot,e,Fe(e)))}function Rt(e,t,n){"focus"===e?(Pt(),Ot=n,(kt=t).attachEvent("onpropertychange",Lt)):"blur"===e&&Pt()}function jt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return At(Ot)}function Ht(e,t){if("click"===e)return At(t)}function Mt(e,t){if("input"===e||"change"===e)return At(t)}q&&(It=Ue("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:Ct,_isInputEventSupported:It,extractEvents:function(e,t,n,r){var i=t?H(t):window,o=void 0,a=void 0,l=i.nodeName&&i.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===i.type?o=Dt:Me(i)?It?o=Mt:(o=jt,a=Rt):(l=i.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(o=Ht),o&&(o=o(e,t)))return St(o,n,r);a&&a(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&xt(i,"number",i.value)}},Ut=se.extend({view:null,detail:null}),Wt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Vt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Wt[e])&&!!t[e]}function Bt(){return Vt}var zt=0,qt=0,Gt=!1,$t=!1,Kt=Ut.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Bt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=zt;return zt=e.screenX,Gt?"mousemove"===e.type?e.screenX-t:0:(Gt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=qt;return qt=e.screenY,$t?"mousemove"===e.type?e.screenY-t:0:($t=!0,0)}}),Qt=Kt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xt={eventTypes:Yt,extractEvents:function(e,t,n,r){var i="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(i&&(n.relatedTarget||n.fromElement)||!o&&!i)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,o?(o=t,t=(t=n.relatedTarget||n.toElement)?R(t):null):o=null,o===t)return null;var a=void 0,l=void 0,s=void 0,u=void 0;"mouseout"===e||"mouseover"===e?(a=Kt,l=Yt.mouseLeave,s=Yt.mouseEnter,u="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Qt,l=Yt.pointerLeave,s=Yt.pointerEnter,u="pointer");var c=null==o?i:H(o);if(i=null==t?i:H(t),(e=a.getPooled(l,o,n,r)).type=u+"leave",e.target=c,e.relatedTarget=i,(n=a.getPooled(s,t,n,r)).type=u+"enter",n.target=i,n.relatedTarget=c,r=t,o&&r)e:{for(i=r,u=0,a=t=o;a;a=F(a))u++;for(a=0,s=i;s;s=F(s))a++;for(;0<u-a;)t=F(t),u--;for(;0<a-u;)i=F(i),a--;for(;u--;){if(t===i||t===i.alternate)break e;t=F(t),i=F(i)}t=null}else t=null;for(i=t,t=[];o&&o!==i&&(null===(u=o.alternate)||u!==i);)t.push(o),o=F(o);for(o=[];r&&r!==i&&(null===(u=r.alternate)||u!==i);)o.push(r),r=F(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=o.length;0<r--;)V(o[r],"captured",n);return[e,n]}};function Jt(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Jt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Jt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var i=n.return,o=i?i.alternate:null;if(!i||!o)break;if(i.child===o.child){for(var l=i.child;l;){if(l===n)return nn(i),e;if(l===r)return nn(i),t;l=l.sibling}a("188")}if(n.return!==r.return)n=i,r=o;else{l=!1;for(var s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}if(!l){for(s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}l||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=se.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=se.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=Ut.extend({relatedTarget:null});function sn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var un={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=Ut.extend({key:function(e){if(e.key){var t=un[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=sn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Bt,charCode:function(e){return"keypress"===e.type?sn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?sn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=Kt.extend({dataTransfer:null}),pn=Ut.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Bt}),hn=se.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Kt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),gn=[["abort","abort"],[X,"animationEnd"],[J,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],vn={},yn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},vn[e]=t,yn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),gn.forEach(function(e){bn(e,!1)});var _n={eventTypes:vn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=yn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var i=yn[e];if(!i)return null;switch(e){case"keypress":if(0===sn(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Kt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case X:case J:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=Ut;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Qt;break;default:e=se}return z(t=e.getPooled(i,t,n,r)),t}},En=_n.isInteractiveTopLevelEventType,Tn=[];function wn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=R(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=Fe(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,a=null,l=0;l<v.length;l++){var s=v[l];s&&(s=s.extractEvents(r,t,o,i))&&(a=C(a,s))}D(a)}}var xn=!0;function Cn(e,t){if(!t)return null;var n=(En(e)?kn:On).bind(null,e);t.addEventListener(e,n,!1)}function Sn(e,t){if(!t)return null;var n=(En(e)?kn:On).bind(null,e);t.addEventListener(e,n,!0)}function kn(e,t){Pe(On,e,t)}function On(e,t){if(xn){var n=Fe(t);if(null===(n=R(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),Tn.length){var r=Tn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{je(wn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Tn.length&&Tn.push(e)}}}var Nn={},An=0,Dn="_reactListenersID"+(""+Math.random()).slice(2);function In(e){return Object.prototype.hasOwnProperty.call(e,Dn)||(e[Dn]=An++,Nn[e[Dn]]={}),Nn[e[Dn]]}function Pn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Ln(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Rn(e,t){var n,r=Ln(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Ln(r)}}function jn(){for(var e=window,t=Pn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Pn(e.document)}return t}function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Mn(e){var t=jn(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Hn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=void 0===r.end?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=Rn(n,o);var a=Rn(n,r);i&&a&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Fn=q&&"documentMode"in document&&11>=document.documentMode,Un={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,Vn=null,Bn=null,zn=!1;function qn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return zn||null==Wn||Wn!==Pn(n)?null:("selectionStart"in(n=Wn)&&Hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Bn&&en(Bn,n)?null:(Bn=n,(e=se.getPooled(Un.select,Vn,e,t)).type="select",e.target=Wn,z(e),e))}var Gn={eventTypes:Un,extractEvents:function(e,t,n,r){var i,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!o)){e:{o=In(o),i=_.onSelect;for(var a=0;a<i.length;a++){var l=i[a];if(!o.hasOwnProperty(l)||!o[l]){o=!1;break e}}o=!0}i=!o}if(i)return null;switch(o=t?H(t):window,e){case"focus":(Me(o)||"true"===o.contentEditable)&&(Wn=o,Vn=t,Bn=null);break;case"blur":Bn=Vn=Wn=null;break;case"mousedown":zn=!0;break;case"contextmenu":case"mouseup":case"dragend":return zn=!1,qn(n,r);case"selectionchange":if(Fn)break;case"keydown":case"keyup":return qn(n,r)}return null}};function $n(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+yt(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Qn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Yn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:yt(n)}}function Xn(e,t){var n=yt(t.value),r=yt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),E=M,T=j,w=H,N.injectEventPluginsByName({SimpleEventPlugin:_n,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:Ft,SelectEventPlugin:Gn,BeforeInputEventPlugin:Ce});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr,rr=void 0,ir=(nr=function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((rr=rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,t)})}:nr);function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ar={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},lr=["Webkit","ms","Moz","O"];function sr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ar.hasOwnProperty(e)&&ar[e]?(""+t).trim():t+"px"}function ur(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=sr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(ar).forEach(function(e){lr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ar[t]=ar[e]})});var cr=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function fr(e,t){t&&(cr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function dr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=In(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=_[t];for(var r=0;r<t.length;r++){var i=t[r];if(!n.hasOwnProperty(i)||!n[i]){switch(i){case"scroll":Sn("scroll",e);break;case"focus":case"blur":Sn("focus",e),Sn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":Ue(i)&&Sn(i,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(i)&&Cn(i,e)}n[i]=!0}}}function hr(){}var mr=null,gr=null;function vr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var br="function"==typeof setTimeout?setTimeout:void 0,_r="function"==typeof clearTimeout?clearTimeout:void 0,Er=o.unstable_scheduleCallback,Tr=o.unstable_cancelCallback;function wr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function xr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Cr=[],Sr=-1;function kr(e){0>Sr||(e.current=Cr[Sr],Cr[Sr]=null,Sr--)}function Or(e,t){Cr[++Sr]=e.current,e.current=t}var Nr={},Ar={current:Nr},Dr={current:!1},Ir=Nr;function Pr(e,t){var n=e.type.contextTypes;if(!n)return Nr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Lr(e){return null!=(e=e.childContextTypes)}function Rr(e){kr(Dr),kr(Ar)}function jr(e){kr(Dr),kr(Ar)}function Hr(e,t,n){Ar.current!==Nr&&a("168"),Or(Ar,t),Or(Dr,n)}function Mr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())o in e||a("108",lt(t)||"Unknown",o);return i({},n,r)}function Fr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Nr,Ir=Ar.current,Or(Ar,t),Or(Dr,Dr.current),!0}function Ur(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Mr(e,t,Ir),r.__reactInternalMemoizedMergedChildContext=t,kr(Dr),kr(Ar),Or(Ar,t)):kr(Dr),Or(Dr,n)}var Wr=null,Vr=null;function Br(e){return function(t){try{return e(t)}catch(e){}}}function zr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function qr(e,t,n,r){return new zr(e,t,n,r)}function Gr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function $r(e,t){var n=e.alternate;return null===n?((n=qr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Kr(e,t,n,r,i,o){var l=2;if(r=e,"function"==typeof e)Gr(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case Qe:return Qr(n.children,i,o,t);case et:return Yr(n,3|i,o,t);case Ye:return Yr(n,2|i,o,t);case Xe:return(e=qr(12,n,t,4|i)).elementType=Xe,e.type=Xe,e.expirationTime=o,e;case nt:return(e=qr(13,n,t,i)).elementType=nt,e.type=nt,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:l=10;break e;case Ze:l=9;break e;case tt:l=11;break e;case rt:l=14;break e;case it:l=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=qr(l,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Qr(e,t,n,r){return(e=qr(7,e,r,t)).expirationTime=n,e}function Yr(e,t,n,r){return e=qr(8,e,r,t),t=0==(1&t)?Ye:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Xr(e,t,n){return(e=qr(6,e,null,t)).expirationTime=n,e}function Jr(e,t,n){return(t=qr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),ni(t,e)}function ei(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),ni(t,e)}function ti(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function ni(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,i=t.earliestPendingTime,o=t.latestPingedTime;0===(i=0!==i?i:o)&&(0===e||r<e)&&(i=r),0!==(e=i)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=i,t.expirationTime=e}function ri(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ii=(new r.Component).refs;function oi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var ai={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Tl(),i=Yo(r=Qa(r,e));i.payload=t,null!=n&&(i.callback=n),Ba(),Jo(e,i),Ja(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Tl(),i=Yo(r=Qa(r,e));i.tag=zo,i.payload=t,null!=n&&(i.callback=n),Ba(),Jo(e,i),Ja(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Tl(),r=Yo(n=Qa(n,e));r.tag=qo,null!=t&&(r.callback=t),Ba(),Jo(e,r),Ja(e,n)}};function li(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(i,o))}function si(e,t,n){var r=!1,i=Nr,o=t.contextType;return"object"==typeof o&&null!==o?o=Vo(o):(i=Lr(t)?Ir:Ar.current,o=(r=null!=(r=t.contextTypes))?Pr(e,i):Nr),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ai,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function ui(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ai.enqueueReplaceState(t,t.state,null)}function ci(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=ii;var o=t.contextType;"object"==typeof o&&null!==o?i.context=Vo(o):(o=Lr(t)?Ir:Ar.current,i.context=Pr(e,o)),null!==(o=e.updateQueue)&&(na(e,o,n,i,r),i.state=e.memoizedState),"function"==typeof(o=t.getDerivedStateFromProps)&&(oi(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&ai.enqueueReplaceState(i,i.state,null),null!==(o=e.updateQueue)&&(na(e,o,n,i,r),i.state=e.memoizedState)),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var fi=Array.isArray;function di(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&a("309"),r=n.stateNode),r||a("147",e);var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===ii&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function pi(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function hi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=$r(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Xr(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=di(e,t,n),r.return=e,r):((r=Kr(n.type,n.key,n.props,null,e.mode,r)).ref=di(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jr(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Qr(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case $e:return(n=Kr(t.type,t.key,t.props,null,e.mode,n)).ref=di(e,null,t),n.return=e,n;case Ke:return(t=Jr(t,e.mode,n)).return=e,t}if(fi(t)||at(t))return(t=Qr(t,e.mode,n,null)).return=e,t;pi(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case $e:return n.key===i?n.type===Qe?f(e,t,n.props.children,r,i):u(e,t,n,r):null;case Ke:return n.key===i?c(e,t,n,r):null}if(fi(n)||at(n))return null!==i?null:f(e,t,n,r,null);pi(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case $e:return e=e.get(null===r.key?n:r.key)||null,r.type===Qe?f(t,e,r.props.children,i,r.key):u(t,e,r,i);case Ke:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(fi(r)||at(r))return f(t,e=e.get(n)||null,r,i,null);pi(t,r)}return null}function m(i,a,l,s){for(var u=null,c=null,f=a,m=a=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=p(i,f,l[m],s);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(i,f),a=o(v,a,m),null===c?u=v:c.sibling=v,c=v,f=g}if(m===l.length)return n(i,f),u;if(null===f){for(;m<l.length;m++)(f=d(i,l[m],s))&&(a=o(f,a,m),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(i,f);m<l.length;m++)(g=h(f,i,m,l[m],s))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),a=o(g,a,m),null===c?u=g:c.sibling=g,c=g);return e&&f.forEach(function(e){return t(i,e)}),u}function g(i,l,s,u){var c=at(s);"function"!=typeof c&&a("150"),null==(s=c.call(s))&&a("151");for(var f=c=null,m=l,g=l=0,v=null,y=s.next();null!==m&&!y.done;g++,y=s.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(i,m,y.value,u);if(null===b){m||(m=v);break}e&&m&&null===b.alternate&&t(i,m),l=o(b,l,g),null===f?c=b:f.sibling=b,f=b,m=v}if(y.done)return n(i,m),c;if(null===m){for(;!y.done;g++,y=s.next())null!==(y=d(i,y.value,u))&&(l=o(y,l,g),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(i,m);!y.done;g++,y=s.next())null!==(y=h(m,i,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),l=o(y,l,g),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach(function(e){return t(i,e)}),c}return function(e,r,o,s){var u="object"==typeof o&&null!==o&&o.type===Qe&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case $e:e:{for(c=o.key,u=r;null!==u;){if(u.key===c){if(7===u.tag?o.type===Qe:u.elementType===o.type){n(e,u.sibling),(r=i(u,o.type===Qe?o.props.children:o.props)).ref=di(e,u,o),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}o.type===Qe?((r=Qr(o.props.children,e.mode,s,o.key)).return=e,e=r):((s=Kr(o.type,o.key,o.props,null,e.mode,s)).ref=di(e,r,o),s.return=e,e=s)}return l(e);case Ke:e:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jr(o,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Xr(o,e.mode,s)).return=e,e=r),l(e);if(fi(o))return m(e,r,o,s);if(at(o))return g(e,r,o,s);if(c&&pi(e,o),void 0===o&&!u)switch(e.tag){case 1:case 0:a("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var mi=hi(!0),gi=hi(!1),vi={},yi={current:vi},bi={current:vi},_i={current:vi};function Ei(e){return e===vi&&a("174"),e}function Ti(e,t){Or(_i,t),Or(bi,e),Or(yi,vi);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}kr(yi),Or(yi,t)}function wi(e){kr(yi),kr(bi),kr(_i)}function xi(e){Ei(_i.current);var t=Ei(yi.current),n=tr(t,e.type);t!==n&&(Or(bi,e),Or(yi,n))}function Ci(e){bi.current===e&&(kr(yi),kr(bi))}var Si=0,ki=2,Oi=4,Ni=8,Ai=16,Di=32,Ii=64,Pi=128,Li=ze.ReactCurrentDispatcher,Ri=0,ji=null,Hi=null,Mi=null,Fi=null,Ui=null,Wi=null,Vi=0,Bi=null,zi=0,qi=!1,Gi=null,$i=0;function Ki(){a("307")}function Qi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Jt(e[n],t[n]))return!1;return!0}function Yi(e,t,n,r,i,o){if(Ri=o,ji=t,Mi=null!==e?e.memoizedState:null,Li.current=null===Mi?uo:co,t=n(r,i),qi){do{qi=!1,$i+=1,Mi=null!==e?e.memoizedState:null,Wi=Fi,Bi=Ui=Hi=null,Li.current=co,t=n(r,i)}while(qi);Gi=null,$i=0}return Li.current=so,(e=ji).memoizedState=Fi,e.expirationTime=Vi,e.updateQueue=Bi,e.effectTag|=zi,e=null!==Hi&&null!==Hi.next,Ri=0,Wi=Ui=Fi=Mi=Hi=ji=null,Vi=0,Bi=null,zi=0,e&&a("300"),t}function Xi(){Li.current=so,Ri=0,Wi=Ui=Fi=Mi=Hi=ji=null,Vi=0,Bi=null,zi=0,qi=!1,Gi=null,$i=0}function Ji(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Ui?Fi=Ui=e:Ui=Ui.next=e,Ui}function Zi(){if(null!==Wi)Wi=(Ui=Wi).next,Mi=null!==(Hi=Mi)?Hi.next:null;else{null===Mi&&a("310");var e={memoizedState:(Hi=Mi).memoizedState,baseState:Hi.baseState,queue:Hi.queue,baseUpdate:Hi.baseUpdate,next:null};Ui=null===Ui?Fi=e:Ui.next=e,Mi=Hi.next}return Ui}function eo(e,t){return"function"==typeof t?t(e):t}function to(e){var t=Zi(),n=t.queue;if(null===n&&a("311"),0<$i){var r=n.dispatch;if(null!==Gi){var i=Gi.get(n);if(void 0!==i){Gi.delete(n);var o=t.memoizedState;do{o=e(o,i.action),i=i.next}while(null!==i);return Jt(o,t.memoizedState)||(To=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),[o,r]}}return[t.memoizedState,r]}r=n.last;var l=t.baseUpdate;if(o=t.baseState,null!==l?(null!==r&&(r.next=null),r=l.next):r=null!==r?r.next:null,null!==r){var s=i=null,u=r,c=!1;do{var f=u.expirationTime;f<Ri?(c||(c=!0,s=l,i=o),f>Vi&&(Vi=f)):o=u.eagerReducer===e?u.eagerState:e(o,u.action),l=u,u=u.next}while(null!==u&&u!==r);c||(s=l,i=o),Jt(o,t.memoizedState)||(To=!0),t.memoizedState=o,t.baseUpdate=s,t.baseState=i,n.eagerReducer=e,n.eagerState=o}return[t.memoizedState,n.dispatch]}function no(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Bi?(Bi={lastEffect:null}).lastEffect=e.next=e:null===(t=Bi.lastEffect)?Bi.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Bi.lastEffect=e),e}function ro(e,t,n,r){var i=Ji();zi|=e,i.memoizedState=no(t,n,void 0,void 0===r?null:r)}function io(e,t,n,r){var i=Zi();r=void 0===r?null:r;var o=void 0;if(null!==Hi){var a=Hi.memoizedState;if(o=a.destroy,null!==r&&Qi(r,a.deps))return void no(Si,n,o,r)}zi|=e,i.memoizedState=no(t,n,o,r)}function oo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ao(){}function lo(e,t,n){25>$i||a("301");var r=e.alternate;if(e===ji||null!==r&&r===ji)if(qi=!0,e={expirationTime:Ri,action:n,eagerReducer:null,eagerState:null,next:null},null===Gi&&(Gi=new Map),void 0===(n=Gi.get(t)))Gi.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Ba();var i=Tl(),o={expirationTime:i=Qa(i,e),action:n,eagerReducer:null,eagerState:null,next:null},l=t.last;if(null===l)o.next=o;else{var s=l.next;null!==s&&(o.next=s),l.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.eagerReducer))try{var u=t.eagerState,c=r(u,n);if(o.eagerReducer=r,o.eagerState=c,Jt(c,u))return}catch(e){}Ja(e,i)}}var so={readContext:Vo,useCallback:Ki,useContext:Ki,useEffect:Ki,useImperativeHandle:Ki,useLayoutEffect:Ki,useMemo:Ki,useReducer:Ki,useRef:Ki,useState:Ki,useDebugValue:Ki},uo={readContext:Vo,useCallback:function(e,t){return Ji().memoizedState=[e,void 0===t?null:t],e},useContext:Vo,useEffect:function(e,t){return ro(516,Pi|Ii,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ro(4,Oi|Di,oo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ro(4,Oi|Di,e,t)},useMemo:function(e,t){var n=Ji();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ji();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,eagerReducer:e,eagerState:t}).dispatch=lo.bind(null,ji,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ji().memoizedState=e},useState:function(e){var t=Ji();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,eagerReducer:eo,eagerState:e}).dispatch=lo.bind(null,ji,e),[t.memoizedState,e]},useDebugValue:ao},co={readContext:Vo,useCallback:function(e,t){var n=Zi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:Vo,useEffect:function(e,t){return io(516,Pi|Ii,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,io(4,Oi|Di,oo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return io(4,Oi|Di,e,t)},useMemo:function(e,t){var n=Zi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:to,useRef:function(){return Zi().memoizedState},useState:function(e){return to(eo)},useDebugValue:ao},fo=null,po=null,ho=!1;function mo(e,t){var n=qr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function go(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function vo(e){if(ho){var t=po;if(t){var n=t;if(!go(e,t)){if(!(t=wr(n))||!go(e,t))return e.effectTag|=2,ho=!1,void(fo=e);mo(fo,n)}fo=e,po=xr(t)}else e.effectTag|=2,ho=!1,fo=e}}function yo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;fo=e}function bo(e){if(e!==fo)return!1;if(!ho)return yo(e),ho=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yr(t,e.memoizedProps))for(t=po;t;)mo(e,t),t=wr(t);return yo(e),po=fo?wr(e.stateNode):null,!0}function _o(){po=fo=null,ho=!1}var Eo=ze.ReactCurrentOwner,To=!1;function wo(e,t,n,r){t.child=null===e?gi(t,null,n,r):mi(t,e.child,n,r)}function xo(e,t,n,r,i){n=n.render;var o=t.ref;return Wo(t,i),r=Yi(e,t,n,r,o,i),null===e||To?(t.effectTag|=1,wo(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Po(e,t,i))}function Co(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Gr(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Kr(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,So(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(i,r)&&e.ref===t.ref)?Po(e,t,o):(t.effectTag|=1,(e=$r(a,r)).ref=t.ref,e.return=t,t.child=e)}function So(e,t,n,r,i,o){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(To=!1,i<o)?Po(e,t,o):Oo(e,t,n,r,o)}function ko(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Oo(e,t,n,r,i){var o=Lr(n)?Ir:Ar.current;return o=Pr(t,o),Wo(t,i),n=Yi(e,t,n,r,o,i),null===e||To?(t.effectTag|=1,wo(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Po(e,t,i))}function No(e,t,n,r,i){if(Lr(n)){var o=!0;Fr(t)}else o=!1;if(Wo(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),si(t,n,r),ci(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var s=a.context,u=n.contextType;"object"==typeof u&&null!==u?u=Vo(u):u=Pr(t,u=Lr(n)?Ir:Ar.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&ui(t,a,r,u),$o=!1;var d=t.memoizedState;s=a.state=d;var p=t.updateQueue;null!==p&&(na(t,p,r,a,i),s=t.memoizedState),l!==r||d!==s||Dr.current||$o?("function"==typeof c&&(oi(t,n,c,r),s=t.memoizedState),(l=$o||li(t,n,l,r,d,s,u))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=u,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,l=t.memoizedProps,a.props=t.type===t.elementType?l:ri(t.type,l),s=a.context,"object"==typeof(u=n.contextType)&&null!==u?u=Vo(u):u=Pr(t,u=Lr(n)?Ir:Ar.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||s!==u)&&ui(t,a,r,u),$o=!1,s=t.memoizedState,d=a.state=s,null!==(p=t.updateQueue)&&(na(t,p,r,a,i),d=t.memoizedState),l!==r||s!==d||Dr.current||$o?("function"==typeof c&&(oi(t,n,c,r),d=t.memoizedState),(c=$o||li(t,n,l,r,s,d,u))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,u)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Ao(e,t,n,r,o,i)}function Ao(e,t,n,r,i,o){ko(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&Ur(t,n,!1),Po(e,t,o);r=t.stateNode,Eo.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=mi(t,e.child,null,o),t.child=mi(t,null,l,o)):wo(e,t,l,o),t.memoizedState=r.state,i&&Ur(t,n,!0),t.child}function Do(e){var t=e.stateNode;t.pendingContext?Hr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Hr(0,t.context,!1),Ti(e,t.containerInfo)}function Io(e,t,n){var r=t.mode,i=t.pendingProps,o=t.memoizedState;if(0==(64&t.effectTag)){o=null;var a=!1}else o={timedOutAt:null!==o?o.timedOutAt:0},a=!0,t.effectTag&=-65;if(null===e)if(a){var l=i.fallback;e=Qr(null,r,0,null),0==(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Qr(l,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=gi(t,null,i.children,n);else null!==e.memoizedState?(l=(r=e.child).sibling,a?(n=i.fallback,i=$r(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(i.child=a)),r=i.sibling=$r(l,n,l.expirationTime),n=i,i.childExpirationTime=0,n.return=r.return=t):n=r=mi(t,r.child,i.children,n)):(l=e.child,a?(a=i.fallback,(i=Qr(null,r,0,null)).child=l,0==(1&t.mode)&&(i.child=null!==t.memoizedState?t.child.child:t.child),(r=i.sibling=Qr(a,r,n,null)).effectTag|=2,n=i,i.childExpirationTime=0,n.return=r.return=t):r=n=mi(t,l,i.children,n)),t.stateNode=e.stateNode;return t.memoizedState=o,t.child=n,r}function Po(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=$r(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$r(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Lo(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||Dr.current)To=!0;else if(r<n){switch(To=!1,t.tag){case 3:Do(t),_o();break;case 5:xi(t);break;case 1:Lr(t.type)&&Fr(t);break;case 4:Ti(t,t.stateNode.containerInfo);break;case 10:Fo(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Io(e,t,n):null!==(t=Po(e,t,n))?t.sibling:null}return Po(e,t,n)}}else To=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var i=Pr(t,Ar.current);if(Wo(t,n),i=Yi(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,Xi(),Lr(r)){var o=!0;Fr(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var l=r.getDerivedStateFromProps;"function"==typeof l&&oi(t,r,l,e),i.updater=ai,t.stateNode=i,i._reactInternalFiber=t,ci(t,r,e,n),t=Ao(null,t,r,!0,o,n)}else t.tag=0,wo(null,t,i,n),t=t.child;return t;case 16:switch(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),o=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(i),t.type=e,i=t.tag=function(e){if("function"==typeof e)return Gr(e)?1:0;if(null!=e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),o=ri(e,o),l=void 0,i){case 0:l=Oo(null,t,e,o,n);break;case 1:l=No(null,t,e,o,n);break;case 11:l=xo(null,t,e,o,n);break;case 14:l=Co(null,t,e,ri(e.type,o),r,n);break;default:a("306",e,"")}return l;case 0:return r=t.type,i=t.pendingProps,Oo(e,t,r,i=t.elementType===r?i:ri(r,i),n);case 1:return r=t.type,i=t.pendingProps,No(e,t,r,i=t.elementType===r?i:ri(r,i),n);case 3:return Do(t),null===(r=t.updateQueue)&&a("282"),i=null!==(i=t.memoizedState)?i.element:null,na(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===i?(_o(),t=Po(e,t,n)):(i=t.stateNode,(i=(null===e||null===e.child)&&i.hydrate)&&(po=xr(t.stateNode.containerInfo),fo=t,i=ho=!0),i?(t.effectTag|=2,t.child=gi(t,null,r,n)):(wo(e,t,r,n),_o()),t=t.child),t;case 5:return xi(t),null===e&&vo(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,l=i.children,yr(r,i)?l=null:null!==o&&yr(r,o)&&(t.effectTag|=16),ko(e,t),1!==n&&1&t.mode&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(wo(e,t,l,n),t=t.child),t;case 6:return null===e&&vo(t),null;case 13:return Io(e,t,n);case 4:return Ti(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=mi(t,null,r,n):wo(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,xo(e,t,r,i=t.elementType===r?i:ri(r,i),n);case 7:return wo(e,t,t.pendingProps,n),t.child;case 8:case 12:return wo(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,l=t.memoizedProps,Fo(t,o=i.value),null!==l){var s=l.value;if(0===(o=Jt(s,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,o):1073741823))){if(l.children===i.children&&!Dr.current){t=Po(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var u=s.contextDependencies;if(null!==u){l=s.child;for(var c=u.first;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===s.tag&&((c=Yo(n)).tag=qo,Jo(s,c)),s.expirationTime<n&&(s.expirationTime=n),null!==(c=s.alternate)&&c.expirationTime<n&&(c.expirationTime=n),c=n;for(var f=s.return;null!==f;){var d=f.alternate;if(f.childExpirationTime<c)f.childExpirationTime=c,null!==d&&d.childExpirationTime<c&&(d.childExpirationTime=c);else{if(!(null!==d&&d.childExpirationTime<c))break;d.childExpirationTime=c}f=f.return}u.expirationTime<n&&(u.expirationTime=n);break}c=c.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}}wo(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,Wo(t,n),r=r(i=Vo(i,o.unstable_observedBits)),t.effectTag|=1,wo(e,t,r,n),t.child;case 14:return o=ri(i=t.type,t.pendingProps),Co(e,t,i,o=ri(i.type,o),r,n);case 15:return So(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:ri(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Lr(r)?(e=!0,Fr(t)):e=!1,Wo(t,n),si(t,r,i),ci(t,r,i,n),Ao(null,t,r,!0,e,n)}a("156")}var Ro={current:null},jo=null,Ho=null,Mo=null;function Fo(e,t){var n=e.type._context;Or(Ro,n._currentValue),n._currentValue=t}function Uo(e){var t=Ro.current;kr(Ro),e.type._context._currentValue=t}function Wo(e,t){jo=e,Mo=Ho=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(To=!0),e.contextDependencies=null}function Vo(e,t){return Mo!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(Mo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ho?(null===jo&&a("308"),Ho=t,jo.contextDependencies={first:t,expirationTime:0}):Ho=Ho.next=t),e._currentValue}var Bo=0,zo=1,qo=2,Go=3,$o=!1;function Ko(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Qo(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Yo(e){return{expirationTime:e,tag:Bo,payload:null,callback:null,next:null,nextEffect:null}}function Xo(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Jo(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,i=null;null===r&&(r=e.updateQueue=Ko(e.memoizedState))}else r=e.updateQueue,i=n.updateQueue,null===r?null===i?(r=e.updateQueue=Ko(e.memoizedState),i=n.updateQueue=Ko(n.memoizedState)):r=e.updateQueue=Qo(i):null===i&&(i=n.updateQueue=Qo(r));null===i||r===i?Xo(r,t):null===r.lastUpdate||null===i.lastUpdate?(Xo(r,t),Xo(i,t)):(Xo(r,t),i.lastUpdate=t)}function Zo(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Ko(e.memoizedState):ea(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ea(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Qo(t)),t}function ta(e,t,n,r,o,a){switch(n.tag){case zo:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case Go:e.effectTag=-2049&e.effectTag|64;case Bo:if(null==(o="function"==typeof(e=n.payload)?e.call(a,r,o):e))break;return i({},r,o);case qo:$o=!0}return r}function na(e,t,n,r,i){$o=!1;for(var o=(t=ea(e,t)).baseState,a=null,l=0,s=t.firstUpdate,u=o;null!==s;){var c=s.expirationTime;c<i?(null===a&&(a=s,o=u),l<c&&(l=c)):(u=ta(e,0,s,u,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=s:(t.lastEffect.nextEffect=s,t.lastEffect=s))),s=s.next}for(c=null,s=t.firstCapturedUpdate;null!==s;){var f=s.expirationTime;f<i?(null===c&&(c=s,null===a&&(o=u)),l<f&&(l=f)):(u=ta(e,0,s,u,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=s:(t.lastCapturedEffect.nextEffect=s,t.lastCapturedEffect=s))),s=s.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(o=u),t.baseState=o,t.firstUpdate=a,t.firstCapturedUpdate=c,e.expirationTime=l,e.memoizedState=u}function ra(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ia(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ia(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ia(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function oa(e,t){return{value:e,source:t,stack:st(t)}}function aa(e){e.effectTag|=4}var la=void 0,sa=void 0,ua=void 0,ca=void 0;la=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},sa=function(){},ua=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var l=t.stateNode;switch(Ei(yi.current),e=null,n){case"input":a=bt(l,a),r=bt(l,r),e=[];break;case"option":a=$n(l,a),r=$n(l,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=Qn(l,a),r=Qn(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=hr)}fr(n,r),l=n=void 0;var s=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var u=a[n];for(l in u)u.hasOwnProperty(l)&&(s||(s={}),s[l]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(u=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&c!==u&&(null!=c||null!=u))if("style"===n)if(u){for(l in u)!u.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(s||(s={}),s[l]="");for(l in c)c.hasOwnProperty(l)&&u[l]!==c[l]&&(s||(s={}),s[l]=c[l])}else s||(e||(e=[]),e.push(n,s)),s=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(e=e||[]).push(n,""+c)):"children"===n?u===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=c&&pr(o,n),e||u===c||(e=[])):(e=e||[]).push(n,c))}s&&(e=e||[]).push("style",s),o=e,(t.updateQueue=o)&&aa(t)}},ca=function(e,t,n,r){n!==r&&aa(t)};var fa="function"==typeof WeakSet?WeakSet:Set;function da(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=st(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function pa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ka(e,t)}else t.current=null}function ha(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==Si){var i=r.destroy;r.destroy=void 0,void 0!==i&&i()}(r.tag&t)!==Si&&(i=r.create,r.destroy=i()),r=r.next}while(r!==n)}}function ma(e){switch("function"==typeof Vr&&Vr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var i=e;try{r()}catch(e){Ka(i,e)}}n=n.next}while(n!==t)}break;case 1:if(pa(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Ka(e,t)}break;case 5:pa(e);break;case 4:ya(e)}}function ga(e){return 5===e.tag||3===e.tag||4===e.tag}function va(e){e:{for(var t=e.return;null!==t;){if(ga(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ga(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){if(5===i.tag||6===i.tag)if(n)if(r){var o=t,l=i.stateNode,s=n;8===o.nodeType?o.parentNode.insertBefore(l,s):o.insertBefore(l,s)}else t.insertBefore(i.stateNode,n);else r?(l=t,s=i.stateNode,8===l.nodeType?(o=l.parentNode).insertBefore(s,l):(o=l).appendChild(s),null!=(l=l._reactRootContainer)||null!==o.onclick||(o.onclick=hr)):t.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function ya(e){for(var t=e,n=!1,r=void 0,i=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,i=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,i=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var o=t,l=o;;)if(ma(l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===o)break;for(;null===l.sibling;){if(null===l.return||l.return===o)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}i?(o=r,l=t.stateNode,8===o.nodeType?o.parentNode.removeChild(l):o.removeChild(l)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,i=!0,t.child.return=t,t=t.child;continue}}else if(ma(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function ba(e,t){switch(t.tag){case 0:case 11:case 14:case 15:ha(Oi,Ni,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var i=t.type,o=t.updateQueue;t.updateQueue=null,null!==o&&function(e,t,n,r,i){e[L]=i,"input"===n&&"radio"===i.type&&null!=i.name&&Et(e,i),dr(n,r),r=dr(n,i);for(var o=0;o<t.length;o+=2){var a=t[o],l=t[o+1];"style"===a?ur(e,l):"dangerouslySetInnerHTML"===a?ir(e,l):"children"===a?or(e,l):vt(e,a,l,r)}switch(n){case"input":Tt(e,i);break;case"textarea":Xn(e,i);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!i.multiple,null!=(n=i.value)?Kn(e,!!i.multiple,n,!1):t!==!!i.multiple&&(null!=i.defaultValue?Kn(e,!!i.multiple,i.defaultValue,!0):Kn(e,!!i.multiple,i.multiple?[]:"",!1))}}(n,o,i,e,r)}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=Tl())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=sr("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var l=t.stateNode;null===l&&(l=t.stateNode=new fa),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Qa(t=Tl(),e),null!==(e=Xa(e,t))&&(Zr(e,t),0!==(t=e.expirationTime)&&wl(e,t))}.bind(null,t,e);l.has(e)||(l.add(e),e.then(n,n))})}break;case 17:break;default:a("163")}}var _a="function"==typeof WeakMap?WeakMap:Map;function Ea(e,t,n){(n=Yo(n)).tag=Go,n.payload={element:null};var r=t.value;return n.callback=function(){Il(r),da(e,t)},n}function Ta(e,t,n){(n=Yo(n)).tag=Go;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ma?Ma=new Set([this]):Ma.add(this));var n=t.value,i=t.stack;da(e,t),this.componentDidCatch(n,{componentStack:null!==i?i:""})}),n}function wa(e){switch(e.tag){case 1:Lr(e.type)&&Rr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return wi(),jr(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return Ci(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return wi(),null;case 10:return Uo(e),null;default:return null}}var xa=ze.ReactCurrentDispatcher,Ca=ze.ReactCurrentOwner,Sa=1073741822,ka=!1,Oa=null,Na=null,Aa=0,Da=-1,Ia=!1,Pa=null,La=!1,Ra=null,ja=null,Ha=null,Ma=null;function Fa(){if(null!==Oa)for(var e=Oa.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!=n&&Rr();break;case 3:wi(),jr();break;case 5:Ci(t);break;case 4:wi();break;case 10:Uo(t)}e=e.return}Na=null,Aa=0,Da=-1,Ia=!1,Oa=null}function Ua(){for(;null!==Pa;){var e=Pa.effectTag;if(16&e&&or(Pa.stateNode,""),128&e){var t=Pa.alternate;null!==t&&(null!==(t=t.ref)&&("function"==typeof t?t(null):t.current=null))}switch(14&e){case 2:va(Pa),Pa.effectTag&=-3;break;case 6:va(Pa),Pa.effectTag&=-3,ba(Pa.alternate,Pa);break;case 4:ba(Pa.alternate,Pa);break;case 8:ya(e=Pa),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Pa=Pa.nextEffect}}function Wa(){for(;null!==Pa;){if(256&Pa.effectTag)e:{var e=Pa.alternate,t=Pa;switch(t.tag){case 0:case 11:case 15:ha(ki,Si,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ri(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Pa=Pa.nextEffect}}function Va(e,t){for(;null!==Pa;){var n=Pa.effectTag;if(36&n){var r=Pa.alternate,i=Pa,o=t;switch(i.tag){case 0:case 11:case 15:ha(Ai,Di,i);break;case 1:var l=i.stateNode;if(4&i.effectTag)if(null===r)l.componentDidMount();else{var s=i.elementType===i.type?r.memoizedProps:ri(i.type,r.memoizedProps);l.componentDidUpdate(s,r.memoizedState,l.__reactInternalSnapshotBeforeUpdate)}null!==(r=i.updateQueue)&&ra(0,r,l);break;case 3:if(null!==(r=i.updateQueue)){if(l=null,null!==i.child)switch(i.child.tag){case 5:l=i.child.stateNode;break;case 1:l=i.child.stateNode}ra(0,r,l)}break;case 5:o=i.stateNode,null===r&&4&i.effectTag&&vr(i.type,i.memoizedProps)&&o.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}128&n&&(null!==(i=Pa.ref)&&(o=Pa.stateNode,"function"==typeof i?i(o):i.current=o)),512&n&&(Ra=e),Pa=Pa.nextEffect}}function Ba(){null!==ja&&Tr(ja),null!==Ha&&Ha()}function za(e,t){La=ka=!0,e.current===t&&a("177");var n=e.pendingCommitExpirationTime;0===n&&a("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,i=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Zr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Zr(e,t)):t>n&&Zr(e,t)}ni(0,e)}(e,i>r?i:r),Ca.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,mr=xn,gr=function(){var e=jn();if(Hn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,i=n.focusNode;n=n.focusOffset;try{t.nodeType,i.nodeType}catch(e){t=null;break e}var o=0,a=-1,l=-1,s=0,u=0,c=e,f=null;t:for(;;){for(var d;c!==t||0!==r&&3!==c.nodeType||(a=o+r),c!==i||0!==n&&3!==c.nodeType||(l=o+n),3===c.nodeType&&(o+=c.nodeValue.length),null!==(d=c.firstChild);)f=c,c=d;for(;;){if(c===e)break t;if(f===t&&++s===r&&(a=o),f===i&&++u===n&&(l=o),null!==(d=c.nextSibling))break;f=(c=f).parentNode}c=d}t=-1===a||-1===l?null:{start:a,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),xn=!1,Pa=r;null!==Pa;){i=!1;var l=void 0;try{Wa()}catch(e){i=!0,l=e}i&&(null===Pa&&a("178"),Ka(Pa,l),null!==Pa&&(Pa=Pa.nextEffect))}for(Pa=r;null!==Pa;){i=!1,l=void 0;try{Ua()}catch(e){i=!0,l=e}i&&(null===Pa&&a("178"),Ka(Pa,l),null!==Pa&&(Pa=Pa.nextEffect))}for(Mn(gr),gr=null,xn=!!mr,mr=null,e.current=t,Pa=r;null!==Pa;){i=!1,l=void 0;try{Va(e,n)}catch(e){i=!0,l=e}i&&(null===Pa&&a("178"),Ka(Pa,l),null!==Pa&&(Pa=Pa.nextEffect))}if(null!==r&&null!==Ra){var s=function(e,t){Ha=ja=Ra=null;var n=il;il=!0;do{if(512&t.effectTag){var r=!1,i=void 0;try{var o=t;ha(Pi,Si,o),ha(Si,Ii,o)}catch(e){r=!0,i=e}r&&Ka(t,i)}t=t.nextEffect}while(null!==t);il=n,0!==(n=e.expirationTime)&&wl(e,n),cl||il||Ol(1073741823,!1)}.bind(null,e,r);ja=o.unstable_runWithPriority(o.unstable_NormalPriority,function(){return Er(s)}),Ha=s}ka=La=!1,"function"==typeof Wr&&Wr(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(Ma=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function qa(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Oa=e;e:{var o=t,l=Aa,s=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Lr(t.type)&&Rr();break;case 3:wi(),jr(),(s=t.stateNode).pendingContext&&(s.context=s.pendingContext,s.pendingContext=null),null!==o&&null!==o.child||(bo(t),t.effectTag&=-3),sa(t);break;case 5:Ci(t);var u=Ei(_i.current);if(l=t.type,null!==o&&null!=t.stateNode)ua(o,t,l,s,u),o.ref!==t.ref&&(t.effectTag|=128);else if(s){var c=Ei(yi.current);if(bo(t)){o=(s=t).stateNode;var f=s.type,d=s.memoizedProps,p=u;switch(o[P]=s,o[L]=d,l=void 0,u=f){case"iframe":case"object":Cn("load",o);break;case"video":case"audio":for(f=0;f<te.length;f++)Cn(te[f],o);break;case"source":Cn("error",o);break;case"img":case"image":case"link":Cn("error",o),Cn("load",o);break;case"form":Cn("reset",o),Cn("submit",o);break;case"details":Cn("toggle",o);break;case"input":_t(o,d),Cn("invalid",o),pr(p,"onChange");break;case"select":o._wrapperState={wasMultiple:!!d.multiple},Cn("invalid",o),pr(p,"onChange");break;case"textarea":Yn(o,d),Cn("invalid",o),pr(p,"onChange")}for(l in fr(u,d),f=null,d)d.hasOwnProperty(l)&&(c=d[l],"children"===l?"string"==typeof c?o.textContent!==c&&(f=["children",c]):"number"==typeof c&&o.textContent!==""+c&&(f=["children",""+c]):b.hasOwnProperty(l)&&null!=c&&pr(p,l));switch(u){case"input":Ve(o),wt(o,d,!0);break;case"textarea":Ve(o),Jn(o);break;case"select":case"option":break;default:"function"==typeof d.onClick&&(o.onclick=hr)}l=f,s.updateQueue=l,(s=null!==l)&&aa(t)}else{d=t,o=l,p=s,f=9===u.nodeType?u:u.ownerDocument,c===Zn.html&&(c=er(o)),c===Zn.html?"script"===o?((o=f.createElement("div")).innerHTML="<script><\/script>",f=o.removeChild(o.firstChild)):"string"==typeof p.is?f=f.createElement(o,{is:p.is}):(f=f.createElement(o),"select"===o&&p.multiple&&(f.multiple=!0)):f=f.createElementNS(c,o),(o=f)[P]=d,o[L]=s,la(o,t,!1,!1),p=o;var h=u,m=dr(f=l,d=s);switch(f){case"iframe":case"object":Cn("load",p),u=d;break;case"video":case"audio":for(u=0;u<te.length;u++)Cn(te[u],p);u=d;break;case"source":Cn("error",p),u=d;break;case"img":case"image":case"link":Cn("error",p),Cn("load",p),u=d;break;case"form":Cn("reset",p),Cn("submit",p),u=d;break;case"details":Cn("toggle",p),u=d;break;case"input":_t(p,d),u=bt(p,d),Cn("invalid",p),pr(h,"onChange");break;case"option":u=$n(p,d);break;case"select":p._wrapperState={wasMultiple:!!d.multiple},u=i({},d,{value:void 0}),Cn("invalid",p),pr(h,"onChange");break;case"textarea":Yn(p,d),u=Qn(p,d),Cn("invalid",p),pr(h,"onChange");break;default:u=d}fr(f,u),c=void 0;var g=f,v=p,y=u;for(c in y)if(y.hasOwnProperty(c)){var _=y[c];"style"===c?ur(v,_):"dangerouslySetInnerHTML"===c?null!=(_=_?_.__html:void 0)&&ir(v,_):"children"===c?"string"==typeof _?("textarea"!==g||""!==_)&&or(v,_):"number"==typeof _&&or(v,""+_):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(b.hasOwnProperty(c)?null!=_&&pr(h,c):null!=_&&vt(v,c,_,m))}switch(f){case"input":Ve(p),wt(p,d,!1);break;case"textarea":Ve(p),Jn(p);break;case"option":null!=d.value&&p.setAttribute("value",""+yt(d.value));break;case"select":(u=p).multiple=!!d.multiple,null!=(p=d.value)?Kn(u,!!d.multiple,p,!1):null!=d.defaultValue&&Kn(u,!!d.multiple,d.defaultValue,!0);break;default:"function"==typeof u.onClick&&(p.onclick=hr)}(s=vr(l,s))&&aa(t),t.stateNode=o}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:o&&null!=t.stateNode?ca(o,t,o.memoizedProps,s):("string"!=typeof s&&(null===t.stateNode&&a("166")),o=Ei(_i.current),Ei(yi.current),bo(t)?(l=(s=t).stateNode,o=s.memoizedProps,l[P]=s,(s=l.nodeValue!==o)&&aa(t)):(l=t,(s=(9===o.nodeType?o:o.ownerDocument).createTextNode(s))[P]=t,l.stateNode=s));break;case 11:break;case 13:if(s=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=l,Oa=t;break e}s=null!==s,l=null!==o&&null!==o.memoizedState,null!==o&&!s&&l&&(null!==(o=o.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=o,o.nextEffect=u):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),(s||l)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:wi(),sa(t);break;case 10:Uo(t);break;case 9:case 14:break;case 17:Lr(t.type)&&Rr();break;case 18:break;default:a("156")}Oa=null}if(t=e,1===Aa||1!==t.childExpirationTime){for(s=0,l=t.child;null!==l;)(o=l.expirationTime)>s&&(s=o),(u=l.childExpirationTime)>s&&(s=u),l=l.sibling;t.childExpirationTime=s}if(null!==Oa)return Oa;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=wa(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Ga(e){var t=Lo(e.alternate,e,Aa);return e.memoizedProps=e.pendingProps,null===t&&(t=qa(e)),Ca.current=null,t}function $a(e,t){ka&&a("243"),Ba(),ka=!0;var n=xa.current;xa.current=so;var r=e.nextExpirationTimeToWorkOn;r===Aa&&e===Na&&null!==Oa||(Fa(),Aa=r,Oa=$r((Na=e).current,null),e.pendingCommitExpirationTime=0);for(var i=!1;;){try{if(t)for(;null!==Oa&&!Sl();)Oa=Ga(Oa);else for(;null!==Oa;)Oa=Ga(Oa)}catch(t){if(Mo=Ho=jo=null,Xi(),null===Oa)i=!0,Il(t);else{null===Oa&&a("271");var o=Oa,l=o.return;if(null!==l){e:{var s=e,u=l,c=o,f=t;if(l=Aa,c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==f&&"object"==typeof f&&"function"==typeof f.then){var d=f;f=u;var p=-1,h=-1;do{if(13===f.tag){var m=f.alternate;if(null!==m&&null!==(m=m.memoizedState)){h=10*(1073741822-m.timedOutAt);break}"number"==typeof(m=f.pendingProps.maxDuration)&&(0>=m?p=0:(-1===p||m<p)&&(p=m))}f=f.return}while(null!==f);f=u;do{if((m=13===f.tag)&&(m=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),m){if(null===(u=f.updateQueue)?((u=new Set).add(d),f.updateQueue=u):u.add(d),0==(1&f.mode)){f.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((l=Yo(1073741823)).tag=qo,Jo(c,l))),c.expirationTime=1073741823;break e}u=l;var g=(c=s).pingCache;null===g?(g=c.pingCache=new _a,m=new Set,g.set(d,m)):void 0===(m=g.get(d))&&(m=new Set,g.set(d,m)),m.has(u)||(m.add(u),c=Ya.bind(null,c,d,u),d.then(c,c)),-1===p?s=1073741823:(-1===h&&(h=10*(1073741822-ti(s,l))-5e3),s=h+p),0<=s&&Da<s&&(Da=s),f.effectTag|=2048,f.expirationTime=l;break e}f=f.return}while(null!==f);f=Error((lt(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+st(c))}Ia=!0,f=oa(f,c),s=u;do{switch(s.tag){case 3:s.effectTag|=2048,s.expirationTime=l,Zo(s,l=Ea(s,f,l));break e;case 1:if(p=f,h=s.type,c=s.stateNode,0==(64&s.effectTag)&&("function"==typeof h.getDerivedStateFromError||null!==c&&"function"==typeof c.componentDidCatch&&(null===Ma||!Ma.has(c)))){s.effectTag|=2048,s.expirationTime=l,Zo(s,l=Ta(s,p,l));break e}}s=s.return}while(null!==s)}Oa=qa(o);continue}i=!0,Il(t)}}break}if(ka=!1,xa.current=n,Mo=Ho=jo=null,Xi(),i)Na=null,e.finishedWork=null;else if(null!==Oa)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&a("281"),Na=null,Ia){if(i=e.latestPendingTime,o=e.latestSuspendedTime,l=e.latestPingedTime,0!==i&&i<r||0!==o&&o<r||0!==l&&l<r)return ei(e,r),void El(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void El(e,n,r,t,-1)}t&&-1!==Da?(ei(e,r),(t=10*(1073741822-ti(e,r)))<Da&&(Da=t),t=10*(1073741822-Tl()),t=Da-t,El(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Ka(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ma||!Ma.has(r)))return Jo(n,e=Ta(n,e=oa(t,e),1073741823)),void Ja(n,1073741823);break;case 3:return Jo(n,e=Ea(n,e=oa(t,e),1073741823)),void Ja(n,1073741823)}n=n.return}3===e.tag&&(Jo(e,n=Ea(e,n=oa(t,e),1073741823)),Ja(e,1073741823))}function Qa(e,t){var n=o.unstable_getCurrentPriorityLevel(),r=void 0;if(0==(1&t.mode))r=1073741823;else if(ka&&!La)r=Aa;else{switch(n){case o.unstable_ImmediatePriority:r=1073741823;break;case o.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case o.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case o.unstable_LowPriority:case o.unstable_IdlePriority:r=1;break;default:a("313")}null!==Na&&r===Aa&&--r}return n===o.unstable_UserBlockingPriority&&(0===ll||r<ll)&&(ll=r),r}function Ya(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Na&&Aa===n?Na=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),ni(n,e),0!==(n=e.expirationTime)&&wl(e,n)))}function Xa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return i}function Ja(e,t){null!==(e=Xa(e,t))&&(!ka&&0!==Aa&&t>Aa&&Fa(),Zr(e,t),ka&&!La&&Na===e||wl(e,e.expirationTime),vl>gl&&(vl=0,a("185")))}function Za(e,t,n,r,i){return o.unstable_runWithPriority(o.unstable_ImmediatePriority,function(){return e(t,n,r,i)})}var el=null,tl=null,nl=0,rl=void 0,il=!1,ol=null,al=0,ll=0,sl=!1,ul=null,cl=!1,fl=!1,dl=null,pl=o.unstable_now(),hl=1073741822-(pl/10|0),ml=hl,gl=50,vl=0,yl=null;function bl(){hl=1073741822-((o.unstable_now()-pl)/10|0)}function _l(e,t){if(0!==nl){if(t<nl)return;null!==rl&&o.unstable_cancelCallback(rl)}nl=t,e=o.unstable_now()-pl,rl=o.unstable_scheduleCallback(kl,{timeout:10*(1073741822-t)-e})}function El(e,t,n,r,i){e.expirationTime=r,0!==i||Sl()?0<i&&(e.timeoutHandle=br(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,bl(),ml=hl,Nl(e,n)}.bind(null,e,t,n),i)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function Tl(){return il?ml:(xl(),0!==al&&1!==al||(bl(),ml=hl),ml)}function wl(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===tl?(el=tl=e,e.nextScheduledRoot=e):(tl=tl.nextScheduledRoot=e).nextScheduledRoot=el):t>e.expirationTime&&(e.expirationTime=t),il||(cl?fl&&(ol=e,al=1073741823,Al(e,1073741823,!1)):1073741823===t?Ol(1073741823,!1):_l(e,t))}function xl(){var e=0,t=null;if(null!==tl)for(var n=tl,r=el;null!==r;){var i=r.expirationTime;if(0===i){if((null===n||null===tl)&&a("244"),r===r.nextScheduledRoot){el=tl=r.nextScheduledRoot=null;break}if(r===el)el=i=r.nextScheduledRoot,tl.nextScheduledRoot=i,r.nextScheduledRoot=null;else{if(r===tl){(tl=n).nextScheduledRoot=el,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(i>e&&(e=i,t=r),r===tl)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}ol=t,al=e}var Cl=!1;function Sl(){return!!Cl||!!o.unstable_shouldYield()&&(Cl=!0)}function kl(){try{if(!Sl()&&null!==el){bl();var e=el;do{var t=e.expirationTime;0!==t&&hl<=t&&(e.nextExpirationTimeToWorkOn=hl),e=e.nextScheduledRoot}while(e!==el)}Ol(0,!0)}finally{Cl=!1}}function Ol(e,t){if(xl(),t)for(bl(),ml=hl;null!==ol&&0!==al&&e<=al&&!(Cl&&hl>al);)Al(ol,al,hl>al),xl(),bl(),ml=hl;else for(;null!==ol&&0!==al&&e<=al;)Al(ol,al,!1),xl();if(t&&(nl=0,rl=null),0!==al&&_l(ol,al),vl=0,yl=null,null!==dl)for(e=dl,dl=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){sl||(sl=!0,ul=e)}}if(sl)throw e=ul,ul=null,sl=!1,e}function Nl(e,t){il&&a("253"),ol=e,al=t,Al(e,t,!1),Ol(1073741823,!1)}function Al(e,t,n){if(il&&a("245"),il=!0,n){var r=e.finishedWork;null!==r?Dl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,_r(r)),$a(e,n),null!==(r=e.finishedWork)&&(Sl()?e.finishedWork=r:Dl(e,r,t)))}else null!==(r=e.finishedWork)?Dl(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,_r(r)),$a(e,n),null!==(r=e.finishedWork)&&Dl(e,r,t));il=!1}function Dl(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===dl?dl=[r]:dl.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===yl?vl++:(yl=e,vl=0),o.unstable_runWithPriority(o.unstable_ImmediatePriority,function(){za(e,t)})}function Il(e){null===ol&&a("246"),ol.expirationTime=0,sl||(sl=!0,ul=e)}function Pl(e,t){var n=cl;cl=!0;try{return e(t)}finally{(cl=n)||il||Ol(1073741823,!1)}}function Ll(e,t){if(cl&&!fl){fl=!0;try{return e(t)}finally{fl=!1}}return e(t)}function Rl(e,t,n){cl||il||0===ll||(Ol(ll,!1),ll=0);var r=cl;cl=!0;try{return o.unstable_runWithPriority(o.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(cl=r)||il||Ol(1073741823,!1)}}function jl(e,t,n,r,i){var o=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||a("170");var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Lr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);a("171"),l=void 0}if(1===n.tag){var s=n.type;if(Lr(s)){n=Mr(n,s,l);break e}}n=l}else n=Nr;return null===t.context?t.context=n:t.pendingContext=n,t=i,(i=Yo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(i.callback=t),Ba(),Jo(o,i),Ja(o,r),r}function Hl(e,t,n,r){var i=t.current;return jl(e,t,n,i=Qa(Tl(),i),r)}function Ml(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fl(e){var t=1073741822-25*(1+((1073741822-Tl()+500)/25|0));t>=Sa&&(t=Sa-1),this._expirationTime=Sa=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Ul(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Wl(e,t,n){e={current:t=qr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Vl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Bl(e,t,n,r,i){var o=n._reactRootContainer;if(o){if("function"==typeof i){var a=i;i=function(){var e=Ml(o._internalRoot);a.call(e)}}null!=e?o.legacy_renderSubtreeIntoContainer(e,t,i):o.render(t,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Wl(e,!1,t)}(n,r),"function"==typeof i){var l=i;i=function(){var e=Ml(o._internalRoot);l.call(e)}}Ll(function(){null!=e?o.legacy_renderSubtreeIntoContainer(e,t,i):o.render(t,i)})}return Ml(o._internalRoot)}function zl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Vl(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ke,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Se=function(e,t,n){switch(t){case"input":if(Tt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=M(r);i||a("90"),Be(r),Tt(r,i)}}}break;case"textarea":Xn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},Fl.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Ul;return jl(e,t,null,n,r._onCommit),r},Fl.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Fl.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,i=t;i!==this;)r=i,i=i._next;null===r&&a("251"),r._next=i._next,this._next=t,e.firstBatch=this}this._defer=!1,Nl(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Fl.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Ul.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Ul.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},Wl.prototype.render=function(e,t){var n=this._internalRoot,r=new Ul;return null!==(t=void 0===t?null:t)&&r.then(t),Hl(e,n,null,r._onCommit),r},Wl.prototype.unmount=function(e){var t=this._internalRoot,n=new Ul;return null!==(e=void 0===e?null:e)&&n.then(e),Hl(null,t,null,n._onCommit),n},Wl.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,i=new Ul;return null!==(n=void 0===n?null:n)&&i.then(n),Hl(t,r,e,i._onCommit),i},Wl.prototype.createBatch=function(){var e=new Fl(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ie=Pl,Pe=Rl,Le=function(){il||0===ll||(Ol(ll,!1),ll=0)};var ql={createPortal:zl,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return Vl(t)||a("200"),Bl(null,e,t,!0,n)},render:function(e,t,n){return Vl(t)||a("200"),Bl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return Vl(n)||a("200"),(null==e||void 0===e._reactInternalFiber)&&a("38"),Bl(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Vl(e)||a("40"),!!e._reactRootContainer&&(Ll(function(){Bl(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return zl.apply(void 0,arguments)},unstable_batchedUpdates:Pl,unstable_interactiveUpdates:Rl,flushSync:function(e,t){il&&a("187");var n=cl;cl=!0;try{return Za(e,t)}finally{cl=n,Ol(1073741823,!1)}},unstable_createRoot:function(e,t){return Vl(e)||a("299","unstable_createRoot"),new Wl(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=cl;cl=!0;try{Za(e)}finally{(cl=t)||il||Ol(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[j,H,M,N.injectEventPluginsByName,y,z,function(e){S(e,B)},Ae,De,On,D]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Wr=Br(function(e){return t.onCommitFiberRoot(n,e)}),Vr=Br(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(i({},e,{overrideProps:null,currentDispatcherRef:ze.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:R,bundleType:0,version:"16.8.2",rendererPackageName:"react-dom"});var Gl={default:ql},$l=Gl&&ql||Gl;e.exports=$l.default||$l},function(e,t,n){"use strict";e.exports=n(8)},function(e,t,n){"use strict";(function(e){
/** @license React v0.13.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,i=3,o=-1,a=-1,l=!1,s=!1;function u(){if(!l){var e=n.expirationTime;s?w():s=!0,T(d,e)}}function c(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var o=i,l=a;i=e,a=t;try{var s=r()}finally{i=o,a=l}if("function"==typeof s)if(s={callback:s,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=s.next=s.previous=s;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=s,u()),(t=r.previous).next=r.previous=s,s.next=r,s.previous=t}}function f(){if(-1===o&&null!==n&&1===n.priorityLevel){l=!0;try{do{c()}while(null!==n&&1===n.priorityLevel)}finally{l=!1,null!==n?u():s=!1}}}function d(e){l=!0;var i=r;r=e;try{if(e)for(;null!==n;){var o=t.unstable_now();if(!(n.expirationTime<=o))break;do{c()}while(null!==n&&n.expirationTime<=o)}else if(null!==n)do{c()}while(null!==n&&!x())}finally{l=!1,r=i,null!==n?u():s=!1,f()}}var p,h,m=Date,g="function"==typeof setTimeout?setTimeout:void 0,v="function"==typeof clearTimeout?clearTimeout:void 0,y="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,b="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function _(e){p=y(function(t){v(h),e(t)}),h=g(function(){b(p),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var E=performance;t.unstable_now=function(){return E.now()}}else t.unstable_now=function(){return m.now()};var T,w,x,C=null;if("undefined"!=typeof window?C=window:void 0!==e&&(C=e),C&&C._schedMock){var S=C._schedMock;T=S[0],w=S[1],x=S[2],t.unstable_now=S[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var k=null,O=function(e){if(null!==k)try{k(e)}finally{k=null}};T=function(e){null!==k?setTimeout(T,0,e):(k=e,setTimeout(O,0,!1))},w=function(){k=null},x=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof y&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof b&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var N=null,A=!1,D=-1,I=!1,P=!1,L=0,R=33,j=33;x=function(){return L<=t.unstable_now()};var H=new MessageChannel,M=H.port2;H.port1.onmessage=function(){A=!1;var e=N,n=D;N=null,D=-1;var r=t.unstable_now(),i=!1;if(0>=L-r){if(!(-1!==n&&n<=r))return I||(I=!0,_(F)),N=e,void(D=n);i=!0}if(null!==e){P=!0;try{e(i)}finally{P=!1}}};var F=function(e){if(null!==N){_(F);var t=e-L+j;t<j&&R<j?(8>t&&(t=8),j=t<R?R:t):R=t,L=e+j,A||(A=!0,M.postMessage(void 0))}else I=!1};T=function(e,t){N=e,D=t,P||0>t?M.postMessage(void 0):I||(I=!0,_(F))},w=function(){N=null,A=!1,D=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=i,a=o;i=e,o=t.unstable_now();try{return n()}finally{i=r,o=a,f()}},t.unstable_next=function(e){switch(i){case 1:case 2:case 3:var n=3;break;default:n=i}var r=i,a=o;i=n,o=t.unstable_now();try{return e()}finally{i=r,o=a,f()}},t.unstable_scheduleCallback=function(e,r){var a=-1!==o?o:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=a+r.timeout;else switch(i){case 1:r=a+-1;break;case 2:r=a+250;break;case 5:r=a+1073741823;break;case 4:r=a+1e4;break;default:r=a+5e3}if(e={callback:e,priorityLevel:i,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,u();else{a=null;var l=n;do{if(l.expirationTime>r){a=l;break}l=l.next}while(l!==n);null===a?a=n:a===n&&(n=e,u()),(r=a.previous).next=a.previous=e,e.next=a,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=i;return function(){var r=i,a=o;i=n,o=t.unstable_now();try{return e.apply(this,arguments)}finally{i=r,o=a,f()}}},t.unstable_getCurrentPriorityLevel=function(){return i},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<a||x())},t.unstable_continueExecution=function(){null!==n&&u()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(3))},function(e,t,n){
/*!
  * Bootstrap v4.0.0 (https://getbootstrap.com)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}t=t&&t.hasOwnProperty("default")?t.default:t,n=n&&n.hasOwnProperty("default")?n.default:n;var a=function(e){var t=!1;function n(t){var n=this,i=!1;return e(this).one(r.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||r.triggerTransitionEnd(n)},t),this}var r={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(t){var n=t.getAttribute("data-target");n&&"#"!==n||(n=t.getAttribute("href")||""),"#"===n.charAt(0)&&(n=function(t){return t="function"==typeof e.escapeSelector?e.escapeSelector(t).substr(1):t.replace(/(:|\.|\[|\]|,|=|@)/g,"\\$1")}(n));try{var r=e(document).find(n);return r.length>0?n:null}catch(e){return null}},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(n){e(n).trigger(t.end)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],a=t[i],l=a&&r.isElement(a)?"element":(s=a,{}.toString.call(s).match(/\s([a-zA-Z]+)/)[1].toLowerCase());if(!new RegExp(o).test(l))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+l+'" but expected type "'+o+'".')}var s}};return t=("undefined"==typeof window||!window.QUnit)&&{end:"transitionend"},e.fn.emulateTransitionEnd=n,r.supportsTransitionEnd()&&(e.event.special[r.TRANSITION_END]={bindType:t.end,delegateType:t.end,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}),r}(t),l=function(e){var t=e.fn.alert,n={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},r={ALERT:"alert",FADE:"fade",SHOW:"show"},o=function(){function t(e){this._element=e}var o=t.prototype;return o.close=function(e){e=e||this._element;var t=this._getRootElement(e),n=this._triggerCloseEvent(t);n.isDefaultPrevented()||this._removeElement(t)},o.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},o._getRootElement=function(t){var n=a.getSelectorFromElement(t),i=!1;return n&&(i=e(n)[0]),i||(i=e(t).closest("."+r.ALERT)[0]),i},o._triggerCloseEvent=function(t){var r=e.Event(n.CLOSE);return e(t).trigger(r),r},o._removeElement=function(t){var n=this;e(t).removeClass(r.SHOW),a.supportsTransitionEnd()&&e(t).hasClass(r.FADE)?e(t).one(a.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(150):this._destroyElement(t)},o._destroyElement=function(t){e(t).detach().trigger(n.CLOSED).remove()},t._jQueryInterface=function(n){return this.each(function(){var r=e(this),i=r.data("bs.alert");i||(i=new t(this),r.data("bs.alert",i)),"close"===n&&i[n](this)})},t._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},i(t,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),t}();return e(document).on(n.CLICK_DATA_API,'[data-dismiss="alert"]',o._handleDismiss(new o)),e.fn.alert=o._jQueryInterface,e.fn.alert.Constructor=o,e.fn.alert.noConflict=function(){return e.fn.alert=t,o._jQueryInterface},o}(t),s=function(e){var t="button",n=e.fn[t],r={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},o={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},a={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},l=function(){function t(e){this._element=e}var n=t.prototype;return n.toggle=function(){var t=!0,n=!0,i=e(this._element).closest(o.DATA_TOGGLE)[0];if(i){var a=e(this._element).find(o.INPUT)[0];if(a){if("radio"===a.type)if(a.checked&&e(this._element).hasClass(r.ACTIVE))t=!1;else{var l=e(i).find(o.ACTIVE)[0];l&&e(l).removeClass(r.ACTIVE)}if(t){if(a.hasAttribute("disabled")||i.hasAttribute("disabled")||a.classList.contains("disabled")||i.classList.contains("disabled"))return;a.checked=!e(this._element).hasClass(r.ACTIVE),e(a).trigger("change")}a.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!e(this._element).hasClass(r.ACTIVE)),t&&e(this._element).toggleClass(r.ACTIVE)},n.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(n){return this.each(function(){var r=e(this).data("bs.button");r||(r=new t(this),e(this).data("bs.button",r)),"toggle"===n&&r[n]()})},i(t,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),t}();return e(document).on(a.CLICK_DATA_API,o.DATA_TOGGLE_CARROT,function(t){t.preventDefault();var n=t.target;e(n).hasClass(r.BUTTON)||(n=e(n).closest(o.BUTTON)),l._jQueryInterface.call(e(n),"toggle")}).on(a.FOCUS_BLUR_DATA_API,o.DATA_TOGGLE_CARROT,function(t){var n=e(t.target).closest(o.BUTTON)[0];e(n).toggleClass(r.FOCUS,/^focus(in)?$/.test(t.type))}),e.fn[t]=l._jQueryInterface,e.fn[t].Constructor=l,e.fn[t].noConflict=function(){return e.fn[t]=n,l._jQueryInterface},l}(t),u=function(e){var t="carousel",n="bs.carousel",r="."+n,l=e.fn[t],s={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},u={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},c={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},f={SLIDE:"slide"+r,SLID:"slid"+r,KEYDOWN:"keydown"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r,TOUCHEND:"touchend"+r,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},d={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},p={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},h=function(){function l(t,n){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(n),this._element=e(t)[0],this._indicatorsElement=e(this._element).find(p.INDICATORS)[0],this._addEventListeners()}var h=l.prototype;return h.next=function(){this._isSliding||this._slide(c.NEXT)},h.nextWhenVisible=function(){!document.hidden&&e(this._element).is(":visible")&&"hidden"!==e(this._element).css("visibility")&&this.next()},h.prev=function(){this._isSliding||this._slide(c.PREV)},h.pause=function(t){t||(this._isPaused=!0),e(this._element).find(p.NEXT_PREV)[0]&&a.supportsTransitionEnd()&&(a.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},h.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},h.to=function(t){var n=this;this._activeElement=e(this._element).find(p.ACTIVE_ITEM)[0];var r=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(f.SLID,function(){return n.to(t)});else{if(r===t)return this.pause(),void this.cycle();var i=t>r?c.NEXT:c.PREV;this._slide(i,this._items[t])}},h.dispose=function(){e(this._element).off(r),e.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},h._getConfig=function(e){return e=o({},s,e),a.typeCheckConfig(t,e,u),e},h._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(f.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(e(this._element).on(f.MOUSEENTER,function(e){return t.pause(e)}).on(f.MOUSELEAVE,function(e){return t.cycle(e)}),"ontouchstart"in document.documentElement&&e(this._element).on(f.TOUCHEND,function(){t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},500+t._config.interval)}))},h._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},h._getItemIndex=function(t){return this._items=e.makeArray(e(t).parent().find(p.ITEM)),this._items.indexOf(t)},h._getItemByDirection=function(e,t){var n=e===c.NEXT,r=e===c.PREV,i=this._getItemIndex(t),o=this._items.length-1,a=r&&0===i||n&&i===o;if(a&&!this._config.wrap)return t;var l=e===c.PREV?-1:1,s=(i+l)%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},h._triggerSlideEvent=function(t,n){var r=this._getItemIndex(t),i=this._getItemIndex(e(this._element).find(p.ACTIVE_ITEM)[0]),o=e.Event(f.SLIDE,{relatedTarget:t,direction:n,from:i,to:r});return e(this._element).trigger(o),o},h._setActiveIndicatorElement=function(t){if(this._indicatorsElement){e(this._indicatorsElement).find(p.ACTIVE).removeClass(d.ACTIVE);var n=this._indicatorsElement.children[this._getItemIndex(t)];n&&e(n).addClass(d.ACTIVE)}},h._slide=function(t,n){var r,i,o,l=this,s=e(this._element).find(p.ACTIVE_ITEM)[0],u=this._getItemIndex(s),h=n||s&&this._getItemByDirection(t,s),m=this._getItemIndex(h),g=Boolean(this._interval);if(t===c.NEXT?(r=d.LEFT,i=d.NEXT,o=c.LEFT):(r=d.RIGHT,i=d.PREV,o=c.RIGHT),h&&e(h).hasClass(d.ACTIVE))this._isSliding=!1;else{var v=this._triggerSlideEvent(h,o);if(!v.isDefaultPrevented()&&s&&h){this._isSliding=!0,g&&this.pause(),this._setActiveIndicatorElement(h);var y=e.Event(f.SLID,{relatedTarget:h,direction:o,from:u,to:m});a.supportsTransitionEnd()&&e(this._element).hasClass(d.SLIDE)?(e(h).addClass(i),a.reflow(h),e(s).addClass(r),e(h).addClass(r),e(s).one(a.TRANSITION_END,function(){e(h).removeClass(r+" "+i).addClass(d.ACTIVE),e(s).removeClass(d.ACTIVE+" "+i+" "+r),l._isSliding=!1,setTimeout(function(){return e(l._element).trigger(y)},0)}).emulateTransitionEnd(600)):(e(s).removeClass(d.ACTIVE),e(h).addClass(d.ACTIVE),this._isSliding=!1,e(this._element).trigger(y)),g&&this.cycle()}}},l._jQueryInterface=function(t){return this.each(function(){var r=e(this).data(n),i=o({},s,e(this).data());"object"==typeof t&&(i=o({},i,t));var a="string"==typeof t?t:i.slide;if(r||(r=new l(this,i),e(this).data(n,r)),"number"==typeof t)r.to(t);else if("string"==typeof a){if(void 0===r[a])throw new TypeError('No method named "'+a+'"');r[a]()}else i.interval&&(r.pause(),r.cycle())})},l._dataApiClickHandler=function(t){var r=a.getSelectorFromElement(this);if(r){var i=e(r)[0];if(i&&e(i).hasClass(d.CAROUSEL)){var s=o({},e(i).data(),e(this).data()),u=this.getAttribute("data-slide-to");u&&(s.interval=!1),l._jQueryInterface.call(e(i),s),u&&e(i).data(n).to(u),t.preventDefault()}}},i(l,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return s}}]),l}();return e(document).on(f.CLICK_DATA_API,p.DATA_SLIDE,h._dataApiClickHandler),e(window).on(f.LOAD_DATA_API,function(){e(p.DATA_RIDE).each(function(){var t=e(this);h._jQueryInterface.call(t,t.data())})}),e.fn[t]=h._jQueryInterface,e.fn[t].Constructor=h,e.fn[t].noConflict=function(){return e.fn[t]=l,h._jQueryInterface},h}(t),c=function(e){var t="collapse",n="bs.collapse",r=e.fn[t],l={toggle:!0,parent:""},s={toggle:"boolean",parent:"(string|element)"},u={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},c={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},f={WIDTH:"width",HEIGHT:"height"},d={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},p=function(){function r(t,n){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(n),this._triggerArray=e.makeArray(e('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var r=e(d.DATA_TOGGLE),i=0;i<r.length;i++){var o=r[i],l=a.getSelectorFromElement(o);null!==l&&e(l).filter(t).length>0&&(this._selector=l,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var p=r.prototype;return p.toggle=function(){e(this._element).hasClass(c.SHOW)?this.hide():this.show()},p.show=function(){var t,i,o=this;if(!(this._isTransitioning||e(this._element).hasClass(c.SHOW)||(this._parent&&0===(t=e.makeArray(e(this._parent).find(d.ACTIVES).filter('[data-parent="'+this._config.parent+'"]'))).length&&(t=null),t&&(i=e(t).not(this._selector).data(n))&&i._isTransitioning))){var l=e.Event(u.SHOW);if(e(this._element).trigger(l),!l.isDefaultPrevented()){t&&(r._jQueryInterface.call(e(t).not(this._selector),"hide"),i||e(t).data(n,null));var s=this._getDimension();e(this._element).removeClass(c.COLLAPSE).addClass(c.COLLAPSING),this._element.style[s]=0,this._triggerArray.length>0&&e(this._triggerArray).removeClass(c.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var f=function(){e(o._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).addClass(c.SHOW),o._element.style[s]="",o.setTransitioning(!1),e(o._element).trigger(u.SHOWN)};if(a.supportsTransitionEnd()){var p=s[0].toUpperCase()+s.slice(1),h="scroll"+p;e(this._element).one(a.TRANSITION_END,f).emulateTransitionEnd(600),this._element.style[s]=this._element[h]+"px"}else f()}}},p.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(c.SHOW)){var n=e.Event(u.HIDE);if(e(this._element).trigger(n),!n.isDefaultPrevented()){var r=this._getDimension();if(this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",a.reflow(this._element),e(this._element).addClass(c.COLLAPSING).removeClass(c.COLLAPSE).removeClass(c.SHOW),this._triggerArray.length>0)for(var i=0;i<this._triggerArray.length;i++){var o=this._triggerArray[i],l=a.getSelectorFromElement(o);if(null!==l){var s=e(l);s.hasClass(c.SHOW)||e(o).addClass(c.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0);var f=function(){t.setTransitioning(!1),e(t._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).trigger(u.HIDDEN)};this._element.style[r]="",a.supportsTransitionEnd()?e(this._element).one(a.TRANSITION_END,f).emulateTransitionEnd(600):f()}}},p.setTransitioning=function(e){this._isTransitioning=e},p.dispose=function(){e.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},p._getConfig=function(e){return(e=o({},l,e)).toggle=Boolean(e.toggle),a.typeCheckConfig(t,e,s),e},p._getDimension=function(){var t=e(this._element).hasClass(f.WIDTH);return t?f.WIDTH:f.HEIGHT},p._getParent=function(){var t=this,n=null;a.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=e(this._config.parent)[0];var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return e(n).find(i).each(function(e,n){t._addAriaAndCollapsedClass(r._getTargetFromElement(n),[n])}),n},p._addAriaAndCollapsedClass=function(t,n){if(t){var r=e(t).hasClass(c.SHOW);n.length>0&&e(n).toggleClass(c.COLLAPSED,!r).attr("aria-expanded",r)}},r._getTargetFromElement=function(t){var n=a.getSelectorFromElement(t);return n?e(n)[0]:null},r._jQueryInterface=function(t){return this.each(function(){var i=e(this),a=i.data(n),s=o({},l,i.data(),"object"==typeof t&&t);if(!a&&s.toggle&&/show|hide/.test(t)&&(s.toggle=!1),a||(a=new r(this,s),i.data(n,a)),"string"==typeof t){if(void 0===a[t])throw new TypeError('No method named "'+t+'"');a[t]()}})},i(r,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return l}}]),r}();return e(document).on(u.CLICK_DATA_API,d.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var r=e(this),i=a.getSelectorFromElement(this);e(i).each(function(){var t=e(this),i=t.data(n),o=i?"toggle":r.data();p._jQueryInterface.call(t,o)})}),e.fn[t]=p._jQueryInterface,e.fn[t].Constructor=p,e.fn[t].noConflict=function(){return e.fn[t]=r,p._jQueryInterface},p}(t),f=function(e){var t="dropdown",r="bs.dropdown",l="."+r,s=e.fn[t],u=new RegExp("38|40|27"),c={HIDE:"hide"+l,HIDDEN:"hidden"+l,SHOW:"show"+l,SHOWN:"shown"+l,CLICK:"click"+l,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},f={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},d={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled)"},p={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},h={offset:0,flip:!0,boundary:"scrollParent"},m={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)"},g=function(){function s(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var g=s.prototype;return g.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(f.DISABLED)){var t=s._getParentFromElement(this._element),r=e(this._menu).hasClass(f.SHOW);if(s._clearMenus(),!r){var i={relatedTarget:this._element},o=e.Event(c.SHOW,i);if(e(t).trigger(o),!o.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var a=this._element;e(t).hasClass(f.DROPUP)&&(e(this._menu).hasClass(f.MENULEFT)||e(this._menu).hasClass(f.MENURIGHT))&&(a=t),"scrollParent"!==this._config.boundary&&e(t).addClass(f.POSITION_STATIC),this._popper=new n(a,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(t).closest(d.NAVBAR_NAV).length&&e("body").children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(f.SHOW),e(t).toggleClass(f.SHOW).trigger(e.Event(c.SHOWN,i))}}}},g.dispose=function(){e.removeData(this._element,r),e(this._element).off(l),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},g.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},g._addEventListeners=function(){var t=this;e(this._element).on(c.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},g._getConfig=function(n){return n=o({},this.constructor.Default,e(this._element).data(),n),a.typeCheckConfig(t,n,this.constructor.DefaultType),n},g._getMenuElement=function(){if(!this._menu){var t=s._getParentFromElement(this._element);this._menu=e(t).find(d.MENU)[0]}return this._menu},g._getPlacement=function(){var t=e(this._element).parent(),n=p.BOTTOM;return t.hasClass(f.DROPUP)?(n=p.TOP,e(this._menu).hasClass(f.MENURIGHT)&&(n=p.TOPEND)):t.hasClass(f.DROPRIGHT)?n=p.RIGHT:t.hasClass(f.DROPLEFT)?n=p.LEFT:e(this._menu).hasClass(f.MENURIGHT)&&(n=p.BOTTOMEND),n},g._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},g._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=o({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return n},s._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(r),i="object"==typeof t?t:null;if(n||(n=new s(this,i),e(this).data(r,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},s._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var n=e.makeArray(e(d.DATA_TOGGLE)),i=0;i<n.length;i++){var o=s._getParentFromElement(n[i]),a=e(n[i]).data(r),l={relatedTarget:n[i]};if(a){var u=a._menu;if(e(o).hasClass(f.SHOW)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&e.contains(o,t.target))){var p=e.Event(c.HIDE,l);e(o).trigger(p),p.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e("body").children().off("mouseover",null,e.noop),n[i].setAttribute("aria-expanded","false"),e(u).removeClass(f.SHOW),e(o).removeClass(f.SHOW).trigger(e.Event(c.HIDDEN,l)))}}}},s._getParentFromElement=function(t){var n,r=a.getSelectorFromElement(t);return r&&(n=e(r)[0]),n||t.parentNode},s._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||e(t.target).closest(d.MENU).length)):u.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!e(this).hasClass(f.DISABLED))){var n=s._getParentFromElement(this),r=e(n).hasClass(f.SHOW);if((r||27===t.which&&32===t.which)&&(!r||27!==t.which&&32!==t.which)){var i=e(n).find(d.VISIBLE_ITEMS).get();if(0!==i.length){var o=i.indexOf(t.target);38===t.which&&o>0&&o--,40===t.which&&o<i.length-1&&o++,o<0&&(o=0),i[o].focus()}}else{if(27===t.which){var a=e(n).find(d.DATA_TOGGLE)[0];e(a).trigger("focus")}e(this).trigger("click")}}},i(s,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return h}},{key:"DefaultType",get:function(){return m}}]),s}();return e(document).on(c.KEYDOWN_DATA_API,d.DATA_TOGGLE,g._dataApiKeydownHandler).on(c.KEYDOWN_DATA_API,d.MENU,g._dataApiKeydownHandler).on(c.CLICK_DATA_API+" "+c.KEYUP_DATA_API,g._clearMenus).on(c.CLICK_DATA_API,d.DATA_TOGGLE,function(t){t.preventDefault(),t.stopPropagation(),g._jQueryInterface.call(e(this),"toggle")}).on(c.CLICK_DATA_API,d.FORM_CHILD,function(e){e.stopPropagation()}),e.fn[t]=g._jQueryInterface,e.fn[t].Constructor=g,e.fn[t].noConflict=function(){return e.fn[t]=s,g._jQueryInterface},g}(t),d=function(e){var t="modal",n=".bs.modal",r=e.fn.modal,l={backdrop:!0,keyboard:!0,focus:!0,show:!0},s={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},u={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},c={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},f={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},d=function(){function r(t,n){this._config=this._getConfig(n),this._element=t,this._dialog=e(t).find(f.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}var d=r.prototype;return d.toggle=function(e){return this._isShown?this.hide():this.show(e)},d.show=function(t){var n=this;if(!this._isTransitioning&&!this._isShown){a.supportsTransitionEnd()&&e(this._element).hasClass(c.FADE)&&(this._isTransitioning=!0);var r=e.Event(u.SHOW,{relatedTarget:t});e(this._element).trigger(r),this._isShown||r.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),e(document.body).addClass(c.OPEN),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(u.CLICK_DISMISS,f.DATA_DISMISS,function(e){return n.hide(e)}),e(this._dialog).on(u.MOUSEDOWN_DISMISS,function(){e(n._element).one(u.MOUSEUP_DISMISS,function(t){e(t.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(t)}))}},d.hide=function(t){var n=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var r=e.Event(u.HIDE);if(e(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var i=a.supportsTransitionEnd()&&e(this._element).hasClass(c.FADE);i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),e(document).off(u.FOCUSIN),e(this._element).removeClass(c.SHOW),e(this._element).off(u.CLICK_DISMISS),e(this._dialog).off(u.MOUSEDOWN_DISMISS),i?e(this._element).one(a.TRANSITION_END,function(e){return n._hideModal(e)}).emulateTransitionEnd(300):this._hideModal()}}},d.dispose=function(){e.removeData(this._element,"bs.modal"),e(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},d.handleUpdate=function(){this._adjustDialog()},d._getConfig=function(e){return e=o({},l,e),a.typeCheckConfig(t,e,s),e},d._showElement=function(t){var n=this,r=a.supportsTransitionEnd()&&e(this._element).hasClass(c.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,r&&a.reflow(this._element),e(this._element).addClass(c.SHOW),this._config.focus&&this._enforceFocus();var i=e.Event(u.SHOWN,{relatedTarget:t}),o=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,e(n._element).trigger(i)};r?e(this._dialog).one(a.TRANSITION_END,o).emulateTransitionEnd(300):o()},d._enforceFocus=function(){var t=this;e(document).off(u.FOCUSIN).on(u.FOCUSIN,function(n){document!==n.target&&t._element!==n.target&&0===e(t._element).has(n.target).length&&t._element.focus()})},d._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(u.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||e(this._element).off(u.KEYDOWN_DISMISS)},d._setResizeEvent=function(){var t=this;this._isShown?e(window).on(u.RESIZE,function(e){return t.handleUpdate(e)}):e(window).off(u.RESIZE)},d._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){e(document.body).removeClass(c.OPEN),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(u.HIDDEN)})},d._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},d._showBackdrop=function(t){var n=this,r=e(this._element).hasClass(c.FADE)?c.FADE:"";if(this._isShown&&this._config.backdrop){var i=a.supportsTransitionEnd()&&r;if(this._backdrop=document.createElement("div"),this._backdrop.className=c.BACKDROP,r&&e(this._backdrop).addClass(r),e(this._backdrop).appendTo(document.body),e(this._element).on(u.CLICK_DISMISS,function(e){n._ignoreBackdropClick?n._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),i&&a.reflow(this._backdrop),e(this._backdrop).addClass(c.SHOW),!t)return;if(!i)return void t();e(this._backdrop).one(a.TRANSITION_END,t).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(c.SHOW);var o=function(){n._removeBackdrop(),t&&t()};a.supportsTransitionEnd()&&e(this._element).hasClass(c.FADE)?e(this._backdrop).one(a.TRANSITION_END,o).emulateTransitionEnd(150):o()}else t&&t()},d._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},d._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},d._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},d._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){e(f.FIXED_CONTENT).each(function(n,r){var i=e(r)[0].style.paddingRight,o=e(r).css("padding-right");e(r).data("padding-right",i).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")}),e(f.STICKY_CONTENT).each(function(n,r){var i=e(r)[0].style.marginRight,o=e(r).css("margin-right");e(r).data("margin-right",i).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")}),e(f.NAVBAR_TOGGLER).each(function(n,r){var i=e(r)[0].style.marginRight,o=e(r).css("margin-right");e(r).data("margin-right",i).css("margin-right",parseFloat(o)+t._scrollbarWidth+"px")});var n=document.body.style.paddingRight,r=e("body").css("padding-right");e("body").data("padding-right",n).css("padding-right",parseFloat(r)+this._scrollbarWidth+"px")}},d._resetScrollbar=function(){e(f.FIXED_CONTENT).each(function(t,n){var r=e(n).data("padding-right");void 0!==r&&e(n).css("padding-right",r).removeData("padding-right")}),e(f.STICKY_CONTENT+", "+f.NAVBAR_TOGGLER).each(function(t,n){var r=e(n).data("margin-right");void 0!==r&&e(n).css("margin-right",r).removeData("margin-right")});var t=e("body").data("padding-right");void 0!==t&&e("body").css("padding-right",t).removeData("padding-right")},d._getScrollbarWidth=function(){var e=document.createElement("div");e.className=c.SCROLLBAR_MEASURER,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},r._jQueryInterface=function(t,n){return this.each(function(){var i=e(this).data("bs.modal"),a=o({},r.Default,e(this).data(),"object"==typeof t&&t);if(i||(i=new r(this,a),e(this).data("bs.modal",i)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t](n)}else a.show&&i.show(n)})},i(r,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return l}}]),r}();return e(document).on(u.CLICK_DATA_API,f.DATA_TOGGLE,function(t){var n,r=this,i=a.getSelectorFromElement(this);i&&(n=e(i)[0]);var l=e(n).data("bs.modal")?"toggle":o({},e(n).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var s=e(n).one(u.SHOW,function(t){t.isDefaultPrevented()||s.one(u.HIDDEN,function(){e(r).is(":visible")&&r.focus()})});d._jQueryInterface.call(e(n),l,this)}),e.fn.modal=d._jQueryInterface,e.fn.modal.Constructor=d,e.fn.modal.noConflict=function(){return e.fn.modal=r,d._jQueryInterface},d}(t),p=function(e){var t="tooltip",r=".bs.tooltip",l=e.fn[t],s=new RegExp("(^|\\s)bs-tooltip\\S+","g"),u={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},c={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},f={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},d={SHOW:"show",OUT:"out"},p={HIDE:"hide"+r,HIDDEN:"hidden"+r,SHOW:"show"+r,SHOWN:"shown"+r,INSERTED:"inserted"+r,CLICK:"click"+r,FOCUSIN:"focusin"+r,FOCUSOUT:"focusout"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r},h={FADE:"fade",SHOW:"show"},m={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},g={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},v=function(){function l(e,t){if(void 0===n)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var v=l.prototype;return v.enable=function(){this._isEnabled=!0},v.disable=function(){this._isEnabled=!1},v.toggleEnabled=function(){this._isEnabled=!this._isEnabled},v.toggle=function(t){if(this._isEnabled)if(t){var n=this.constructor.DATA_KEY,r=e(t.currentTarget).data(n);r||(r=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(e(this.getTipElement()).hasClass(h.SHOW))return void this._leave(null,this);this._enter(null,this)}},v.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},v.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var r=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(r);var i=e.contains(this.element.ownerDocument.documentElement,this.element);if(r.isDefaultPrevented()||!i)return;var o=this.getTipElement(),s=a.getUID(this.constructor.NAME);o.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&e(o).addClass(h.FADE);var u="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,c=this._getAttachment(u);this.addAttachmentClass(c);var f=!1===this.config.container?document.body:e(this.config.container);e(o).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(o).appendTo(f),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,o,{placement:c,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:m.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){t._handlePopperPlacementChange(e)}}),e(o).addClass(h.SHOW),"ontouchstart"in document.documentElement&&e("body").children().on("mouseover",null,e.noop);var p=function(){t.config.animation&&t._fixTransition();var n=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),n===d.OUT&&t._leave(null,t)};a.supportsTransitionEnd()&&e(this.tip).hasClass(h.FADE)?e(this.tip).one(a.TRANSITION_END,p).emulateTransitionEnd(l._TRANSITION_DURATION):p()}},v.hide=function(t){var n=this,r=this.getTipElement(),i=e.Event(this.constructor.Event.HIDE),o=function(){n._hoverState!==d.SHOW&&r.parentNode&&r.parentNode.removeChild(r),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),e(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),t&&t()};e(this.element).trigger(i),i.isDefaultPrevented()||(e(r).removeClass(h.SHOW),"ontouchstart"in document.documentElement&&e("body").children().off("mouseover",null,e.noop),this._activeTrigger[g.CLICK]=!1,this._activeTrigger[g.FOCUS]=!1,this._activeTrigger[g.HOVER]=!1,a.supportsTransitionEnd()&&e(this.tip).hasClass(h.FADE)?e(r).one(a.TRANSITION_END,o).emulateTransitionEnd(150):o(),this._hoverState="")},v.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},v.isWithContent=function(){return Boolean(this.getTitle())},v.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},v.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},v.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(m.TOOLTIP_INNER),this.getTitle()),t.removeClass(h.FADE+" "+h.SHOW)},v.setElementContent=function(t,n){var r=this.config.html;"object"==typeof n&&(n.nodeType||n.jquery)?r?e(n).parent().is(t)||t.empty().append(n):t.text(e(n).text()):t[r?"html":"text"](n)},v.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},v._getAttachment=function(e){return c[e.toUpperCase()]},v._setListeners=function(){var t=this,n=this.config.trigger.split(" ");n.forEach(function(n){if("click"===n)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if(n!==g.MANUAL){var r=n===g.HOVER?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=n===g.HOVER?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(r,t.config.selector,function(e){return t._enter(e)}).on(i,t.config.selector,function(e){return t._leave(e)})}e(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=o({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},v._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},v._enter=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusin"===t.type?g.FOCUS:g.HOVER]=!0),e(n.getTipElement()).hasClass(h.SHOW)||n._hoverState===d.SHOW?n._hoverState=d.SHOW:(clearTimeout(n._timeout),n._hoverState=d.SHOW,n.config.delay&&n.config.delay.show?n._timeout=setTimeout(function(){n._hoverState===d.SHOW&&n.show()},n.config.delay.show):n.show())},v._leave=function(t,n){var r=this.constructor.DATA_KEY;(n=n||e(t.currentTarget).data(r))||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),t&&(n._activeTrigger["focusout"===t.type?g.FOCUS:g.HOVER]=!1),n._isWithActiveTrigger()||(clearTimeout(n._timeout),n._hoverState=d.OUT,n.config.delay&&n.config.delay.hide?n._timeout=setTimeout(function(){n._hoverState===d.OUT&&n.hide()},n.config.delay.hide):n.hide())},v._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},v._getConfig=function(n){return"number"==typeof(n=o({},this.constructor.Default,e(this.element).data(),n)).delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),a.typeCheckConfig(t,n,this.constructor.DefaultType),n},v._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},v._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(s);null!==n&&n.length>0&&t.removeClass(n.join(""))},v._handlePopperPlacementChange=function(e){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},v._fixTransition=function(){var t=this.getTipElement(),n=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(h.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},l._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.tooltip"),r="object"==typeof t&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new l(this,r),e(this).data("bs.tooltip",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},i(l,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return f}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return r}},{key:"DefaultType",get:function(){return u}}]),l}();return e.fn[t]=v._jQueryInterface,e.fn[t].Constructor=v,e.fn[t].noConflict=function(){return e.fn[t]=l,v._jQueryInterface},v}(t),h=function(e){var t="popover",n=".bs.popover",r=e.fn[t],a=new RegExp("(^|\\s)bs-popover\\S+","g"),l=o({},p.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),s=o({},p.DefaultType,{content:"(string|element|function)"}),u={FADE:"fade",SHOW:"show"},c={TITLE:".popover-header",CONTENT:".popover-body"},f={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},d=function(r){var o,d;function p(){return r.apply(this,arguments)||this}d=r,(o=p).prototype=Object.create(d.prototype),o.prototype.constructor=o,o.__proto__=d;var h=p.prototype;return h.isWithContent=function(){return this.getTitle()||this._getContent()},h.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-popover-"+t)},h.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},h.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(c.TITLE),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(t.find(c.CONTENT),n),t.removeClass(u.FADE+" "+u.SHOW)},h._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},h._cleanTipClass=function(){var t=e(this.getTipElement()),n=t.attr("class").match(a);null!==n&&n.length>0&&t.removeClass(n.join(""))},p._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.popover"),r="object"==typeof t?t:null;if((n||!/destroy|hide/.test(t))&&(n||(n=new p(this,r),e(this).data("bs.popover",n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},i(p,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return l}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return f}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return s}}]),p}(p);return e.fn[t]=d._jQueryInterface,e.fn[t].Constructor=d,e.fn[t].noConflict=function(){return e.fn[t]=r,d._jQueryInterface},d}(t),m=function(e){var t="scrollspy",n=e.fn[t],r={offset:10,method:"auto",target:""},l={offset:"number",method:"string",target:"(string|element)"},s={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},u={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},c={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},f={OFFSET:"offset",POSITION:"position"},d=function(){function n(t,n){var r=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(n),this._selector=this._config.target+" "+c.NAV_LINKS+","+this._config.target+" "+c.LIST_ITEMS+","+this._config.target+" "+c.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(s.SCROLL,function(e){return r._process(e)}),this.refresh(),this._process()}var d=n.prototype;return d.refresh=function(){var t=this,n=this._scrollElement===this._scrollElement.window?f.OFFSET:f.POSITION,r="auto"===this._config.method?n:this._config.method,i=r===f.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var o=e.makeArray(e(this._selector));o.map(function(t){var n,o=a.getSelectorFromElement(t);if(o&&(n=e(o)[0]),n){var l=n.getBoundingClientRect();if(l.width||l.height)return[e(n)[r]().top+i,o]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},d.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},d._getConfig=function(n){if("string"!=typeof(n=o({},r,n)).target){var i=e(n.target).attr("id");i||(i=a.getUID(t),e(n.target).attr("id",i)),n.target="#"+i}return a.typeCheckConfig(t,n,l),n},d._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},d._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},d._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},d._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;){var o=this._activeTarget!==this._targets[i]&&e>=this._offsets[i]&&(void 0===this._offsets[i+1]||e<this._offsets[i+1]);o&&this._activate(this._targets[i])}}},d._activate=function(t){this._activeTarget=t,this._clear();var n=this._selector.split(",");n=n.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var r=e(n.join(","));r.hasClass(u.DROPDOWN_ITEM)?(r.closest(c.DROPDOWN).find(c.DROPDOWN_TOGGLE).addClass(u.ACTIVE),r.addClass(u.ACTIVE)):(r.addClass(u.ACTIVE),r.parents(c.NAV_LIST_GROUP).prev(c.NAV_LINKS+", "+c.LIST_ITEMS).addClass(u.ACTIVE),r.parents(c.NAV_LIST_GROUP).prev(c.NAV_ITEMS).children(c.NAV_LINKS).addClass(u.ACTIVE)),e(this._scrollElement).trigger(s.ACTIVATE,{relatedTarget:t})},d._clear=function(){e(this._selector).filter(c.ACTIVE).removeClass(u.ACTIVE)},n._jQueryInterface=function(t){return this.each(function(){var r=e(this).data("bs.scrollspy"),i="object"==typeof t&&t;if(r||(r=new n(this,i),e(this).data("bs.scrollspy",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}})},i(n,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return r}}]),n}();return e(window).on(s.LOAD_DATA_API,function(){for(var t=e.makeArray(e(c.DATA_SPY)),n=t.length;n--;){var r=e(t[n]);d._jQueryInterface.call(r,r.data())}}),e.fn[t]=d._jQueryInterface,e.fn[t].Constructor=d,e.fn[t].noConflict=function(){return e.fn[t]=n,d._jQueryInterface},d}(t),g=function(e){var t=e.fn.tab,n={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},r={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},o={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",ACTIVE_UL:"> li > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},l=function(){function t(e){this._element=e}var l=t.prototype;return l.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(r.ACTIVE)||e(this._element).hasClass(r.DISABLED))){var i,l,s=e(this._element).closest(o.NAV_LIST_GROUP)[0],u=a.getSelectorFromElement(this._element);if(s){var c="UL"===s.nodeName?o.ACTIVE_UL:o.ACTIVE;l=(l=e.makeArray(e(s).find(c)))[l.length-1]}var f=e.Event(n.HIDE,{relatedTarget:this._element}),d=e.Event(n.SHOW,{relatedTarget:l});if(l&&e(l).trigger(f),e(this._element).trigger(d),!d.isDefaultPrevented()&&!f.isDefaultPrevented()){u&&(i=e(u)[0]),this._activate(this._element,s);var p=function(){var r=e.Event(n.HIDDEN,{relatedTarget:t._element}),i=e.Event(n.SHOWN,{relatedTarget:l});e(l).trigger(r),e(t._element).trigger(i)};i?this._activate(i,i.parentNode,p):p()}}},l.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},l._activate=function(t,n,i){var l=this,s=("UL"===n.nodeName?e(n).find(o.ACTIVE_UL):e(n).children(o.ACTIVE))[0],u=i&&a.supportsTransitionEnd()&&s&&e(s).hasClass(r.FADE),c=function(){return l._transitionComplete(t,s,i)};s&&u?e(s).one(a.TRANSITION_END,c).emulateTransitionEnd(150):c()},l._transitionComplete=function(t,n,i){if(n){e(n).removeClass(r.SHOW+" "+r.ACTIVE);var l=e(n.parentNode).find(o.DROPDOWN_ACTIVE_CHILD)[0];l&&e(l).removeClass(r.ACTIVE),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(e(t).addClass(r.ACTIVE),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),a.reflow(t),e(t).addClass(r.SHOW),t.parentNode&&e(t.parentNode).hasClass(r.DROPDOWN_MENU)){var s=e(t).closest(o.DROPDOWN)[0];s&&e(s).find(o.DROPDOWN_TOGGLE).addClass(r.ACTIVE),t.setAttribute("aria-expanded",!0)}i&&i()},t._jQueryInterface=function(n){return this.each(function(){var r=e(this),i=r.data("bs.tab");if(i||(i=new t(this),r.data("bs.tab",i)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}})},i(t,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),t}();return e(document).on(n.CLICK_DATA_API,o.DATA_TOGGLE,function(t){t.preventDefault(),l._jQueryInterface.call(e(this),"show")}),e.fn.tab=l._jQueryInterface,e.fn.tab.Constructor=l,e.fn.tab.noConflict=function(){return e.fn.tab=t,l._jQueryInterface},l}(t);(function(e){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")})(t),e.Util=a,e.Alert=l,e.Button=s,e.Carousel=u,e.Collapse=c,e.Dropdown=f,e.Modal=d,e.Popover=h,e.Scrollspy=m,e.Tab=g,e.Tooltip=p,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(1),n(10))},function(e,t,n){"use strict";n.r(t),function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.12.9
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,o=0;o<r.length;o+=1)if(n&&navigator.userAgent.indexOf(r[o])>=0){i=1;break}var a=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},i))}};function l(e){return e&&"[object Function]"==={}.toString.call(e)}function s(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function u(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=s(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll)/.test(n+i+r)?e:c(u(e))}function f(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===s(t,"position")?f(t):t:e?e.ownerDocument.documentElement:document.documentElement}function d(e){return null!==e.parentNode?d(e.parentNode):e}function p(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,l,s=o.commonAncestorContainer;if(e!==s&&t!==s||r.contains(i))return"BODY"===(l=(a=s).nodeName)||"HTML"!==l&&f(a.firstElementChild)!==a?f(s):s;var u=d(e);return u.host?p(u.host,t):p(e,d(t).host)}function h(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function m(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}var g=void 0,v=function(){return void 0===g&&(g=-1!==navigator.appVersion.indexOf("MSIE 10")),g};function y(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],v()?n["offset"+e]+r["margin"+("Height"===e?"Top":"Left")]+r["margin"+("Height"===e?"Bottom":"Right")]:0)}function b(){var e=document.body,t=document.documentElement,n=v()&&getComputedStyle(t);return{height:y("Height",e,t,n),width:y("Width",e,t,n)}}var _=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},E=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),T=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},w=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function x(e){return w({},e,{right:e.left+e.width,bottom:e.top+e.height})}function C(e){var t={};if(v())try{t=e.getBoundingClientRect();var n=h(e,"top"),r=h(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}catch(e){}else t=e.getBoundingClientRect();var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?b():{},a=o.width||e.clientWidth||i.right-i.left,l=o.height||e.clientHeight||i.bottom-i.top,u=e.offsetWidth-a,c=e.offsetHeight-l;if(u||c){var f=s(e);u-=m(f,"x"),c-=m(f,"y"),i.width-=u,i.height-=c}return x(i)}function S(e,t){var n=v(),r="HTML"===t.nodeName,i=C(e),o=C(t),a=c(e),l=s(t),u=parseFloat(l.borderTopWidth,10),f=parseFloat(l.borderLeftWidth,10),d=x({top:i.top-o.top-u,left:i.left-o.left-f,width:i.width,height:i.height});if(d.marginTop=0,d.marginLeft=0,!n&&r){var p=parseFloat(l.marginTop,10),m=parseFloat(l.marginLeft,10);d.top-=u-p,d.bottom-=u-p,d.left-=f-m,d.right-=f-m,d.marginTop=p,d.marginLeft=m}return(n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(d=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=h(t,"top"),i=h(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}(d,t)),d}function k(e,t,n,r){var i={top:0,left:0},o=p(e,t);if("viewport"===r)i=function(e){var t=e.ownerDocument.documentElement,n=S(e,t),r=Math.max(t.clientWidth,window.innerWidth||0),i=Math.max(t.clientHeight,window.innerHeight||0),o=h(t),a=h(t,"left");return x({top:o-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:r,height:i})}(o);else{var a=void 0;"scrollParent"===r?"BODY"===(a=c(u(t))).nodeName&&(a=e.ownerDocument.documentElement):a="window"===r?e.ownerDocument.documentElement:r;var l=S(a,o);if("HTML"!==a.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===s(t,"position")||e(u(t)))}(o))i=l;else{var f=b(),d=f.height,m=f.width;i.top+=l.top-l.marginTop,i.bottom=d+l.top,i.left+=l.left-l.marginLeft,i.right=m+l.left}}return i.left+=n,i.top+=n,i.right-=n,i.bottom-=n,i}function O(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=k(n,r,o,i),l={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},s=Object.keys(l).map(function(e){return w({key:e},l[e],{area:(t=l[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),u=s.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=u.length>0?u[0].key:s[0].key,f=e.split("-")[1];return c+(f?"-"+f:"")}function N(e,t,n){return S(n,p(t,n))}function A(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),r=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function D(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function I(e,t,n){n=n.split("-")[0];var r=A(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",l=o?"left":"top",s=o?"height":"width",u=o?"width":"height";return i[a]=t[a]+t[s]/2-r[s]/2,i[l]=n===l?t[l]-r[u]:t[D(l)],i}function P(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function L(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=P(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&l(n)&&(t.offsets.popper=x(t.offsets.popper),t.offsets.reference=x(t.offsets.reference),t=n(t,e))}),t}function R(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function j(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length-1;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function H(e){var t=e.ownerDocument;return t?t.defaultView:window}function M(e,t,n,r){n.updateBound=r,H(e).addEventListener("resize",n.updateBound,{passive:!0});var i=c(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,a=o?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),o||e(c(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function F(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,H(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function U(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function W(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&U(t[n])&&(r="px"),e.style[n]=t[n]+r})}function V(e,t,n){var r=P(e,function(e){return e.name===t}),i=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!i){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var B=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],z=B.slice(3);function q(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=z.indexOf(e),r=z.slice(n+1).concat(z.slice(0,n));return t?r.reverse():r}var G={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function $(e,t,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),l=a.indexOf(P(a,function(e){return-1!==e.search(/,|\s/)}));a[l]&&-1===a[l].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var s=/\s*,\s*|\s+/,u=-1!==l?[a.slice(0,l).concat([a[l].split(s)[0]]),[a[l].split(s)[1]].concat(a.slice(l+1))]:[a];return(u=u.map(function(e,r){var i=(1===r?!o:o)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var l=void 0;switch(a){case"%p":l=n;break;case"%":case"%r":default:l=r}return x(l)[t]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(e,i,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){U(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))})}),i}var K={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,a=i.popper,l=-1!==["bottom","top"].indexOf(n),s=l?"left":"top",u=l?"width":"height",c={start:T({},s,o[s]),end:T({},s,o[s]+o[u]-a[u])};e.offsets.popper=w({},a,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,o=i.popper,a=i.reference,l=r.split("-")[0],s=void 0;return s=U(+n)?[+n,0]:$(n,o,a,l),"left"===l?(o.top+=s[0],o.left-=s[1]):"right"===l?(o.top+=s[0],o.left+=s[1]):"top"===l?(o.left+=s[0],o.top-=s[1]):"bottom"===l&&(o.left+=s[0],o.top+=s[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||f(e.instance.popper);e.instance.reference===n&&(n=f(n));var r=k(e.instance.popper,e.instance.reference,t.padding,n);t.boundaries=r;var i=t.priority,o=e.offsets.popper,a={primary:function(e){var n=o[e];return o[e]<r[e]&&!t.escapeWithReference&&(n=Math.max(o[e],r[e])),T({},e,n)},secondary:function(e){var n="right"===e?"left":"top",i=o[n];return o[e]>r[e]&&!t.escapeWithReference&&(i=Math.min(o[n],r[e]-("right"===e?o.width:o.height))),T({},n,i)}};return i.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";o=w({},o,a[t](e))}),e.offsets.popper=o,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),l=a?"right":"bottom",s=a?"left":"top",u=a?"width":"height";return n[l]<o(r[s])&&(e.offsets.popper[s]=o(r[s])-n[u]),n[s]>o(r[l])&&(e.offsets.popper[s]=o(r[l])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!V(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,a=o.popper,l=o.reference,u=-1!==["left","right"].indexOf(i),c=u?"height":"width",f=u?"Top":"Left",d=f.toLowerCase(),p=u?"left":"top",h=u?"bottom":"right",m=A(r)[c];l[h]-m<a[d]&&(e.offsets.popper[d]-=a[d]-(l[h]-m)),l[d]+m>a[h]&&(e.offsets.popper[d]+=l[d]+m-a[h]),e.offsets.popper=x(e.offsets.popper);var g=l[d]+l[c]/2-m/2,v=s(e.instance.popper),y=parseFloat(v["margin"+f],10),b=parseFloat(v["border"+f+"Width"],10),_=g-e.offsets.popper[d]-y-b;return _=Math.max(Math.min(a[c]-m,_),0),e.arrowElement=r,e.offsets.arrow=(T(n={},d,Math.round(_)),T(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(R(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=k(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),r=e.placement.split("-")[0],i=D(r),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case G.FLIP:a=[r,i];break;case G.CLOCKWISE:a=q(r);break;case G.COUNTERCLOCKWISE:a=q(r,!0);break;default:a=t.behavior}return a.forEach(function(l,s){if(r!==l||a.length===s+1)return e;r=e.placement.split("-")[0],i=D(r);var u=e.offsets.popper,c=e.offsets.reference,f=Math.floor,d="left"===r&&f(u.right)>f(c.left)||"right"===r&&f(u.left)<f(c.right)||"top"===r&&f(u.bottom)>f(c.top)||"bottom"===r&&f(u.top)<f(c.bottom),p=f(u.left)<f(n.left),h=f(u.right)>f(n.right),m=f(u.top)<f(n.top),g=f(u.bottom)>f(n.bottom),v="left"===r&&p||"right"===r&&h||"top"===r&&m||"bottom"===r&&g,y=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(y&&"start"===o&&p||y&&"end"===o&&h||!y&&"start"===o&&m||!y&&"end"===o&&g);(d||v||b)&&(e.flipped=!0,(d||v)&&(r=a[s+1]),b&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=r+(o?"-"+o:""),e.offsets.popper=w({},e.offsets.popper,I(e.instance.popper,e.offsets.reference,e.placement)),e=L(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),l=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(l?i[a?"width":"height"]:0),e.placement=D(t),e.offsets.popper=x(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!V(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=P(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=P(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,l=C(f(e.instance.popper)),s={position:i.position},u={left:Math.floor(i.left),top:Math.floor(i.top),bottom:Math.floor(i.bottom),right:Math.floor(i.right)},c="bottom"===n?"top":"bottom",d="right"===r?"left":"right",p=j("transform"),h=void 0,m=void 0;if(m="bottom"===c?-l.height+u.bottom:u.top,h="right"===d?-l.width+u.right:u.left,a&&p)s[p]="translate3d("+h+"px, "+m+"px, 0)",s[c]=0,s[d]=0,s.willChange="transform";else{var g="bottom"===c?-1:1,v="right"===d?-1:1;s[c]=m*g,s[d]=h*v,s.willChange=c+", "+d}var y={"x-placement":e.placement};return e.attributes=w({},y,e.attributes),e.styles=w({},s,e.styles),e.arrowStyles=w({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return W(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&W(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var o=N(0,t,e),a=O(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),W(t,{position:"absolute"}),n},gpuAcceleration:void 0}}},Q=function(){function e(t,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};_(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=a(this.update.bind(this)),this.options=w({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(w({},e.Defaults.modifiers,i.modifiers)).forEach(function(t){r.options.modifiers[t]=w({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return w({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&l(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return E(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=N(this.state,this.popper,this.reference),e.placement=O(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=I(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=L(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,R(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[j("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=M(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return F.call(this)}}]),e}();Q.Utils=("undefined"!=typeof window?window:e).PopperUtils,Q.placements=B,Q.Defaults=K,t.default=Q}.call(this,n(3))},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(4),a=n.n(o);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(){var e,n,r,i,o,a,s;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var f=arguments.length,d=new Array(f),p=0;p<f;p++)d[p]=arguments[p];return r=this,i=(e=u(t)).call.apply(e,[this].concat(d)),n=!i||"object"!==l(i)&&"function"!=typeof i?c(r):i,o=c(n),s=function(e){var t=n.props,r=t.data,i=t.update,o=e.target.value.toLowerCase();i({data:r.filter(function(e){return e.name.toLowerCase().includes(o)}),active:0,term:o})},(a="dataSearch")in o?Object.defineProperty(o,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):o[a]=s,n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,i.a.Component),n=t,(r=[{key:"render",value:function(){var e=this,t=this.props.term;return i.a.createElement("div",{className:"search-name"},i.a.createElement("input",{className:"form-control",type:"text","aria-label":"Search",value:t,placeholder:"Search in here...",onChange:function(t){return e.dataSearch(t)}}))}}])&&s(n.prototype,r),o&&s(n,o),t}(),p=function(e){var t=e.data,n=e.activeUser;if(!t||!t[n])return i.a.createElement("h3",null,"Nothing was found...");var r=t[n];return i.a.createElement("div",{className:"thumbnail position-fixed mt-5"},i.a.createElement("img",{className:"card-img-top",src:"images/".concat(r.image,".svg"),alt:r.image}),i.a.createElement("div",{className:"thumbnail-caption"},i.a.createElement("table",{className:"user-info table table-responsive"},i.a.createElement("tbody",null,i.a.createElement("tr",null,i.a.createElement("td",null,"Name: "),i.a.createElement("td",null,r.name)),i.a.createElement("tr",null,i.a.createElement("td",null,"Age:"),i.a.createElement("td",null,r.age)),i.a.createElement("tr",null,i.a.createElement("td",null,"Favourite animal:"),i.a.createElement("td",null,r.image)),i.a.createElement("tr",null,i.a.createElement("td",null,"Phone: "),i.a.createElement("td",null,r.phone)))),i.a.createElement("div",null,i.a.createElement("span",{className:""},i.a.createElement("b",null,"Phraze:")),i.a.createElement("br",null),i.a.createElement("blockquote",{className:"text-center mt-4"},i.a.createElement("i",{className:"fa fa-quote-left mr-2 align-top","aria-hidden":"true"}),r.phrase,i.a.createElement("hr",null)))))},h=function(e){var t=e.user,n=e.update,r=e.index,o=e.data,a=t.image,l=t.name,s=t.age,u=t.phone;return i.a.createElement("tr",{onClick:function(){return n({active:r})}},i.a.createElement("td",{className:"image-value"},i.a.createElement("img",{src:"images/".concat(a,".svg"),alt:a,className:"user-image"})),i.a.createElement("td",{className:"name-value"},i.a.createElement("h4",null,l)),i.a.createElement("td",{className:"age-value"},s),i.a.createElement("td",{className:"phone-value"},"8 ",u),i.a.createElement("td",null,i.a.createElement("button",{value:l,className:"btn btn-warning",onClick:function(e){return function(e){e.preventDefault();var t=e.target.value,i=o.find(function(e){return e.Name==t}),a=o;a.splice(r,1),deleteUser("".concat(baseUrl,"/api/users/").concat(r+1),i).then(function(e){null==e&&null==e||n({data:a})}).catch(function(e){return console.error("Error:",e)}).then(function(e){return console.log("Success:",e)})}(e)}},"Delete")))};function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var _=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),v(this,y(t).apply(this,arguments))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(t,i.a.Component),n=t,(r=[{key:"render",value:function(){var e=this.props,t=e.data,n=e.update;if(!t)return i.a.createElement("div",null,"Loading...");var r=t.map(function(e,r){return i.a.createElement(h,{user:e,index:r,data:t,key:"user - ".concat(r),update:n})});return i.a.createElement("table",{className:"user-list table table-striped mr-2"},i.a.createElement("thead",null,i.a.createElement("tr",null,i.a.createElement("th",null,"Image"),i.a.createElement("th",null,"Name"),i.a.createElement("th",null,"Age"),i.a.createElement("th",null,"Phone"),i.a.createElement("th",null))),i.a.createElement("tbody",null,r))}}])&&g(n.prototype,r),o&&g(n,o),t}(),E=function(e){var t=e.update,n=e.data,r=(e.initilData,e.isSorted);function o(e){var i=r[e]?1:-1,o=n.slice().sort(function(t,n){return t[e]===n[e]?0:t[e]>n[e]?i:-1*i});if("name"===e){var a=Object.assign({},{name:!r.name,age:r.age});t({activeUser:0,data:o,isSorted:a})}if("age"===e){var l=Object.assign({},{name:r.name,age:!r.age});t({activeUser:0,data:o,isSorted:l})}}return i.a.createElement("div",{className:"container-fluid"},i.a.createElement("div",{className:"row pl-3 mt-4 sorted-buttons"},i.a.createElement("button",{className:"btn btn-default text-uppercase mb-2 sort-button-name",onClick:function(){o("name")}},i.a.createElement("i",{className:r.name?"fa fa-sort-alpha-desc":"fa fa-sort-alpha-asc"}),"Sort Names"),i.a.createElement("button",{className:"btn btn-default mr-2 text-uppercase sort-button-age",onClick:function(){o("age")}},i.a.createElement("i",{className:r.age?"fa fa-sort-numeric-desc":"fa fa-sort-numeric-asc"}),"Sort Ages")))},T=n(1),w=n.n(T);function x(e){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function C(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var A=function(e){function t(e){var n,r,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,(n=!(i=k(t).call(this,e))||"object"!==x(i)&&"function"!=typeof i?O(r):i).state={name:"",age:0,image:"",phone:"",phrase:""},n.handleSubmit=n.handleSubmit.bind(O(n)),n.onHandleChangeName=n.onHandleChangeName.bind(O(n)),n.onHandleChangeAge=n.onHandleChangeAge.bind(O(n)),n.onHandleChangeImage=n.onHandleChangeImage.bind(O(n)),n.onHandleChangePhone=n.onHandleChangePhone.bind(O(n)),n.onHandleChangePhrase=n.onHandleChangePhrase.bind(O(n)),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(t,i.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){w()(this.modal).modal("show"),w()(this.modal).on("hidden.bs.modal",this.props.onClick)}},{key:"saveUser",value:function(e,t){var n=this.props,r=n.update,i=n.data;(e||t)&&function(e,t){return fetch(e,{method:"POST",headers:{Accept:"application/json","content-type":"application/json"},body:JSON.stringify(t),cache:"cache",mode:"cors",redirect:"follow",referrer:"client"}).then(function(e){return e.json()}).catch(function(e){return new Error("Something has gone wrong, the data has not being added")})}(e,t).then(function(e){r({data:[].concat(C(i),[e])})}).catch(function(e){return console.error("Error:",e)}).then(function(e){return console.log("Success:",e)})}},{key:"handleSubmit",value:function(e){var t=this.props.baseUrl;if(t){e.preventDefault();var n={name:this.state.name,age:this.state.age,phone:this.state.phone,phrase:this.state.phrase,image:this.state.image};this.saveUser("".concat(t,"/api/users"),n),w()(this.modal).modal("hide")}}},{key:"onHandleChangeName",value:function(e){e.preventDefault();var t=e.target.value;this.setState({name:t})}},{key:"onHandleChangeAge",value:function(e){e.preventDefault();var t=e.target.value;this.setState({age:t})}},{key:"onHandleChangeImage",value:function(e){e.preventDefault();var t=e.target.value;this.setState({image:t})}},{key:"onHandleChangePhone",value:function(e){e.preventDefault();var t=e.target.value;this.setState({phone:t})}},{key:"onHandleChangePhrase",value:function(e){e.preventDefault();var t=e.target.value;this.setState({phrase:t})}},{key:"render",value:function(){var e=this;return i.a.createElement("div",{className:"modal fade user-add-form",ref:function(t){return e.modal=t},id:"Modal",tabIndex:"-1",role:"dialog","aria-labelledby":"exampleModalLabel","aria-hidden":"true"},i.a.createElement("div",{className:"modal-dialog",role:"document"},i.a.createElement("div",{className:"modal-content"},i.a.createElement("div",{className:"modal-header"},i.a.createElement("h4",{className:"modal-title form-title"},"User information"),i.a.createElement("button",{type:"button",className:"close ml-0","data-dismiss":"modal","aria-label":"Close"},i.a.createElement("span",{"aria-hidden":"true"},"×"))),i.a.createElement("div",{className:"modal-body"},i.a.createElement("form",{onSubmit:this.handleSubmit,id:"formModal"},i.a.createElement("div",{className:"form-group"},i.a.createElement("label",{htmlFor:"recipient-name",className:"col-form-label"},"Name:"),i.a.createElement("input",{value:this.state.name,onChange:this.onHandleChangeName,name:"Name",type:"text",className:"form-control",id:"recipient-name"})),i.a.createElement("div",{className:"form-group"},i.a.createElement("label",{htmlFor:"recipient-age",className:"col-form-label"},"Age:"),i.a.createElement("input",{value:this.state.age,onChange:this.onHandleChangeAge,name:"Age",type:"text",className:"form-control",id:"recipient-age"})),i.a.createElement("div",{className:"form-group"},i.a.createElement("label",{htmlFor:"recipient-animal",className:"col-form-label"},"Favourite animal:"),i.a.createElement("input",{value:this.state.image,onChange:this.onHandleChangeImage,name:"Image",type:"text",className:"form-control",id:"recipient-animal"})),i.a.createElement("div",{className:"form-group"},i.a.createElement("label",{htmlFor:"recipient-phone",className:"col-form-label"},"Phone:"),i.a.createElement("input",{value:this.state.phone,onChange:this.onHandleChangePhone,name:"Phone",type:"text",className:"form-control",id:"recipient-phone"})),i.a.createElement("div",{className:"form-group"},i.a.createElement("label",{htmlFor:"message-phrase",className:"col-form-label"},"Phrase:"),i.a.createElement("textarea",{value:this.state.phrase,onChange:this.onHandleChangePhrase,name:"Phrase",className:"form-control",id:"message-phrase"}))),i.a.createElement("div",{className:"modal-footer"},i.a.createElement("button",{type:"button",className:"btn btn-default","data-dismiss":"modal",onClick:this.closeAddForm},"Close"),i.a.createElement("button",{className:"btn btn-primary",onClick:this.handleSubmit},"Submit"))))))}}])&&S(n.prototype,r),o&&S(n,o),t}();function D(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["Reauest failed: ",""]);return D=function(){return e},e}function I(e){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(e){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function R(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var H=function(e){function t(e){var n,r,i;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),r=this,(n=!(i=L(t).call(this,e))||"object"!==I(i)&&"function"!=typeof i?R(r):i).state={data:null,activeUser:0,term:"",isSorted:{name:!0,age:!0},showAddUser:!1},n.showAddForm=n.showAddForm.bind(R(n)),n.closeAddForm=n.closeAddForm.bind(R(n)),n.updateData=n.updateData.bind(R(n)),n}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}(t,i.a.Component),n=t,(r=[{key:"loadData",value:function(){var e,t=this,n=this.props.data;(e=n,new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET",e,!0),r.addEventListener("load",function(){r.status>=200&&r.status<400?t(r.responseText):n((new Error)(D(),r.statusText))}),r.addEventListener("error",function(){n(new Error("Network error"))}),r.send()})).then(function(e){t.initialData=JSON.parse(e),t.setState({data:t.initialData})}).catch(function(e){console.log(e)})}},{key:"componentDidMount",value:function(){this.loadData()}},{key:"updateData",value:function(e){this.setState(e)}},{key:"showAddForm",value:function(){this.setState({showAddUser:!this.state.showAddUser})}},{key:"closeAddForm",value:function(){this.setState({showAddUser:!this.state.showAddUser})}},{key:"render",value:function(){var e=this.state,t=e.activeUser,n=e.term,r=e.data,o=e.isSorted,a=e.showAddUser;return i.a.createElement("div",{className:"app container-fluid"},i.a.createElement("div",{className:"row mt-4"},i.a.createElement("div",{className:"col-12"},i.a.createElement(d,{term:n,data:this.initialData,update:this.updateData}))),i.a.createElement("div",{className:"row mt-2 mb-2"},i.a.createElement(E,{update:this.updateData,data:r,isSorted:o,initialData:this.initialData,activeUser:t}),i.a.createElement("button",{type:"button",className:"btn btn-default ml-3 text-uppercase add-new-user global-buttons",onClick:this.showAddForm},"Add new user")),i.a.createElement("div",{className:"row user-list-data"},i.a.createElement("div",{className:"col-12 col-sm-8 col-md-9 col-lg-10 user-list"},i.a.createElement(_,{data:r,update:this.updateData})),i.a.createElement("div",{className:"col-sm-4 col-md-3 col-lg-2 active-user"},i.a.createElement(p,{activeUser:t,data:r})),a?i.a.createElement(A,{update:this.updateData,showAddUser:a,onClick:this.closeAddForm,data:r,baseUrl:null}):null))}}])&&P(n.prototype,r),o&&P(n,o),t}();n(9);a.a.render(i.a.createElement(H,{data:"../data.json"}),document.getElementById("root")),e.hot.accept()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvZGlzdC9qcy9ib290c3RyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc2VhcmNoQmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2FjdGl2ZVVzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXNlckRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXNlckxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdG9vbEJhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hZGRVc2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL3NhdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL2xvYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbInBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrIiwid2luZG93IiwiY2h1bmtJZCIsIm1vcmVNb2R1bGVzIiwiaG90QXZhaWxhYmxlRmlsZXNNYXAiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsIm1vZHVsZUlkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaG90VXBkYXRlIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RBZGRVcGRhdGVDaHVuayIsImhvdEN1cnJlbnRDaGlsZE1vZHVsZSIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RDdXJyZW50SGFzaCIsImhvdFJlcXVlc3RUaW1lb3V0IiwiaG90Q3VycmVudE1vZHVsZURhdGEiLCJob3RDdXJyZW50UGFyZW50cyIsImhvdEN1cnJlbnRQYXJlbnRzVGVtcCIsImhvdENyZWF0ZVJlcXVpcmUiLCJtZSIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZm4iLCJyZXF1ZXN0IiwiaG90IiwiYWN0aXZlIiwicGFyZW50cyIsImluZGV4T2YiLCJwdXNoIiwiY2hpbGRyZW4iLCJjb25zb2xlIiwid2FybiIsIk9iamVjdEZhY3RvcnkiLCJuYW1lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlIiwiaG90U3RhdHVzIiwiaG90U2V0U3RhdHVzIiwidGhlbiIsImZpbmlzaENodW5rTG9hZGluZyIsImVyciIsImhvdFdhaXRpbmdGaWxlc01hcCIsImhvdEVuc3VyZVVwZGF0ZUNodW5rIiwidCIsIm1vZGUiLCJob3RDcmVhdGVNb2R1bGUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfbWFpbiIsImFjY2VwdCIsImRlcCIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiaSIsImxlbmd0aCIsImRlY2xpbmUiLCJkaXNwb3NlIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImlkeCIsInNwbGljZSIsImNoZWNrIiwiaG90Q2hlY2siLCJhcHBseSIsImhvdEFwcGx5Iiwic3RhdHVzIiwibCIsImhvdFN0YXR1c0hhbmRsZXJzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJkYXRhIiwibmV3U3RhdHVzIiwiaG90RGVmZXJyZWQiLCJob3RVcGRhdGVOZXdIYXNoIiwidG9Nb2R1bGVJZCIsImlkIiwiRXJyb3IiLCJyZXF1ZXN0VGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsInAiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiYyIsImgiLCJwcm9taXNlIiwic2NyaXB0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsInNyYyIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsInJlc3VsdCIsIm91dGRhdGVkTW9kdWxlcyIsIm9wdGlvbnMiLCJjYiIsImoiLCJtb2R1bGUiLCJnZXRBZmZlY3RlZFN0dWZmIiwidXBkYXRlTW9kdWxlSWQiLCJvdXRkYXRlZERlcGVuZGVuY2llcyIsInF1ZXVlIiwic2xpY2UiLCJtYXAiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBvcCIsInR5cGUiLCJwYXJlbnRJZCIsInBhcmVudCIsImNvbmNhdCIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJtb2R1bGVzIiwiZXJyb3IiLCJjYWxsYmFja3MiLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yaWdpbmFsRXJyb3IiLCJleHBvcnRzIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImdsb2JhbCIsImZhY3RvcnkiLCJ3IiwidGhpcyIsIm5vR2xvYmFsIiwiYXJyIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNsYXNzMnR5cGUiLCJ0b1N0cmluZyIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJET01FdmFsIiwiY29kZSIsImRvYyIsInRleHQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJpbml0IiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiaXNBcnJheUxpa2UiLCJvYmoiLCJpc1dpbmRvdyIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImVsZW0iLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImVuZCIsInNvcnQiLCJleHRlbmQiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsInRhcmdldCIsImRlZXAiLCJpc0Z1bmN0aW9uIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJtc2ciLCJub29wIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJncmVwIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsInByb3h5IiwidG1wIiwiYXJncyIsIm5vdyIsIkRhdGUiLCJpdGVyYXRvciIsInNwbGl0IiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsInNvcnRPcmRlciIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiXyIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImRpc2FibGVkQW5jZXN0b3IiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsIm5vZGVUeXBlIiwiZWxzIiwic2VlZCIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3QiLCJub2RlTmFtZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInRvU2VsZWN0b3IiLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJkb2N1bWVudEVsZW1lbnQiLCJub2RlIiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwiaW5uZXJIVE1MIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwidmFsIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwiPiIsIiAiLCIrIiwifiIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwic2V0RmlsdGVycyIsIm1hdGNoZWQiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsInRva2VuIiwiY29tcGlsZWQiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJpc1NpbXBsZSIsIndpbm5vdyIsInF1YWxpZmllciIsInNlbGYiLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsInRhcmdldHMiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwibm9WYWx1ZSIsIm1ldGhvZCIsImZhaWwiLCJDYWxsYmFja3MiLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlXYWl0Iiwid2FpdCIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsInN3YXAiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiaGlkZSIsInRvZ2dsZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsIndyYXBNYXAiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZGl2Iiwicmh0bWwiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50Iiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwidHJpZ2dlciIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJzY3JpcHRUeXBlTWFza2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsImh0bWwiLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybWFyZ2luIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImNvbnRhaW5lciIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsIm1hcmdpbkxlZnQiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsIm1hcmdpblJpZ2h0IiwicGl4ZWxNYXJnaW5SaWdodFZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsImJveFNpemluZ1JlbGlhYmxlIiwicmVsaWFibGVNYXJnaW5MZWZ0IiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmxvYXQiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCIqIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJwYXJzZUludCIsImZvciIsImNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImZvY3VzaW4iLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0IiwicmVzcG9uc2VUeXBlIiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJhc3NpZ24iLCJ0ZXN0MSIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsInRlc3QzIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0b09iamVjdCIsImciLCJGdW5jdGlvbiIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiayIsInEiLCJ1IiwieCIsInkiLCJ6IiwiYWEiLCJiYSIsIkEiLCJCIiwiZiIsImZyYW1lc1RvUG9wIiwiY2EiLCJDIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkQiLCJFIiwicmVmcyIsInVwZGF0ZXIiLCJGIiwiRyIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiSCIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSSIsIkoiLCJLIiwiTCIsInJlZiIsIl9fc2VsZiIsIl9fc291cmNlIiwiTSIsImRlZmF1bHRQcm9wcyIsIiQkdHlwZW9mIiwiX293bmVyIiwiTiIsIk8iLCJQIiwiUSIsImtleVByZWZpeCIsIlIiLCJVIiwiUyIsIlQiLCI9IiwiOiIsImVhIiwiZmEiLCJWIiwiZGEiLCJXIiwiWCIsIkNoaWxkcmVuIiwib25seSIsImNyZWF0ZVJlZiIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiZm9yd2FyZFJlZiIsInJlbmRlciIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwibWVtbyIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidmVyc2lvbiIsInVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRPd25lciIsIlkiLCJkZWZhdWx0IiwiWiIsImhhIiwiaWEiLCJvbkVycm9yIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInFhIiwicmVnaXN0cmF0aW9uTmFtZSIsInJhIiwic2EiLCJkZXBlbmRlbmNpZXMiLCJ0YSIsInVhIiwidmEiLCJ3YSIsImthIiwieGEiLCJ5YSIsInphIiwiQWEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiQmEiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJyZXR1cm4iLCJNYSIsImRpc3BhdGNoQ29uZmlnIiwiTmEiLCJfdGFyZ2V0SW5zdCIsIk9hIiwiUGEiLCJRYSIsIlJhIiwiU2EiLCJUYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlVhIiwiVmEiLCJXYSIsInRyYW5zaXRpb24iLCJYYSIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJkYiIsImViIiwiZmIiLCJnYiIsIkludGVyZmFjZSIsImliIiwiZXZlbnRQb29sIiwiamIiLCJkZXN0cnVjdG9yIiwiaGIiLCJnZXRQb29sZWQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNUcnVzdGVkIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsImRvY3VtZW50TW9kZSIsInBiIiwicWIiLCJyYiIsInNiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInRiIiwidWIiLCJ2YiIsIndiIiwiemIiLCJsb2NhbGUiLCJ4YiIsInliIiwiQWIiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsIndlZWsiLCJNYiIsIk5iIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwiT2IiLCJQYiIsIlJiIiwiX3ZhbHVlVHJhY2tlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJRYiIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImRpc3BsYXlOYW1lIiwiamMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImtjIiwibGMiLCJtYyIsIm5jIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInJjIiwic2MiLCJ0YyIsInBjIiwicWMiLCJvYyIsInNldEF0dHJpYnV0ZU5TIiwidWMiLCJ2YyIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwid2MiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsImNoYW5nZSIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJkZXRhY2hFdmVudCIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJRYyIsIlJjIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlNjIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlRjIiwiVWMiLCJWYyIsIldjIiwiWGMiLCJZYyIsImZyb21FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiWmMiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsImlzUHJpbWFyeSIsIiRjIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJhZCIsImFsdGVybmF0ZSIsImJkIiwiY2QiLCJkZCIsImVkIiwiZWZmZWN0VGFnIiwiZmQiLCJoZCIsImdkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsImpkIiwiY2xpcGJvYXJkRGF0YSIsImtkIiwibGQiLCJtZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJuZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJvZCIsInJlcGVhdCIsInBkIiwiZGF0YVRyYW5zZmVyIiwicWQiLCJyZCIsInNkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ1ZCIsInZkIiwid2QiLCJpc0ludGVyYWN0aXZlIiwieGQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJ5ZCIsInpkIiwiQWQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkJkIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIktkIiwiTGQiLCJOZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiT2QiLCJjb250ZW50RWRpdGFibGUiLCJRZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJNZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImVsZW1lbnQiLCJSZCIsIlNkIiwiVGQiLCJVZCIsIlZkIiwiV2QiLCJYZCIsIllkIiwib25TZWxlY3QiLCIkZCIsIlpkIiwiYWUiLCJkZWZhdWx0U2VsZWN0ZWQiLCJiZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2UiLCJkZSIsImVlIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImZlIiwibWF0aG1sIiwic3ZnIiwiZ2UiLCJoZSIsImllIiwiamUiLCJuYW1lc3BhY2VVUkkiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwia2UiLCJsZSIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1ucyIsImZsZXgiLCJmbGV4UG9zaXRpdmUiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibGluZUNsYW1wIiwidGFiU2l6ZSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJuZSIsIm9lIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwicGUiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInRyYWNrIiwid2JyIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJhdXRvRm9jdXMiLCJ4ZSIsIl9faHRtbCIsInllIiwiemUiLCJBZSIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJCZSIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiRGUiLCJFZSIsIlNldCIsIkZlIiwiR2UiLCJIZSIsIkllIiwiSmUiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJjaGlsZENvbnRleHRUeXBlcyIsIktlIiwiTGUiLCJNZSIsIk5lIiwiZ2V0Q2hpbGRDb250ZXh0IiwiT2UiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVWUiLCJlbGVtZW50VHlwZSIsInBlbmRpbmdQcm9wcyIsImNvbnRleHREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZSIsIlZlIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsImJmIiwicGVuZGluZ0NoaWxkcmVuIiwiY2YiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImRmIiwiZmYiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImdmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwidGYiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwibGYiLCJuZiIsIm1mIiwicGF5bG9hZCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJ1ZiIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsInZmIiwiY29udGV4dFR5cGUiLCJ3ZiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInhmIiwieWYiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInpmIiwiQWYiLCJfc3RyaW5nUmVmIiwiQmYiLCJDZiIsIk1hcCIsImRlbGV0ZSIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwidGFnTmFtZSIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsImJhc2VVcGRhdGUiLCJuZyIsIm9nIiwicGciLCJhY3Rpb24iLCJxZyIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJyZyIsImRlc3Ryb3kiLCJkZXBzIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInJlYWRDb250ZXh0IiwieGciLCJ5ZyIsInpnIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJRZyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIlJnIiwicGVuZGluZ0NvbnRleHQiLCJTZyIsInRpbWVkT3V0QXQiLCJmYWxsYmFjayIsIlRnIiwiVWciLCJoZiIsIldlIiwiaHlkcmF0ZSIsIm9ic2VydmVkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsIm9uQ2xpY2siLCJvbmNsaWNrIiwicGgiLCJXZWFrU2V0IiwicWgiLCJyaCIsInNoIiwidmgiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIndoIiwieGgiLCJ5aCIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJ6aCIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZSIsInVoIiwiaGkiLCJYaCIsIkJoIiwiV2Vha01hcCIsIkNoIiwiRGgiLCJFaCIsImNvbXBvbmVudERpZENhdGNoIiwiRmgiLCJjb21wb25lbnRTdGFjayIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVmgiLCJaaCIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsImVmIiwiUGQiLCJZaCIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiZmluaXNoZWRXb3JrIiwiJGgiLCJhaSIsImNyZWF0ZUVsZW1lbnROUyIsImJpIiwiY2kiLCJkaSIsIm1heER1cmF0aW9uIiwicGluZ0NhY2hlIiwiZWkiLCJmaSIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiZ2kiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1bnN0YWJsZV9ub3ciLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJ0aW1lb3V0SGFuZGxlIiwiQmkiLCJDaSIsIm5leHRTY2hlZHVsZWRSb290IiwiRGkiLCJFaSIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiX29uQ29tcGxldGUiLCJGaSIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJHaSIsIkhpIiwiSWkiLCJKaSIsIktpIiwiTGkiLCJOaSIsIl9yb290IiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwiT2kiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwiUGkiLCJfaW50ZXJuYWxSb290IiwiUWkiLCJTaSIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsIlJpIiwiVGkiLCJNaSIsInN0cmluZ2lmeSIsImZvcm0iLCJjb21taXQiLCJ1bm1vdW50IiwiY3JlYXRlQmF0Y2giLCJWaSIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIlRlIiwib3ZlcnJpZGVQcm9wcyIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIldpIiwiWGkiLCJwcmV2aW91cyIsInByaW9yaXR5TGV2ZWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInBlcmZvcm1hbmNlIiwiX3NjaGVkTW9jayIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsIlBvcHBlciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2V4dGVuZHMiLCJVdGlsIiwiJCQkMSIsInRyYW5zaXRpb25FbmRFbXVsYXRvciIsIl90aGlzIiwiY2FsbGVkIiwiVFJBTlNJVElPTl9FTkQiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImdldFVJRCIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJzdWJzdHIiLCJlc2NhcGVJZCIsIiRzZWxlY3RvciIsInJlZmxvdyIsInN1cHBvcnRzVHJhbnNpdGlvbkVuZCIsIkJvb2xlYW4iLCJpc0VsZW1lbnQiLCJ0eXBlQ2hlY2tDb25maWciLCJjb21wb25lbnROYW1lIiwiY29uZmlnIiwiY29uZmlnVHlwZXMiLCJleHBlY3RlZFR5cGVzIiwidmFsdWVUeXBlIiwiUVVuaXQiLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsIkFsZXJ0IiwiSlFVRVJZX05PX0NPTkZMSUNUIiwiQ0xPU0UiLCJDTE9TRUQiLCJDTElDS19EQVRBX0FQSSIsIkNsYXNzTmFtZSIsIkFMRVJUIiwiRkFERSIsIlNIT1ciLCJfZWxlbWVudCIsIl9wcm90byIsImNsb3NlIiwicm9vdEVsZW1lbnQiLCJfZ2V0Um9vdEVsZW1lbnQiLCJjdXN0b21FdmVudCIsIl90cmlnZ2VyQ2xvc2VFdmVudCIsIl9yZW1vdmVFbGVtZW50IiwiY2xvc2VFdmVudCIsIl9kZXN0cm95RWxlbWVudCIsIl9qUXVlcnlJbnRlcmZhY2UiLCIkZWxlbWVudCIsIl9oYW5kbGVEaXNtaXNzIiwiYWxlcnRJbnN0YW5jZSIsIkJ1dHRvbiIsIk5BTUUiLCJBQ1RJVkUiLCJCVVRUT04iLCJGT0NVUyIsIlNlbGVjdG9yIiwiREFUQV9UT0dHTEVfQ0FSUk9UIiwiREFUQV9UT0dHTEUiLCJJTlBVVCIsIkZPQ1VTX0JMVVJfREFUQV9BUEkiLCJ0cmlnZ2VyQ2hhbmdlRXZlbnQiLCJhZGRBcmlhUHJlc3NlZCIsImNsYXNzTGlzdCIsIkNhcm91c2VsIiwiREFUQV9LRVkiLCJFVkVOVF9LRVkiLCJEZWZhdWx0Iiwia2V5Ym9hcmQiLCJzbGlkZSIsInBhdXNlIiwiRGVmYXVsdFR5cGUiLCJEaXJlY3Rpb24iLCJORVhUIiwiUFJFViIsIkxFRlQiLCJSSUdIVCIsIlNMSURFIiwiU0xJRCIsIktFWURPV04iLCJNT1VTRUVOVEVSIiwiTU9VU0VMRUFWRSIsIlRPVUNIRU5EIiwiTE9BRF9EQVRBX0FQSSIsIkNBUk9VU0VMIiwiSVRFTSIsIkFDVElWRV9JVEVNIiwiTkVYVF9QUkVWIiwiSU5ESUNBVE9SUyIsIkRBVEFfU0xJREUiLCJEQVRBX1JJREUiLCJfaXRlbXMiLCJfaW50ZXJ2YWwiLCJfYWN0aXZlRWxlbWVudCIsIl9pc1BhdXNlZCIsIl9pc1NsaWRpbmciLCJ0b3VjaFRpbWVvdXQiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl9hZGRFdmVudExpc3RlbmVycyIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImN5Y2xlIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwidmlzaWJpbGl0eVN0YXRlIiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiZGlyZWN0aW9uIiwiX3RoaXMyIiwiX2tleWRvd24iLCJfZ2V0SXRlbUJ5RGlyZWN0aW9uIiwiaXNOZXh0RGlyZWN0aW9uIiwiaXNQcmV2RGlyZWN0aW9uIiwibGFzdEl0ZW1JbmRleCIsImlzR29pbmdUb1dyYXAiLCJkZWx0YSIsIml0ZW1JbmRleCIsIl90cmlnZ2VyU2xpZGVFdmVudCIsImV2ZW50RGlyZWN0aW9uTmFtZSIsInRhcmdldEluZGV4IiwiZnJvbUluZGV4Iiwic2xpZGVFdmVudCIsIl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50IiwibmV4dEluZGljYXRvciIsImRpcmVjdGlvbmFsQ2xhc3NOYW1lIiwib3JkZXJDbGFzc05hbWUiLCJfdGhpczMiLCJhY3RpdmVFbGVtZW50SW5kZXgiLCJuZXh0RWxlbWVudCIsIm5leHRFbGVtZW50SW5kZXgiLCJpc0N5Y2xpbmciLCJzbGlkRXZlbnQiLCJfZGF0YUFwaUNsaWNrSGFuZGxlciIsInNsaWRlSW5kZXgiLCIkY2Fyb3VzZWwiLCJDb2xsYXBzZSIsIlNIT1dOIiwiSElERSIsIkhJRERFTiIsIkNPTExBUFNFIiwiQ09MTEFQU0lORyIsIkNPTExBUFNFRCIsIkRpbWVuc2lvbiIsIldJRFRIIiwiSEVJR0hUIiwiQUNUSVZFUyIsIl9pc1RyYW5zaXRpb25pbmciLCJfdHJpZ2dlckFycmF5IiwidGFiVG9nZ2xlcyIsIl9zZWxlY3RvciIsIl9wYXJlbnQiLCJfZ2V0UGFyZW50IiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsImFjdGl2ZXMiLCJhY3RpdmVzRGF0YSIsInN0YXJ0RXZlbnQiLCJkaW1lbnNpb24iLCJfZ2V0RGltZW5zaW9uIiwic2V0VHJhbnNpdGlvbmluZyIsImNhcGl0YWxpemVkRGltZW5zaW9uIiwic2Nyb2xsU2l6ZSIsIiRlbGVtIiwiaXNUcmFuc2l0aW9uaW5nIiwiaGFzV2lkdGgiLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCIkdGhpcyIsIiR0cmlnZ2VyIiwiJHRhcmdldCIsIkRyb3Bkb3duIiwiUkVHRVhQX0tFWURPV04iLCJBUlJPV19VUF9LRVlDT0RFIiwiQ0xJQ0siLCJLRVlET1dOX0RBVEFfQVBJIiwiS0VZVVBfREFUQV9BUEkiLCJESVNBQkxFRCIsIkRST1BVUCIsIkRST1BSSUdIVCIsIkRST1BMRUZUIiwiTUVOVVJJR0hUIiwiTUVOVUxFRlQiLCJQT1NJVElPTl9TVEFUSUMiLCJGT1JNX0NISUxEIiwiTUVOVSIsIk5BVkJBUl9OQVYiLCJWSVNJQkxFX0lURU1TIiwiQXR0YWNobWVudE1hcCIsIlRPUCIsIlRPUEVORCIsIkJPVFRPTSIsIkJPVFRPTUVORCIsIlJJR0hURU5EIiwiTEVGVEVORCIsImZsaXAiLCJib3VuZGFyeSIsIl9wb3BwZXIiLCJfbWVudSIsIl9nZXRNZW51RWxlbWVudCIsIl9pbk5hdmJhciIsIl9kZXRlY3ROYXZiYXIiLCJfZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJpc0FjdGl2ZSIsIl9jbGVhck1lbnVzIiwic2hvd0V2ZW50IiwiX2dldFBvcHBlckNvbmZpZyIsInNjaGVkdWxlVXBkYXRlIiwiX2dldFBsYWNlbWVudCIsIiRwYXJlbnREcm9wZG93biIsInBsYWNlbWVudCIsIm9mZnNldENvbmYiLCJvZmZzZXRzIiwicG9wcGVyQ29uZmlnIiwibW9kaWZpZXJzIiwicHJldmVudE92ZXJmbG93IiwiYm91bmRhcmllc0VsZW1lbnQiLCJ0b2dnbGVzIiwiZHJvcGRvd25NZW51IiwiaGlkZUV2ZW50IiwiX2RhdGFBcGlLZXlkb3duSGFuZGxlciIsIml0ZW1zIiwiTW9kYWwiLCJiYWNrZHJvcCIsIkZPQ1VTSU4iLCJSRVNJWkUiLCJDTElDS19ESVNNSVNTIiwiS0VZRE9XTl9ESVNNSVNTIiwiTU9VU0VVUF9ESVNNSVNTIiwiTU9VU0VET1dOX0RJU01JU1MiLCJTQ1JPTExCQVJfTUVBU1VSRVIiLCJCQUNLRFJPUCIsIk9QRU4iLCJESUFMT0ciLCJEQVRBX0RJU01JU1MiLCJGSVhFRF9DT05URU5UIiwiU1RJQ0tZX0NPTlRFTlQiLCJOQVZCQVJfVE9HR0xFUiIsIl9kaWFsb2ciLCJfYmFja2Ryb3AiLCJfaXNTaG93biIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX29yaWdpbmFsQm9keVBhZGRpbmciLCJfc2Nyb2xsYmFyV2lkdGgiLCJfY2hlY2tTY3JvbGxiYXIiLCJfc2V0U2Nyb2xsYmFyIiwiX2FkanVzdERpYWxvZyIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJfaGlkZU1vZGFsIiwiaGFuZGxlVXBkYXRlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsIl9lbmZvcmNlRm9jdXMiLCJzaG93bkV2ZW50IiwidHJhbnNpdGlvbkNvbXBsZXRlIiwiX3RoaXM0IiwiX3RoaXM1IiwiX3RoaXM2IiwiX3RoaXM3IiwiX3Jlc2V0QWRqdXN0bWVudHMiLCJfcmVzZXRTY3JvbGxiYXIiLCJfcmVtb3ZlQmFja2Ryb3AiLCJfdGhpczgiLCJkb0FuaW1hdGUiLCJjYWxsYmFja1JlbW92ZSIsImlzTW9kYWxPdmVyZmxvd2luZyIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicmlnaHQiLCJpbm5lcldpZHRoIiwiX2dldFNjcm9sbGJhcldpZHRoIiwiX3RoaXM5IiwiYWN0dWFsUGFkZGluZyIsImNhbGN1bGF0ZWRQYWRkaW5nIiwiYWN0dWFsTWFyZ2luIiwiY2FsY3VsYXRlZE1hcmdpbiIsInNjcm9sbERpdiIsInNjcm9sbGJhcldpZHRoIiwiY2xpZW50V2lkdGgiLCJfdGhpczEwIiwiVG9vbHRpcCIsIkJTQ0xTX1BSRUZJWF9SRUdFWCIsInRlbXBsYXRlIiwidGl0bGUiLCJmYWxsYmFja1BsYWNlbWVudCIsIkFVVE8iLCJIb3ZlclN0YXRlIiwiT1VUIiwiSU5TRVJURUQiLCJGT0NVU09VVCIsIlRPT0xUSVAiLCJUT09MVElQX0lOTkVSIiwiQVJST1ciLCJUcmlnZ2VyIiwiSE9WRVIiLCJNQU5VQUwiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwidGlwIiwiX3NldExpc3RlbmVycyIsImVuYWJsZSIsInRvZ2dsZUVuYWJsZWQiLCJkYXRhS2V5IiwiX2dldERlbGVnYXRlQ29uZmlnIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZW50ZXIiLCJfbGVhdmUiLCJnZXRUaXBFbGVtZW50IiwiaXNXaXRoQ29udGVudCIsImlzSW5UaGVEb20iLCJ0aXBJZCIsInNldENvbnRlbnQiLCJhdHRhY2htZW50IiwiX2dldEF0dGFjaG1lbnQiLCJhZGRBdHRhY2htZW50Q2xhc3MiLCJiZWhhdmlvciIsImFycm93Iiwib25DcmVhdGUiLCJvcmlnaW5hbFBsYWNlbWVudCIsIl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UiLCJvblVwZGF0ZSIsIl9maXhUcmFuc2l0aW9uIiwicHJldkhvdmVyU3RhdGUiLCJfVFJBTlNJVElPTl9EVVJBVElPTiIsIl9jbGVhblRpcENsYXNzIiwiZ2V0VGl0bGUiLCJDTEFTU19QUkVGSVgiLCIkdGlwIiwic2V0RWxlbWVudENvbnRlbnQiLCJ0cmlnZ2VycyIsImV2ZW50SW4iLCJldmVudE91dCIsIl9maXhUaXRsZSIsInRpdGxlVHlwZSIsInRhYkNsYXNzIiwiaW5pdENvbmZpZ0FuaW1hdGlvbiIsIlBvcG92ZXIiLCJUSVRMRSIsIkNPTlRFTlQiLCJfVG9vbHRpcCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsIl9nZXRDb250ZW50IiwiU2Nyb2xsU3B5IiwiQUNUSVZBVEUiLCJTQ1JPTEwiLCJEUk9QRE9XTl9JVEVNIiwiRFJPUERPV05fTUVOVSIsIkRBVEFfU1BZIiwiTkFWX0xJU1RfR1JPVVAiLCJOQVZfTElOS1MiLCJOQVZfSVRFTVMiLCJMSVNUX0lURU1TIiwiRFJPUERPV04iLCJEUk9QRE9XTl9JVEVNUyIsIkRST1BET1dOX1RPR0dMRSIsIk9mZnNldE1ldGhvZCIsIk9GRlNFVCIsIlBPU0lUSU9OIiwiX3Njcm9sbEVsZW1lbnQiLCJfb2Zmc2V0cyIsIl90YXJnZXRzIiwiX2FjdGl2ZVRhcmdldCIsIl9zY3JvbGxIZWlnaHQiLCJfcHJvY2VzcyIsInJlZnJlc2giLCJhdXRvTWV0aG9kIiwib2Zmc2V0TWV0aG9kIiwib2Zmc2V0QmFzZSIsIl9nZXRTY3JvbGxUb3AiLCJfZ2V0U2Nyb2xsSGVpZ2h0IiwidGFyZ2V0U2VsZWN0b3IiLCJ0YXJnZXRCQ1IiLCJfZ2V0T2Zmc2V0SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJtYXhTY3JvbGwiLCJfYWN0aXZhdGUiLCJfY2xlYXIiLCJpc0FjdGl2ZVRhcmdldCIsInF1ZXJpZXMiLCIkbGluayIsInNjcm9sbFNweXMiLCIkc3B5IiwiVGFiIiwiQUNUSVZFX1VMIiwiRFJPUERPV05fQUNUSVZFX0NISUxEIiwibGlzdEVsZW1lbnQiLCJpdGVtU2VsZWN0b3IiLCJoaWRkZW5FdmVudCIsIl90cmFuc2l0aW9uQ29tcGxldGUiLCJkcm9wZG93bkNoaWxkIiwiZHJvcGRvd25FbGVtZW50IiwiU2Nyb2xsc3B5IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImlzQnJvd3NlciIsImxvbmdlclRpbWVvdXRCcm93c2VycyIsInRpbWVvdXREdXJhdGlvbiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRlYm91bmNlIiwic2NoZWR1bGVkIiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZ2V0UGFyZW50Tm9kZSIsImdldFNjcm9sbFBhcmVudCIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsImdldE9mZnNldFBhcmVudCIsImdldFJvb3QiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwic2Nyb2xsaW5nRWxlbWVudCIsImdldEJvcmRlcnNTaXplIiwiYXhpcyIsInNpZGVBIiwic2lkZUIiLCJpc0lFMTAiLCJpc0lFMTAkMSIsImFwcFZlcnNpb24iLCJnZXRTaXplIiwiY29tcHV0ZWRTdHlsZSIsImdldFdpbmRvd1NpemVzIiwiY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImdldENsaWVudFJlY3QiLCJib3R0b20iLCJzaXplcyIsImhvcml6U2Nyb2xsYmFyIiwidmVydFNjcm9sbGJhciIsImdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEJvdW5kYXJpZXMiLCJwb3BwZXIiLCJyZWZlcmVuY2UiLCJib3VuZGFyaWVzIiwicmVsYXRpdmVPZmZzZXQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsImlzRml4ZWQiLCJfZ2V0V2luZG93U2l6ZXMiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiX3JlZiIsImZpbHRlcmVkQXJlYXMiLCJfcmVmMiIsImNvbXB1dGVkUGxhY2VtZW50IiwidmFyaWF0aW9uIiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsImdldE91dGVyU2l6ZXMiLCJtYXJnaW5Cb3R0b20iLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsImdldFBvcHBlck9mZnNldHMiLCJyZWZlcmVuY2VPZmZzZXRzIiwicG9wcGVyUmVjdCIsInBvcHBlck9mZnNldHMiLCJpc0hvcml6IiwibWFpblNpZGUiLCJzZWNvbmRhcnlTaWRlIiwibWVhc3VyZW1lbnQiLCJzZWNvbmRhcnlNZWFzdXJlbWVudCIsInJ1bk1vZGlmaWVycyIsImVuZHMiLCJmaW5kSW5kZXgiLCJpc01vZGlmaWVyRW5hYmxlZCIsIm1vZGlmaWVyTmFtZSIsInNvbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsInRvQ2hlY2siLCJnZXRXaW5kb3ciLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwidXBkYXRlQm91bmQiLCJwYXNzaXZlIiwic2Nyb2xsRWxlbWVudCIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJldmVudHNFbmFibGVkIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwic2V0U3R5bGVzIiwiaXNNb2RpZmllclJlcXVpcmVkIiwicmVxdWVzdGluZ05hbWUiLCJyZXF1ZXN0ZWROYW1lIiwicmVxdWVzdGluZyIsImlzUmVxdWlyZWQiLCJfcmVxdWVzdGluZyIsInJlcXVlc3RlZCIsInBsYWNlbWVudHMiLCJ2YWxpZFBsYWNlbWVudHMiLCJjbG9ja3dpc2UiLCJjb3VudGVyIiwiQkVIQVZJT1JTIiwiRkxJUCIsIkNMT0NLV0lTRSIsIkNPVU5URVJDTE9DS1dJU0UiLCJwYXJzZU9mZnNldCIsImJhc2VQbGFjZW1lbnQiLCJ1c2VIZWlnaHQiLCJmcmFnbWVudHMiLCJmcmFnIiwiZGl2aWRlciIsInNwbGl0UmVnZXgiLCJvcHMiLCJvcCIsIm1lcmdlV2l0aFByZXZpb3VzIiwicmVkdWNlIiwic3RyIiwidG9WYWx1ZSIsImluZGV4MiIsIkRlZmF1bHRzIiwicmVtb3ZlT25EZXN0cm95Iiwic2hpZnR2YXJpYXRpb24iLCJfZGF0YSRvZmZzZXRzIiwiaXNWZXJ0aWNhbCIsInNpZGUiLCJzaGlmdE9mZnNldHMiLCJwcmlvcml0eSIsInByaW1hcnkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwic2Vjb25kYXJ5Iiwia2VlcFRvZ2V0aGVyIiwiZmxvb3IiLCJvcFNpZGUiLCJfZGF0YSRvZmZzZXRzJGFycm93IiwiYXJyb3dFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInNpZGVDYXBpdGFsaXplZCIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJyb3VuZCIsImZsaXBwZWQiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsInJlZk9mZnNldHMiLCJvdmVybGFwc1JlZiIsIm92ZXJmbG93c0xlZnQiLCJvdmVyZmxvd3NSaWdodCIsIm92ZXJmbG93c1RvcCIsIm92ZXJmbG93c0JvdHRvbSIsIm92ZXJmbG93c0JvdW5kYXJpZXMiLCJmbGlwcGVkVmFyaWF0aW9uIiwiZmxpcFZhcmlhdGlvbnMiLCJnZXRPcHBvc2l0ZVZhcmlhdGlvbiIsImlubmVyIiwic3VidHJhY3RMZW5ndGgiLCJib3VuZCIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJwcmVmaXhlZFByb3BlcnR5Iiwid2lsbENoYW5nZSIsImludmVydFRvcCIsImludmVydExlZnQiLCJ4LXBsYWNlbWVudCIsImFycm93U3R5bGVzIiwiYXBwbHlTdHlsZSIsIm9uTG9hZCIsIm1vZGlmaWVyT3B0aW9ucyIsImlzRGVzdHJveWVkIiwiaXNDcmVhdGVkIiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJVdGlscyIsIlBvcHBlclV0aWxzIiwiU2VhcmNoQmFyIiwiX3RoaXMkcHJvcHMiLCJ1c2VyIiwiaW5jbHVkZXMiLCJ0ZXJtIiwiUmVhY3QiLCJyZWFjdF9kZWZhdWx0IiwiYXJpYS1sYWJlbCIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJkYXRhU2VhcmNoIiwiY29tcG9uZW50c19hY3RpdmVVc2VyIiwiYWN0aXZlVXNlciIsImFsdCIsImFnZSIsInBob25lIiwiYXJpYS1oaWRkZW4iLCJwaHJhc2UiLCJ1c2VyRGF0YSIsIk5hbWUiLCJuZXdEYXRhIiwiZGVsZXRlVXNlciIsImJhc2VVcmwiLCJsb2ciLCJoYW5kbGVEZWxldGVVc2VyIiwiVXNlckxpc3QiLCJ1c2VycyIsIlRvb2xiYXIiLCJpc1NvcnRlZCIsImluaXRpbERhdGEiLCJzb3J0ZWQiLCJuZXdTb3J0ZWQiLCJBZGRVc2VyIiwiYWRkVXNlcl9jbGFzc0NhbGxDaGVjayIsImFkZFVzZXJfZ2V0UHJvdG90eXBlT2YiLCJoYW5kbGVTdWJtaXQiLCJhZGRVc2VyX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIm9uSGFuZGxlQ2hhbmdlTmFtZSIsIm9uSGFuZGxlQ2hhbmdlQWdlIiwib25IYW5kbGVDaGFuZ2VJbWFnZSIsIm9uSGFuZGxlQ2hhbmdlUGhvbmUiLCJvbkhhbmRsZUNoYW5nZVBocmFzZSIsIm1vZGFsIiwiZm9ybURhdGEiLCJmZXRjaCIsIkFjY2VwdCIsImNvbnRlbnQtdHlwZSIsInJlZGlyZWN0IiwicmVmZXJyZXIiLCJzYXZlIiwiX3RvQ29uc3VtYWJsZUFycmF5Iiwic2F2ZVVzZXIiLCJyb2xlIiwiYXJpYS1sYWJlbGxlZGJ5IiwiZGF0YS1kaXNtaXNzIiwib25TdWJtaXQiLCJodG1sRm9yIiwiY2xvc2VBZGRGb3JtIiwiQXBwIiwiYXBwX2NsYXNzQ2FsbENoZWNrIiwiYXBwX2dldFByb3RvdHlwZU9mIiwic2hvd0FkZFVzZXIiLCJzaG93QWRkRm9ybSIsImFwcF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJ1cGRhdGVEYXRhIiwiX3RlbXBsYXRlT2JqZWN0IiwiaW5pdGlhbERhdGEiLCJsb2FkRGF0YSIsIl90aGlzJHN0YXRlIiwic2VhcmNoQmFyIiwidG9vbEJhciIsInVzZXJMaXN0X1VzZXJMaXN0IiwiYWRkVXNlcl9BZGRVc2VyIiwiUmVhY3RET00iLCJhcHBfQXBwIl0sIm1hcHBpbmdzIjoiYUFHQSxJQUFBQSxFQUFBQyxPQUFBLGlCQUNBQSxPQUFBLGlCQUNBLFNBQUFDLEVBQUFDLElBZ1JBLFNBQUFELEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUYsS0FBQUcsRUFBQUgsR0FDQSxPQUVBLFFBQUFJLEtBREFELEVBQUFILElBQUEsRUFDQUMsRUFDQUksT0FBQUMsVUFBQUMsZUFBQUMsS0FBQVAsRUFBQUcsS0FDQUssRUFBQUwsR0FBQUgsRUFBQUcsSUFHQSxLQUFBTSxH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QTNCLGNBQUM4dkYsRUFBRCxDQUNFdndGLE9BQVEyRixLQUFLb3FGLFdBQ2JILFlBQWFBLEVBQ2IvekIsUUFBU2wyRCxLQUFLNnBGLGFBQ2Qzd0YsS0FBTUEsRUFDTnd1RixRQWhHRSxPQWtHRixpREVyR2RtRCxJQUFTMWdELE9BQU91OEMsRUFBQWpxRixFQUFBM0IsY0FBQ2d3RixFQUFELENBQUs1eEYsS0FBSyxpQkFBbUIyQixTQUFTbVEsZUFBZSxTQUVyRHRQLEVBQU85RixJQUFJaUMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdH1cbiBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4gXHR3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdID0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0XHRpZiAocGFyZW50SG90VXBkYXRlQ2FsbGJhY2spIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdH0gO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG4gXHRcdGlmIChudWxsKSBzY3JpcHQuY3Jvc3NPcmlnaW4gPSBudWxsO1xuIFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdChyZXF1ZXN0VGltZW91dCkge1xuIFx0XHRyZXF1ZXN0VGltZW91dCA9IHJlcXVlc3RUaW1lb3V0IHx8IDEwMDAwO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0aWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO1xuIFx0XHRcdH1cbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiBcdFx0XHRcdHZhciByZXF1ZXN0UGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNvblwiO1xuIFx0XHRcdFx0cmVxdWVzdC5vcGVuKFwiR0VUXCIsIHJlcXVlc3RQYXRoLCB0cnVlKTtcbiBcdFx0XHRcdHJlcXVlc3QudGltZW91dCA9IHJlcXVlc3RUaW1lb3V0O1xuIFx0XHRcdFx0cmVxdWVzdC5zZW5kKG51bGwpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChlcnIpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0aWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xuIFx0XHRcdFx0aWYgKHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XG4gXHRcdFx0XHRcdC8vIHRpbWVvdXRcbiBcdFx0XHRcdFx0cmVqZWN0KFxuIFx0XHRcdFx0XHRcdG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIHRpbWVkIG91dC5cIilcbiBcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xuIFx0XHRcdFx0XHQvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG4gXHRcdFx0XHRcdHJlc29sdmUoKTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMzA0KSB7XG4gXHRcdFx0XHRcdC8vIG90aGVyIGZhaWx1cmVcbiBcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIGZhaWxlZC5cIikpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0Ly8gc3VjY2Vzc1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdHZhciB1cGRhdGUgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuIFx0XHRcdFx0XHRcdHJlamVjdChlKTtcbiBcdFx0XHRcdFx0XHRyZXR1cm47XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0cmVzb2x2ZSh1cGRhdGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHR2YXIgaG90QXBwbHlPblVwZGF0ZSA9IHRydWU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiYjMxNDg2MmNhNzJjOGE4YWNjMmJcIjtcbiBcdHZhciBob3RSZXF1ZXN0VGltZW91dCA9IDEwMDAwO1xuIFx0dmFyIGhvdEN1cnJlbnRNb2R1bGVEYXRhID0ge307XG4gXHR2YXIgaG90Q3VycmVudENoaWxkTW9kdWxlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IFtdO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdGlmICghbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xuIFx0XHR2YXIgZm4gPSBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gXHRcdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcbiBcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG4gXHRcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG4gXHRcdFx0XHRcdFx0cmVxdWVzdCArXG4gXHRcdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0KTtcbiBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xuIFx0XHR9O1xuIFx0XHR2YXIgT2JqZWN0RmFjdG9yeSA9IGZ1bmN0aW9uIE9iamVjdEZhY3RvcnkobmFtZSkge1xuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XG4gXHRcdFx0XHR9LFxuIFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuIFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fTtcbiBcdFx0Zm9yICh2YXIgbmFtZSBpbiBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcImVcIiAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJ0XCJcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgT2JqZWN0RmFjdG9yeShuYW1lKSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGZuLmUgPSBmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJyZWFkeVwiKSBob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGNodW5rSWQpLnRoZW4oZmluaXNoQ2h1bmtMb2FkaW5nLCBmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdGZpbmlzaENodW5rTG9hZGluZygpO1xuIFx0XHRcdFx0dGhyb3cgZXJyO1xuIFx0XHRcdH0pO1xuXG4gXHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xuIFx0XHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcbiBcdFx0XHRcdFx0aWYgKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcbiBcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH07XG4gXHRcdGZuLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRcdGlmIChtb2RlICYgMSkgdmFsdWUgPSBmbih2YWx1ZSk7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18udCh2YWx1ZSwgbW9kZSAmIH4xKTtcbiBcdFx0fTtcbiBcdFx0cmV0dXJuIGZuO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgaG90ID0ge1xuIFx0XHRcdC8vIHByaXZhdGUgc3R1ZmZcbiBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG4gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG4gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG4gXHRcdFx0X21haW46IGhvdEN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXG5cbiBcdFx0XHQvLyBNb2R1bGUgQVBJXG4gXHRcdFx0YWN0aXZlOiB0cnVlLFxuIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcbiBcdFx0XHRjaGVjazogaG90Q2hlY2ssXG4gXHRcdFx0YXBwbHk6IGhvdEFwcGx5LFxuIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aWYgKCFsKSByZXR1cm4gaG90U3RhdHVzO1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuIFx0XHR9O1xuIFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG4gXHRcdHJldHVybiBob3Q7XG4gXHR9XG5cbiBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xuIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XG4gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcbiBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcbiBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG4gXHR9XG5cbiBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcbiBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdEF2YWlsYWJsZUZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90RGVmZXJyZWQ7XG5cbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xuIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xuIFx0XHR2YXIgaXNOdW1iZXIgPSAraWQgKyBcIlwiID09PSBpZDtcbiBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5KSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG4gXHRcdH1cbiBcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xuIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcbiBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XG4gXHRcdFx0aWYgKCF1cGRhdGUpIHtcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdFx0XHRyZXR1cm4gbnVsbDtcbiBcdFx0XHR9XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcblxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xuIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxuIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHRob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XG4gXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG4gXHRcdFx0e1xuIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cbiBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmXG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nID09PSAwICYmXG4gXHRcdFx0XHRob3RXYWl0aW5nRmlsZXMgPT09IDBcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIHByb21pc2U7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxuIFx0XHRcdHJldHVybjtcbiBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcbiBcdFx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmICgtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XG4gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcbiBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4gXHRcdHZhciBkZWZlcnJlZCA9IGhvdERlZmVycmVkO1xuIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XG4gXHRcdGlmICghZGVmZXJyZWQpIHJldHVybjtcbiBcdFx0aWYgKGhvdEFwcGx5T25VcGRhdGUpIHtcbiBcdFx0XHQvLyBXcmFwIGRlZmVycmVkIG9iamVjdCBpbiBQcm9taXNlIHRvIG1hcmsgaXQgYXMgYSB3ZWxsLWhhbmRsZWQgUHJvbWlzZSB0b1xuIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxuIFx0XHRcdC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NjU2NjZcbiBcdFx0XHRQcm9taXNlLnJlc29sdmUoKVxuIFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBob3RBcHBseShob3RBcHBseU9uVXBkYXRlKTtcbiBcdFx0XHRcdH0pXG4gXHRcdFx0XHQudGhlbihcbiBcdFx0XHRcdFx0ZnVuY3Rpb24ocmVzdWx0KSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuIFx0XHRcdFx0XHR9LFxuIFx0XHRcdFx0XHRmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0KTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKVxuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbiBcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiBcdFx0dmFyIGNiO1xuIFx0XHR2YXIgaTtcbiBcdFx0dmFyIGo7XG4gXHRcdHZhciBtb2R1bGU7XG4gXHRcdHZhciBtb2R1bGVJZDtcblxuIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKS5tYXAoZnVuY3Rpb24oaWQpIHtcbiBcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdGNoYWluOiBbaWRdLFxuIFx0XHRcdFx0XHRpZDogaWRcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcbiBcdFx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKCFtb2R1bGUgfHwgbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG4gXHRcdFx0XHRcdHZhciBwYXJlbnQgPSBpbnN0YWxsZWRNb2R1bGVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG4gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0XHRjb250aW51ZTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG4gXHRcdFx0XHRcdHF1ZXVlLnB1c2goe1xuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0aWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cblxuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG4gXHRcdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG4gXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcbiBcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuIFx0XHRcdH07XG4gXHRcdH1cblxuIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG4gXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHR2YXIgaXRlbSA9IGJbaV07XG4gXHRcdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG4gXHRcdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cbiBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG4gXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuIFx0XHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKCkge1xuIFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG4gXHRcdFx0KTtcbiBcdFx0fTtcblxuIFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVJZCA9IHRvTW9kdWxlSWQoaWQpO1xuIFx0XHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuIFx0XHRcdFx0dmFyIHJlc3VsdDtcbiBcdFx0XHRcdGlmIChob3RVcGRhdGVbaWRdKSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlSWQpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogaWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG4gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuIFx0XHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4gXHRcdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRkZWZhdWx0OlxuIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbiBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvQXBwbHkpIHtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdFx0XHRcdGlmIChcbiBcdFx0XHRcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0XHRcdFx0KVxuIFx0XHRcdFx0XHRcdCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiZcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0KVxuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuIFx0XHRPYmplY3Qua2V5cyhob3RBdmFpbGFibGVGaWxlc01hcCkuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xuIFx0XHRcdFx0aG90RGlzcG9zZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0fSk7XG5cbiBcdFx0dmFyIGlkeDtcbiBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4gXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cbiBcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG4gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG4gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcbiBcdFx0XHRcdGNiKGRhdGEpO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xuXG4gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcbiBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG4gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuIFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcbiBcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG4gXHRcdHZhciBkZXBlbmRlbmN5O1xuIFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG4gXHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG4gXHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG4gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4gXHRcdFx0XHRcdFx0aWYgKGNiKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoY2IpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcbiBcdFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuIFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG4gXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjI7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcbiBcdFx0aWYgKGVycm9yKSB7XG4gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuIFx0XHR9XG5cbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4gXHRcdFx0cGFyZW50czogKGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IGhvdEN1cnJlbnRQYXJlbnRzLCBob3RDdXJyZW50UGFyZW50cyA9IFtdLCBob3RDdXJyZW50UGFyZW50c1RlbXApLFxuIFx0XHRcdGNoaWxkcmVuOiBbXVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZSgxMSkoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTEpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMi4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNy0wMy0yMFQxODo1OVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cblxuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMi4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZyxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgQXJyYXkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwiZnVuY3Rpb25cIjtcblx0fSxcblxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9LFxuXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdFx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHRcdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdFx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdFx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNjEyNVxuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0Ly8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3Milcblx0Y2FtZWxDYXNlOiBmdW5jdGlvbiggc3RyaW5nICkge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuXHQvLyBhcmd1bWVudHMuXG5cdHByb3h5OiBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdFx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRcdGNvbnRleHQgPSBmbjtcblx0XHRcdGZuID0gdG1wO1xuXHRcdH1cblxuXHRcdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdFx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdFx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHRcdH07XG5cblx0XHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0XHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRcdHJldHVybiBwcm94eTtcblx0fSxcblxuXHRub3c6IERhdGUubm93LFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDgtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0ZGlzYWJsZWRBbmNlc3RvciA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRkaXNhYmxlZEFuY2VzdG9yKCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG52YXIgcmlzU2ltcGxlID0gL14uW146I1xcW1xcLixdKiQvO1xuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW1wbGUgc2VsZWN0b3IgdGhhdCBjYW4gYmUgZmlsdGVyZWQgZGlyZWN0bHksIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG5cdH1cblxuXHQvLyBDb21wbGV4IHNlbGVjdG9yLCBjb21wYXJlIHRoZSB0d28gc2V0cywgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdHF1YWxpZmllciA9IGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMgKTtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdCAmJiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCBqUXVlcnkudHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgalF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsXG5cdFx0c2NhbGUgPSAxLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdGRvIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZyouXG5cdFx0XHQvLyBVc2Ugc3RyaW5nIGZvciBkb3VibGluZyBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdC8vIEFkanVzdCBhbmQgYXBwbHlcblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBVcGRhdGUgc2NhbGUsIHRvbGVyYXRpbmcgemVybyBvciBOYU4gZnJvbSB0d2Vlbi5jdXIoKVxuXHRcdC8vIEJyZWFrIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2guXG5cdFx0fSB3aGlsZSAoXG5cdFx0XHRzY2FsZSAhPT0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCApICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9uc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBqUXVlcnkuaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgbm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggXCI+dGJvZHlcIiwgZWxlbSApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHR2YXIgbWF0Y2ggPSByc2NyaXB0VHlwZU1hc2tlZC5leGVjKCBlbGVtLnR5cGUgKTtcblxuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWyAxIF07XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ0b3A6MSU7d2lkdGg6NTAlXCI7XG5cdFx0ZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gZGl2U3R5bGUubWFyZ2luTGVmdCA9PT0gXCIycHhcIjtcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IGRpdlN0eWxlLndpZHRoID09PSBcIjRweFwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5tYXJnaW5SaWdodCA9IFwiNTAlXCI7XG5cdFx0cGl4ZWxNYXJnaW5SaWdodFZhbCA9IGRpdlN0eWxlLm1hcmdpblJpZ2h0ID09PSBcIjRweFwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgcGl4ZWxNYXJnaW5SaWdodFZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7XCIgK1xuXHRcdFwicGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCI7XG5cdGNvbnRhaW5lci5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbE1hcmdpblJpZ2h0VmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcHJvcGVydHkgbWFwcGVkIGFsb25nIHdoYXQgalF1ZXJ5LmNzc1Byb3BzIHN1Z2dlc3RzIG9yIHRvXG4vLyBhIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eS5cbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciByZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXTtcblx0aWYgKCAhcmV0ICkge1xuXHRcdHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xuXHR9XG5cdHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGksXG5cdFx0dmFsID0gMDtcblxuXHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0aWYgKCBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdGkgPSA0O1xuXG5cdC8vIE90aGVyd2lzZSBpbml0aWFsaXplIGZvciBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnRpZXNcblx0fSBlbHNlIHtcblx0XHRpID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBib3JkZXItYm94IGluY2x1ZGVzIHBhZGRpbmcsIHNvIHJlbW92ZSBpdCBpZiB3ZSB3YW50IGNvbnRlbnRcblx0XHRcdGlmICggZXh0cmEgPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGJvcmRlciBub3IgbWFyZ2luLCBzbyByZW1vdmUgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHR2YWwgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRyZXR1cm4gdmFsO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiZcblx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9IZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdGlmICggdmFsID09PSBcImF1dG9cIiApIHtcblx0XHR2YWwgPSBlbGVtWyBcIm9mZnNldFwiICsgbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICkgXTtcblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge1xuXHRcdFwiZmxvYXRcIjogXCJjc3NGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jLCBkb2NFbGVtLCByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdHdpbiA9IGRvYy5kZWZhdWx0VmlldztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRUb3AsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7XG5cdFx0XHRcdHRvcDogcGFyZW50T2Zmc2V0LnRvcCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKSxcblx0XHRcdFx0bGVmdDogcGFyZW50T2Zmc2V0LmxlZnQgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix6PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGFhPW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6XG42MDExNSxiYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGNhKGEsYixkLGMsZSxnLGgsZil7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2QsYyxlLGcsaCxmXSxtPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFttKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGQ9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWQrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO2NhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZCl9dmFyIEM9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEQ9e307XG5mdW5jdGlvbiBFKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWR8fEN9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtFLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/QihcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZCl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1kfHxDfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO2soSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST17Y3VycmVudDpudWxsfSxKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixkKXt2YXIgYz12b2lkIDAsZT17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZVtjXSYmKGVbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmUsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBkYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixkLGMpe2lmKFAubGVuZ3RoKXt2YXIgZT1QLnBvcCgpO2UucmVzdWx0PWE7ZS5rZXlQcmVmaXg9YjtlLmZ1bmM9ZDtlLmNvbnRleHQ9YztlLmNvdW50PTA7cmV0dXJuIGV9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZCxjb250ZXh0OmMsY291bnQ6MH19XG5mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGQsYyl7dmFyIGU9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWV8fFwiYm9vbGVhblwiPT09ZSlhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChlKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGQoYyxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZT1hW2hdO3ZhciBmPWIrVChlLGgpO2crPVMoZSxmLGQsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1BJiZhW0FdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGg9XG4wOyEoZT1hLm5leHQoKSkuZG9uZTspZT1lLnZhbHVlLGY9YitUKGUsaCsrKSxnKz1TKGUsZixkLGMpO2Vsc2VcIm9iamVjdFwiPT09ZSYmKGQ9XCJcIithLEIoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1kP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmQsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFUoYSxiLGQpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIsYixkKX1mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBlYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBmYShhLGIsZCl7dmFyIGM9YS5yZXN1bHQsZT1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsYyxkLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE4oYSkmJihhPWRhKGEsZSsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrZCkpLGMucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsZCxjLGUpe3ZhciBnPVwiXCI7bnVsbCE9ZCYmKGc9KFwiXCIrZCkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGMsZSk7VShhLGZhLGIpO1IoYil9ZnVuY3Rpb24gVygpe3ZhciBhPUkuY3VycmVudDtudWxsPT09YT9CKFwiMzA3XCIpOnZvaWQgMDtyZXR1cm4gYX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1YoYSxjLG51bGwsYixkKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZCl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsZCk7VShhLGVhLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBVKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe04oYSk/dm9pZCAwOkIoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLFxuX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnkscmVuZGVyOmF9fSxsYXp5OmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpiYSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjphYSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19LHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDYWxsYmFjayhhLGIpfSx1c2VDb250ZXh0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VDb250ZXh0KGEsYil9LHVzZUVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlRWZmZWN0KGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxcbmIsZCl7cmV0dXJuIFcoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixkKX0sdXNlRGVidWdWYWx1ZTpmdW5jdGlvbigpe30sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3JldHVybiBXKCkudXNlTWVtbyhhLGIpfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixkKXtyZXR1cm4gVygpLnVzZVJlZHVjZXIoYSxiLGQpfSx1c2VSZWY6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VSZWYoYSl9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBXKCkudXNlU3RhdGUoYSl9LEZyYWdtZW50OnIsU3RyaWN0TW9kZTp0LFN1c3BlbnNlOnosY3JlYXRlRWxlbWVudDpNLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZCl7bnVsbD09PWF8fHZvaWQgMD09PWE/QihcIjI2N1wiLGEpOnZvaWQgMDt2YXIgYz12b2lkIDAsZT1rKHt9LGEucHJvcHMpLGc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPVxuYil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGw9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmKGw9YS50eXBlLmRlZmF1bHRQcm9wcyk7Zm9yKGMgaW4gYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihlW2NdPXZvaWQgMD09PWJbY10mJnZvaWQgMCE9PWw/bFtjXTpiW2NdKX1jPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09YyllLmNoaWxkcmVuPWQ7ZWxzZSBpZigxPGMpe2w9QXJyYXkoYyk7Zm9yKHZhciBtPTA7bTxjO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49bH1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6ZyxyZWY6aCxwcm9wczplLF9vd25lcjpmfX0sY3JlYXRlRmFjdG9yeTpmdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuOC4yXCIsXG51bnN0YWJsZV9Db25jdXJyZW50TW9kZTp4LHVuc3RhYmxlX1Byb2ZpbGVyOnUsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6SSxSZWFjdEN1cnJlbnRPd25lcjpKLGFzc2lnbjprfX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi44LjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gYmEoYSxiLGMsZCxlLGYsZyxoKXtpZighYSl7YT12b2lkIDA7aWYodm9pZCAwPT09YilhPUVycm9yKFwiTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIik7ZWxzZXt2YXIgbD1bYyxkLGUsZixnLGhdLGs9MDthPUVycm9yKGIucmVwbGFjZSgvJXMvZyxmdW5jdGlvbigpe3JldHVybiBsW2srK119KSk7YS5uYW1lPVwiSW52YXJpYW50IFZpb2xhdGlvblwifWEuZnJhbWVzVG9Qb3A9MTt0aHJvdyBhO319XG5mdW5jdGlvbiB4KGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsZD0wO2Q8YjtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YmEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1hYT92b2lkIDA6eChcIjIyN1wiKTtmdW5jdGlvbiBjYShhLGIsYyxkLGUsZixnLGgsbCl7dmFyIGs9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsayl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX1cbnZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxsKXtkYT0hMTtlYT1udWxsO2NhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGwpe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBrPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB4KFwiMTk4XCIpLGs9dm9pZCAwO2ZhfHwoZmE9ITAsaGE9ayl9fXZhciBsYT1udWxsLG1hPXt9O1xuZnVuY3Rpb24gbmEoKXtpZihsYSlmb3IodmFyIGEgaW4gbWEpe3ZhciBiPW1hW2FdLGM9bGEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDp4KFwiOTZcIixhKTtpZighb2FbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6eChcIjk3XCIsYSk7b2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtwYS5oYXNPd25Qcm9wZXJ0eShoKT94KFwiOTlcIixoKTp2b2lkIDA7cGFbaF09Zjt2YXIgbD1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGwpe2ZvcihlIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShlKSYmcWEobFtlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHFhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7ZT92b2lkIDA6eChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHFhKGEsYixjKXtyYVthXT94KFwiMTAwXCIsYSk6dm9pZCAwO3JhW2FdPWI7c2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgb2E9W10scGE9e30scmE9e30sc2E9e30sdGE9bnVsbCx1YT1udWxsLHZhPW51bGw7ZnVuY3Rpb24gd2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXZhKGMpO2thKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geGEoYSxiKXtudWxsPT1iP3goXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24geWEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIHphPW51bGw7ZnVuY3Rpb24gQWEoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKXdhKGEsYltkXSxjW2RdKTtlbHNlIGImJndhKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1cbnZhciBCYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXtsYT94KFwiMTAxXCIpOnZvaWQgMDtsYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtuYSgpfSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6ZnVuY3Rpb24oYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107bWEuaGFzT3duUHJvcGVydHkoYykmJm1hW2NdPT09ZHx8KG1hW2NdP3goXCIxMDJcIixjKTp2b2lkIDAsbWFbY109ZCxiPSEwKX1iJiZuYSgpfX07XG5mdW5jdGlvbiBDYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXRhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBEYShhKXtudWxsIT09YSYmKHphPXhhKHphLGEpKTthPXphO3phPW51bGw7aWYoYSYmKHlhKGEsQWEpLHphP3goXCI5NVwiKTp2b2lkIDAsZmEpKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO312YXIgRWE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRmE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitFYSxHYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0VhO2Z1bmN0aW9uIEhhKGEpe2lmKGFbRmFdKXJldHVybiBhW0ZhXTtmb3IoOyFhW0ZhXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0ZhXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIElhKGEpe2E9YVtGYV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX1cbmZ1bmN0aW9uIEphKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt4KFwiMzNcIil9ZnVuY3Rpb24gS2EoYSl7cmV0dXJuIGFbR2FdfHxudWxsfWZ1bmN0aW9uIExhKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gTWEoYSxiLGMpe2lmKGI9Q2EoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1cbmZ1bmN0aW9uIE5hKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9TGEoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KU1hKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspTWEoY1tiXSxcImJ1YmJsZWRcIixhKX19ZnVuY3Rpb24gT2EoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9Q2EoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBQYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJk9hKGEuX3RhcmdldEluc3QsbnVsbCxhKX1cbmZ1bmN0aW9uIFFhKGEpe3lhKGEsTmEpfXZhciBSYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHwhd2luZG93LmRvY3VtZW50fHwhd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO2Z1bmN0aW9uIFNhKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRhPXthbmltYXRpb25lbmQ6U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFVhPXt9LFZhPXt9O1xuUmEmJihWYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdhKGEpe2lmKFVhW2FdKXJldHVybiBVYVthXTtpZighVGFbYV0pcmV0dXJuIGE7dmFyIGI9VGFbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmEpcmV0dXJuIFVhW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGE9V2EoXCJhbmltYXRpb25lbmRcIiksWWE9V2EoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmE9V2EoXCJhbmltYXRpb25zdGFydFwiKSwkYT1XYShcInRyYW5zaXRpb25lbmRcIiksYWI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGJiPW51bGwsY2I9bnVsbCxkYj1udWxsO1xuZnVuY3Rpb24gZWIoKXtpZihkYilyZXR1cm4gZGI7dmFyIGEsYj1jYixjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBiYj9iYi52YWx1ZTpiYi50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBkYj1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGZiKCl7cmV0dXJuITB9ZnVuY3Rpb24gZ2IoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHkoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2ZiOmdiO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Z2I7cmV0dXJuIHRoaXN9XG5uKHkucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9ZmIpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9ZmIpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9ZmJ9LGlzUGVyc2lzdGVudDpnYixkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1nYjt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO3kuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xueS5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtoYihjKTtyZXR1cm4gY307aGIoeSk7ZnVuY3Rpb24gaWIoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gamIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOngoXCIyNzlcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfVxuZnVuY3Rpb24gaGIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9aWI7YS5yZWxlYXNlPWpifXZhciBrYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbGI9eS5leHRlbmQoe2RhdGE6bnVsbH0pLG1iPVs5LDEzLDI3LDMyXSxuYj1SYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csb2I9bnVsbDtSYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYob2I9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBwYj1SYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIW9iLHFiPVJhJiYoIW5ifHxvYiYmODxvYiYmMTE+PW9iKSxyYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxzYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSx0Yj0hMTtcbmZ1bmN0aW9uIHViKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09bWIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiB2YihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciB3Yj0hMTtmdW5jdGlvbiB4YihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gdmIoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3RiPSEwO3JldHVybiByYjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1yYiYmdGI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24geWIoYSxiKXtpZih3YilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhbmImJnViKGEsYik/KGE9ZWIoKSxkYj1jYj1iYj1udWxsLHdiPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBxYiYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgemI9e2V2ZW50VHlwZXM6c2IsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKG5iKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9c2IuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9c2IuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPXNiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSB3Yj91YihhLGMpJiYoZT1zYi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPXNiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KHFiJiZcImtvXCIhPT1jLmxvY2FsZSYmKHdifHxlIT09c2IuY29tcG9zaXRpb25TdGFydD9lPT09c2IuY29tcG9zaXRpb25FbmQmJndiJiYoZj1lYigpKTooYmI9ZCxjYj1cInZhbHVlXCJpbiBiYj9iYi52YWx1ZTpiYi50ZXh0Q29udGVudCx3Yj1cbiEwKSksZT1rYi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9ZjooZj12YihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksUWEoZSksZj1lKTpmPW51bGw7KGE9cGI/eGIoYSxjKTp5YihhLGMpKT8oYj1sYi5nZXRQb29sZWQoc2IuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFFhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LEFiPW51bGwsQmI9bnVsbCxDYj1udWxsO2Z1bmN0aW9uIERiKGEpe2lmKGE9dWEoYSkpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBYj94KFwiMjgwXCIpOnZvaWQgMDt2YXIgYj10YShhLnN0YXRlTm9kZSk7QWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBFYihhKXtCYj9DYj9DYi5wdXNoKGEpOkNiPVthXTpCYj1hfWZ1bmN0aW9uIEZiKCl7aWYoQmIpe3ZhciBhPUJiLGI9Q2I7Q2I9QmI9bnVsbDtEYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspRGIoYlthXSl9fVxuZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBJYigpe312YXIgSmI9ITE7ZnVuY3Rpb24gS2IoYSxiKXtpZihKYilyZXR1cm4gYShiKTtKYj0hMDt0cnl7cmV0dXJuIEdiKGEsYil9ZmluYWxseXtpZihKYj0hMSxudWxsIT09QmJ8fG51bGwhPT1DYilJYigpLEZiKCl9fXZhciBMYj17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBNYihhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIUxiW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIE5iKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBPYihhKXtpZighUmEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gUGIoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFFiKGEpe3ZhciBiPVBiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBSYihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9UWIoYSkpfWZ1bmN0aW9uIFNiKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1QYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfXZhciBUYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtUYi5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChUYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtcbnZhciBVYj0vXiguKilbXFxcXFxcL10vLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixWYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLFdiPXo/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixYYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxZYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxaYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCwkYj16P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxhYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGJjPXo/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxjYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixkYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxlYz16P1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsZmM9ej9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixnYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gaGMoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWdjJiZhW2djXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gaWMoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBiYzpyZXR1cm5cIkNvbmN1cnJlbnRNb2RlXCI7Y2FzZSBYYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBXYjpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgWmI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgWWI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBkYzpyZXR1cm5cIlN1c3BlbnNlXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGFjOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgJGI6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBjYzp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1xuXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgZWM6cmV0dXJuIGljKGEudHlwZSk7Y2FzZSBmYzppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIGljKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIGpjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1pYyhhLnR5cGUpO2M9bnVsbDtkJiYoYz1pYyhkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFViLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIga2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxjPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbWM9e30sbmM9e307XG5mdW5jdGlvbiBvYyhhKXtpZihsYy5jYWxsKG5jLGEpKXJldHVybiEwO2lmKGxjLmNhbGwobWMsYSkpcmV0dXJuITE7aWYoa2MudGVzdChhKSlyZXR1cm4gbmNbYV09ITA7bWNbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMCwhMSxhLG51bGwpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEMoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMiwhMSxhLG51bGwpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDMsITAsYSxudWxsKX0pO1xuW1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBDKGEsNCwhMSxhLG51bGwpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw2LCExLGEsbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEMoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciByYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLFxuc2MpO0RbYl09bmV3IEMoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLHNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJjLHNjKTtEW2JdPW5ldyBDKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQyhhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5mdW5jdGlvbiB0YyhhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChxYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2MoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIHVjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiB2YyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiB3YyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz11YyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIHhjKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIHljKGEsYil7eGMoYSxiKTt2YXIgYz11YyhiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT96YyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZ6YyhhLGIudHlwZSx1YyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEFjKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIHpjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgQmM9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gQ2MoYSxiLGMpe2E9eS5nZXRQb29sZWQoQmMuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtFYihjKTtRYShhKTtyZXR1cm4gYX12YXIgRGM9bnVsbCxFYz1udWxsO2Z1bmN0aW9uIEZjKGEpe0RhKGEpfVxuZnVuY3Rpb24gR2MoYSl7dmFyIGI9SmEoYSk7aWYoU2IoYikpcmV0dXJuIGF9ZnVuY3Rpb24gSGMoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgSWM9ITE7UmEmJihJYz1PYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBKYygpe0RjJiYoRGMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsS2MpLEVjPURjPW51bGwpfWZ1bmN0aW9uIEtjKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZHYyhFYykmJihhPUNjKEVjLGEsTmIoYSkpLEtiKEZjLGEpKX1mdW5jdGlvbiBMYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oSmMoKSxEYz1iLEVjPWMsRGMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsS2MpKTpcImJsdXJcIj09PWEmJkpjKCl9ZnVuY3Rpb24gTWMoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gR2MoRWMpfVxuZnVuY3Rpb24gTmMoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBHYyhiKX1mdW5jdGlvbiBPYyhhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBHYyhiKX1cbnZhciBQYz17ZXZlbnRUeXBlczpCYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkljLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9KYShiKTp3aW5kb3csZj12b2lkIDAsZz12b2lkIDAsaD1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWh8fFwiaW5wdXRcIj09PWgmJlwiZmlsZVwiPT09ZS50eXBlP2Y9SGM6TWIoZSk/SWM/Zj1PYzooZj1NYyxnPUxjKTooaD1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09aC50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1OYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gQ2MoZixjLGQpO2cmJmcoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZ6YyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxRYz15LmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksUmM9e0FsdDpcImFsdEtleVwiLFxuQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gU2MoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1SY1thXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFRjKCl7cmV0dXJuIFNjfVxudmFyIFVjPTAsVmM9MCxXYz0hMSxYYz0hMSxZYz1RYy5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6VGMsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9VWM7VWM9YS5zY3JlZW5YO3JldHVybiBXYz9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KFdjPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9VmM7VmM9YS5zY3JlZW5ZO3JldHVybiBYYz9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KFhjPSEwLDApfX0pLFpjPVljLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSwkYz17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sYWQ9e2V2ZW50VHlwZXM6JGMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/SGEoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBnPXZvaWQgMCxoPXZvaWQgMCxsPXZvaWQgMCxrPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSlnPVljLGg9JGMubW91c2VMZWF2ZSxsPSRjLm1vdXNlRW50ZXIsaz1cIm1vdXNlXCI7XG5lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlnPVpjLGg9JGMucG9pbnRlckxlYXZlLGw9JGMucG9pbnRlckVudGVyLGs9XCJwb2ludGVyXCI7dmFyIG09bnVsbD09Zj9lOkphKGYpO2U9bnVsbD09Yj9lOkphKGIpO2E9Zy5nZXRQb29sZWQoaCxmLGMsZCk7YS50eXBlPWsrXCJsZWF2ZVwiO2EudGFyZ2V0PW07YS5yZWxhdGVkVGFyZ2V0PWU7Yz1nLmdldFBvb2xlZChsLGIsYyxkKTtjLnR5cGU9aytcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9bTtkPWI7aWYoZiYmZClhOntiPWY7ZT1kO2s9MDtmb3IoZz1iO2c7Zz1MYShnKSlrKys7Zz0wO2ZvcihsPWU7bDtsPUxhKGwpKWcrKztmb3IoOzA8ay1nOyliPUxhKGIpLGstLTtmb3IoOzA8Zy1rOyllPUxhKGUpLGctLTtmb3IoO2stLTspe2lmKGI9PT1lfHxiPT09ZS5hbHRlcm5hdGUpYnJlYWsgYTtiPUxhKGIpO2U9TGEoZSl9Yj1udWxsfWVsc2UgYj1udWxsO2U9Yjtmb3IoYj1bXTtmJiZmIT09ZTspe2s9XG5mLmFsdGVybmF0ZTtpZihudWxsIT09ayYmaz09PWUpYnJlYWs7Yi5wdXNoKGYpO2Y9TGEoZil9Zm9yKGY9W107ZCYmZCE9PWU7KXtrPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1rJiZrPT09ZSlicmVhaztmLnB1c2goZCk7ZD1MYShkKX1mb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKU9hKGJbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGQ9Zi5sZW5ndGg7MDxkLS07KU9hKGZbZF0sXCJjYXB0dXJlZFwiLGMpO3JldHVyblthLGNdfX07ZnVuY3Rpb24gYmQoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBjZD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gZGQoYSxiKXtpZihiZChhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWNkLmNhbGwoYixjW2RdKXx8IWJkKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gZWQoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gZmQoYSl7MiE9PWVkKGEpP3goXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gZ2QoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9ZWQoYSksMz09PWI/eChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybixmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gZmQoZSksYTtpZihnPT09ZClyZXR1cm4gZmQoZSksYjtnPWcuc2libGluZ314KFwiMTg4XCIpfWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2c9ITE7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWc/XG52b2lkIDA6eChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP3goXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz94KFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhkKGEpe2E9Z2QoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgaWQ9eS5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLGpkPXkuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksa2Q9UWMuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBsZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBtZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sbmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LG9kPVFjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1tZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1sZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/bmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP2xkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP2xkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSkscGQ9WWMuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHFkPVFjLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlRjfSkscmQ9eS5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksc2Q9WWMuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx0ZD1bW1wiYWJvcnRcIixcImFib3J0XCJdLFtYYSxcImFuaW1hdGlvbkVuZFwiXSxbWWEsXCJhbmltYXRpb25JdGVyYXRpb25cIl0sW1phLFwiYW5pbWF0aW9uU3RhcnRcIl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIl0sW1wiZHJhZ1wiLFwiZHJhZ1wiXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIl0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIl0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCJdLFxuW1wiZW5kZWRcIixcImVuZGVkXCJdLFtcImVycm9yXCIsXCJlcnJvclwiXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIl0sW1wibG9hZFwiLFwibG9hZFwiXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIl0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIl0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCJdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiXSxcbltcInN1c3BlbmRcIixcInN1c3BlbmRcIl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiXSxbJGEsXCJ0cmFuc2l0aW9uRW5kXCJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIl0sW1wid2hlZWxcIixcIndoZWVsXCJdXSx1ZD17fSx2ZD17fTtmdW5jdGlvbiB3ZChhLGIpe3ZhciBjPWFbMF07YT1hWzFdO3ZhciBkPVwib25cIisoYVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSkpO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O3VkW2FdPWI7dmRbY109Yn1cbltbXCJibHVyXCIsXCJibHVyXCJdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCJdLFtcImNsaWNrXCIsXCJjbGlja1wiXSxbXCJjbG9zZVwiLFwiY2xvc2VcIl0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCJdLFtcImNvcHlcIixcImNvcHlcIl0sW1wiY3V0XCIsXCJjdXRcIl0sW1wiYXV4Y2xpY2tcIixcImF1eENsaWNrXCJdLFtcImRibGNsaWNrXCIsXCJkb3VibGVDbGlja1wiXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCJdLFtcImRyYWdzdGFydFwiLFwiZHJhZ1N0YXJ0XCJdLFtcImRyb3BcIixcImRyb3BcIl0sW1wiZm9jdXNcIixcImZvY3VzXCJdLFtcImlucHV0XCIsXCJpbnB1dFwiXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCJdLFtcImtleWRvd25cIixcImtleURvd25cIl0sW1wia2V5cHJlc3NcIixcImtleVByZXNzXCJdLFtcImtleXVwXCIsXCJrZXlVcFwiXSxbXCJtb3VzZWRvd25cIixcIm1vdXNlRG93blwiXSxbXCJtb3VzZXVwXCIsXCJtb3VzZVVwXCJdLFtcInBhc3RlXCIsXCJwYXN0ZVwiXSxbXCJwYXVzZVwiLFwicGF1c2VcIl0sW1wicGxheVwiLFwicGxheVwiXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCJdLFxuW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCJdLFtcInBvaW50ZXJ1cFwiLFwicG9pbnRlclVwXCJdLFtcInJhdGVjaGFuZ2VcIixcInJhdGVDaGFuZ2VcIl0sW1wicmVzZXRcIixcInJlc2V0XCJdLFtcInNlZWtlZFwiLFwic2Vla2VkXCJdLFtcInN1Ym1pdFwiLFwic3VibWl0XCJdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiXSxbXCJ0b3VjaGVuZFwiLFwidG91Y2hFbmRcIl0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt3ZChhLCEwKX0pO3RkLmZvckVhY2goZnVuY3Rpb24oYSl7d2QoYSwhMSl9KTtcbnZhciB4ZD17ZXZlbnRUeXBlczp1ZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT12ZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dmRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1sZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9b2Q7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPWtkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9WWM7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnBkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9cWQ7YnJlYWs7Y2FzZSBYYTpjYXNlIFlhOmNhc2UgWmE6YT1pZDticmVhaztjYXNlICRhOmE9cmQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9UWM7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT1zZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPWpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9WmM7YnJlYWs7ZGVmYXVsdDphPXl9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtRYShiKTtyZXR1cm4gYn19LHlkPXhkLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSxcbnpkPVtdO2Z1bmN0aW9uIEFkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ7Zm9yKGQ9YztkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWQpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChjKTtjPUhhKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPU5iKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsZz1udWxsLGg9MDtoPG9hLmxlbmd0aDtoKyspe3ZhciBsPW9hW2hdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlKSkmJihnPXhhKGcsbCkpfURhKGcpfX12YXIgQmQ9ITA7XG5mdW5jdGlvbiBFKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KHlkKGEpP0NkOkRkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMSl9ZnVuY3Rpb24gRWQoYSxiKXtpZighYilyZXR1cm4gbnVsbDt2YXIgYz0oeWQoYSk/Q2Q6RGQpLmJpbmQobnVsbCxhKTtiLmFkZEV2ZW50TGlzdGVuZXIoYSxjLCEwKX1mdW5jdGlvbiBDZChhLGIpe0hiKERkLGEsYil9XG5mdW5jdGlvbiBEZChhLGIpe2lmKEJkKXt2YXIgYz1OYihiKTtjPUhhKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09ZWQoYyl8fChjPW51bGwpO2lmKHpkLmxlbmd0aCl7dmFyIGQ9emQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7S2IoQWQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD56ZC5sZW5ndGgmJnpkLnB1c2goYSl9fX12YXIgRmQ9e30sR2Q9MCxIZD1cIl9yZWFjdExpc3RlbmVyc0lEXCIrKFwiXCIrTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5mdW5jdGlvbiBJZChhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxIZCl8fChhW0hkXT1HZCsrLEZkW2FbSGRdXT17fSk7cmV0dXJuIEZkW2FbSGRdXX1mdW5jdGlvbiBKZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gS2QoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGQoYSxiKXt2YXIgYz1LZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZChjKX19ZnVuY3Rpb24gTWQoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZCgpe2Zvcih2YXIgYT13aW5kb3csYj1KZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e2E9Yi5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXd9Y2F0Y2goYyl7YnJlYWt9Yj1KZChhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gUGQoKXt2YXIgYT1OZCgpO2lmKE9kKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBiPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntiPShiPWEub3duZXJEb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgYz1iLmdldFNlbGVjdGlvbiYmYi5nZXRTZWxlY3Rpb24oKTtpZihjJiYwIT09Yy5yYW5nZUNvdW50KXtiPWMuYW5jaG9yTm9kZTt2YXIgZD1jLmFuY2hvck9mZnNldCxlPWMuZm9jdXNOb2RlO2M9Yy5mb2N1c09mZnNldDt0cnl7Yi5ub2RlVHlwZSxlLm5vZGVUeXBlfWNhdGNoKEEpe2I9bnVsbDticmVhayBhfXZhciBmPTAsZz0tMSxoPS0xLGw9MCxrPTAsbT1hLHA9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB0Ozspe20hPT1ifHwwIT09ZCYmMyE9PW0ubm9kZVR5cGV8fChnPWYrZCk7bSE9PWV8fDAhPT1jJiYzIT09bS5ub2RlVHlwZXx8KGg9ZitjKTszPT09bS5ub2RlVHlwZSYmKGYrPW0ubm9kZVZhbHVlLmxlbmd0aCk7XG5pZihudWxsPT09KHQ9bS5maXJzdENoaWxkKSlicmVhaztwPW07bT10fWZvcig7Oyl7aWYobT09PWEpYnJlYWsgYjtwPT09YiYmKytsPT09ZCYmKGc9Zik7cD09PWUmJisraz09PWMmJihoPWYpO2lmKG51bGwhPT0odD1tLm5leHRTaWJsaW5nKSlicmVhazttPXA7cD1tLnBhcmVudE5vZGV9bT10fWI9LTE9PT1nfHwtMT09PWg/bnVsbDp7c3RhcnQ6ZyxlbmQ6aH19ZWxzZSBiPW51bGx9Yj1ifHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBiPW51bGw7cmV0dXJue2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Yn19XG5mdW5jdGlvbiBRZChhKXt2YXIgYj1OZCgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTWQoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk9kKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUxkKGMsZik7dmFyIGc9TGQoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBSZD1SYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFNkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxUZD1udWxsLFVkPW51bGwsVmQ9bnVsbCxXZD0hMTtcbmZ1bmN0aW9uIFhkKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoV2R8fG51bGw9PVRkfHxUZCE9PUpkKGMpKXJldHVybiBudWxsO2M9VGQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmT2QoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gVmQmJmRkKFZkLGMpP251bGw6KFZkPWMsYT15LmdldFBvb2xlZChTZC5zZWxlY3QsVWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1UZCxRYShhKSxhKX1cbnZhciBZZD17ZXZlbnRUeXBlczpTZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1JZChlKTtmPXNhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/SmEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihNYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlUZD1lLFVkPWIsVmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlZkPVVkPVRkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOldkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gV2Q9ITEsWGQoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUmQpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBYZChjLGQpfXJldHVybiBudWxsfX07QmEuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt0YT1LYTt1YT1JYTt2YT1KYTtCYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOnhkLEVudGVyTGVhdmVFdmVudFBsdWdpbjphZCxDaGFuZ2VFdmVudFBsdWdpbjpQYyxTZWxlY3RFdmVudFBsdWdpbjpZZCxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnpifSk7ZnVuY3Rpb24gWmQoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkZChhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPVpkKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBhZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrdWMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGJlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD94KFwiOTFcIik6dm9pZCAwO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGNlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/eChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOngoXCI5M1wiKSxiPWJbMF0pLGM9YiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnVjKGMpfX1cbmZ1bmN0aW9uIGRlKGEsYil7dmFyIGM9dWMoYi52YWx1ZSksZD11YyhiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGVlKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBmZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBnZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIGhlKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9nZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBpZT12b2lkIDAsamU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09ZmUuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7aWU9aWV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aWUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9aWUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24ga2UoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBsZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxtZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMobGUpLmZvckVhY2goZnVuY3Rpb24oYSl7bWUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtsZVtiXT1sZVthXX0pfSk7ZnVuY3Rpb24gbmUoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGxlLmhhc093blByb3BlcnR5KGEpJiZsZVthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBvZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1uZShjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBwZT1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gcWUoYSxiKXtiJiYocGVbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3goXCIxMzdcIixhLFwiXCIpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/eChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDp4KFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT94KFwiNjJcIixcIlwiKTp2b2lkIDApfVxuZnVuY3Rpb24gcmUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fVxuZnVuY3Rpb24gc2UoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9SWQoYSk7Yj1zYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6RWQoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkVkKFwiZm9jdXNcIixhKTtFZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6T2IoZSkmJkVkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFiLmluZGV4T2YoZSkmJkUoZSxhKX1jW2VdPSEwfX19ZnVuY3Rpb24gdGUoKXt9dmFyIHVlPW51bGwsdmU9bnVsbDtcbmZ1bmN0aW9uIHdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiB4ZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgeWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsemU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEFlPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxCZT1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrO1xuZnVuY3Rpb24gQ2UoYSxiLGMsZCxlKXthW0dhXT1lO1wiaW5wdXRcIj09PWMmJlwicmFkaW9cIj09PWUudHlwZSYmbnVsbCE9ZS5uYW1lJiZ4YyhhLGUpO3JlKGMsZCk7ZD1yZShjLGUpO2Zvcih2YXIgZj0wO2Y8Yi5sZW5ndGg7Zis9Mil7dmFyIGc9YltmXSxoPWJbZisxXTtcInN0eWxlXCI9PT1nP29lKGEsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9qZShhLGgpOlwiY2hpbGRyZW5cIj09PWc/a2UoYSxoKTp0YyhhLGcsaCxkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6eWMoYSxlKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpkZShhLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxhLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFlLm11bHRpcGxlLGM9ZS52YWx1ZSxudWxsIT1jP2FlKGEsISFlLm11bHRpcGxlLGMsITEpOmIhPT0hIWUubXVsdGlwbGUmJihudWxsIT1lLmRlZmF1bHRWYWx1ZT9hZShhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSxcbiEwKTphZShhLCEhZS5tdWx0aXBsZSxlLm11bHRpcGxlP1tdOlwiXCIsITEpKX19ZnVuY3Rpb24gRGUoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBFZShhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgRmU9W10sR2U9LTE7ZnVuY3Rpb24gRihhKXswPkdlfHwoYS5jdXJyZW50PUZlW0dlXSxGZVtHZV09bnVsbCxHZS0tKX1mdW5jdGlvbiBHKGEsYil7R2UrKztGZVtHZV09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBIZT17fSxIPXtjdXJyZW50OkhlfSxJPXtjdXJyZW50OiExfSxJZT1IZTtcbmZ1bmN0aW9uIEplKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gSGU7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gSihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEtlKGEpe0YoSSxhKTtGKEgsYSl9ZnVuY3Rpb24gTGUoYSl7RihJLGEpO0YoSCxhKX1cbmZ1bmN0aW9uIE1lKGEsYixjKXtILmN1cnJlbnQhPT1IZT94KFwiMTY4XCIpOnZvaWQgMDtHKEgsYixhKTtHKEksYyxhKX1mdW5jdGlvbiBOZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpZSBpbiBhP3ZvaWQgMDp4KFwiMTA4XCIsaWMoYil8fFwiVW5rbm93blwiLGUpO3JldHVybiBuKHt9LGMsZCl9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxIZTtJZT1ILmN1cnJlbnQ7RyhILGIsYSk7RyhJLEkuY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFBlKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtkP3ZvaWQgMDp4KFwiMTY5XCIpO2M/KGI9TmUoYSxiLEllKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWIsRihJLGEpLEYoSCxhKSxHKEgsYixhKSk6RihJLGEpO0coSSxjLGEpfXZhciBRZT1udWxsLFJlPW51bGw7ZnVuY3Rpb24gU2UoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1cbmZ1bmN0aW9uIFRlKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1FlPVNlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJSb290KGMsYSl9KTtSZT1TZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfSl9Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gVWUoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmNvbnRleHREZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gSyhhLGIsYyxkKXtyZXR1cm4gbmV3IFVlKGEsYixjLGQpfVxuZnVuY3Rpb24gVmUoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBXZShhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gVmUoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWNjKXJldHVybiAxMTtpZihhPT09ZWMpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gWGUoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1LKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtjLmNvbnRleHREZXBlbmRlbmNpZXM9YS5jb250ZXh0RGVwZW5kZW5jaWVzO2Muc2libGluZz1hLnNpYmxpbmc7XG5jLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBZZShhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpVmUoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgWGI6cmV0dXJuIFplKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgYmM6cmV0dXJuICRlKGMsZXwzLGYsYik7Y2FzZSBZYjpyZXR1cm4gJGUoYyxlfDIsZixiKTtjYXNlIFpiOnJldHVybiBhPUsoMTIsYyxiLGV8NCksYS5lbGVtZW50VHlwZT1aYixhLnR5cGU9WmIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBkYzpyZXR1cm4gYT1LKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPWRjLGEudHlwZT1kYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgJGI6Zz0xMDticmVhayBhO2Nhc2UgYWM6Zz05O2JyZWFrIGE7Y2FzZSBjYzpnPTExO2JyZWFrIGE7Y2FzZSBlYzpnPVxuMTQ7YnJlYWsgYTtjYXNlIGZjOmc9MTY7ZD1udWxsO2JyZWFrIGF9eChcIjEzMFwiLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKX1iPUsoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBaZShhLGIsYyxkKXthPUsoNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uICRlKGEsYixjLGQpe2E9Syg4LGEsZCxiKTtiPTA9PT0oYiYxKT9ZYjpiYzthLmVsZW1lbnRUeXBlPWI7YS50eXBlPWI7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGFmKGEsYixjKXthPUsoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gYmYoYSxiLGMpe2I9Syg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1mdW5jdGlvbiBjZihhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lOzA9PT1jP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPWI6YzxiP2EuZWFybGllc3RQZW5kaW5nVGltZT1iOmEubGF0ZXN0UGVuZGluZ1RpbWU+YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yik7ZGYoYixhKX1cbmZ1bmN0aW9uIGVmKGEsYil7YS5kaWRFcnJvcj0hMTtpZigwPT09YilhLmVhcmxpZXN0UGVuZGluZ1RpbWU9MCxhLmxhdGVzdFBlbmRpbmdUaW1lPTAsYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MDtlbHNle2I8YS5sYXRlc3RQaW5nZWRUaW1lJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO3ZhciBjPWEubGF0ZXN0UGVuZGluZ1RpbWU7MCE9PWMmJihjPmI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9MDphLmVhcmxpZXN0UGVuZGluZ1RpbWU+YiYmKGEuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lKSk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTswPT09Yz9jZihhLGIpOmI8YS5sYXRlc3RTdXNwZW5kZWRUaW1lPyhhLmVhcmxpZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0U3VzcGVuZGVkVGltZT0wLGEubGF0ZXN0UGluZ2VkVGltZT0wLGNmKGEsYikpOlxuYj5jJiZjZihhLGIpfWRmKDAsYSl9ZnVuY3Rpb24gZmYoYSxiKXthLmRpZEVycm9yPSExO2EubGF0ZXN0UGluZ2VkVGltZT49YiYmKGEubGF0ZXN0UGluZ2VkVGltZT0wKTt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWUsZD1hLmxhdGVzdFBlbmRpbmdUaW1lO2M9PT1iP2EuZWFybGllc3RQZW5kaW5nVGltZT1kPT09Yj9hLmxhdGVzdFBlbmRpbmdUaW1lPTA6ZDpkPT09YiYmKGEubGF0ZXN0UGVuZGluZ1RpbWU9Yyk7Yz1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtkPWEubGF0ZXN0U3VzcGVuZGVkVGltZTswPT09Yz9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1hLmxhdGVzdFN1c3BlbmRlZFRpbWU9YjpjPGI/YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9YjpkPmImJihhLmxhdGVzdFN1c3BlbmRlZFRpbWU9Yik7ZGYoYixhKX1cbmZ1bmN0aW9uIGdmKGEsYil7dmFyIGM9YS5lYXJsaWVzdFBlbmRpbmdUaW1lO2E9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7Yz5iJiYoYj1jKTthPmImJihiPWEpO3JldHVybiBifWZ1bmN0aW9uIGRmKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZDxhKSYmKGU9ZCk7YT1lOzAhPT1hJiZjPmEmJihhPWMpO2IubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249ZTtiLmV4cGlyYXRpb25UaW1lPWF9ZnVuY3Rpb24gTChhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGhmKGEpe3ZhciBiPWEuX3Jlc3VsdDtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGI7Y2FzZSAyOnRocm93IGI7Y2FzZSAwOnRocm93IGI7ZGVmYXVsdDphLl9zdGF0dXM9MDtiPWEuX2N0b3I7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KTtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGEuX3Jlc3VsdDtjYXNlIDI6dGhyb3cgYS5fcmVzdWx0O31hLl9yZXN1bHQ9Yjt0aHJvdyBiO319dmFyIGpmPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24ga2YoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgdGY9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpPzI9PT1lZChhKTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1sZigpO2Q9bWYoZCxhKTt2YXIgZT1uZihkKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7b2YoKTtwZihhLGUpO3FmKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWxmKCk7ZD1tZihkLGEpO3ZhciBlPW5mKGQpO2UudGFnPXJmO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtvZigpO3BmKGEsZSk7cWYoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9bGYoKTtjPW1mKGMsYSk7dmFyIGQ9bmYoYyk7ZC50YWc9XG5zZjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7b2YoKTtwZihhLGQpO3FmKGEsYyl9fTtmdW5jdGlvbiB1ZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFkZChjLGQpfHwhZGQoZSxmKTohMH1cbmZ1bmN0aW9uIHZmKGEsYixjKXt2YXIgZD0hMSxlPUhlO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPU0oZik6KGU9SihiKT9JZTpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9KZShhLGUpOkhlKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9dGY7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gd2YoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnRmLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24geGYoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PU0oZik6KGY9SihiKT9JZTpILmN1cnJlbnQsZS5jb250ZXh0PUplKGEsZikpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKHlmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihrZihhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZ0Zi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJih5ZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIHpmPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBBZihhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigxIT09Yy50YWc/eChcIjMwOVwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6eChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09amYmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/eChcIjI4NFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOngoXCIyOTBcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIEJmKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZ4KFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBDZihhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPVhlKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9YWYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPUFmKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1ZZShjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1BZihhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPWJmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVplKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1hZihcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYz1ZZShiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1BZihhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgV2I6cmV0dXJuIGI9YmYoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKHpmKGIpfHxcbmhjKGIpKXJldHVybiBiPVplKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO0JmKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBWYjpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PVhiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTpsKGEsYixjLGQpOm51bGw7Y2FzZSBXYjpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbH1pZih6ZihjKXx8aGMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO0JmKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFZiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1YYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmwoYixhLGQsZSk7Y2FzZSBXYjpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKX1pZih6ZihkKXx8aGMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO0JmKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwscT1nLHU9Zz0wLEI9bnVsbDtudWxsIT09cSYmdTxoLmxlbmd0aDt1Kyspe3EuaW5kZXg+dT8oQj1xLHE9bnVsbCk6Qj1xLnNpYmxpbmc7dmFyIHc9dChlLHEsaFt1XSxrKTtpZihudWxsPT09dyl7bnVsbD09PXEmJihxPUIpO2JyZWFrfWEmJlxucSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKHcsZyx1KTtudWxsPT09bT9sPXc6bS5zaWJsaW5nPXc7bT13O3E9Qn1pZih1PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxxKSxsO2lmKG51bGw9PT1xKXtmb3IoO3U8aC5sZW5ndGg7dSsrKWlmKHE9cChlLGhbdV0saykpZz1mKHEsZyx1KSxudWxsPT09bT9sPXE6bS5zaWJsaW5nPXEsbT1xO3JldHVybiBsfWZvcihxPWQoZSxxKTt1PGgubGVuZ3RoO3UrKylpZihCPUEocSxlLHUsaFt1XSxrKSlhJiZudWxsIT09Qi5hbHRlcm5hdGUmJnEuZGVsZXRlKG51bGw9PT1CLmtleT91OkIua2V5KSxnPWYoQixnLHUpLG51bGw9PT1tP2w9QjptLnNpYmxpbmc9QixtPUI7YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBSKGUsZyxoLGspe3ZhciBsPWhjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBsP3goXCIxNTBcIik6dm9pZCAwO2g9bC5jYWxsKGgpO251bGw9PWg/eChcIjE1MVwiKTp2b2lkIDA7XG5mb3IodmFyIG09bD1udWxsLHE9Zyx1PWc9MCxCPW51bGwsdz1oLm5leHQoKTtudWxsIT09cSYmIXcuZG9uZTt1Kyssdz1oLm5leHQoKSl7cS5pbmRleD51PyhCPXEscT1udWxsKTpCPXEuc2libGluZzt2YXIgdj10KGUscSx3LnZhbHVlLGspO2lmKG51bGw9PT12KXtxfHwocT1CKTticmVha31hJiZxJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxxKTtnPWYodixnLHUpO251bGw9PT1tP2w9djptLnNpYmxpbmc9djttPXY7cT1CfWlmKHcuZG9uZSlyZXR1cm4gYyhlLHEpLGw7aWYobnVsbD09PXEpe2Zvcig7IXcuZG9uZTt1Kyssdz1oLm5leHQoKSl3PXAoZSx3LnZhbHVlLGspLG51bGwhPT13JiYoZz1mKHcsZyx1KSxudWxsPT09bT9sPXc6bS5zaWJsaW5nPXcsbT13KTtyZXR1cm4gbH1mb3IocT1kKGUscSk7IXcuZG9uZTt1Kyssdz1oLm5leHQoKSl3PUEocSxlLHUsdy52YWx1ZSxrKSxudWxsIT09dyYmKGEmJm51bGwhPT13LmFsdGVybmF0ZSYmcS5kZWxldGUobnVsbD09PXcua2V5P3U6XG53LmtleSksZz1mKHcsZyx1KSxudWxsPT09bT9sPXc6bS5zaWJsaW5nPXcsbT13KTthJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1YYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBWYjphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpaWYoNz09PWsudGFnP2YudHlwZT09PVhiOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PVhiP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1BZihhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPVxuay5zaWJsaW5nfWYudHlwZT09PVhiPyhkPVplKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1ZZShmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1BZihhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgV2I6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1iZihmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cblwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9YWYoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoemYoZikpcmV0dXJuIHYoYSxkLGYsaCk7aWYoaGMoZikpcmV0dXJuIFIoYSxkLGYsaCk7bCYmQmYoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDpoPWEudHlwZSx4KFwiMTUyXCIsaC5kaXNwbGF5TmFtZXx8aC5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgRGY9Q2YoITApLEVmPUNmKCExKSxGZj17fSxOPXtjdXJyZW50OkZmfSxHZj17Y3VycmVudDpGZn0sSGY9e2N1cnJlbnQ6RmZ9O2Z1bmN0aW9uIElmKGEpe2E9PT1GZj94KFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpmKGEsYil7RyhIZixiLGEpO0coR2YsYSxhKTtHKE4sRmYsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6aGUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPWhlKGIsYyl9RihOLGEpO0coTixiLGEpfWZ1bmN0aW9uIEtmKGEpe0YoTixhKTtGKEdmLGEpO0YoSGYsYSl9ZnVuY3Rpb24gTGYoYSl7SWYoSGYuY3VycmVudCk7dmFyIGI9SWYoTi5jdXJyZW50KTt2YXIgYz1oZShiLGEudHlwZSk7YiE9PWMmJihHKEdmLGEsYSksRyhOLGMsYSkpfWZ1bmN0aW9uIE1mKGEpe0dmLmN1cnJlbnQ9PT1hJiYoRihOLGEpLEYoR2YsYSkpfVxudmFyIE5mPTAsT2Y9MixQZj00LFFmPTgsUmY9MTYsU2Y9MzIsVGY9NjQsVWY9MTI4LFZmPVRiLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsV2Y9MCxYZj1udWxsLE89bnVsbCxQPW51bGwsWWY9bnVsbCxRPW51bGwsWmY9bnVsbCwkZj0wLGFnPW51bGwsYmc9MCxjZz0hMSxkZz1udWxsLGVnPTA7ZnVuY3Rpb24gZmcoKXt4KFwiMzA3XCIpfWZ1bmN0aW9uIGdnKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIWJkKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBoZyhhLGIsYyxkLGUsZil7V2Y9ZjtYZj1iO1A9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7VmYuY3VycmVudD1udWxsPT09UD9pZzpqZztiPWMoZCxlKTtpZihjZyl7ZG8gY2c9ITEsZWcrPTEsUD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbCxaZj1ZZixhZz1RPU89bnVsbCxWZi5jdXJyZW50PWpnLGI9YyhkLGUpO3doaWxlKGNnKTtkZz1udWxsO2VnPTB9VmYuY3VycmVudD1rZzthPVhmO2EubWVtb2l6ZWRTdGF0ZT1ZZjthLmV4cGlyYXRpb25UaW1lPSRmO2EudXBkYXRlUXVldWU9YWc7YS5lZmZlY3RUYWd8PWJnO2E9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7V2Y9MDtaZj1RPVlmPVA9Tz1YZj1udWxsOyRmPTA7YWc9bnVsbDtiZz0wO2E/eChcIjMwMFwiKTp2b2lkIDA7cmV0dXJuIGJ9ZnVuY3Rpb24gbGcoKXtWZi5jdXJyZW50PWtnO1dmPTA7WmY9UT1ZZj1QPU89WGY9bnVsbDskZj0wO2FnPW51bGw7Ymc9MDtjZz0hMTtkZz1udWxsO2VnPTB9XG5mdW5jdGlvbiBtZygpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwscXVldWU6bnVsbCxiYXNlVXBkYXRlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UT9ZZj1RPWE6UT1RLm5leHQ9YTtyZXR1cm4gUX1mdW5jdGlvbiBuZygpe2lmKG51bGwhPT1aZilRPVpmLFpmPVEubmV4dCxPPVAsUD1udWxsIT09Tz9PLm5leHQ6bnVsbDtlbHNle251bGw9PT1QP3goXCIzMTBcIik6dm9pZCAwO089UDt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLHF1ZXVlOk8ucXVldWUsYmFzZVVwZGF0ZTpPLmJhc2VVcGRhdGUsbmV4dDpudWxsfTtRPW51bGw9PT1RP1lmPWE6US5uZXh0PWE7UD1PLm5leHR9cmV0dXJuIFF9ZnVuY3Rpb24gb2coYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBwZyhhKXt2YXIgYj1uZygpLGM9Yi5xdWV1ZTtudWxsPT09Yz94KFwiMzExXCIpOnZvaWQgMDtpZigwPGVnKXt2YXIgZD1jLmRpc3BhdGNoO2lmKG51bGwhPT1kZyl7dmFyIGU9ZGcuZ2V0KGMpO2lmKHZvaWQgMCE9PWUpe2RnLmRlbGV0ZShjKTt2YXIgZj1iLm1lbW9pemVkU3RhdGU7ZG8gZj1hKGYsZS5hY3Rpb24pLGU9ZS5uZXh0O3doaWxlKG51bGwhPT1lKTtiZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChxZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPT09Yy5sYXN0JiYoYi5iYXNlU3RhdGU9Zik7cmV0dXJuW2YsZF19fXJldHVybltiLm1lbW9pemVkU3RhdGUsZF19ZD1jLmxhc3Q7dmFyIGc9Yi5iYXNlVXBkYXRlO2Y9Yi5iYXNlU3RhdGU7bnVsbCE9PWc/KG51bGwhPT1kJiYoZC5uZXh0PW51bGwpLGQ9Zy5uZXh0KTpkPW51bGwhPT1kP2QubmV4dDpudWxsO2lmKG51bGwhPT1kKXt2YXIgaD1lPW51bGwsbD1kLGs9ITE7ZG97dmFyIG09bC5leHBpcmF0aW9uVGltZTtcbm08V2Y/KGt8fChrPSEwLGg9ZyxlPWYpLG0+JGYmJigkZj1tKSk6Zj1sLmVhZ2VyUmVkdWNlcj09PWE/bC5lYWdlclN0YXRlOmEoZixsLmFjdGlvbik7Zz1sO2w9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09ZCk7a3x8KGg9ZyxlPWYpO2JkKGYsYi5tZW1vaXplZFN0YXRlKXx8KHFnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9aDtiLmJhc2VTdGF0ZT1lO2MuZWFnZXJSZWR1Y2VyPWE7Yy5lYWdlclN0YXRlPWZ9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHJnKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtudWxsPT09YWc/KGFnPXtsYXN0RWZmZWN0Om51bGx9LGFnLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihiPWFnLmxhc3RFZmZlY3QsbnVsbD09PWI/YWcubGFzdEVmZmVjdD1hLm5leHQ9YTooYz1iLm5leHQsYi5uZXh0PWEsYS5uZXh0PWMsYWcubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2coYSxiLGMsZCl7dmFyIGU9bWcoKTtiZ3w9YTtlLm1lbW9pemVkU3RhdGU9cmcoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiB0ZyhhLGIsYyxkKXt2YXIgZT1uZygpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJmdnKGQsZy5kZXBzKSl7cmcoTmYsYyxmLGQpO3JldHVybn19Ymd8PWE7ZS5tZW1vaXplZFN0YXRlPXJnKGIsYyxmLGQpfWZ1bmN0aW9uIHVnKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gdmcoKXt9XG5mdW5jdGlvbiB3ZyhhLGIsYyl7MjU+ZWc/dm9pZCAwOngoXCIzMDFcIik7dmFyIGQ9YS5hbHRlcm5hdGU7aWYoYT09PVhmfHxudWxsIT09ZCYmZD09PVhmKWlmKGNnPSEwLGE9e2V4cGlyYXRpb25UaW1lOldmLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LG51bGw9PT1kZyYmKGRnPW5ldyBNYXApLGM9ZGcuZ2V0KGIpLHZvaWQgMD09PWMpZGcuc2V0KGIsYSk7ZWxzZXtmb3IoYj1jO251bGwhPT1iLm5leHQ7KWI9Yi5uZXh0O2IubmV4dD1hfWVsc2V7b2YoKTt2YXIgZT1sZigpO2U9bWYoZSxhKTt2YXIgZj17ZXhwaXJhdGlvblRpbWU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIubGFzdDtpZihudWxsPT09ZylmLm5leHQ9ZjtlbHNle3ZhciBoPWcubmV4dDtudWxsIT09aCYmKGYubmV4dD1oKTtnLm5leHQ9Zn1iLmxhc3Q9ZjtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1cbmR8fDA9PT1kLmV4cGlyYXRpb25UaW1lKSYmKGQ9Yi5lYWdlclJlZHVjZXIsbnVsbCE9PWQpKXRyeXt2YXIgbD1iLmVhZ2VyU3RhdGUsaz1kKGwsYyk7Zi5lYWdlclJlZHVjZXI9ZDtmLmVhZ2VyU3RhdGU9aztpZihiZChrLGwpKXJldHVybn1jYXRjaChtKXt9ZmluYWxseXt9cWYoYSxlKX19XG52YXIga2c9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZmcsdXNlQ29udGV4dDpmZyx1c2VFZmZlY3Q6ZmcsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmZyx1c2VMYXlvdXRFZmZlY3Q6ZmcsdXNlTWVtbzpmZyx1c2VSZWR1Y2VyOmZnLHVzZVJlZjpmZyx1c2VTdGF0ZTpmZyx1c2VEZWJ1Z1ZhbHVlOmZnfSxpZz17cmVhZENvbnRleHQ6TSx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe21nKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6TSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gc2coNTE2LFVmfFRmLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBzZyg0LFBmfFNmLHVnLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gc2coNCxQZnxTZixhLGIpfSxcbnVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1tZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1tZygpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxlYWdlclJlZHVjZXI6YSxlYWdlclN0YXRlOmJ9O2E9YS5kaXNwYXRjaD13Zy5iaW5kKG51bGwsWGYsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPW1nKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3ZhciBiPW1nKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxlYWdlclJlZHVjZXI6b2csXG5lYWdlclN0YXRlOmF9O2E9YS5kaXNwYXRjaD13Zy5iaW5kKG51bGwsWGYsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlRGVidWdWYWx1ZTp2Z30samc9e3JlYWRDb250ZXh0Ok0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmZ2coYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6TSx1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGcoNTE2LFVmfFRmLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0Zyg0LFBmfFNmLHVnLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGcoNCxQZnxTZixhLGIpfSxcbnVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1uZygpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmZ2coYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6cGcsdXNlUmVmOmZ1bmN0aW9uKCl7cmV0dXJuIG5nKCkubWVtb2l6ZWRTdGF0ZX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIHBnKG9nLGEpfSx1c2VEZWJ1Z1ZhbHVlOnZnfSx4Zz1udWxsLHlnPW51bGwsemc9ITE7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUsoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBCZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gQ2coYSl7aWYoemcpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUJnKGEsYikpe2I9RGUoYyk7aWYoIWJ8fCFCZyhhLGIpKXthLmVmZmVjdFRhZ3w9Mjt6Zz0hMTt4Zz1hO3JldHVybn1BZyh4ZyxjKX14Zz1hO3lnPUVlKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsemc9ITEseGc9YX19ZnVuY3Rpb24gRGcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxOCE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9ZnVuY3Rpb24gRWcoYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCF6ZylyZXR1cm4gRGcoYSksemc9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiF4ZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9eWc7YjspQWcoYSxiKSxiPURlKGIpO0RnKGEpO3lnPXhnP0RlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEZnKCl7eWc9eGc9bnVsbDt6Zz0hMX1cbnZhciBHZz1UYi5SZWFjdEN1cnJlbnRPd25lcixxZz0hMTtmdW5jdGlvbiBTKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/RWYoYixudWxsLGMsZCk6RGYoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gSGcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0lnKGIsZSk7ZD1oZyhhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFxZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEpnKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFWZShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxMZyhhLGIsZyxkLGUsZik7YT1ZZShjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmRkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIEpnKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVhlKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBMZyhhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZkZChhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihxZz0hMSxlPGYpP0pnKGEsYixmKTpNZyhhLGIsYyxkLGYpfWZ1bmN0aW9uIE5nKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gTWcoYSxiLGMsZCxlKXt2YXIgZj1KKGMpP0llOkguY3VycmVudDtmPUplKGIsZik7SWcoYixlKTtjPWhnKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXFnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksSmcoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1MoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBPZyhhLGIsYyxkLGUpe2lmKEooYykpe3ZhciBmPSEwO09lKGIpfWVsc2UgZj0hMTtJZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksdmYoYixjLGQsZSkseGYoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9TShrKTooaz1KKGMpP0llOkguY3VycmVudCxrPUplKGIsaykpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8bCE9PWspJiZ3ZihiLGcsZCxrKTtQZz0hMTt2YXIgdD1iLm1lbW9pemVkU3RhdGU7bD1nLnN0YXRlPXQ7dmFyIEE9Yi51cGRhdGVRdWV1ZTtudWxsIT09QSYmKHlmKGIsQSxkLGcsZSksbD1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHx0IT09bHx8SS5jdXJyZW50fHxQZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihrZihiLGMsbSxkKSxsPWIubWVtb2l6ZWRTdGF0ZSksKGg9UGd8fHVmKGIsYyxoLGQsdCxsLGspKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWwpLGcucHJvcHM9ZCxnLnN0YXRlPWwsZy5jb250ZXh0PWssZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkwoYi50eXBlLGgpLGw9Zy5jb250ZXh0LGs9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9TShrKTooaz1KKGMpP0llOkguY3VycmVudCxrPUplKGIsaykpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09XG50eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxsIT09aykmJndmKGIsZyxkLGspLFBnPSExLGw9Yi5tZW1vaXplZFN0YXRlLHQ9Zy5zdGF0ZT1sLEE9Yi51cGRhdGVRdWV1ZSxudWxsIT09QSYmKHlmKGIsQSxkLGcsZSksdD1iLm1lbW9pemVkU3RhdGUpLGghPT1kfHxsIT09dHx8SS5jdXJyZW50fHxQZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihrZihiLGMsbSxkKSx0PWIubWVtb2l6ZWRTdGF0ZSksKG09UGd8fHVmKGIsYyxoLGQsbCx0LGspKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLHQsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx0LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmbD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1cbnQpLGcucHJvcHM9ZCxnLnN0YXRlPXQsZy5jb250ZXh0PWssZD1tKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZsPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIFFnKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIFFnKGEsYixjLGQsZSxmKXtOZyhhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmUGUoYixjLCExKSxKZyhhLGIsZik7ZD1iLnN0YXRlTm9kZTtHZy5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1EZihiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPURmKGIsbnVsbCxoLGYpKTpTKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJlBlKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9NZShhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZNZShhLGIuY29udGV4dCwhMSk7SmYoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gU2coYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFN0YXRlO2lmKDA9PT0oYi5lZmZlY3RUYWcmNjQpKXtmPW51bGw7dmFyIGc9ITF9ZWxzZSBmPXt0aW1lZE91dEF0Om51bGwhPT1mP2YudGltZWRPdXRBdDowfSxnPSEwLGIuZWZmZWN0VGFnJj0tNjU7aWYobnVsbD09PWEpaWYoZyl7dmFyIGg9ZS5mYWxsYmFjazthPVplKG51bGwsZCwwLG51bGwpOzA9PT0oYi5tb2RlJjEpJiYoYS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCk7ZD1aZShoLGQsYyxudWxsKTthLnNpYmxpbmc9ZDtjPWE7Yy5yZXR1cm49ZC5yZXR1cm49Yn1lbHNlIGM9ZD1FZihiLG51bGwsZS5jaGlsZHJlbixjKTtlbHNlIG51bGwhPT1hLm1lbW9pemVkU3RhdGU/KGQ9YS5jaGlsZCxoPWQuc2libGluZyxnPyhjPWUuZmFsbGJhY2ssZT1YZShkLGQucGVuZGluZ1Byb3BzLDApLDA9PT0oYi5tb2RlJjEpJiYoZz1udWxsIT09XG5iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1kLmNoaWxkJiYoZS5jaGlsZD1nKSksZD1lLnNpYmxpbmc9WGUoaCxjLGguZXhwaXJhdGlvblRpbWUpLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpjPWQ9RGYoYixkLmNoaWxkLGUuY2hpbGRyZW4sYykpOihoPWEuY2hpbGQsZz8oZz1lLmZhbGxiYWNrLGU9WmUobnVsbCxkLDAsbnVsbCksZS5jaGlsZD1oLDA9PT0oYi5tb2RlJjEpJiYoZS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCksZD1lLnNpYmxpbmc9WmUoZyxkLGMsbnVsbCksZC5lZmZlY3RUYWd8PTIsYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmQ9Yz1EZihiLGgsZS5jaGlsZHJlbixjKSksYi5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGU7Yi5tZW1vaXplZFN0YXRlPWY7Yi5jaGlsZD1jO3JldHVybiBkfVxuZnVuY3Rpb24gSmcoYSxiLGMpe251bGwhPT1hJiYoYi5jb250ZXh0RGVwZW5kZW5jaWVzPWEuY29udGV4dERlcGVuZGVuY2llcyk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP3goXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1YZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1YZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBUZyhhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8SS5jdXJyZW50KXFnPSEwO2Vsc2V7aWYoZDxjKXtxZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpSZyhiKTtGZygpO2JyZWFrO2Nhc2UgNTpMZihiKTticmVhaztjYXNlIDE6SihiLnR5cGUpJiZPZShiKTticmVhaztjYXNlIDQ6SmYoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOlVnKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiBTZyhhLGIsYyk7Yj1KZyhhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfX1yZXR1cm4gSmcoYSxiLGMpfX1lbHNlIHFnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPVxuYi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1KZShiLEguY3VycmVudCk7SWcoYixjKTtlPWhnKG51bGwsYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7bGcoKTtpZihKKGQpKXt2YXIgZj0hMDtPZShiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYma2YoYixkLGcsYSk7ZS51cGRhdGVyPXRmO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7eGYoYixkLGEsYyk7Yj1RZyhudWxsLGIsZCwhMCxmLFxuYyl9ZWxzZSBiLnRhZz0wLFMobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTtmPWIucGVuZGluZ1Byb3BzO2E9aGYoZSk7Yi50eXBlPWE7ZT1iLnRhZz1XZShhKTtmPUwoYSxmKTtnPXZvaWQgMDtzd2l0Y2goZSl7Y2FzZSAwOmc9TWcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE6Zz1PZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTE6Zz1IZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTQ6Zz1LZyhudWxsLGIsYSxMKGEudHlwZSxmKSxkLGMpO2JyZWFrO2RlZmF1bHQ6eChcIjMwNlwiLGEsXCJcIil9cmV0dXJuIGc7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMKGQsZSksTWcoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsXG5lPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLE9nKGEsYixkLGUsYyk7Y2FzZSAzOlJnKGIpO2Q9Yi51cGRhdGVRdWV1ZTtudWxsPT09ZD94KFwiMjgyXCIpOnZvaWQgMDtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lmKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpRmcoKSxiPUpnKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZT0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZS5oeWRyYXRlKXlnPUVlKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLHhnPWIsZT16Zz0hMDtlPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPUVmKGIsbnVsbCxkLGMpKTooUyhhLGIsZCxjKSxGZygpKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBMZihiKSxudWxsPT09YSYmQ2coYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLFxuZz1lLmNoaWxkcmVuLHhlKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZ4ZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxOZyhhLGIpLDEhPT1jJiZiLm1vZGUmMSYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUyhhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2coYiksbnVsbDtjYXNlIDEzOnJldHVybiBTZyhhLGIsYyk7Y2FzZSA0OnJldHVybiBKZihiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1EZihiLG51bGwsZCxjKTpTKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TChkLGUpLEhnKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFMoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtVZyhiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO2Y9YmQoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUkuY3VycmVudCl7Yj1KZyhhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgbD1oLmNvbnRleHREZXBlbmRlbmNpZXM7aWYobnVsbCE9PWwpe2c9aC5jaGlsZDtmb3IodmFyIGs9bC5maXJzdDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQmJjAhPT1cbihrLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYoaz1uZihjKSxrLnRhZz1zZixwZihoLGspKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2s9aC5hbHRlcm5hdGU7bnVsbCE9PWsmJmsuZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7az1jO2Zvcih2YXIgbT1oLnJldHVybjtudWxsIT09bTspe3ZhciBwPW0uYWx0ZXJuYXRlO2lmKG0uY2hpbGRFeHBpcmF0aW9uVGltZTxrKW0uY2hpbGRFeHBpcmF0aW9uVGltZT1rLG51bGwhPT1wJiZwLmNoaWxkRXhwaXJhdGlvblRpbWU8ayYmKHAuY2hpbGRFeHBpcmF0aW9uVGltZT1rKTtlbHNlIGlmKG51bGwhPT1wJiZwLmNoaWxkRXhwaXJhdGlvblRpbWU8aylwLmNoaWxkRXhwaXJhdGlvblRpbWU9aztlbHNlIGJyZWFrO209bS5yZXR1cm59bC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTticmVha31rPWsubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP1xubnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9fVMoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sSWcoYixjKSxlPU0oZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPUwoZSxiLnBlbmRpbmdQcm9wcyksZj1MKGUudHlwZSxmKSxLZyhhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gTGcoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09XG5kP2U6TChkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEooZCk/KGE9ITAsT2UoYikpOmE9ITEsSWcoYixjKSx2ZihiLGQsZSxjKSx4ZihiLGQsZSxjKSxRZyhudWxsLGIsZCwhMCxhLGMpfXgoXCIxNTZcIil9dmFyIFZnPXtjdXJyZW50Om51bGx9LFdnPW51bGwsWGc9bnVsbCxZZz1udWxsO2Z1bmN0aW9uIFVnKGEsYil7dmFyIGM9YS50eXBlLl9jb250ZXh0O0coVmcsYy5fY3VycmVudFZhbHVlLGEpO2MuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIFpnKGEpe3ZhciBiPVZnLmN1cnJlbnQ7RihWZyxhKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIElnKGEsYil7V2c9YTtZZz1YZz1udWxsO3ZhciBjPWEuY29udGV4dERlcGVuZGVuY2llcztudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZT49YiYmKHFnPSEwKTthLmNvbnRleHREZXBlbmRlbmNpZXM9bnVsbH1cbmZ1bmN0aW9uIE0oYSxiKXtpZihZZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpWWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07bnVsbD09PVhnPyhudWxsPT09V2c/eChcIjMwOFwiKTp2b2lkIDAsWGc9YixXZy5jb250ZXh0RGVwZW5kZW5jaWVzPXtmaXJzdDpiLGV4cGlyYXRpb25UaW1lOjB9KTpYZz1YZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgJGc9MCxyZj0xLHNmPTIsYWg9MyxQZz0hMTtmdW5jdGlvbiBiaChhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBjaChhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gbmYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOiRnLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIGRoKGEsYil7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIHBmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7aWYobnVsbD09PWMpe3ZhciBkPWEudXBkYXRlUXVldWU7dmFyIGU9bnVsbDtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGQ9YS51cGRhdGVRdWV1ZSxlPWMudXBkYXRlUXVldWUsbnVsbD09PWQ/bnVsbD09PWU/KGQ9YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpLGU9Yy51cGRhdGVRdWV1ZT1iaChjLm1lbW9pemVkU3RhdGUpKTpkPWEudXBkYXRlUXVldWU9Y2goZSk6bnVsbD09PWUmJihlPWMudXBkYXRlUXVldWU9Y2goZCkpO251bGw9PT1lfHxkPT09ZT9kaChkLGIpOm51bGw9PT1kLmxhc3RVcGRhdGV8fG51bGw9PT1lLmxhc3RVcGRhdGU/KGRoKGQsYiksZGgoZSxiKSk6KGRoKGQsYiksZS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gZWgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO2M9bnVsbD09PWM/YS51cGRhdGVRdWV1ZT1iaChhLm1lbW9pemVkU3RhdGUpOmZoKGEsYyk7bnVsbD09PWMubGFzdENhcHR1cmVkVXBkYXRlP2MuZmlyc3RDYXB0dXJlZFVwZGF0ZT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihjLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsYy5sYXN0Q2FwdHVyZWRVcGRhdGU9Yil9ZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9Y2goYikpO3JldHVybiBifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSByZjpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgYWg6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAkZzphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gbih7fSxkLGUpO2Nhc2Ugc2Y6UGc9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiB5ZihhLGIsYyxkLGUpe1BnPSExO2I9ZmgoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxsPWIuZmlyc3RVcGRhdGUsaz1mO251bGwhPT1sOyl7dmFyIG09bC5leHBpcmF0aW9uVGltZTttPGU/KG51bGw9PT1nJiYoZz1sLGY9ayksaDxtJiYoaD1tKSk6KGs9Z2goYSxiLGwsayxjLGQpLG51bGwhPT1sLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGwubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bDooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9bCxiLmxhc3RFZmZlY3Q9bCkpKTtsPWwubmV4dH1tPW51bGw7Zm9yKGw9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1sOyl7dmFyIHA9bC5leHBpcmF0aW9uVGltZTtwPGU/KG51bGw9PT1tJiYobT1sLG51bGw9PT1nJiYoZj1rKSksaDxwJiYoaD1wKSk6KGs9Z2goYSxiLGwsayxjLGQpLG51bGwhPT1sLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PVxuMzIsbC5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1sOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWwsYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bCkpKTtsPWwubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWspO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO2EuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9a31cbmZ1bmN0aW9uIGhoKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTtpaChiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7aWgoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIGloKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3goXCIxOTFcIixjKTp2b2lkIDA7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIGpoKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6amMoYil9fWZ1bmN0aW9uIGtoKGEpe2EuZWZmZWN0VGFnfD00fXZhciBsaD12b2lkIDAsbWg9dm9pZCAwLG5oPXZvaWQgMCxvaD12b2lkIDA7bGg9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O21oPWZ1bmN0aW9uKCl7fTtcbm5oPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtJZihOLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj12YyhnLGYpO2Q9dmMoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPSRkKGcsZik7ZD0kZChnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPWJlKGcsZik7ZD1iZShnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXRlKX1xZShjLGQpO2c9Yz12b2lkIDA7dmFyIGg9bnVsbDtmb3IoYyBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGMpJiZmLmhhc093blByb3BlcnR5KGMpJiZudWxsIT1mW2NdKWlmKFwic3R5bGVcIj09PVxuYyl7dmFyIGw9ZltjXTtmb3IoZyBpbiBsKWwuaGFzT3duUHJvcGVydHkoZykmJihofHwoaD17fSksaFtnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09YyYmXCJjaGlsZHJlblwiIT09YyYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiZcImF1dG9Gb2N1c1wiIT09YyYmKHJhLmhhc093blByb3BlcnR5KGMpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChjLG51bGwpKTtmb3IoYyBpbiBkKXt2YXIgaz1kW2NdO2w9bnVsbCE9Zj9mW2NdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGMpJiZrIT09bCYmKG51bGwhPWt8fG51bGwhPWwpKWlmKFwic3R5bGVcIj09PWMpaWYobCl7Zm9yKGcgaW4gbCkhbC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGh8fChoPXt9KSxoW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmbFtnXSE9PWtbZ10mJihofHxcbihoPXt9KSxoW2ddPWtbZ10pfWVsc2UgaHx8KGF8fChhPVtdKSxhLnB1c2goYyxoKSksaD1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1jPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbCE9PWsmJihhPWF8fFtdKS5wdXNoKGMsXCJcIitrKSk6XCJjaGlsZHJlblwiPT09Yz9sPT09a3x8XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChhPWF8fFtdKS5wdXNoKGMsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJihyYS5oYXNPd25Qcm9wZXJ0eShjKT8obnVsbCE9ayYmc2UoZSxjKSxhfHxsPT09a3x8KGE9W10pKTooYT1hfHxbXSkucHVzaChjLGspKX1oJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsaCk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZraChiKX19O29oPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZraChiKX07XG52YXIgcGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gcWgoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1qYyhjKSk7bnVsbCE9PWMmJmljKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJmljKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIHJoKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe3NoKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIHRoKGEsYixjKXtjPWMudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG97aWYoKGQudGFnJmEpIT09TmYpe3ZhciBlPWQuZGVzdHJveTtkLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWUmJmUoKX0oZC50YWcmYikhPT1OZiYmKGU9ZC5jcmVhdGUsZC5kZXN0cm95PWUoKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWMpfX1cbmZ1bmN0aW9uIHVoKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1uZShcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWMudGFnJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlKXtkPWMuY2hpbGQuc2libGluZztkLnJldHVybj1jO2M9ZDtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFxuYy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gdmgoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFJlJiZSZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLmxhc3RFZmZlY3QsbnVsbCE9PWIpKXt2YXIgYz1iPWIubmV4dDtkb3t2YXIgZD1jLmRlc3Ryb3k7aWYodm9pZCAwIT09ZCl7dmFyIGU9YTt0cnl7ZCgpfWNhdGNoKGYpe3NoKGUsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX1icmVhaztjYXNlIDE6cmgoYSk7Yj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe3NoKGEsZil9YnJlYWs7Y2FzZSA1OnJoKGEpO2JyZWFrO2Nhc2UgNDp3aChhKX19XG5mdW5jdGlvbiB4aChhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIHloKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKHhoKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn14KFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6eChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKGtlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHx4aChjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyZcbjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZz1iLGg9ZS5zdGF0ZU5vZGUsOD09PWcubm9kZVR5cGU/KGY9Zy5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGgsZykpOihmPWcsZi5hcHBlbmRDaGlsZChoKSksZz1nLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWcmJnZvaWQgMCE9PWd8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9dGUpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtcbmVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiB3aChhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz94KFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYodmgoZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnKXtpZihudWxsIT09Yi5jaGlsZCl7ZD1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYodmgoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybjtiPWIucmV0dXJuOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fVxuZnVuY3Rpb24gemgoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTp0aChQZixRZixiKTticmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZDZShjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iLm1lbW9pemVkU3RhdGU7ZD12b2lkIDA7YT1iO251bGw9PT1jP2Q9ITE6KGQ9ITAsYT1iLmNoaWxkLDA9PT1jLnRpbWVkT3V0QXQmJihjLnRpbWVkT3V0QXQ9bGYoKSkpO251bGwhPT1hJiZ1aChhLGQpO2M9XG5iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jKXtiLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGc9Yi5zdGF0ZU5vZGU7bnVsbD09PWcmJihnPWIuc3RhdGVOb2RlPW5ldyBwaCk7Yy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBjPUFoLmJpbmQobnVsbCxiLGEpO2cuaGFzKGEpfHwoZy5hZGQoYSksYS50aGVuKGMsYykpfSl9YnJlYWs7Y2FzZSAxNzpicmVhaztkZWZhdWx0OngoXCIxNjNcIil9fXZhciBCaD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBDaChhLGIsYyl7Yz1uZihjKTtjLnRhZz1haDtjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7RGgoZCk7cWgoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBFaChhLGIsYyl7Yz1uZihjKTtjLnRhZz1haDt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09Rmg/Rmg9bmV3IFNldChbdGhpc10pOkZoLmFkZCh0aGlzKSk7dmFyIGM9Yi52YWx1ZSxlPWIuc3RhY2s7cWgoYSxiKTt0aGlzLmNvbXBvbmVudERpZENhdGNoKGMse2NvbXBvbmVudFN0YWNrOm51bGwhPT1lP2U6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBHaChhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpKKGEudHlwZSkmJktlKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIEtmKGEpLExlKGEpLGI9YS5lZmZlY3RUYWcsMCE9PShiJjY0KT94KFwiMjg1XCIpOnZvaWQgMCxhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGE7Y2FzZSA1OnJldHVybiBNZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGI9YS5lZmZlY3RUYWcsYiYyMDQ4PyhhLmVmZmVjdFRhZz1iJi0yMDQ5fDY0LGEpOm51bGw7Y2FzZSAxODpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEtmKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gWmcoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBIaD1UYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLEloPVRiLlJlYWN0Q3VycmVudE93bmVyLEpoPTEwNzM3NDE4MjIsS2g9ITEsVD1udWxsLExoPW51bGwsVT0wLE1oPS0xLE5oPSExLFY9bnVsbCxPaD0hMSxQaD1udWxsLFFoPW51bGwsUmg9bnVsbCxGaD1udWxsO2Z1bmN0aW9uIFNoKCl7aWYobnVsbCE9PVQpZm9yKHZhciBhPVQucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMTp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJktlKGIpO2JyZWFrO2Nhc2UgMzpLZihiKTtMZShiKTticmVhaztjYXNlIDU6TWYoYik7YnJlYWs7Y2FzZSA0OktmKGIpO2JyZWFrO2Nhc2UgMTA6WmcoYil9YT1hLnJldHVybn1MaD1udWxsO1U9MDtNaD0tMTtOaD0hMTtUPW51bGx9XG5mdW5jdGlvbiBUaCgpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYT1WLmVmZmVjdFRhZzthJjE2JiZrZShWLnN0YXRlTm9kZSxcIlwiKTtpZihhJjEyOCl7dmFyIGI9Vi5hbHRlcm5hdGU7bnVsbCE9PWImJihiPWIucmVmLG51bGwhPT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihudWxsKTpiLmN1cnJlbnQ9bnVsbCkpfXN3aXRjaChhJjE0KXtjYXNlIDI6eWgoVik7Vi5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjp5aChWKTtWLmVmZmVjdFRhZyY9LTM7emgoVi5hbHRlcm5hdGUsVik7YnJlYWs7Y2FzZSA0OnpoKFYuYWx0ZXJuYXRlLFYpO2JyZWFrO2Nhc2UgODphPVYsd2goYSksYS5yZXR1cm49bnVsbCxhLmNoaWxkPW51bGwsYS5tZW1vaXplZFN0YXRlPW51bGwsYS51cGRhdGVRdWV1ZT1udWxsLGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihhLnJldHVybj1udWxsLGEuY2hpbGQ9bnVsbCxhLm1lbW9pemVkU3RhdGU9bnVsbCxhLnVwZGF0ZVF1ZXVlPW51bGwpfVY9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFVoKCl7Zm9yKDtudWxsIT09Vjspe2lmKFYuZWZmZWN0VGFnJjI1NilhOnt2YXIgYT1WLmFsdGVybmF0ZSxiPVY7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRoKE9mLE5mLGIpO2JyZWFrIGE7Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6TChiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrIGE7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWsgYTtkZWZhdWx0OngoXCIxNjNcIil9fVY9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFZoKGEsYil7Zm9yKDtudWxsIT09Vjspe3ZhciBjPVYuZWZmZWN0VGFnO2lmKGMmMzYpe3ZhciBkPVYuYWx0ZXJuYXRlLGU9VixmPWI7c3dpdGNoKGUudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRoKFJmLFNmLGUpO2JyZWFrO2Nhc2UgMTp2YXIgZz1lLnN0YXRlTm9kZTtpZihlLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1kKWcuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBoPWUuZWxlbWVudFR5cGU9PT1lLnR5cGU/ZC5tZW1vaXplZFByb3BzOkwoZS50eXBlLGQubWVtb2l6ZWRQcm9wcyk7Zy5jb21wb25lbnREaWRVcGRhdGUoaCxkLm1lbW9pemVkU3RhdGUsZy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9ZD1lLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiZoaChlLGQsZyxmKTticmVhaztjYXNlIDM6ZD1lLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1kKXtnPW51bGw7aWYobnVsbCE9PWUuY2hpbGQpc3dpdGNoKGUuY2hpbGQudGFnKXtjYXNlIDU6Zz1cbmUuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpnPWUuY2hpbGQuc3RhdGVOb2RlfWhoKGUsZCxnLGYpfWJyZWFrO2Nhc2UgNTpmPWUuc3RhdGVOb2RlO251bGw9PT1kJiZlLmVmZmVjdFRhZyY0JiZ3ZShlLnR5cGUsZS5tZW1vaXplZFByb3BzKSYmZi5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp4KFwiMTYzXCIpfX1jJjEyOCYmKGU9Vi5yZWYsbnVsbCE9PWUmJihmPVYuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlP2UoZik6ZS5jdXJyZW50PWYpKTtjJjUxMiYmKFBoPWEpO1Y9Vi5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIFdoKGEsYil7Umg9UWg9UGg9bnVsbDt2YXIgYz1XO1c9ITA7ZG97aWYoYi5lZmZlY3RUYWcmNTEyKXt2YXIgZD0hMSxlPXZvaWQgMDt0cnl7dmFyIGY9Yjt0aChVZixOZixmKTt0aChOZixUZixmKX1jYXRjaChnKXtkPSEwLGU9Z31kJiZzaChiLGUpfWI9Yi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1iKTtXPWM7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZYaChhLGMpO1h8fFd8fFloKDEwNzM3NDE4MjMsITEpfWZ1bmN0aW9uIG9mKCl7bnVsbCE9PVFoJiZCZShRaCk7bnVsbCE9PVJoJiZSaCgpfVxuZnVuY3Rpb24gWmgoYSxiKXtPaD1LaD0hMDthLmN1cnJlbnQ9PT1iP3goXCIxNzdcIik6dm9pZCAwO3ZhciBjPWEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1jP3goXCIyNjFcIik6dm9pZCAwO2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZSxlPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtlZihhLGU+ZD9lOmQpO0loLmN1cnJlbnQ9bnVsbDtkPXZvaWQgMDsxPGIuZWZmZWN0VGFnP251bGwhPT1iLmxhc3RFZmZlY3Q/KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIsZD1iLmZpcnN0RWZmZWN0KTpkPWI6ZD1iLmZpcnN0RWZmZWN0O3VlPUJkO3ZlPVBkKCk7QmQ9ITE7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7dmFyIGY9dm9pZCAwO3RyeXtVaCgpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1mb3IoVj1kO251bGwhPT1WOyl7ZT0hMTtcbmY9dm9pZCAwO3RyeXtUaCgpfWNhdGNoKGgpe2U9ITAsZj1ofWUmJihudWxsPT09Vj94KFwiMTc4XCIpOnZvaWQgMCxzaChWLGYpLG51bGwhPT1WJiYoVj1WLm5leHRFZmZlY3QpKX1RZCh2ZSk7dmU9bnVsbDtCZD0hIXVlO3VlPW51bGw7YS5jdXJyZW50PWI7Zm9yKFY9ZDtudWxsIT09Vjspe2U9ITE7Zj12b2lkIDA7dHJ5e1ZoKGEsYyl9Y2F0Y2goaCl7ZT0hMCxmPWh9ZSYmKG51bGw9PT1WP3goXCIxNzhcIik6dm9pZCAwLHNoKFYsZiksbnVsbCE9PVYmJihWPVYubmV4dEVmZmVjdCkpfWlmKG51bGwhPT1kJiZudWxsIT09UGgpe3ZhciBnPVdoLmJpbmQobnVsbCxhLGQpO1FoPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksZnVuY3Rpb24oKXtyZXR1cm4gQWUoZyl9KTtSaD1nfUtoPU9oPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBRZSYmUWUoYi5zdGF0ZU5vZGUpO2M9Yi5leHBpcmF0aW9uVGltZTtiPWIuY2hpbGRFeHBpcmF0aW9uVGltZTtiPVxuYj5jP2I6YzswPT09YiYmKEZoPW51bGwpOyRoKGEsYil9XG5mdW5jdGlvbiBhaShhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YS5yZXR1cm4sZD1hLnNpYmxpbmc7aWYoMD09PShhLmVmZmVjdFRhZyYxMDI0KSl7VD1hO2E6e3ZhciBlPWI7Yj1hO3ZhciBmPVU7dmFyIGc9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSAxNjpicmVhaztjYXNlIDE1OmNhc2UgMDpicmVhaztjYXNlIDE6SihiLnR5cGUpJiZLZShiKTticmVhaztjYXNlIDM6S2YoYik7TGUoYik7Zz1iLnN0YXRlTm9kZTtnLnBlbmRpbmdDb250ZXh0JiYoZy5jb250ZXh0PWcucGVuZGluZ0NvbnRleHQsZy5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09ZXx8bnVsbD09PWUuY2hpbGQpRWcoYiksYi5lZmZlY3RUYWcmPS0zO21oKGIpO2JyZWFrO2Nhc2UgNTpNZihiKTt2YXIgaD1JZihIZi5jdXJyZW50KTtmPWIudHlwZTtpZihudWxsIT09ZSYmbnVsbCE9Yi5zdGF0ZU5vZGUpbmgoZSxiLGYsZyxoKSxlLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PVxuMTI4KTtlbHNlIGlmKGcpe3ZhciBsPUlmKE4uY3VycmVudCk7aWYoRWcoYikpe2c9YjtlPWcuc3RhdGVOb2RlO3ZhciBrPWcudHlwZSxtPWcubWVtb2l6ZWRQcm9wcyxwPWg7ZVtGYV09ZztlW0dhXT1tO2Y9dm9pZCAwO2g9aztzd2l0Y2goaCl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpFKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihrPTA7azxhYi5sZW5ndGg7aysrKUUoYWJba10sZSk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkUoXCJlcnJvclwiLGUpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkUoXCJlcnJvclwiLGUpO0UoXCJsb2FkXCIsZSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpFKFwicmVzZXRcIixlKTtFKFwic3VibWl0XCIsZSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpFKFwidG9nZ2xlXCIsZSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6d2MoZSxtKTtFKFwiaW52YWxpZFwiLGUpO3NlKHAsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZS5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhbS5tdWx0aXBsZX07RShcImludmFsaWRcIixlKTtzZShwLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Y2UoZSxtKSxFKFwiaW52YWxpZFwiLGUpLHNlKHAsXCJvbkNoYW5nZVwiKX1xZShoLG0pO2s9bnVsbDtmb3IoZiBpbiBtKW0uaGFzT3duUHJvcGVydHkoZikmJihsPW1bZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/ZS50ZXh0Q29udGVudCE9PWwmJihrPVtcImNoaWxkcmVuXCIsbF0pOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmZS50ZXh0Q29udGVudCE9PVwiXCIrbCYmKGs9W1wiY2hpbGRyZW5cIixcIlwiK2xdKTpyYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9bCYmc2UocCxmKSk7c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOlJiKGUpO0FjKGUsbSwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6UmIoZSk7ZWUoZSxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIG0ub25DbGljayYmXG4oZS5vbmNsaWNrPXRlKX1mPWs7Zy51cGRhdGVRdWV1ZT1mO2c9bnVsbCE9PWY/ITA6ITE7ZyYma2goYil9ZWxzZXttPWI7ZT1mO3A9ZztrPTk9PT1oLm5vZGVUeXBlP2g6aC5vd25lckRvY3VtZW50O2w9PT1mZS5odG1sJiYobD1nZShlKSk7bD09PWZlLmh0bWw/XCJzY3JpcHRcIj09PWU/KGU9ay5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGUuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsaz1lLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgcC5pcz9rPWsuY3JlYXRlRWxlbWVudChlLHtpczpwLmlzfSk6KGs9ay5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiZwLm11bHRpcGxlJiYoay5tdWx0aXBsZT0hMCkpOms9ay5jcmVhdGVFbGVtZW50TlMobCxlKTtlPWs7ZVtGYV09bTtlW0dhXT1nO2xoKGUsYiwhMSwhMSk7cD1lO2s9ZjttPWc7dmFyIHQ9aCxBPXJlKGssbSk7c3dpdGNoKGspe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RShcImxvYWRcIixcbnApO2g9bTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YWIubGVuZ3RoO2grKylFKGFiW2hdLHApO2g9bTticmVhaztjYXNlIFwic291cmNlXCI6RShcImVycm9yXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkUoXCJlcnJvclwiLHApO0UoXCJsb2FkXCIscCk7aD1tO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RShcInJlc2V0XCIscCk7RShcInN1Ym1pdFwiLHApO2g9bTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkUoXCJ0b2dnbGVcIixwKTtoPW07YnJlYWs7Y2FzZSBcImlucHV0XCI6d2MocCxtKTtoPXZjKHAsbSk7RShcImludmFsaWRcIixwKTtzZSh0LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9JGQocCxtKTticmVhaztjYXNlIFwic2VsZWN0XCI6cC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O2g9bih7fSxtLHt2YWx1ZTp2b2lkIDB9KTtFKFwiaW52YWxpZFwiLHApO3NlKHQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjZShwLFxubSk7aD1iZShwLG0pO0UoXCJpbnZhbGlkXCIscCk7c2UodCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1tfXFlKGssaCk7bD12b2lkIDA7dmFyIHY9ayxSPXAsdT1oO2ZvcihsIGluIHUpaWYodS5oYXNPd25Qcm9wZXJ0eShsKSl7dmFyIHE9dVtsXTtcInN0eWxlXCI9PT1sP29lKFIscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8ocT1xP3EuX19odG1sOnZvaWQgMCxudWxsIT1xJiZqZShSLHEpKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCI9PT10eXBlb2YgcT8oXCJ0ZXh0YXJlYVwiIT09dnx8XCJcIiE9PXEpJiZrZShSLHEpOlwibnVtYmVyXCI9PT10eXBlb2YgcSYma2UoUixcIlwiK3EpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihyYS5oYXNPd25Qcm9wZXJ0eShsKT9udWxsIT1xJiZzZSh0LGwpOm51bGwhPXEmJnRjKFIsbCxxLEEpKX1zd2l0Y2goayl7Y2FzZSBcImlucHV0XCI6UmIocCk7XG5BYyhwLG0sITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlJiKHApO2VlKHAsbSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPW0udmFsdWUmJnAuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3VjKG0udmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6aD1wO2gubXVsdGlwbGU9ISFtLm11bHRpcGxlO3A9bS52YWx1ZTtudWxsIT1wP2FlKGgsISFtLm11bHRpcGxlLHAsITEpOm51bGwhPW0uZGVmYXVsdFZhbHVlJiZhZShoLCEhbS5tdWx0aXBsZSxtLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYocC5vbmNsaWNrPXRlKX0oZz13ZShmLGcpKSYma2goYik7Yi5zdGF0ZU5vZGU9ZX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIG51bGw9PT1iLnN0YXRlTm9kZT94KFwiMTY2XCIpOnZvaWQgMDticmVhaztjYXNlIDY6ZSYmbnVsbCE9Yi5zdGF0ZU5vZGU/b2goZSxiLGUubWVtb2l6ZWRQcm9wcyxnKTooXCJzdHJpbmdcIiE9PVxudHlwZW9mIGcmJihudWxsPT09Yi5zdGF0ZU5vZGU/eChcIjE2NlwiKTp2b2lkIDApLGU9SWYoSGYuY3VycmVudCksSWYoTi5jdXJyZW50KSxFZyhiKT8oZz1iLGY9Zy5zdGF0ZU5vZGUsZT1nLm1lbW9pemVkUHJvcHMsZltGYV09ZywoZz1mLm5vZGVWYWx1ZSE9PWUpJiZraChiKSk6KGY9YixnPSg5PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZyksZ1tGYV09YixmLnN0YXRlTm9kZT1nKSk7YnJlYWs7Y2FzZSAxMTpicmVhaztjYXNlIDEzOmc9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXtiLmV4cGlyYXRpb25UaW1lPWY7VD1iO2JyZWFrIGF9Zz1udWxsIT09ZztmPW51bGwhPT1lJiZudWxsIT09ZS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYhZyYmZiYmKGU9ZS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoaD1iLmZpcnN0RWZmZWN0LG51bGwhPT1oPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWgpOihiLmZpcnN0RWZmZWN0PVxuYi5sYXN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKTtpZihnfHxmKWIuZWZmZWN0VGFnfD00O2JyZWFrO2Nhc2UgNzpicmVhaztjYXNlIDg6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDQ6S2YoYik7bWgoYik7YnJlYWs7Y2FzZSAxMDpaZyhiKTticmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxNDpicmVhaztjYXNlIDE3OkooYi50eXBlKSYmS2UoYik7YnJlYWs7Y2FzZSAxODpicmVhaztkZWZhdWx0OngoXCIxNTZcIil9VD1udWxsfWI9YTtpZigxPT09VXx8MSE9PWIuY2hpbGRFeHBpcmF0aW9uVGltZSl7Zz0wO2ZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KWU9Zi5leHBpcmF0aW9uVGltZSxoPWYuY2hpbGRFeHBpcmF0aW9uVGltZSxlPmcmJihnPWUpLGg+ZyYmKGc9aCksZj1mLnNpYmxpbmc7Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWd9aWYobnVsbCE9PVQpcmV0dXJuIFQ7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmXG4oYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSl9ZWxzZXthPUdoKGEsVSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0xMDIzLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD0xMDI0KX1pZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha31yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGJpKGEpe3ZhciBiPVRnKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1haShhKSk7SWguY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gY2koYSxiKXtLaD94KFwiMjQzXCIpOnZvaWQgMDtvZigpO0toPSEwO3ZhciBjPUhoLmN1cnJlbnQ7SGguY3VycmVudD1rZzt2YXIgZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uO2lmKGQhPT1VfHxhIT09TGh8fG51bGw9PT1UKVNoKCksTGg9YSxVPWQsVD1YZShMaC5jdXJyZW50LG51bGwsVSksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT0hMTtkb3t0cnl7aWYoYilmb3IoO251bGwhPT1UJiYhZGkoKTspVD1iaShUKTtlbHNlIGZvcig7bnVsbCE9PVQ7KVQ9YmkoVCl9Y2F0Y2godSl7aWYoWWc9WGc9V2c9bnVsbCxsZygpLG51bGw9PT1UKWU9ITAsRGgodSk7ZWxzZXtudWxsPT09VD94KFwiMjcxXCIpOnZvaWQgMDt2YXIgZj1ULGc9Zi5yZXR1cm47aWYobnVsbD09PWcpZT0hMCxEaCh1KTtlbHNle2E6e3ZhciBoPWEsbD1nLGs9ZixtPXU7Zz1VO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PVxubSYmXCJvYmplY3RcIj09PXR5cGVvZiBtJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS50aGVuKXt2YXIgcD1tO209bDt2YXIgdD0tMSxBPS0xO2Rve2lmKDEzPT09bS50YWcpe3ZhciB2PW0uYWx0ZXJuYXRlO2lmKG51bGwhPT12JiYodj12Lm1lbW9pemVkU3RhdGUsbnVsbCE9PXYpKXtBPTEwKigxMDczNzQxODIyLXYudGltZWRPdXRBdCk7YnJlYWt9dj1tLnBlbmRpbmdQcm9wcy5tYXhEdXJhdGlvbjtpZihcIm51bWJlclwiPT09dHlwZW9mIHYpaWYoMD49dil0PTA7ZWxzZSBpZigtMT09PXR8fHY8dCl0PXZ9bT1tLnJldHVybn13aGlsZShudWxsIT09bSk7bT1sO2Rve2lmKHY9MTM9PT1tLnRhZyl2PXZvaWQgMD09PW0ubWVtb2l6ZWRQcm9wcy5mYWxsYmFjaz8hMTpudWxsPT09bS5tZW1vaXplZFN0YXRlO2lmKHYpe2w9bS51cGRhdGVRdWV1ZTtudWxsPT09bD8obD1uZXcgU2V0LGwuYWRkKHApLG0udXBkYXRlUXVldWU9bCk6bC5hZGQocCk7aWYoMD09PShtLm1vZGUmMSkpe20uZWZmZWN0VGFnfD1cbjY0O2suZWZmZWN0VGFnJj0tMTk1NzsxPT09ay50YWcmJihudWxsPT09ay5hbHRlcm5hdGU/ay50YWc9MTc6KGc9bmYoMTA3Mzc0MTgyMyksZy50YWc9c2YscGYoayxnKSkpO2suZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMzticmVhayBhfWs9aDtsPWc7dmFyIFI9ay5waW5nQ2FjaGU7bnVsbD09PVI/KFI9ay5waW5nQ2FjaGU9bmV3IEJoLHY9bmV3IFNldCxSLnNldChwLHYpKToodj1SLmdldChwKSx2b2lkIDA9PT12JiYodj1uZXcgU2V0LFIuc2V0KHAsdikpKTt2LmhhcyhsKXx8KHYuYWRkKGwpLGs9ZWkuYmluZChudWxsLGsscCxsKSxwLnRoZW4oayxrKSk7LTE9PT10P2g9MTA3Mzc0MTgyMzooLTE9PT1BJiYoQT0xMCooMTA3Mzc0MTgyMi1nZihoLGcpKS01RTMpLGg9QSt0KTswPD1oJiZNaDxoJiYoTWg9aCk7bS5lZmZlY3RUYWd8PTIwNDg7bS5leHBpcmF0aW9uVGltZT1nO2JyZWFrIGF9bT1tLnJldHVybn13aGlsZShudWxsIT09bSk7bT1FcnJvcigoaWMoay50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcblwiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIramMoaykpfU5oPSEwO209amgobSxrKTtoPWw7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aC5lZmZlY3RUYWd8PTIwNDg7aC5leHBpcmF0aW9uVGltZT1nO2c9Q2goaCxtLGcpO2VoKGgsZyk7YnJlYWsgYTtjYXNlIDE6aWYodD1tLEE9aC50eXBlLGs9aC5zdGF0ZU5vZGUsMD09PShoLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1rJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1GaHx8IUZoLmhhcyhrKSkpKXtoLmVmZmVjdFRhZ3w9MjA0ODtcbmguZXhwaXJhdGlvblRpbWU9ZztnPUVoKGgsdCxnKTtlaChoLGcpO2JyZWFrIGF9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpfVQ9YWkoZik7Y29udGludWV9fX1icmVha313aGlsZSgxKTtLaD0hMTtIaC5jdXJyZW50PWM7WWc9WGc9V2c9bnVsbDtsZygpO2lmKGUpTGg9bnVsbCxhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2UgaWYobnVsbCE9PVQpYS5maW5pc2hlZFdvcms9bnVsbDtlbHNle2M9YS5jdXJyZW50LmFsdGVybmF0ZTtudWxsPT09Yz94KFwiMjgxXCIpOnZvaWQgMDtMaD1udWxsO2lmKE5oKXtlPWEubGF0ZXN0UGVuZGluZ1RpbWU7Zj1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7Zz1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMCE9PWUmJmU8ZHx8MCE9PWYmJmY8ZHx8MCE9PWcmJmc8ZCl7ZmYoYSxkKTtmaShhLGMsZCxhLmV4cGlyYXRpb25UaW1lLC0xKTtyZXR1cm59aWYoIWEuZGlkRXJyb3ImJmIpe2EuZGlkRXJyb3I9ITA7ZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWQ7XG5iPWEuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztmaShhLGMsZCxiLC0xKTtyZXR1cm59fWImJi0xIT09TWg/KGZmKGEsZCksYj0xMCooMTA3Mzc0MTgyMi1nZihhLGQpKSxiPE1oJiYoTWg9YiksYj0xMCooMTA3Mzc0MTgyMi1sZigpKSxiPU1oLWIsZmkoYSxjLGQsYS5leHBpcmF0aW9uVGltZSwwPmI/MDpiKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWQsYS5maW5pc2hlZFdvcms9Yyl9fVxuZnVuY3Rpb24gc2goYSxiKXtmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMTp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09Rmh8fCFGaC5oYXMoZCkpKXthPWpoKGIsYSk7YT1FaChjLGEsMTA3Mzc0MTgyMyk7cGYoYyxhKTtxZihjLDEwNzM3NDE4MjMpO3JldHVybn1icmVhaztjYXNlIDM6YT1qaChiLGEpO2E9Q2goYyxhLDEwNzM3NDE4MjMpO3BmKGMsYSk7cWYoYywxMDczNzQxODIzKTtyZXR1cm59Yz1jLnJldHVybn0zPT09YS50YWcmJihjPWpoKGIsYSksYz1DaChhLGMsMTA3Mzc0MTgyMykscGYoYSxjKSxxZihhLDEwNzM3NDE4MjMpKX1cbmZ1bmN0aW9uIG1mKGEsYil7dmFyIGM9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCgpLGQ9dm9pZCAwO2lmKDA9PT0oYi5tb2RlJjEpKWQ9MTA3Mzc0MTgyMztlbHNlIGlmKEtoJiYhT2gpZD1VO2Vsc2V7c3dpdGNoKGMpe2Nhc2Ugci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eTpkPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5OmQ9MTA3Mzc0MTgyMi0xMCooKCgxMDczNzQxODIyLWErMTUpLzEwfDApKzEpO2JyZWFrO2Nhc2Ugci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eTpkPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1hKzUwMCkvMjV8MCkrMSk7YnJlYWs7Y2FzZSByLnVuc3RhYmxlX0xvd1ByaW9yaXR5OmNhc2Ugci51bnN0YWJsZV9JZGxlUHJpb3JpdHk6ZD0xO2JyZWFrO2RlZmF1bHQ6eChcIjMxM1wiKX1udWxsIT09TGgmJmQ9PT1VJiYtLWR9Yz09PXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkmJlxuKDA9PT1naXx8ZDxnaSkmJihnaT1kKTtyZXR1cm4gZH1mdW5jdGlvbiBlaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2lmKG51bGwhPT1MaCYmVT09PWMpTGg9bnVsbDtlbHNlIGlmKGI9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1hLmxhdGVzdFN1c3BlbmRlZFRpbWUsMCE9PWImJmM8PWImJmM+PWQpe2EuZGlkRXJyb3I9ITE7Yj1hLmxhdGVzdFBpbmdlZFRpbWU7aWYoMD09PWJ8fGI+YylhLmxhdGVzdFBpbmdlZFRpbWU9YztkZihjLGEpO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmWGgoYSxjKX19ZnVuY3Rpb24gQWgoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj1sZigpO2I9bWYoYixhKTthPWhpKGEsYik7bnVsbCE9PWEmJihjZihhLGIpLGI9YS5leHBpcmF0aW9uVGltZSwwIT09YiYmWGgoYSxiKSl9XG5mdW5jdGlvbiBoaShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufXJldHVybiBlfVxuZnVuY3Rpb24gcWYoYSxiKXthPWhpKGEsYik7bnVsbCE9PWEmJighS2gmJjAhPT1VJiZiPlUmJlNoKCksY2YoYSxiKSxLaCYmIU9oJiZMaD09PWF8fFhoKGEsYS5leHBpcmF0aW9uVGltZSksaWk+amkmJihpaT0wLHgoXCIxODVcIikpKX1mdW5jdGlvbiBraShhLGIsYyxkLGUpe3JldHVybiByLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX12YXIgbGk9bnVsbCxZPW51bGwsbWk9MCxuaT12b2lkIDAsVz0hMSxvaT1udWxsLFo9MCxnaT0wLHBpPSExLHFpPW51bGwsWD0hMSxyaT0hMSxzaT1udWxsLHRpPXIudW5zdGFibGVfbm93KCksdWk9MTA3Mzc0MTgyMi0odGkvMTB8MCksdmk9dWksamk9NTAsaWk9MCx3aT1udWxsO2Z1bmN0aW9uIHhpKCl7dWk9MTA3Mzc0MTgyMi0oKHIudW5zdGFibGVfbm93KCktdGkpLzEwfDApfVxuZnVuY3Rpb24geWkoYSxiKXtpZigwIT09bWkpe2lmKGI8bWkpcmV0dXJuO251bGwhPT1uaSYmci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayhuaSl9bWk9YjthPXIudW5zdGFibGVfbm93KCktdGk7bmk9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHppLHt0aW1lb3V0OjEwKigxMDczNzQxODIyLWIpLWF9KX1mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2EuZXhwaXJhdGlvblRpbWU9ZDswIT09ZXx8ZGkoKT8wPGUmJihhLnRpbWVvdXRIYW5kbGU9eWUoQWkuYmluZChudWxsLGEsYixjKSxlKSk6KGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWMsYS5maW5pc2hlZFdvcms9Yil9ZnVuY3Rpb24gQWkoYSxiLGMpe2EucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPWM7YS5maW5pc2hlZFdvcms9Yjt4aSgpO3ZpPXVpO0JpKGEsYyl9ZnVuY3Rpb24gJGgoYSxiKXthLmV4cGlyYXRpb25UaW1lPWI7YS5maW5pc2hlZFdvcms9bnVsbH1cbmZ1bmN0aW9uIGxmKCl7aWYoVylyZXR1cm4gdmk7Q2koKTtpZigwPT09Wnx8MT09PVopeGkoKSx2aT11aTtyZXR1cm4gdml9ZnVuY3Rpb24gWGgoYSxiKXtudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdD8oYS5leHBpcmF0aW9uVGltZT1iLG51bGw9PT1ZPyhsaT1ZPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooWT1ZLm5leHRTY2hlZHVsZWRSb290PWEsWS5uZXh0U2NoZWR1bGVkUm9vdD1saSkpOmI+YS5leHBpcmF0aW9uVGltZSYmKGEuZXhwaXJhdGlvblRpbWU9Yik7V3x8KFg/cmkmJihvaT1hLFo9MTA3Mzc0MTgyMyxEaShhLDEwNzM3NDE4MjMsITEpKToxMDczNzQxODIzPT09Yj9ZaCgxMDczNzQxODIzLCExKTp5aShhLGIpKX1cbmZ1bmN0aW9uIENpKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PVkpZm9yKHZhciBjPVksZD1saTtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09WT94KFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7bGk9WT1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09bGkpbGk9ZT1kLm5leHRTY2hlZHVsZWRSb290LFkubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09WSl7WT1jO1kubmV4dFNjaGVkdWxlZFJvb3Q9bGk7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1kLm5leHRTY2hlZHVsZWRSb290LGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtkPWMubmV4dFNjaGVkdWxlZFJvb3R9ZWxzZXtlPmEmJihhPWUsYj1kKTtpZihkPT09WSlicmVhaztpZigxMDczNzQxODIzPT09XG5hKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fW9pPWI7Wj1hfXZhciBFaT0hMTtmdW5jdGlvbiBkaSgpe3JldHVybiBFaT8hMDpyLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCk/RWk9ITA6ITF9ZnVuY3Rpb24gemkoKXt0cnl7aWYoIWRpKCkmJm51bGwhPT1saSl7eGkoKTt2YXIgYT1saTtkb3t2YXIgYj1hLmV4cGlyYXRpb25UaW1lOzAhPT1iJiZ1aTw9YiYmKGEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249dWkpO2E9YS5uZXh0U2NoZWR1bGVkUm9vdH13aGlsZShhIT09bGkpfVloKDAsITApfWZpbmFsbHl7RWk9ITF9fVxuZnVuY3Rpb24gWWgoYSxiKXtDaSgpO2lmKGIpZm9yKHhpKCksdmk9dWk7bnVsbCE9PW9pJiYwIT09WiYmYTw9WiYmIShFaSYmdWk+Wik7KURpKG9pLFosdWk+WiksQ2koKSx4aSgpLHZpPXVpO2Vsc2UgZm9yKDtudWxsIT09b2kmJjAhPT1aJiZhPD1aOylEaShvaSxaLCExKSxDaSgpO2ImJihtaT0wLG5pPW51bGwpOzAhPT1aJiZ5aShvaSxaKTtpaT0wO3dpPW51bGw7aWYobnVsbCE9PXNpKWZvcihhPXNpLHNpPW51bGwsYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2goZCl7cGl8fChwaT0hMCxxaT1kKX19aWYocGkpdGhyb3cgYT1xaSxxaT1udWxsLHBpPSExLGE7fWZ1bmN0aW9uIEJpKGEsYil7Vz94KFwiMjUzXCIpOnZvaWQgMDtvaT1hO1o9YjtEaShhLGIsITEpO1loKDEwNzM3NDE4MjMsITEpfVxuZnVuY3Rpb24gRGkoYSxiLGMpe1c/eChcIjI0NVwiKTp2b2lkIDA7Vz0hMDtpZihjKXt2YXIgZD1hLmZpbmlzaGVkV29yaztudWxsIT09ZD9GaShhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLHplKGQpKSxjaShhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJihkaSgpP2EuZmluaXNoZWRXb3JrPWQ6RmkoYSxkLGIpKSl9ZWxzZSBkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kP0ZpKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsemUoZCkpLGNpKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmRmkoYSxkLGIpKTtXPSExfVxuZnVuY3Rpb24gRmkoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWMmJihudWxsPT09c2k/c2k9W2RdOnNpLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EuZXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDthPT09d2k/aWkrKzood2k9YSxpaT0wKTtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZ1bmN0aW9uKCl7WmgoYSxiKX0pfWZ1bmN0aW9uIERoKGEpe251bGw9PT1vaT94KFwiMjQ2XCIpOnZvaWQgMDtvaS5leHBpcmF0aW9uVGltZT0wO3BpfHwocGk9ITAscWk9YSl9ZnVuY3Rpb24gR2koYSxiKXt2YXIgYz1YO1g9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KFg9Yyl8fFd8fFloKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIEhpKGEsYil7aWYoWCYmIXJpKXtyaT0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtyaT0hMX19cmV0dXJuIGEoYil9ZnVuY3Rpb24gSWkoYSxiLGMpe1h8fFd8fDA9PT1naXx8KFloKGdpLCExKSxnaT0wKTt2YXIgZD1YO1g9ITA7dHJ5e3JldHVybiByLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShyLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjKX0pfWZpbmFsbHl7KFg9ZCl8fFd8fFloKDEwNzM3NDE4MjMsITEpfX1cbmZ1bmN0aW9uIEppKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7Mj09PWVkKGMpJiYxPT09Yy50YWc/dm9pZCAwOngoXCIxNzBcIik7dmFyIGc9Yztkb3tzd2l0Y2goZy50YWcpe2Nhc2UgMzpnPWcuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoSihnLnR5cGUpKXtnPWcuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWc9Zy5yZXR1cm59d2hpbGUobnVsbCE9PWcpO3goXCIxNzFcIik7Zz12b2lkIDB9aWYoMT09PWMudGFnKXt2YXIgaD1jLnR5cGU7aWYoSihoKSl7Yz1OZShjLGgsZyk7YnJlYWsgYX19Yz1nfWVsc2UgYz1IZTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1uZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7XG5vZigpO3BmKGYsZSk7cWYoZixkKTtyZXR1cm4gZH1mdW5jdGlvbiBLaShhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1sZigpO2U9bWYoZixlKTtyZXR1cm4gSmkoYSxiLGMsZSxkKX1mdW5jdGlvbiBMaShhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIE1pKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6V2Isa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5BYj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOnljKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1LYShkKTtlP3ZvaWQgMDp4KFwiOTBcIik7U2IoZCk7eWMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmRlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZhZShhLCEhYy5tdWx0aXBsZSxiLCExKX19O1xuZnVuY3Rpb24gTmkoYSl7dmFyIGI9MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWxmKCkrNTAwKS8yNXwwKSsxKTtiPj1KaCYmKGI9SmgtMSk7dGhpcy5fZXhwaXJhdGlvblRpbWU9Smg9Yjt0aGlzLl9yb290PWE7dGhpcy5fY2FsbGJhY2tzPXRoaXMuX25leHQ9bnVsbDt0aGlzLl9oYXNDaGlsZHJlbj10aGlzLl9kaWRDb21wbGV0ZT0hMTt0aGlzLl9jaGlsZHJlbj1udWxsO3RoaXMuX2RlZmVyPSEwfU5pLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dGhpcy5fZGVmZXI/dm9pZCAwOngoXCIyNTBcIik7dGhpcy5faGFzQ2hpbGRyZW49ITA7dGhpcy5fY2hpbGRyZW49YTt2YXIgYj10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYz10aGlzLl9leHBpcmF0aW9uVGltZSxkPW5ldyBPaTtKaShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5OaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5OaS5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6eChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD94KFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO0JpKGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O05pLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBPaSgpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfU9pLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5PaS5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz94KFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtcbmZ1bmN0aW9uIFBpKGEsYixjKXtiPUsoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGluZ0NhY2hlOm51bGwsZWFybGllc3RQZW5kaW5nVGltZTowLGxhdGVzdFBlbmRpbmdUaW1lOjAsZWFybGllc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFBpbmdlZFRpbWU6MCxkaWRFcnJvcjohMSxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCx0aW1lb3V0SGFuZGxlOi0xLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjowLGV4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3RoaXMuX2ludGVybmFsUm9vdD1iLnN0YXRlTm9kZT1hfVxuUGkucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBPaTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7S2koYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtQaS5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgT2k7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO0tpKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307UGkucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IE9pO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtLaShiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuUGkucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IE5pKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gUWkoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfUdiPUdpO0hiPUlpO0liPWZ1bmN0aW9uKCl7V3x8MD09PWdpfHwoWWgoZ2ksITEpLGdpPTApfTtcbmZ1bmN0aW9uIFJpKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgUGkoYSwhMSxiKX1cbmZ1bmN0aW9uIFNpKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1MaShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPVJpKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPUxpKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1IaShmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gTGkoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIFRpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIE1pKGEsYixudWxsLGMpfVxudmFyIFZpPXtjcmVhdGVQb3J0YWw6VGksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj94KFwiMTg4XCIpOngoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9aGQoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtRaShiKT92b2lkIDA6eChcIjIwMFwiKTtyZXR1cm4gU2kobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7UWkoYik/dm9pZCAwOngoXCIyMDBcIik7cmV0dXJuIFNpKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtRaShjKT92b2lkIDA6eChcIjIwMFwiKTtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/XG54KFwiMzhcIik6dm9pZCAwO3JldHVybiBTaShhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtRaShhKT92b2lkIDA6eChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KEhpKGZ1bmN0aW9uKCl7U2kobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gVGkuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOkdpLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpJaSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtXP3goXCIxODdcIik6dm9pZCAwO3ZhciBjPVg7WD0hMDt0cnl7cmV0dXJuIGtpKGEsYil9ZmluYWxseXtYPWMsWWgoMTA3Mzc0MTgyMywhMSl9fSx1bnN0YWJsZV9jcmVhdGVSb290OlVpLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1cblg7WD0hMDt0cnl7a2koYSl9ZmluYWxseXsoWD1iKXx8V3x8WWgoMTA3Mzc0MTgyMywhMSl9fSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRzOltJYSxKYSxLYSxCYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUscGEsUWEsZnVuY3Rpb24oYSl7eWEoYSxQYSl9LEViLEZiLERkLERhXX19O2Z1bmN0aW9uIFVpKGEsYil7UWkoYSk/dm9pZCAwOngoXCIyOTlcIixcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBQaShhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX1cbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBUZShuKHt9LGEse292ZXJyaWRlUHJvcHM6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpUYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6SGEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi44LjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgV2k9e2RlZmF1bHQ6Vml9LFhpPVdpJiZWaXx8V2k7bW9kdWxlLmV4cG9ydHM9WGkuZGVmYXVsdHx8WGk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjEzLjJcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZD1udWxsLGU9ITEsZz0zLGs9LTEsbD0tMSxtPSExLG49ITE7ZnVuY3Rpb24gcCgpe2lmKCFtKXt2YXIgYT1kLmV4cGlyYXRpb25UaW1lO24/cSgpOm49ITA7cih0LGEpfX1cbmZ1bmN0aW9uIHUoKXt2YXIgYT1kLGI9ZC5uZXh0O2lmKGQ9PT1iKWQ9bnVsbDtlbHNle3ZhciBjPWQucHJldmlvdXM7ZD1jLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbDtjPWEuY2FsbGJhY2s7Yj1hLmV4cGlyYXRpb25UaW1lO2E9YS5wcmlvcml0eUxldmVsO3ZhciBmPWcsUT1sO2c9YTtsPWI7dHJ5e3ZhciBoPWMoKX1maW5hbGx5e2c9ZixsPVF9aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGgpaWYoaD17Y2FsbGJhY2s6aCxwcmlvcml0eUxldmVsOmEsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH0sbnVsbD09PWQpZD1oLm5leHQ9aC5wcmV2aW91cz1oO2Vsc2V7Yz1udWxsO2E9ZDtkb3tpZihhLmV4cGlyYXRpb25UaW1lPj1iKXtjPWE7YnJlYWt9YT1hLm5leHR9d2hpbGUoYSE9PWQpO251bGw9PT1jP2M9ZDpjPT09ZCYmKGQ9aCxwKCkpO2I9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1oO2gubmV4dD1jO2gucHJldmlvdXM9XG5ifX1mdW5jdGlvbiB2KCl7aWYoLTE9PT1rJiZudWxsIT09ZCYmMT09PWQucHJpb3JpdHlMZXZlbCl7bT0hMDt0cnl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiYxPT09ZC5wcmlvcml0eUxldmVsKX1maW5hbGx5e209ITEsbnVsbCE9PWQ/cCgpOm49ITF9fX1mdW5jdGlvbiB0KGEpe209ITA7dmFyIGI9ZTtlPWE7dHJ5e2lmKGEpZm9yKDtudWxsIT09ZDspe3ZhciBjPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoZC5leHBpcmF0aW9uVGltZTw9Yyl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiZkLmV4cGlyYXRpb25UaW1lPD1jKX1lbHNlIGJyZWFrfWVsc2UgaWYobnVsbCE9PWQpe2RvIHUoKTt3aGlsZShudWxsIT09ZCYmIXcoKSl9fWZpbmFsbHl7bT0hMSxlPWIsbnVsbCE9PWQ/cCgpOm49ITEsdigpfX1cbnZhciB4PURhdGUseT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCx6PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU/cmVxdWVzdEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZT9jYW5jZWxBbmltYXRpb25GcmFtZTp2b2lkIDAsQyxEO2Z1bmN0aW9uIEUoYSl7Qz1BKGZ1bmN0aW9uKGIpe3ooRCk7YShiKX0pO0Q9eShmdW5jdGlvbigpe0IoQyk7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sMTAwKX1cbmlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBGPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIEYubm93KCl9fWVsc2UgZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKX07dmFyIHIscSx3LEc9bnVsbDtcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdz9HPXdpbmRvdzpcInVuZGVmaW5lZFwiIT09dHlwZW9mIGdsb2JhbCYmKEc9Z2xvYmFsKTtcbmlmKEcmJkcuX3NjaGVkTW9jayl7dmFyIEg9Ry5fc2NoZWRNb2NrO3I9SFswXTtxPUhbMV07dz1IWzJdO2V4cG9ydHMudW5zdGFibGVfbm93PUhbM119ZWxzZSBpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgST1udWxsLEo9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PUkpdHJ5e0koYSl9ZmluYWxseXtJPW51bGx9fTtyPWZ1bmN0aW9uKGEpe251bGwhPT1JP3NldFRpbWVvdXQociwwLGEpOihJPWEsc2V0VGltZW91dChKLDAsITEpKX07cT1mdW5jdGlvbigpe0k9bnVsbH07dz1mdW5jdGlvbigpe3JldHVybiExfX1lbHNle1widW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSYmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpLFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIEImJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSk7dmFyIEs9bnVsbCxMPSExLE09LTEsTj0hMSxPPSExLFA9MCxSPTMzLFM9MzM7dz1mdW5jdGlvbigpe3JldHVybiBQPD1leHBvcnRzLnVuc3RhYmxlX25vdygpfTt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7TD0hMTt2YXIgYT1LLGI9TTtLPW51bGw7TT0tMTt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpLGY9ITE7aWYoMD49UC1jKWlmKC0xIT09YiYmYjw9YylmPSEwO2Vsc2V7Tnx8KE49ITAsRShWKSk7Sz1hO009YjtyZXR1cm59aWYobnVsbCE9PWEpe089ITA7dHJ5e2EoZil9ZmluYWxseXtPPSExfX19O1xudmFyIFY9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PUspe0UoVik7dmFyIGI9YS1QK1M7YjxTJiZSPFM/KDg+YiYmKGI9OCksUz1iPFI/UjpiKTpSPWI7UD1hK1M7THx8KEw9ITAsVS5wb3N0TWVzc2FnZSh2b2lkIDApKX1lbHNlIE49ITF9O3I9ZnVuY3Rpb24oYSxiKXtLPWE7TT1iO098fDA+Yj9VLnBvc3RNZXNzYWdlKHZvaWQgMCk6Tnx8KE49ITAsRShWKSl9O3E9ZnVuY3Rpb24oKXtLPW51bGw7TD0hMTtNPS0xfX1leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9ZyxmPWs7Zz1hO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e2c9YyxrPWYsdigpfX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChnKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1nfXZhciBjPWcsZj1rO2c9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtnPWMsaz1mLHYoKX19O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7dmFyIGM9LTEhPT1rP2s6ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCliPWMrYi50aW1lb3V0O2Vsc2Ugc3dpdGNoKGcpe2Nhc2UgMTpiPWMrLTE7YnJlYWs7Y2FzZSAyOmI9YysyNTA7YnJlYWs7Y2FzZSA1OmI9YysxMDczNzQxODIzO2JyZWFrO2Nhc2UgNDpiPWMrMUU0O2JyZWFrO2RlZmF1bHQ6Yj1jKzVFM31hPXtjYWxsYmFjazphLHByaW9yaXR5TGV2ZWw6ZyxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfTtpZihudWxsPT09ZClkPWEubmV4dD1hLnByZXZpb3VzPWEscCgpO2Vsc2V7Yz1udWxsO3ZhciBmPWQ7ZG97aWYoZi5leHBpcmF0aW9uVGltZT5iKXtjPWY7YnJlYWt9Zj1mLm5leHR9d2hpbGUoZiE9PWQpO251bGw9PT1jP2M9ZDpjPT09ZCYmKGQ9YSxwKCkpO1xuYj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWE7YS5uZXh0PWM7YS5wcmV2aW91cz1ifXJldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWEubmV4dDtpZihudWxsIT09Yil7aWYoYj09PWEpZD1udWxsO2Vsc2V7YT09PWQmJihkPWIpO3ZhciBjPWEucHJldmlvdXM7Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGx9fTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1nO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPWcsZj1rO2c9YjtrPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e2c9YyxrPWYsdigpfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gZ307XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIWUmJihudWxsIT09ZCYmZC5leHBpcmF0aW9uVGltZTxsfHx3KCkpfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7bnVsbCE9PWQmJnAoKX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBkfTtcbiIsIi8qIVxuICAqIEJvb3RzdHJhcCB2NC4wLjAgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbSlcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDE4IFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXG4gICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgnanF1ZXJ5JyksIHJlcXVpcmUoJ3BvcHBlci5qcycpKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnLCAnanF1ZXJ5JywgJ3BvcHBlci5qcyddLCBmYWN0b3J5KSA6XG5cdChmYWN0b3J5KChnbG9iYWwuYm9vdHN0cmFwID0ge30pLGdsb2JhbC5qUXVlcnksZ2xvYmFsLlBvcHBlcikpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMsJCxQb3BwZXIpIHsgJ3VzZSBzdHJpY3QnO1xuXG4kID0gJCAmJiAkLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyAkWydkZWZhdWx0J10gOiAkO1xuUG9wcGVyID0gUG9wcGVyICYmIFBvcHBlci5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gUG9wcGVyWydkZWZhdWx0J10gOiBQb3BwZXI7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMCk6IHV0aWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBVdGlsID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVyc1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIHZhciB0cmFuc2l0aW9uID0gZmFsc2U7XG4gIHZhciBNQVhfVUlEID0gMTAwMDAwMDsgLy8gU2hvdXRvdXQgQW5ndXNDcm9sbCAoaHR0cHM6Ly9nb28uZ2wvcHh3UUdwKVxuXG4gIGZ1bmN0aW9uIHRvVHlwZShvYmopIHtcbiAgICByZXR1cm4ge30udG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9cXHMoW2EtekEtWl0rKS8pWzFdLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBiaW5kVHlwZTogdHJhbnNpdGlvbi5lbmQsXG4gICAgICBkZWxlZ2F0ZVR5cGU6IHRyYW5zaXRpb24uZW5kLFxuICAgICAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICAgICAgaWYgKCQkJDEoZXZlbnQudGFyZ2V0KS5pcyh0aGlzKSkge1xuICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZmluZWRcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZFRlc3QoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5RVW5pdCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBlbmQ6ICd0cmFuc2l0aW9uZW5kJ1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kRW11bGF0b3IoZHVyYXRpb24pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgICQkJDEodGhpcykub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICBVdGlsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKF90aGlzKTtcbiAgICAgIH1cbiAgICB9LCBkdXJhdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpIHtcbiAgICB0cmFuc2l0aW9uID0gdHJhbnNpdGlvbkVuZFRlc3QoKTtcbiAgICAkJCQxLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZEVtdWxhdG9yO1xuXG4gICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkpIHtcbiAgICAgICQkJDEuZXZlbnQuc3BlY2lhbFtVdGlsLlRSQU5TSVRJT05fRU5EXSA9IGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlc2NhcGVJZChzZWxlY3Rvcikge1xuICAgIC8vIFdlIGVzY2FwZSBJRHMgaW4gY2FzZSBvZiBzcGVjaWFsIHNlbGVjdG9ycyAoc2VsZWN0b3IgPSAnI215SWQ6c29tZXRoaW5nJylcbiAgICAvLyAkLmVzY2FwZVNlbGVjdG9yIGRvZXMgbm90IGV4aXN0IGluIGpRdWVyeSA8IDNcbiAgICBzZWxlY3RvciA9IHR5cGVvZiAkJCQxLmVzY2FwZVNlbGVjdG9yID09PSAnZnVuY3Rpb24nID8gJCQkMS5lc2NhcGVTZWxlY3RvcihzZWxlY3Rvcikuc3Vic3RyKDEpIDogc2VsZWN0b3IucmVwbGFjZSgvKDp8XFwufFxcW3xcXF18LHw9fEApL2csICdcXFxcJDEnKTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH1cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIFB1YmxpYyBVdGlsIEFwaVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gIHZhciBVdGlsID0ge1xuICAgIFRSQU5TSVRJT05fRU5EOiAnYnNUcmFuc2l0aW9uRW5kJyxcbiAgICBnZXRVSUQ6IGZ1bmN0aW9uIGdldFVJRChwcmVmaXgpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgICAgcHJlZml4ICs9IH5+KE1hdGgucmFuZG9tKCkgKiBNQVhfVUlEKTsgLy8gXCJ+flwiIGFjdHMgbGlrZSBhIGZhc3RlciBNYXRoLmZsb29yKCkgaGVyZVxuICAgICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSk7XG5cbiAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgfSxcbiAgICBnZXRTZWxlY3RvckZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldCcpO1xuXG4gICAgICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSAnIycpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpIHx8ICcnO1xuICAgICAgfSAvLyBJZiBpdCdzIGFuIElEXG5cblxuICAgICAgaWYgKHNlbGVjdG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICAgIHNlbGVjdG9yID0gZXNjYXBlSWQoc2VsZWN0b3IpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgJHNlbGVjdG9yID0gJCQkMShkb2N1bWVudCkuZmluZChzZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiAkc2VsZWN0b3IubGVuZ3RoID4gMCA/IHNlbGVjdG9yIDogbnVsbDtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlZmxvdzogZnVuY3Rpb24gcmVmbG93KGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB9LFxuICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmlnZ2VyVHJhbnNpdGlvbkVuZChlbGVtZW50KSB7XG4gICAgICAkJCQxKGVsZW1lbnQpLnRyaWdnZXIodHJhbnNpdGlvbi5lbmQpO1xuICAgIH0sXG4gICAgc3VwcG9ydHNUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBzdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbih0cmFuc2l0aW9uKTtcbiAgICB9LFxuICAgIGlzRWxlbWVudDogZnVuY3Rpb24gaXNFbGVtZW50KG9iaikge1xuICAgICAgcmV0dXJuIChvYmpbMF0gfHwgb2JqKS5ub2RlVHlwZTtcbiAgICB9LFxuICAgIHR5cGVDaGVja0NvbmZpZzogZnVuY3Rpb24gdHlwZUNoZWNrQ29uZmlnKGNvbXBvbmVudE5hbWUsIGNvbmZpZywgY29uZmlnVHlwZXMpIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGNvbmZpZ1R5cGVzKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29uZmlnVHlwZXMsIHByb3BlcnR5KSkge1xuICAgICAgICAgIHZhciBleHBlY3RlZFR5cGVzID0gY29uZmlnVHlwZXNbcHJvcGVydHldO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbmZpZ1twcm9wZXJ0eV07XG4gICAgICAgICAgdmFyIHZhbHVlVHlwZSA9IHZhbHVlICYmIFV0aWwuaXNFbGVtZW50KHZhbHVlKSA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpICsgXCI6IFwiICsgKFwiT3B0aW9uIFxcXCJcIiArIHByb3BlcnR5ICsgXCJcXFwiIHByb3ZpZGVkIHR5cGUgXFxcIlwiICsgdmFsdWVUeXBlICsgXCJcXFwiIFwiKSArIChcImJ1dCBleHBlY3RlZCB0eXBlIFxcXCJcIiArIGV4cGVjdGVkVHlwZXMgKyBcIlxcXCIuXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCk7XG4gIHJldHVybiBVdGlsO1xufSgkKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjApOiBhbGVydC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIEFsZXJ0ID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgTkFNRSA9ICdhbGVydCc7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmFsZXJ0JztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07XG4gIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgRElTTUlTUzogJ1tkYXRhLWRpc21pc3M9XCJhbGVydFwiXSdcbiAgfTtcbiAgdmFyIEV2ZW50ID0ge1xuICAgIENMT1NFOiBcImNsb3NlXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xPU0VEOiBcImNsb3NlZFwiICsgRVZFTlRfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBBTEVSVDogJ2FsZXJ0JyxcbiAgICBGQURFOiAnZmFkZScsXG4gICAgU0hPVzogJ3Nob3cnXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIEFsZXJ0ID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQWxlcnQoZWxlbWVudCkge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBBbGVydC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8uY2xvc2UgPSBmdW5jdGlvbiBjbG9zZShlbGVtZW50KSB7XG4gICAgICBlbGVtZW50ID0gZWxlbWVudCB8fCB0aGlzLl9lbGVtZW50O1xuXG4gICAgICB2YXIgcm9vdEVsZW1lbnQgPSB0aGlzLl9nZXRSb290RWxlbWVudChlbGVtZW50KTtcblxuICAgICAgdmFyIGN1c3RvbUV2ZW50ID0gdGhpcy5fdHJpZ2dlckNsb3NlRXZlbnQocm9vdEVsZW1lbnQpO1xuXG4gICAgICBpZiAoY3VzdG9tRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZW1vdmVFbGVtZW50KHJvb3RFbGVtZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgX3Byb3RvLl9nZXRSb290RWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRSb290RWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB2YXIgcGFyZW50ID0gZmFsc2U7XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBwYXJlbnQgPSAkJCQxKHNlbGVjdG9yKVswXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50ID0gJCQkMShlbGVtZW50KS5jbG9zZXN0KFwiLlwiICsgQ2xhc3NOYW1lLkFMRVJUKVswXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl90cmlnZ2VyQ2xvc2VFdmVudCA9IGZ1bmN0aW9uIF90cmlnZ2VyQ2xvc2VFdmVudChlbGVtZW50KSB7XG4gICAgICB2YXIgY2xvc2VFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuQ0xPU0UpO1xuICAgICAgJCQkMShlbGVtZW50KS50cmlnZ2VyKGNsb3NlRXZlbnQpO1xuICAgICAgcmV0dXJuIGNsb3NlRXZlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fcmVtb3ZlRWxlbWVudCA9IGZ1bmN0aW9uIF9yZW1vdmVFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICQkJDEoZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICBpZiAoIVV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgfHwgISQkJDEoZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCQkMShlbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCwgZXZlbnQpO1xuICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgfTtcblxuICAgIF9wcm90by5fZGVzdHJveUVsZW1lbnQgPSBmdW5jdGlvbiBfZGVzdHJveUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgJCQkMShlbGVtZW50KS5kZXRhY2goKS50cmlnZ2VyKEV2ZW50LkNMT1NFRCkucmVtb3ZlKCk7XG4gICAgfTsgLy8gU3RhdGljXG5cblxuICAgIEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWxlbWVudCA9ICQkJDEodGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBBbGVydCh0aGlzKTtcbiAgICAgICAgICAkZWxlbWVudC5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcgPT09ICdjbG9zZScpIHtcbiAgICAgICAgICBkYXRhW2NvbmZpZ10odGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBBbGVydC5faGFuZGxlRGlzbWlzcyA9IGZ1bmN0aW9uIF9oYW5kbGVEaXNtaXNzKGFsZXJ0SW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFsZXJ0SW5zdGFuY2UuY2xvc2UodGhpcyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQWxlcnQsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gQWxlcnQ7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRElTTUlTUywgQWxlcnQuX2hhbmRsZURpc21pc3MobmV3IEFsZXJ0KCkpKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQkJDEuZm5bTkFNRV0gPSBBbGVydC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQWxlcnQ7XG5cbiAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIEFsZXJ0O1xufSgkKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjApOiBidXR0b24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBCdXR0b24gPSBmdW5jdGlvbiAoJCQkMSkge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIHZhciBOQU1FID0gJ2J1dHRvbic7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmJ1dHRvbic7XG4gIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgQlVUVE9OOiAnYnRuJyxcbiAgICBGT0NVUzogJ2ZvY3VzJ1xuICB9O1xuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgREFUQV9UT0dHTEVfQ0FSUk9UOiAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJyxcbiAgICBJTlBVVDogJ2lucHV0JyxcbiAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcbiAgICBCVVRUT046ICcuYnRuJ1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcbiAgICBGT0NVU19CTFVSX0RBVEFfQVBJOiBcImZvY3VzXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVkgKyBcIiBcIiArIChcImJsdXJcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSlcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgQnV0dG9uID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnV0dG9uKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gQnV0dG9uLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICB2YXIgdHJpZ2dlckNoYW5nZUV2ZW50ID0gdHJ1ZTtcbiAgICAgIHZhciBhZGRBcmlhUHJlc3NlZCA9IHRydWU7XG4gICAgICB2YXIgcm9vdEVsZW1lbnQgPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuREFUQV9UT0dHTEUpWzBdO1xuXG4gICAgICBpZiAocm9vdEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gJCQkMSh0aGlzLl9lbGVtZW50KS5maW5kKFNlbGVjdG9yLklOUFVUKVswXTtcblxuICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoZWNrZWQgJiYgJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKSkge1xuICAgICAgICAgICAgICB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gJCQkMShyb290RWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkUpWzBdO1xuXG4gICAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgJCQkMShhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgcm9vdEVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IGlucHV0LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSB8fCByb290RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gISQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgICAkJCQxKGlucHV0KS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgICAgIGFkZEFyaWFQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFkZEFyaWFQcmVzc2VkKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCAhJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBCdXR0b24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMpO1xuICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnID09PSAndG9nZ2xlJykge1xuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKEJ1dHRvbiwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBCdXR0b247XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEVfQ0FSUk9ULCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBidXR0b24gPSBldmVudC50YXJnZXQ7XG5cbiAgICBpZiAoISQkJDEoYnV0dG9uKS5oYXNDbGFzcyhDbGFzc05hbWUuQlVUVE9OKSkge1xuICAgICAgYnV0dG9uID0gJCQkMShidXR0b24pLmNsb3Nlc3QoU2VsZWN0b3IuQlVUVE9OKTtcbiAgICB9XG5cbiAgICBCdXR0b24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCQkJDEoYnV0dG9uKSwgJ3RvZ2dsZScpO1xuICB9KS5vbihFdmVudC5GT0NVU19CTFVSX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRV9DQVJST1QsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBidXR0b24gPSAkJCQxKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pWzBdO1xuICAgICQkJDEoYnV0dG9uKS50b2dnbGVDbGFzcyhDbGFzc05hbWUuRk9DVVMsIC9eZm9jdXMoaW4pPyQvLnRlc3QoZXZlbnQudHlwZSkpO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQkJDEuZm5bTkFNRV0gPSBCdXR0b24uX2pRdWVyeUludGVyZmFjZTtcbiAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IEJ1dHRvbjtcblxuICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIEJ1dHRvbjtcbn0oJCk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMC4wKTogY2Fyb3VzZWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBDYXJvdXNlbCA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgdmFyIE5BTUUgPSAnY2Fyb3VzZWwnO1xuICB2YXIgVkVSU0lPTiA9ICc0LjAuMCc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5jYXJvdXNlbCc7XG4gIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICB2YXIgVFJBTlNJVElPTl9EVVJBVElPTiA9IDYwMDtcbiAgdmFyIEFSUk9XX0xFRlRfS0VZQ09ERSA9IDM3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBsZWZ0IGFycm93IGtleVxuXG4gIHZhciBBUlJPV19SSUdIVF9LRVlDT0RFID0gMzk7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHJpZ2h0IGFycm93IGtleVxuXG4gIHZhciBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUID0gNTAwOyAvLyBUaW1lIGZvciBtb3VzZSBjb21wYXQgZXZlbnRzIHRvIGZpcmUgYWZ0ZXIgdG91Y2hcblxuICB2YXIgRGVmYXVsdCA9IHtcbiAgICBpbnRlcnZhbDogNTAwMCxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBzbGlkZTogZmFsc2UsXG4gICAgcGF1c2U6ICdob3ZlcicsXG4gICAgd3JhcDogdHJ1ZVxuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgaW50ZXJ2YWw6ICcobnVtYmVyfGJvb2xlYW4pJyxcbiAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICAgIHNsaWRlOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gICAgcGF1c2U6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgICB3cmFwOiAnYm9vbGVhbidcbiAgfTtcbiAgdmFyIERpcmVjdGlvbiA9IHtcbiAgICBORVhUOiAnbmV4dCcsXG4gICAgUFJFVjogJ3ByZXYnLFxuICAgIExFRlQ6ICdsZWZ0JyxcbiAgICBSSUdIVDogJ3JpZ2h0J1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgU0xJREU6IFwic2xpZGVcIiArIEVWRU5UX0tFWSxcbiAgICBTTElEOiBcInNsaWRcIiArIEVWRU5UX0tFWSxcbiAgICBLRVlET1dOOiBcImtleWRvd25cIiArIEVWRU5UX0tFWSxcbiAgICBNT1VTRUVOVEVSOiBcIm1vdXNlZW50ZXJcIiArIEVWRU5UX0tFWSxcbiAgICBNT1VTRUxFQVZFOiBcIm1vdXNlbGVhdmVcIiArIEVWRU5UX0tFWSxcbiAgICBUT1VDSEVORDogXCJ0b3VjaGVuZFwiICsgRVZFTlRfS0VZLFxuICAgIExPQURfREFUQV9BUEk6IFwibG9hZFwiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBDQVJPVVNFTDogJ2Nhcm91c2VsJyxcbiAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgIFNMSURFOiAnc2xpZGUnLFxuICAgIFJJR0hUOiAnY2Fyb3VzZWwtaXRlbS1yaWdodCcsXG4gICAgTEVGVDogJ2Nhcm91c2VsLWl0ZW0tbGVmdCcsXG4gICAgTkVYVDogJ2Nhcm91c2VsLWl0ZW0tbmV4dCcsXG4gICAgUFJFVjogJ2Nhcm91c2VsLWl0ZW0tcHJldicsXG4gICAgSVRFTTogJ2Nhcm91c2VsLWl0ZW0nXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcbiAgICBBQ1RJVkVfSVRFTTogJy5hY3RpdmUuY2Fyb3VzZWwtaXRlbScsXG4gICAgSVRFTTogJy5jYXJvdXNlbC1pdGVtJyxcbiAgICBORVhUX1BSRVY6ICcuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgICBJTkRJQ0FUT1JTOiAnLmNhcm91c2VsLWluZGljYXRvcnMnLFxuICAgIERBVEFfU0xJREU6ICdbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXScsXG4gICAgREFUQV9SSURFOiAnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBDYXJvdXNlbCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhcm91c2VsKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnRvdWNoVGltZW91dCA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSAkJCQxKGVsZW1lbnQpWzBdO1xuICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuSU5ESUNBVE9SUylbMF07XG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBDYXJvdXNlbC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8ubmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICB0aGlzLl9zbGlkZShEaXJlY3Rpb24uTkVYVCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5uZXh0V2hlblZpc2libGUgPSBmdW5jdGlvbiBuZXh0V2hlblZpc2libGUoKSB7XG4gICAgICAvLyBEb24ndCBjYWxsIG5leHQgd2hlbiB0aGUgcGFnZSBpc24ndCB2aXNpYmxlXG4gICAgICAvLyBvciB0aGUgY2Fyb3VzZWwgb3IgaXRzIHBhcmVudCBpc24ndCB2aXNpYmxlXG4gICAgICBpZiAoIWRvY3VtZW50LmhpZGRlbiAmJiAkJCQxKHRoaXMuX2VsZW1lbnQpLmlzKCc6dmlzaWJsZScpICYmICQkJDEodGhpcy5fZWxlbWVudCkuY3NzKCd2aXNpYmlsaXR5JykgIT09ICdoaWRkZW4nKSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucHJldiA9IGZ1bmN0aW9uIHByZXYoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICB0aGlzLl9zbGlkZShEaXJlY3Rpb24uUFJFVik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5wYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKGV2ZW50KSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCQkJDEodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5ORVhUX1BSRVYpWzBdICYmIFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgdGhpcy5jeWNsZSh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgfTtcblxuICAgIF9wcm90by5jeWNsZSA9IGZ1bmN0aW9uIGN5Y2xlKGV2ZW50KSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IHNldEludGVydmFsKChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZCh0aGlzKSwgdGhpcy5fY29uZmlnLmludGVydmFsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnRvID0gZnVuY3Rpb24gdG8oaW5kZXgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFX0lURU0pWzBdO1xuXG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIGlmIChpbmRleCA+IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEgfHwgaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uZShFdmVudC5TTElELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnRvKGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgIHRoaXMuY3ljbGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlyZWN0aW9uID0gaW5kZXggPiBhY3RpdmVJbmRleCA/IERpcmVjdGlvbi5ORVhUIDogRGlyZWN0aW9uLlBSRVY7XG5cbiAgICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiwgdGhpcy5faXRlbXNbaW5kZXhdKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfS0VZKTtcbiAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IG51bGw7XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfZXh0ZW5kcyh7fSwgRGVmYXVsdCwgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuS0VZRE9XTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5fa2V5ZG93bihldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInKSB7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuTU9VU0VFTlRFUiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5wYXVzZShldmVudCk7XG4gICAgICAgIH0pLm9uKEV2ZW50Lk1PVVNFTEVBVkUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuY3ljbGUoZXZlbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgLy8gSWYgaXQncyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlLCBtb3VzZWVudGVyL2xlYXZlIGFyZSBmaXJlZCBhc1xuICAgICAgICAgIC8vIHBhcnQgb2YgdGhlIG1vdXNlIGNvbXBhdGliaWxpdHkgZXZlbnRzIG9uIGZpcnN0IHRhcCAtIHRoZSBjYXJvdXNlbFxuICAgICAgICAgIC8vIHdvdWxkIHN0b3AgY3ljbGluZyB1bnRpbCB1c2VyIHRhcHBlZCBvdXQgb2YgaXQ7XG4gICAgICAgICAgLy8gaGVyZSwgd2UgbGlzdGVuIGZvciB0b3VjaGVuZCwgZXhwbGljaXRseSBwYXVzZSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAvLyAoYXMgaWYgaXQncyB0aGUgc2Vjb25kIHRpbWUgd2UgdGFwIG9uIGl0LCBtb3VzZWVudGVyIGNvbXBhdCBldmVudFxuICAgICAgICAgIC8vIGlzIE5PVCBmaXJlZCkgYW5kIGFmdGVyIGEgdGltZW91dCAodG8gYWxsb3cgZm9yIG1vdXNlIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAvLyBldmVudHMgdG8gZmlyZSkgd2UgZXhwbGljaXRseSByZXN0YXJ0IGN5Y2xpbmdcbiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LlRPVUNIRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczIucGF1c2UoKTtcblxuICAgICAgICAgICAgaWYgKF90aGlzMi50b3VjaFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMi50b3VjaFRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpczIudG91Y2hUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5jeWNsZShldmVudCk7XG4gICAgICAgICAgICB9LCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUICsgX3RoaXMyLl9jb25maWcuaW50ZXJ2YWwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fa2V5ZG93biA9IGZ1bmN0aW9uIF9rZXlkb3duKGV2ZW50KSB7XG4gICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGV2ZW50LndoaWNoKSB7XG4gICAgICAgIGNhc2UgQVJST1dfTEVGVF9LRVlDT0RFOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5wcmV2KCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBBUlJPV19SSUdIVF9LRVlDT0RFOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRJdGVtSW5kZXggPSBmdW5jdGlvbiBfZ2V0SXRlbUluZGV4KGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2l0ZW1zID0gJCQkMS5tYWtlQXJyYXkoJCQkMShlbGVtZW50KS5wYXJlbnQoKS5maW5kKFNlbGVjdG9yLklURU0pKTtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVtcy5pbmRleE9mKGVsZW1lbnQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldEl0ZW1CeURpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KSB7XG4gICAgICB2YXIgaXNOZXh0RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTkVYVDtcbiAgICAgIHZhciBpc1ByZXZEaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWO1xuXG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIHZhciBsYXN0SXRlbUluZGV4ID0gdGhpcy5faXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpc0dvaW5nVG9XcmFwID0gaXNQcmV2RGlyZWN0aW9uICYmIGFjdGl2ZUluZGV4ID09PSAwIHx8IGlzTmV4dERpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gbGFzdEl0ZW1JbmRleDtcblxuICAgICAgaWYgKGlzR29pbmdUb1dyYXAgJiYgIXRoaXMuX2NvbmZpZy53cmFwKSB7XG4gICAgICAgIHJldHVybiBhY3RpdmVFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVsdGEgPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWID8gLTEgOiAxO1xuICAgICAgdmFyIGl0ZW1JbmRleCA9IChhY3RpdmVJbmRleCArIGRlbHRhKSAlIHRoaXMuX2l0ZW1zLmxlbmd0aDtcbiAgICAgIHJldHVybiBpdGVtSW5kZXggPT09IC0xID8gdGhpcy5faXRlbXNbdGhpcy5faXRlbXMubGVuZ3RoIC0gMV0gOiB0aGlzLl9pdGVtc1tpdGVtSW5kZXhdO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3RyaWdnZXJTbGlkZUV2ZW50ID0gZnVuY3Rpb24gX3RyaWdnZXJTbGlkZUV2ZW50KHJlbGF0ZWRUYXJnZXQsIGV2ZW50RGlyZWN0aW9uTmFtZSkge1xuICAgICAgdmFyIHRhcmdldEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgICB2YXIgZnJvbUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KCQkJDEodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkVfSVRFTSlbMF0pO1xuXG4gICAgICB2YXIgc2xpZGVFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0xJREUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGZyb21JbmRleCxcbiAgICAgICAgdG86IHRhcmdldEluZGV4XG4gICAgICB9KTtcbiAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkZUV2ZW50KTtcbiAgICAgIHJldHVybiBzbGlkZUV2ZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQgPSBmdW5jdGlvbiBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgICAgJCQkMSh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuXG4gICAgICAgIHZhciBuZXh0SW5kaWNhdG9yID0gdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQuY2hpbGRyZW5bdGhpcy5fZ2V0SXRlbUluZGV4KGVsZW1lbnQpXTtcblxuICAgICAgICBpZiAobmV4dEluZGljYXRvcikge1xuICAgICAgICAgICQkJDEobmV4dEluZGljYXRvcikuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zbGlkZSA9IGZ1bmN0aW9uIF9zbGlkZShkaXJlY3Rpb24sIGVsZW1lbnQpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgYWN0aXZlRWxlbWVudCA9ICQkJDEodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkVfSVRFTSlbMF07XG5cbiAgICAgIHZhciBhY3RpdmVFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIHZhciBuZXh0RWxlbWVudCA9IGVsZW1lbnQgfHwgYWN0aXZlRWxlbWVudCAmJiB0aGlzLl9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KTtcblxuICAgICAgdmFyIG5leHRFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgobmV4dEVsZW1lbnQpO1xuXG4gICAgICB2YXIgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7XG4gICAgICB2YXIgZGlyZWN0aW9uYWxDbGFzc05hbWU7XG4gICAgICB2YXIgb3JkZXJDbGFzc05hbWU7XG4gICAgICB2YXIgZXZlbnREaXJlY3Rpb25OYW1lO1xuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTkVYVCkge1xuICAgICAgICBkaXJlY3Rpb25hbENsYXNzTmFtZSA9IENsYXNzTmFtZS5MRUZUO1xuICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5ORVhUO1xuICAgICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBEaXJlY3Rpb24uTEVGVDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlJJR0hUO1xuICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5QUkVWO1xuICAgICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBEaXJlY3Rpb24uUklHSFQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0RWxlbWVudCAmJiAkJCQxKG5leHRFbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKSkge1xuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2xpZGVFdmVudCA9IHRoaXMuX3RyaWdnZXJTbGlkZUV2ZW50KG5leHRFbGVtZW50LCBldmVudERpcmVjdGlvbk5hbWUpO1xuXG4gICAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgICAgLy8gU29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNTbGlkaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnQpO1xuXG4gICAgICB2YXIgc2xpZEV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TTElELCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IG5leHRFbGVtZW50LFxuICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgICAgZnJvbTogYWN0aXZlRWxlbWVudEluZGV4LFxuICAgICAgICB0bzogbmV4dEVsZW1lbnRJbmRleFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNMSURFKSkge1xuICAgICAgICAkJCQxKG5leHRFbGVtZW50KS5hZGRDbGFzcyhvcmRlckNsYXNzTmFtZSk7XG4gICAgICAgIFV0aWwucmVmbG93KG5leHRFbGVtZW50KTtcbiAgICAgICAgJCQkMShhY3RpdmVFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgICQkJDEobmV4dEVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgJCQkMShhY3RpdmVFbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQkJDEobmV4dEVsZW1lbnQpLnJlbW92ZUNsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lICsgXCIgXCIgKyBvcmRlckNsYXNzTmFtZSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgJCQkMShhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFICsgXCIgXCIgKyBvcmRlckNsYXNzTmFtZSArIFwiIFwiICsgZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICAgIF90aGlzMy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJCQkMShfdGhpczMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkJCQxKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAkJCQxKG5leHRFbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICAgIHRoaXMuY3ljbGUoKTtcbiAgICAgIH1cbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gX2V4dGVuZHMoe30sIERlZmF1bHQsICQkJDEodGhpcykuZGF0YSgpKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBfY29uZmlnID0gX2V4dGVuZHMoe30sIF9jb25maWcsIGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWN0aW9uID0gdHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycgPyBjb25maWcgOiBfY29uZmlnLnNsaWRlO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQ2Fyb3VzZWwodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGRhdGEudG8oY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVthY3Rpb25dID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBhY3Rpb24gKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVthY3Rpb25dKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoX2NvbmZpZy5pbnRlcnZhbCkge1xuICAgICAgICAgIGRhdGEucGF1c2UoKTtcbiAgICAgICAgICBkYXRhLmN5Y2xlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5fZGF0YUFwaUNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIF9kYXRhQXBpQ2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0ID0gJCQkMShzZWxlY3RvcilbMF07XG5cbiAgICAgIGlmICghdGFyZ2V0IHx8ICEkJCQxKHRhcmdldCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkNBUk9VU0VMKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjb25maWcgPSBfZXh0ZW5kcyh7fSwgJCQkMSh0YXJnZXQpLmRhdGEoKSwgJCQkMSh0aGlzKS5kYXRhKCkpO1xuICAgICAgdmFyIHNsaWRlSW5kZXggPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZS10bycpO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICBjb25maWcuaW50ZXJ2YWwgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQkJDEodGFyZ2V0KSwgY29uZmlnKTtcblxuICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICAgJCQkMSh0YXJnZXQpLmRhdGEoREFUQV9LRVkpLnRvKHNsaWRlSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBDYXJvdXNlbDtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1NMSURFLCBDYXJvdXNlbC5fZGF0YUFwaUNsaWNrSGFuZGxlcik7XG4gICQkJDEod2luZG93KS5vbihFdmVudC5MT0FEX0RBVEFfQVBJLCBmdW5jdGlvbiAoKSB7XG4gICAgJCQkMShTZWxlY3Rvci5EQVRBX1JJREUpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRjYXJvdXNlbCA9ICQkJDEodGhpcyk7XG5cbiAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpO1xuICAgIH0pO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQkJDEuZm5bTkFNRV0gPSBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQ2Fyb3VzZWw7XG5cbiAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIENhcm91c2VsO1xufSgkKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjApOiBjb2xsYXBzZS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgTkFNRSA9ICdjb2xsYXBzZSc7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmNvbGxhcHNlJztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07XG4gIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gNjAwO1xuICB2YXIgRGVmYXVsdCA9IHtcbiAgICB0b2dnbGU6IHRydWUsXG4gICAgcGFyZW50OiAnJ1xuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgdG9nZ2xlOiAnYm9vbGVhbicsXG4gICAgcGFyZW50OiAnKHN0cmluZ3xlbGVtZW50KSdcbiAgfTtcbiAgdmFyIEV2ZW50ID0ge1xuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgQ09MTEFQU0U6ICdjb2xsYXBzZScsXG4gICAgQ09MTEFQU0lORzogJ2NvbGxhcHNpbmcnLFxuICAgIENPTExBUFNFRDogJ2NvbGxhcHNlZCdcbiAgfTtcbiAgdmFyIERpbWVuc2lvbiA9IHtcbiAgICBXSURUSDogJ3dpZHRoJyxcbiAgICBIRUlHSFQ6ICdoZWlnaHQnXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBBQ1RJVkVTOiAnLnNob3csIC5jb2xsYXBzaW5nJyxcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBDb2xsYXBzZSA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbGxhcHNlKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fdHJpZ2dlckFycmF5ID0gJCQkMS5tYWtlQXJyYXkoJCQkMShcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtocmVmPVxcXCIjXCIgKyBlbGVtZW50LmlkICsgXCJcXFwiXSxcIiArIChcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtkYXRhLXRhcmdldD1cXFwiI1wiICsgZWxlbWVudC5pZCArIFwiXFxcIl1cIikpKTtcbiAgICAgIHZhciB0YWJUb2dnbGVzID0gJCQkMShTZWxlY3Rvci5EQVRBX1RPR0dMRSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFiVG9nZ2xlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZWxlbSA9IHRhYlRvZ2dsZXNbaV07XG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtKTtcblxuICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwgJiYgJCQkMShzZWxlY3RvcikuZmlsdGVyKGVsZW1lbnQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuXG4gICAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZWxlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudCA/IHRoaXMuX2dldFBhcmVudCgpIDogbnVsbDtcblxuICAgICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl90cmlnZ2VyQXJyYXkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xuICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgfVxuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gQ29sbGFwc2UucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICgkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjdGl2ZXM7XG4gICAgICB2YXIgYWN0aXZlc0RhdGE7XG5cbiAgICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcbiAgICAgICAgYWN0aXZlcyA9ICQkJDEubWFrZUFycmF5KCQkJDEodGhpcy5fcGFyZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRVMpLmZpbHRlcihcIltkYXRhLXBhcmVudD1cXFwiXCIgKyB0aGlzLl9jb25maWcucGFyZW50ICsgXCJcXFwiXVwiKSk7XG5cbiAgICAgICAgaWYgKGFjdGl2ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgYWN0aXZlcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgYWN0aXZlc0RhdGEgPSAkJCQxKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvcikuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgaWYgKGFjdGl2ZXNEYXRhICYmIGFjdGl2ZXNEYXRhLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1cpO1xuICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuXG4gICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmVzKSB7XG4gICAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvciksICdoaWRlJyk7XG5cbiAgICAgICAgaWYgKCFhY3RpdmVzRGF0YSkge1xuICAgICAgICAgICQkJDEoYWN0aXZlcykuZGF0YShEQVRBX0tFWSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xuXG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpO1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gMDtcblxuICAgICAgaWYgKHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICQkJDEodGhpcy5fdHJpZ2dlckFycmF5KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICQkJDEoX3RoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTtcbiAgICAgICAgX3RoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuXG4gICAgICAgIF90aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuXG4gICAgICAgICQkJDEoX3RoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuU0hPV04pO1xuICAgICAgfTtcblxuICAgICAgaWYgKCFVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhcGl0YWxpemVkRGltZW5zaW9uID0gZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSk7XG4gICAgICB2YXIgc2Nyb2xsU2l6ZSA9IFwic2Nyb2xsXCIgKyBjYXBpdGFsaXplZERpbWVuc2lvbjtcbiAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnRbc2Nyb2xsU2l6ZV0gKyBcInB4XCI7XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICEkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5ISURFKTtcbiAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzdGFydEV2ZW50KTtcblxuICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbZGltZW5zaW9uXSArIFwicHhcIjtcbiAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIGlmICh0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciB0cmlnZ2VyID0gdGhpcy5fdHJpZ2dlckFycmF5W2ldO1xuICAgICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0cmlnZ2VyKTtcblxuICAgICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyICRlbGVtID0gJCQkMShzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgIGlmICghJGVsZW0uaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgICAgICQkJDEodHJpZ2dlcikuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCkuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgX3RoaXMyLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuXG4gICAgICAgICQkJDEoX3RoaXMyLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS50cmlnZ2VyKEV2ZW50LkhJRERFTik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJztcblxuICAgICAgaWYgKCFVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0VHJhbnNpdGlvbmluZyA9IGZ1bmN0aW9uIHNldFRyYW5zaXRpb25pbmcoaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBpc1RyYW5zaXRpb25pbmc7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fdHJpZ2dlckFycmF5ID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IG51bGw7XG4gICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfZXh0ZW5kcyh7fSwgRGVmYXVsdCwgY29uZmlnKTtcbiAgICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpOyAvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlc1xuXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24gX2dldERpbWVuc2lvbigpIHtcbiAgICAgIHZhciBoYXNXaWR0aCA9ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoRGltZW5zaW9uLldJRFRIKTtcbiAgICAgIHJldHVybiBoYXNXaWR0aCA/IERpbWVuc2lvbi5XSURUSCA6IERpbWVuc2lvbi5IRUlHSFQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0UGFyZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgcGFyZW50ID0gbnVsbDtcblxuICAgICAgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuX2NvbmZpZy5wYXJlbnQpKSB7XG4gICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnQ7IC8vIEl0J3MgYSBqUXVlcnkgb2JqZWN0XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucGFyZW50LmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50WzBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQgPSAkJCQxKHRoaXMuX2NvbmZpZy5wYXJlbnQpWzBdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VsZWN0b3IgPSBcIltkYXRhLXRvZ2dsZT1cXFwiY29sbGFwc2VcXFwiXVtkYXRhLXBhcmVudD1cXFwiXCIgKyB0aGlzLl9jb25maWcucGFyZW50ICsgXCJcXFwiXVwiO1xuICAgICAgJCQkMShwYXJlbnQpLmZpbmQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcbiAgICAgICAgX3RoaXMzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpLCBbZWxlbWVudF0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uIF9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoZWxlbWVudCwgdHJpZ2dlckFycmF5KSB7XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgaXNPcGVuID0gJCQkMShlbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgaWYgKHRyaWdnZXJBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgJCQkMSh0cmlnZ2VyQXJyYXkpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQsICFpc09wZW4pLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTsgLy8gU3RhdGljXG5cblxuICAgIENvbGxhcHNlLl9nZXRUYXJnZXRGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICByZXR1cm4gc2VsZWN0b3IgPyAkJCQxKHNlbGVjdG9yKVswXSA6IG51bGw7XG4gICAgfTtcblxuICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkdGhpcyA9ICQkJDEodGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSBfZXh0ZW5kcyh7fSwgRGVmYXVsdCwgJHRoaXMuZGF0YSgpLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcpO1xuXG4gICAgICAgIGlmICghZGF0YSAmJiBfY29uZmlnLnRvZ2dsZSAmJiAvc2hvd3xoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkdGhpcy5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ29sbGFwc2UsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBDb2xsYXBzZTtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gcHJldmVudERlZmF1bHQgb25seSBmb3IgPGE+IGVsZW1lbnRzICh3aGljaCBjaGFuZ2UgdGhlIFVSTCkgbm90IGluc2lkZSB0aGUgY29sbGFwc2libGUgZWxlbWVudFxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LnRhZ05hbWUgPT09ICdBJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB2YXIgJHRyaWdnZXIgPSAkJCQxKHRoaXMpO1xuICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcbiAgICAkJCQxKHNlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCQkMSh0aGlzKTtcbiAgICAgIHZhciBkYXRhID0gJHRhcmdldC5kYXRhKERBVEFfS0VZKTtcbiAgICAgIHZhciBjb25maWcgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdHJpZ2dlci5kYXRhKCk7XG5cbiAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkdGFyZ2V0LCBjb25maWcpO1xuICAgIH0pO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQkJDEuZm5bTkFNRV0gPSBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlO1xuICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQ29sbGFwc2U7XG5cbiAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIENvbGxhcHNlO1xufSgkKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjApOiBkcm9wZG93bi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgTkFNRSA9ICdkcm9wZG93bic7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmRyb3Bkb3duJztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07XG4gIHZhciBFU0NBUEVfS0VZQ09ERSA9IDI3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5XG5cbiAgdmFyIFNQQUNFX0tFWUNPREUgPSAzMjsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3Igc3BhY2Uga2V5XG5cbiAgdmFyIFRBQl9LRVlDT0RFID0gOTsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgdGFiIGtleVxuXG4gIHZhciBBUlJPV19VUF9LRVlDT0RFID0gMzg7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHVwIGFycm93IGtleVxuXG4gIHZhciBBUlJPV19ET1dOX0tFWUNPREUgPSA0MDsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgZG93biBhcnJvdyBrZXlcblxuICB2YXIgUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIID0gMzsgLy8gTW91c2VFdmVudC53aGljaCB2YWx1ZSBmb3IgdGhlIHJpZ2h0IGJ1dHRvbiAoYXNzdW1pbmcgYSByaWdodC1oYW5kZWQgbW91c2UpXG5cbiAgdmFyIFJFR0VYUF9LRVlET1dOID0gbmV3IFJlZ0V4cChBUlJPV19VUF9LRVlDT0RFICsgXCJ8XCIgKyBBUlJPV19ET1dOX0tFWUNPREUgKyBcInxcIiArIEVTQ0FQRV9LRVlDT0RFKTtcbiAgdmFyIEV2ZW50ID0ge1xuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZLFxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSxcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZLFxuICAgIENMSUNLOiBcImNsaWNrXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcbiAgICBLRVlET1dOX0RBVEFfQVBJOiBcImtleWRvd25cIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcbiAgICBLRVlVUF9EQVRBX0FQSTogXCJrZXl1cFwiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gIH07XG4gIHZhciBDbGFzc05hbWUgPSB7XG4gICAgRElTQUJMRUQ6ICdkaXNhYmxlZCcsXG4gICAgU0hPVzogJ3Nob3cnLFxuICAgIERST1BVUDogJ2Ryb3B1cCcsXG4gICAgRFJPUFJJR0hUOiAnZHJvcHJpZ2h0JyxcbiAgICBEUk9QTEVGVDogJ2Ryb3BsZWZ0JyxcbiAgICBNRU5VUklHSFQ6ICdkcm9wZG93bi1tZW51LXJpZ2h0JyxcbiAgICBNRU5VTEVGVDogJ2Ryb3Bkb3duLW1lbnUtbGVmdCcsXG4gICAgUE9TSVRJT05fU1RBVElDOiAncG9zaXRpb24tc3RhdGljJ1xuICB9O1xuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsXG4gICAgRk9STV9DSElMRDogJy5kcm9wZG93biBmb3JtJyxcbiAgICBNRU5VOiAnLmRyb3Bkb3duLW1lbnUnLFxuICAgIE5BVkJBUl9OQVY6ICcubmF2YmFyLW5hdicsXG4gICAgVklTSUJMRV9JVEVNUzogJy5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpJ1xuICB9O1xuICB2YXIgQXR0YWNobWVudE1hcCA9IHtcbiAgICBUT1A6ICd0b3Atc3RhcnQnLFxuICAgIFRPUEVORDogJ3RvcC1lbmQnLFxuICAgIEJPVFRPTTogJ2JvdHRvbS1zdGFydCcsXG4gICAgQk9UVE9NRU5EOiAnYm90dG9tLWVuZCcsXG4gICAgUklHSFQ6ICdyaWdodC1zdGFydCcsXG4gICAgUklHSFRFTkQ6ICdyaWdodC1lbmQnLFxuICAgIExFRlQ6ICdsZWZ0LXN0YXJ0JyxcbiAgICBMRUZURU5EOiAnbGVmdC1lbmQnXG4gIH07XG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIG9mZnNldDogMCxcbiAgICBmbGlwOiB0cnVlLFxuICAgIGJvdW5kYXJ5OiAnc2Nyb2xsUGFyZW50J1xuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgb2Zmc2V0OiAnKG51bWJlcnxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgICBmbGlwOiAnYm9vbGVhbicsXG4gICAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBEcm9wZG93biA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERyb3Bkb3duKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9tZW51ID0gdGhpcy5fZ2V0TWVudUVsZW1lbnQoKTtcbiAgICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBEcm9wZG93bi5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgdmFyIGlzQWN0aXZlID0gJCQkMSh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIERyb3Bkb3duLl9jbGVhck1lbnVzKCk7XG5cbiAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9O1xuICAgICAgdmFyIHNob3dFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0hPVywgcmVsYXRlZFRhcmdldCk7XG4gICAgICAkJCQxKHBhcmVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRGlzYWJsZSB0b3RhbGx5IFBvcHBlci5qcyBmb3IgRHJvcGRvd24gaW4gTmF2YmFyXG5cblxuICAgICAgaWYgKCF0aGlzLl9pbk5hdmJhcikge1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XG4gICAgICAgICAqIFBvcHBlciAtIGh0dHBzOi8vcG9wcGVyLmpzLm9yZ1xuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwIGRyb3Bkb3duIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7IC8vIEZvciBkcm9wdXAgd2l0aCBhbGlnbm1lbnQgd2UgdXNlIHRoZSBwYXJlbnQgYXMgcG9wcGVyIGNvbnRhaW5lclxuXG4gICAgICAgIGlmICgkJCQxKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BVUCkpIHtcbiAgICAgICAgICBpZiAoJCQkMSh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuTUVOVUxFRlQpIHx8ICQkJDEodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIElmIGJvdW5kYXJ5IGlzIG5vdCBgc2Nyb2xsUGFyZW50YCwgdGhlbiBzZXQgcG9zaXRpb24gdG8gYHN0YXRpY2BcbiAgICAgICAgLy8gdG8gYWxsb3cgdGhlIG1lbnUgdG8gXCJlc2NhcGVcIiB0aGUgc2Nyb2xsIHBhcmVudCdzIGJvdW5kYXJpZXNcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8yNDI1MVxuXG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5ib3VuZGFyeSAhPT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgICAgICAkJCQxKHBhcmVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlBPU0lUSU9OX1NUQVRJQyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wb3BwZXIgPSBuZXcgUG9wcGVyKGVsZW1lbnQsIHRoaXMuX21lbnUsIHRoaXMuX2dldFBvcHBlckNvbmZpZygpKTtcbiAgICAgIH0gLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcblxuXG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICQkJDEocGFyZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVkJBUl9OQVYpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAkJCQxKCdib2R5JykuY2hpbGRyZW4oKS5vbignbW91c2VvdmVyJywgbnVsbCwgJCQkMS5ub29wKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuXG4gICAgICAkJCQxKHRoaXMuX21lbnUpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcbiAgICAgICQkJDEocGFyZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVykudHJpZ2dlcigkJCQxLkV2ZW50KEV2ZW50LlNIT1dOLCByZWxhdGVkVGFyZ2V0KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9tZW51ID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xuXG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgX3Byb3RvLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0ssIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBfdGhpcy50b2dnbGUoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfZXh0ZW5kcyh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LCAkJCQxKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSwgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldE1lbnVFbGVtZW50ID0gZnVuY3Rpb24gX2dldE1lbnVFbGVtZW50KCkge1xuICAgICAgaWYgKCF0aGlzLl9tZW51KSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICAgdGhpcy5fbWVudSA9ICQkJDEocGFyZW50KS5maW5kKFNlbGVjdG9yLk1FTlUpWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fbWVudTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRQbGFjZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGxhY2VtZW50KCkge1xuICAgICAgdmFyICRwYXJlbnREcm9wZG93biA9ICQkJDEodGhpcy5fZWxlbWVudCkucGFyZW50KCk7XG4gICAgICB2YXIgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5CT1RUT007IC8vIEhhbmRsZSBkcm9wdXBcblxuICAgICAgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUFVQKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUDtcblxuICAgICAgICBpZiAoJCQkMSh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuTUVOVVJJR0hUKSkge1xuICAgICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QRU5EO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUFJJR0hUKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlJJR0hUO1xuICAgICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BMRUZUKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkxFRlQ7XG4gICAgICB9IGVsc2UgaWYgKCQkJDEodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5CT1RUT01FTkQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fZGV0ZWN0TmF2YmFyID0gZnVuY3Rpb24gX2RldGVjdE5hdmJhcigpIHtcbiAgICAgIHJldHVybiAkJCQxKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoJy5uYXZiYXInKS5sZW5ndGggPiAwO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFBvcHBlckNvbmZpZyA9IGZ1bmN0aW9uIF9nZXRQb3BwZXJDb25maWcoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIG9mZnNldENvbmYgPSB7fTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcub2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9mZnNldENvbmYuZm4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGRhdGEub2Zmc2V0cyA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMsIF90aGlzMi5fY29uZmlnLm9mZnNldChkYXRhLm9mZnNldHMpIHx8IHt9KTtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZnNldENvbmYub2Zmc2V0ID0gdGhpcy5fY29uZmlnLm9mZnNldDtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvcHBlckNvbmZpZyA9IHtcbiAgICAgICAgcGxhY2VtZW50OiB0aGlzLl9nZXRQbGFjZW1lbnQoKSxcbiAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXRDb25mLFxuICAgICAgICAgIGZsaXA6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuX2NvbmZpZy5mbGlwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gcG9wcGVyQ29uZmlnO1xuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIERyb3Bkb3duLl9jbGVhck1lbnVzID0gZnVuY3Rpb24gX2NsZWFyTWVudXMoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCAmJiAoZXZlbnQud2hpY2ggPT09IFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCB8fCBldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LndoaWNoICE9PSBUQUJfS0VZQ09ERSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdG9nZ2xlcyA9ICQkJDEubWFrZUFycmF5KCQkJDEoU2VsZWN0b3IuREFUQV9UT0dHTEUpKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2dnbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodG9nZ2xlc1tpXSk7XG5cbiAgICAgICAgdmFyIGNvbnRleHQgPSAkJCQxKHRvZ2dsZXNbaV0pLmRhdGEoREFUQV9LRVkpO1xuICAgICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0b2dnbGVzW2ldXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJvcGRvd25NZW51ID0gY29udGV4dC5fbWVudTtcblxuICAgICAgICBpZiAoISQkJDEocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJyAmJiAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSB8fCBldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LndoaWNoID09PSBUQUJfS0VZQ09ERSkgJiYgJCQkMS5jb250YWlucyhwYXJlbnQsIGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBoaWRlRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LkhJREUsIHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICAkJCQxKHBhcmVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuXG5cbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICQkJDEoJ2JvZHknKS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJCQkMS5ub29wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZXNbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICQkJDEoZHJvcGRvd25NZW51KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG4gICAgICAgICQkJDEocGFyZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVykudHJpZ2dlcigkJCQxLkV2ZW50KEV2ZW50LkhJRERFTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHBhcmVudDtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHBhcmVudCA9ICQkJDEoc2VsZWN0b3IpWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50IHx8IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuXG5cbiAgICBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlLZXlkb3duSGFuZGxlcihldmVudCkge1xuICAgICAgLy8gSWYgbm90IGlucHV0L3RleHRhcmVhOlxuICAgICAgLy8gIC0gQW5kIG5vdCBhIGtleSBpbiBSRUdFWFBfS0VZRE9XTiA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAvLyBJZiBpbnB1dC90ZXh0YXJlYTpcbiAgICAgIC8vICAtIElmIHNwYWNlIGtleSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAvLyAgLSBJZiBrZXkgaXMgb3RoZXIgdGhhbiBlc2NhcGVcbiAgICAgIC8vICAgIC0gSWYga2V5IGlzIG5vdCB1cCBvciBkb3duID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgIC8vICAgIC0gSWYgdHJpZ2dlciBpbnNpZGUgdGhlIG1lbnUgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpID8gZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggIT09IEVTQ0FQRV9LRVlDT0RFICYmIChldmVudC53aGljaCAhPT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGV2ZW50LndoaWNoICE9PSBBUlJPV19VUF9LRVlDT0RFIHx8ICQkJDEoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFNlbGVjdG9yLk1FTlUpLmxlbmd0aCkgOiAhUkVHRVhQX0tFWURPV04udGVzdChldmVudC53aGljaCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICQkJDEodGhpcykuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICQkJDEocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIGlmICghaXNBY3RpdmUgJiYgKGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSB8fCBldmVudC53aGljaCAhPT0gU1BBQ0VfS0VZQ09ERSkgfHwgaXNBY3RpdmUgJiYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSB8fCBldmVudC53aGljaCA9PT0gU1BBQ0VfS0VZQ09ERSkpIHtcbiAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSkge1xuICAgICAgICAgIHZhciB0b2dnbGUgPSAkJCQxKHBhcmVudCkuZmluZChTZWxlY3Rvci5EQVRBX1RPR0dMRSlbMF07XG4gICAgICAgICAgJCQkMSh0b2dnbGUpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgIH1cblxuICAgICAgICAkJCQxKHRoaXMpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGl0ZW1zID0gJCQkMShwYXJlbnQpLmZpbmQoU2VsZWN0b3IuVklTSUJMRV9JVEVNUykuZ2V0KCk7XG5cbiAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSBpdGVtcy5pbmRleE9mKGV2ZW50LnRhcmdldCk7XG5cbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfVVBfS0VZQ09ERSAmJiBpbmRleCA+IDApIHtcbiAgICAgICAgLy8gVXBcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgaW5kZXggPCBpdGVtcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIC8vIERvd25cbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGl0ZW1zW2luZGV4XS5mb2N1cygpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoRHJvcGRvd24sIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gRHJvcGRvd247XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IuTUVOVSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEkgKyBcIiBcIiArIEV2ZW50LktFWVVQX0RBVEFfQVBJLCBEcm9wZG93bi5fY2xlYXJNZW51cykub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZS5jYWxsKCQkJDEodGhpcyksICd0b2dnbGUnKTtcbiAgfSkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkZPUk1fQ0hJTEQsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkJCQxLmZuW05BTUVdID0gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZTtcbiAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IERyb3Bkb3duO1xuXG4gICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBEcm9wZG93bjtcbn0oJCwgUG9wcGVyKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjApOiBtb2RhbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIE1vZGFsID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgTkFNRSA9ICdtb2RhbCc7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLm1vZGFsJztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07XG4gIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMzAwO1xuICB2YXIgQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MDtcbiAgdmFyIEVTQ0FQRV9LRVlDT0RFID0gMjc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcblxuICB2YXIgRGVmYXVsdCA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBmb2N1czogdHJ1ZSxcbiAgICBzaG93OiB0cnVlXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBiYWNrZHJvcDogJyhib29sZWFufHN0cmluZyknLFxuICAgIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gICAgZm9jdXM6ICdib29sZWFuJyxcbiAgICBzaG93OiAnYm9vbGVhbidcbiAgfTtcbiAgdmFyIEV2ZW50ID0ge1xuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZLFxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSxcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZLFxuICAgIEZPQ1VTSU46IFwiZm9jdXNpblwiICsgRVZFTlRfS0VZLFxuICAgIFJFU0laRTogXCJyZXNpemVcIiArIEVWRU5UX0tFWSxcbiAgICBDTElDS19ESVNNSVNTOiBcImNsaWNrLmRpc21pc3NcIiArIEVWRU5UX0tFWSxcbiAgICBLRVlET1dOX0RJU01JU1M6IFwia2V5ZG93bi5kaXNtaXNzXCIgKyBFVkVOVF9LRVksXG4gICAgTU9VU0VVUF9ESVNNSVNTOiBcIm1vdXNldXAuZGlzbWlzc1wiICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFRE9XTl9ESVNNSVNTOiBcIm1vdXNlZG93bi5kaXNtaXNzXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIFNDUk9MTEJBUl9NRUFTVVJFUjogJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJyxcbiAgICBCQUNLRFJPUDogJ21vZGFsLWJhY2tkcm9wJyxcbiAgICBPUEVOOiAnbW9kYWwtb3BlbicsXG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93J1xuICB9O1xuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgRElBTE9HOiAnLm1vZGFsLWRpYWxvZycsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsXG4gICAgREFUQV9ESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxcbiAgICBGSVhFRF9DT05URU5UOiAnLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcCcsXG4gICAgU1RJQ0tZX0NPTlRFTlQ6ICcuc3RpY2t5LXRvcCcsXG4gICAgTkFWQkFSX1RPR0dMRVI6ICcubmF2YmFyLXRvZ2dsZXInXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIE1vZGFsID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kYWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fZGlhbG9nID0gJCQkMShlbGVtZW50KS5maW5kKFNlbGVjdG9yLkRJQUxPRylbMF07XG4gICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IGZhbHNlO1xuICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgdGhpcy5fb3JpZ2luYWxCb2R5UGFkZGluZyA9IDA7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IDA7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBNb2RhbC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgfTtcblxuICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdyhyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8IHRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TSE9XLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pO1xuICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlO1xuXG4gICAgICB0aGlzLl9jaGVja1Njcm9sbGJhcigpO1xuXG4gICAgICB0aGlzLl9zZXRTY3JvbGxiYXIoKTtcblxuICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7XG5cbiAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLk9QRU4pO1xuXG4gICAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpO1xuXG4gICAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RJU01JU1MsIFNlbGVjdG9yLkRBVEFfRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5oaWRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgICAgJCQkMSh0aGlzLl9kaWFsb2cpLm9uKEV2ZW50Lk1PVVNFRE9XTl9ESVNNSVNTLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQkJDEoX3RoaXMuX2VsZW1lbnQpLm9uZShFdmVudC5NT1VTRVVQX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmICgkJCQxKGV2ZW50LnRhcmdldCkuaXMoX3RoaXMuX2VsZW1lbnQpKSB7XG4gICAgICAgICAgICBfdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZShldmVudCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpZGVFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuSElERSk7XG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKTtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcblxuICAgICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKTtcblxuICAgICAgJCQkMShkb2N1bWVudCkub2ZmKEV2ZW50LkZPQ1VTSU4pO1xuICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9mZihFdmVudC5DTElDS19ESVNNSVNTKTtcbiAgICAgICQkJDEodGhpcy5fZGlhbG9nKS5vZmYoRXZlbnQuTU9VU0VET1dOX0RJU01JU1MpO1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLl9oaWRlTW9kYWwoZXZlbnQpO1xuICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChUUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2hpZGVNb2RhbCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgJCQkMSh3aW5kb3csIGRvY3VtZW50LCB0aGlzLl9lbGVtZW50LCB0aGlzLl9iYWNrZHJvcCkub2ZmKEVWRU5UX0tFWSk7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9kaWFsb2cgPSBudWxsO1xuICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgdGhpcy5faXNTaG93biA9IG51bGw7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IG51bGw7XG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gbnVsbDtcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhhbmRsZVVwZGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX2FkanVzdERpYWxvZygpO1xuICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX2V4dGVuZHMoe30sIERlZmF1bHQsIGNvbmZpZyk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2hvd0VsZW1lbnQgPSBmdW5jdGlvbiBfc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciB0cmFuc2l0aW9uID0gVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKTtcblxuICAgICAgaWYgKCF0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgfHwgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAvLyBEb24ndCBtb3ZlIG1vZGFsJ3MgRE9NIHBvc2l0aW9uXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnNjcm9sbFRvcCA9IDA7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5mb2N1cykge1xuICAgICAgICB0aGlzLl9lbmZvcmNlRm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3duRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1dOLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gdHJhbnNpdGlvbkNvbXBsZXRlKCkge1xuICAgICAgICBpZiAoX3RoaXMzLl9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgICBfdGhpczMuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICAgICQkJDEoX3RoaXMzLl9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgJCQkMSh0aGlzLl9kaWFsb2cpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCB0cmFuc2l0aW9uQ29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbkNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gX2VuZm9yY2VGb2N1cygpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAkJCQxKGRvY3VtZW50KS5vZmYoRXZlbnQuRk9DVVNJTikgLy8gR3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG4gICAgICAub24oRXZlbnQuRk9DVVNJTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChkb2N1bWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmIF90aGlzNC5fZWxlbWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmICQkJDEoX3RoaXM0Ll9lbGVtZW50KS5oYXMoZXZlbnQudGFyZ2V0KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBfdGhpczQuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0RXNjYXBlRXZlbnQgPSBmdW5jdGlvbiBfc2V0RXNjYXBlRXZlbnQoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuS0VZRE9XTl9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBfdGhpczUuaGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50LktFWURPV05fRElTTUlTUyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0UmVzaXplRXZlbnQgPSBmdW5jdGlvbiBfc2V0UmVzaXplRXZlbnQoKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgJCQkMSh3aW5kb3cpLm9uKEV2ZW50LlJFU0laRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNi5oYW5kbGVVcGRhdGUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQkJDEod2luZG93KS5vZmYoRXZlbnQuUkVTSVpFKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9oaWRlTW9kYWwgPSBmdW5jdGlvbiBfaGlkZU1vZGFsKCkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgICAkJCQxKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5PUEVOKTtcblxuICAgICAgICBfdGhpczcuX3Jlc2V0QWRqdXN0bWVudHMoKTtcblxuICAgICAgICBfdGhpczcuX3Jlc2V0U2Nyb2xsYmFyKCk7XG5cbiAgICAgICAgJCQkMShfdGhpczcuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuSElEREVOKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3JlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gX3JlbW92ZUJhY2tkcm9wKCkge1xuICAgICAgaWYgKHRoaXMuX2JhY2tkcm9wKSB7XG4gICAgICAgICQkJDEodGhpcy5fYmFja2Ryb3ApLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fc2hvd0JhY2tkcm9wID0gZnVuY3Rpb24gX3Nob3dCYWNrZHJvcChjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHZhciBhbmltYXRlID0gJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkgPyBDbGFzc05hbWUuRkFERSA6ICcnO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcuYmFja2Ryb3ApIHtcbiAgICAgICAgdmFyIGRvQW5pbWF0ZSA9IFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgYW5pbWF0ZTtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AuY2xhc3NOYW1lID0gQ2xhc3NOYW1lLkJBQ0tEUk9QO1xuXG4gICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkuYWRkQ2xhc3MoYW5pbWF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAkJCQxKHRoaXMuX2JhY2tkcm9wKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDS19ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoX3RoaXM4Ll9pZ25vcmVCYWNrZHJvcENsaWNrKSB7XG4gICAgICAgICAgICBfdGhpczguX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKF90aGlzOC5fY29uZmlnLmJhY2tkcm9wID09PSAnc3RhdGljJykge1xuICAgICAgICAgICAgX3RoaXM4Ll9lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzOC5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZG9BbmltYXRlKSB7XG4gICAgICAgICAgVXRpbC5yZWZsb3codGhpcy5fYmFja2Ryb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRvQW5pbWF0ZSkge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24gJiYgdGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgIHZhciBjYWxsYmFja1JlbW92ZSA9IGZ1bmN0aW9uIGNhbGxiYWNrUmVtb3ZlKCkge1xuICAgICAgICAgIF90aGlzOC5fcmVtb3ZlQmFja2Ryb3AoKTtcblxuICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKFV0aWwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkgJiYgJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgICAkJCQxKHRoaXMuX2JhY2tkcm9wKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2tSZW1vdmUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKEJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9OyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gdGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbiAgICAvLyB0b2RvIChmYXQpOiB0aGVzZSBzaG91bGQgcHJvYmFibHkgYmUgcmVmYWN0b3JlZCBvdXQgb2YgbW9kYWwuanNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuICAgIF9wcm90by5fYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gX2FkanVzdERpYWxvZygpIHtcbiAgICAgIHZhciBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgIGlmICghdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZXNldEFkanVzdG1lbnRzID0gZnVuY3Rpb24gX3Jlc2V0QWRqdXN0bWVudHMoKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gJyc7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9ICcnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gX2NoZWNrU2Nyb2xsYmFyKCkge1xuICAgICAgdmFyIHJlY3QgPSBkb2N1bWVudC5ib2R5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSByZWN0LmxlZnQgKyByZWN0LnJpZ2h0IDwgd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IHRoaXMuX2dldFNjcm9sbGJhcldpZHRoKCk7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3NldFNjcm9sbGJhcigpIHtcbiAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgLy8gTm90ZTogRE9NTm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlIG9yICcnIGlmIG5vdCBzZXRcbiAgICAgICAgLy8gICB3aGlsZSAkKERPTU5vZGUpLmNzcygncGFkZGluZy1yaWdodCcpIHJldHVybnMgdGhlIGNhbGN1bGF0ZWQgdmFsdWUgb3IgMCBpZiBub3Qgc2V0XG4gICAgICAgIC8vIEFkanVzdCBmaXhlZCBjb250ZW50IHBhZGRpbmdcbiAgICAgICAgJCQkMShTZWxlY3Rvci5GSVhFRF9DT05URU5UKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gJCQkMShlbGVtZW50KVswXS5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJCQkMShlbGVtZW50KS5jc3MoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgICAkJCQxKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIF90aGlzOS5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCIpO1xuICAgICAgICB9KTsgLy8gQWRqdXN0IHN0aWNreSBjb250ZW50IG1hcmdpblxuXG4gICAgICAgICQkJDEoU2VsZWN0b3IuU1RJQ0tZX0NPTlRFTlQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGFjdHVhbE1hcmdpbiA9ICQkJDEoZWxlbWVudClbMF0uc3R5bGUubWFyZ2luUmlnaHQ7XG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRNYXJnaW4gPSAkJCQxKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgICAgJCQkMShlbGVtZW50KS5kYXRhKCdtYXJnaW4tcmlnaHQnLCBhY3R1YWxNYXJnaW4pLmNzcygnbWFyZ2luLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkTWFyZ2luKSAtIF90aGlzOS5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCIpO1xuICAgICAgICB9KTsgLy8gQWRqdXN0IG5hdmJhci10b2dnbGVyIG1hcmdpblxuXG4gICAgICAgICQkJDEoU2VsZWN0b3IuTkFWQkFSX1RPR0dMRVIpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGFjdHVhbE1hcmdpbiA9ICQkJDEoZWxlbWVudClbMF0uc3R5bGUubWFyZ2luUmlnaHQ7XG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRNYXJnaW4gPSAkJCQxKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgICAgJCQkMShlbGVtZW50KS5kYXRhKCdtYXJnaW4tcmlnaHQnLCBhY3R1YWxNYXJnaW4pLmNzcygnbWFyZ2luLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkTWFyZ2luKSArIF90aGlzOS5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCIpO1xuICAgICAgICB9KTsgLy8gQWRqdXN0IGJvZHkgcGFkZGluZ1xuXG4gICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICAgIHZhciBjYWxjdWxhdGVkUGFkZGluZyA9ICQkJDEoJ2JvZHknKS5jc3MoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgJCQkMSgnYm9keScpLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIHRoaXMuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZXNldFNjcm9sbGJhciA9IGZ1bmN0aW9uIF9yZXNldFNjcm9sbGJhcigpIHtcbiAgICAgIC8vIFJlc3RvcmUgZml4ZWQgY29udGVudCBwYWRkaW5nXG4gICAgICAkJCQxKFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBwYWRkaW5nID0gJCQkMShlbGVtZW50KS5kYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYWRkaW5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICQkJDEoZWxlbWVudCkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFkZGluZykucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gUmVzdG9yZSBzdGlja3kgY29udGVudCBhbmQgbmF2YmFyLXRvZ2dsZXIgbWFyZ2luXG5cbiAgICAgICQkJDEoU2VsZWN0b3IuU1RJQ0tZX0NPTlRFTlQgKyBcIiwgXCIgKyBTZWxlY3Rvci5OQVZCQVJfVE9HR0xFUikuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG1hcmdpbiA9ICQkJDEoZWxlbWVudCkuZGF0YSgnbWFyZ2luLXJpZ2h0Jyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBtYXJnaW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgJCQkMShlbGVtZW50KS5jc3MoJ21hcmdpbi1yaWdodCcsIG1hcmdpbikucmVtb3ZlRGF0YSgnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBSZXN0b3JlIGJvZHkgcGFkZGluZ1xuXG4gICAgICB2YXIgcGFkZGluZyA9ICQkJDEoJ2JvZHknKS5kYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcGFkZGluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgJCQkMSgnYm9keScpLmNzcygncGFkZGluZy1yaWdodCcsIHBhZGRpbmcpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRTY3JvbGxiYXJXaWR0aCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxiYXJXaWR0aCgpIHtcbiAgICAgIC8vIHRoeCBkLndhbHNoXG4gICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gQ2xhc3NOYW1lLlNDUk9MTEJBUl9NRUFTVVJFUjtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aDtcbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgTW9kYWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gX2V4dGVuZHMoe30sIE1vZGFsLkRlZmF1bHQsICQkJDEodGhpcykuZGF0YSgpLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgTW9kYWwodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICB9IGVsc2UgaWYgKF9jb25maWcuc2hvdykge1xuICAgICAgICAgIGRhdGEuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhNb2RhbCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIE1vZGFsO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJCQkMShkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0O1xuICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgdGFyZ2V0ID0gJCQkMShzZWxlY3RvcilbMF07XG4gICAgfVxuXG4gICAgdmFyIGNvbmZpZyA9ICQkJDEodGFyZ2V0KS5kYXRhKERBVEFfS0VZKSA/ICd0b2dnbGUnIDogX2V4dGVuZHMoe30sICQkJDEodGFyZ2V0KS5kYXRhKCksICQkJDEodGhpcykuZGF0YSgpKTtcblxuICAgIGlmICh0aGlzLnRhZ05hbWUgPT09ICdBJyB8fCB0aGlzLnRhZ05hbWUgPT09ICdBUkVBJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB2YXIgJHRhcmdldCA9ICQkJDEodGFyZ2V0KS5vbmUoRXZlbnQuU0hPVywgZnVuY3Rpb24gKHNob3dFdmVudCkge1xuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAvLyBPbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJHRhcmdldC5vbmUoRXZlbnQuSElEREVOLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkJCQxKF90aGlzMTApLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgX3RoaXMxMC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKHRhcmdldCksIGNvbmZpZywgdGhpcyk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJCQkMS5mbltOQU1FXSA9IE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBNb2RhbDtcblxuICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gTW9kYWwuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gTW9kYWw7XG59KCQpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMCk6IHRvb2x0aXAuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBUb29sdGlwID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgTkFNRSA9ICd0b29sdGlwJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMudG9vbHRpcCc7XG4gIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgdmFyIFRSQU5TSVRJT05fRFVSQVRJT04gPSAxNTA7XG4gIHZhciBDTEFTU19QUkVGSVggPSAnYnMtdG9vbHRpcCc7XG4gIHZhciBCU0NMU19QUkVGSVhfUkVHRVggPSBuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIgKyBDTEFTU19QUkVGSVggKyBcIlxcXFxTK1wiLCAnZycpO1xuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG4gICAgdGVtcGxhdGU6ICdzdHJpbmcnLFxuICAgIHRpdGxlOiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKScsXG4gICAgdHJpZ2dlcjogJ3N0cmluZycsXG4gICAgZGVsYXk6ICcobnVtYmVyfG9iamVjdCknLFxuICAgIGh0bWw6ICdib29sZWFuJyxcbiAgICBzZWxlY3RvcjogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICAgIHBsYWNlbWVudDogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgICBvZmZzZXQ6ICcobnVtYmVyfHN0cmluZyknLFxuICAgIGNvbnRhaW5lcjogJyhzdHJpbmd8ZWxlbWVudHxib29sZWFuKScsXG4gICAgZmFsbGJhY2tQbGFjZW1lbnQ6ICcoc3RyaW5nfGFycmF5KScsXG4gICAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJ1xuICB9O1xuICB2YXIgQXR0YWNobWVudE1hcCA9IHtcbiAgICBBVVRPOiAnYXV0bycsXG4gICAgVE9QOiAndG9wJyxcbiAgICBSSUdIVDogJ3JpZ2h0JyxcbiAgICBCT1RUT006ICdib3R0b20nLFxuICAgIExFRlQ6ICdsZWZ0J1xuICB9O1xuICB2YXIgRGVmYXVsdCA9IHtcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+JyArICc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBzZWxlY3RvcjogZmFsc2UsXG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICBvZmZzZXQ6IDAsXG4gICAgY29udGFpbmVyOiBmYWxzZSxcbiAgICBmYWxsYmFja1BsYWNlbWVudDogJ2ZsaXAnLFxuICAgIGJvdW5kYXJ5OiAnc2Nyb2xsUGFyZW50J1xuICB9O1xuICB2YXIgSG92ZXJTdGF0ZSA9IHtcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgT1VUOiAnb3V0J1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgSU5TRVJURUQ6IFwiaW5zZXJ0ZWRcIiArIEVWRU5UX0tFWSxcbiAgICBDTElDSzogXCJjbGlja1wiICsgRVZFTlRfS0VZLFxuICAgIEZPQ1VTSU46IFwiZm9jdXNpblwiICsgRVZFTlRfS0VZLFxuICAgIEZPQ1VTT1VUOiBcImZvY3Vzb3V0XCIgKyBFVkVOVF9LRVksXG4gICAgTU9VU0VFTlRFUjogXCJtb3VzZWVudGVyXCIgKyBFVkVOVF9LRVksXG4gICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVlcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBGQURFOiAnZmFkZScsXG4gICAgU0hPVzogJ3Nob3cnXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBUT09MVElQOiAnLnRvb2x0aXAnLFxuICAgIFRPT0xUSVBfSU5ORVI6ICcudG9vbHRpcC1pbm5lcicsXG4gICAgQVJST1c6ICcuYXJyb3cnXG4gIH07XG4gIHZhciBUcmlnZ2VyID0ge1xuICAgIEhPVkVSOiAnaG92ZXInLFxuICAgIEZPQ1VTOiAnZm9jdXMnLFxuICAgIENMSUNLOiAnY2xpY2snLFxuICAgIE1BTlVBTDogJ21hbnVhbCdcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgVG9vbHRpcCA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRvb2x0aXAoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICAvKipcbiAgICAgICAqIENoZWNrIGZvciBQb3BwZXIgZGVwZW5kZW5jeVxuICAgICAgICogUG9wcGVyIC0gaHR0cHM6Ly9wb3BwZXIuanMub3JnXG4gICAgICAgKi9cbiAgICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXAgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKTtcbiAgICAgIH0gLy8gcHJpdmF0ZVxuXG5cbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWU7XG4gICAgICB0aGlzLl90aW1lb3V0ID0gMDtcbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSAnJztcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSB7fTtcbiAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7IC8vIFByb3RlY3RlZFxuXG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMudGlwID0gbnVsbDtcblxuICAgICAgdGhpcy5fc2V0TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBUb29sdGlwLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnRvZ2dsZUVuYWJsZWQgPSBmdW5jdGlvbiB0b2dnbGVFbmFibGVkKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShldmVudCkge1xuICAgICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO1xuICAgICAgICB2YXIgY29udGV4dCA9ICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZXZlbnQuY3VycmVudFRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7XG4gICAgICAgICAgJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljayA9ICFjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrO1xuXG4gICAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgICBjb250ZXh0Ll9lbnRlcihudWxsLCBjb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0Ll9sZWF2ZShudWxsLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCQkJDEodGhpcy5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZW50ZXIobnVsbCwgdGhpcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLmVsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVkpO1xuICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLm9mZih0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7XG4gICAgICAkJCQxKHRoaXMuZWxlbWVudCkuY2xvc2VzdCgnLm1vZGFsJykub2ZmKCdoaWRlLmJzLm1vZGFsJyk7XG5cbiAgICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgICAkJCQxKHRoaXMudGlwKS5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNFbmFibGVkID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMudGlwID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCQkJDEodGhpcy5lbGVtZW50KS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHMnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3dFdmVudCA9ICQkJDEuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuaXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgICAkJCQxKHRoaXMuZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuICAgICAgICB2YXIgaXNJblRoZURvbSA9ICQkJDEuY29udGFpbnModGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgIWlzSW5UaGVEb20pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICAgIHZhciB0aXBJZCA9IFV0aWwuZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7XG4gICAgICAgIHRpcC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGlwSWQpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpO1xuICAgICAgICB0aGlzLnNldENvbnRlbnQoKTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgJCQkMSh0aXApLmFkZENsYXNzKENsYXNzTmFtZS5GQURFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5jb25maWcucGxhY2VtZW50ID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgdGlwLCB0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcucGxhY2VtZW50O1xuXG4gICAgICAgIHZhciBhdHRhY2htZW50ID0gdGhpcy5fZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpO1xuXG4gICAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpO1xuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jb25maWcuY29udGFpbmVyID09PSBmYWxzZSA/IGRvY3VtZW50LmJvZHkgOiAkJCQxKHRoaXMuY29uZmlnLmNvbnRhaW5lcik7XG4gICAgICAgICQkJDEodGlwKS5kYXRhKHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIHRoaXMpO1xuXG4gICAgICAgIGlmICghJCQkMS5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMudGlwKSkge1xuICAgICAgICAgICQkJDEodGlwKS5hcHBlbmRUbyhjb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCk7XG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIodGhpcy5lbGVtZW50LCB0aXAsIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLmNvbmZpZy5vZmZzZXRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmbGlwOiB7XG4gICAgICAgICAgICAgIGJlaGF2aW9yOiB0aGlzLmNvbmZpZy5mYWxsYmFja1BsYWNlbWVudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFycm93OiB7XG4gICAgICAgICAgICAgIGVsZW1lbnQ6IFNlbGVjdG9yLkFSUk9XXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLmNvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLm9yaWdpbmFsUGxhY2VtZW50ICE9PSBkYXRhLnBsYWNlbWVudCkge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEpIHtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJCQkMSh0aXApLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTsgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcblxuICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgJCQkMSgnYm9keScpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICQkJDEubm9vcCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuX2ZpeFRyYW5zaXRpb24oKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcHJldkhvdmVyU3RhdGUgPSBfdGhpcy5faG92ZXJTdGF0ZTtcbiAgICAgICAgICBfdGhpcy5faG92ZXJTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgJCQkMShfdGhpcy5lbGVtZW50KS50cmlnZ2VyKF90aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1dOKTtcblxuICAgICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgICAgIF90aGlzLl9sZWF2ZShudWxsLCBfdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChVdGlsLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpICYmICQkJDEodGhpcy50aXApLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAgICQkJDEodGhpcy50aXApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVG9vbHRpcC5fVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICB2YXIgaGlkZUV2ZW50ID0gJCQkMS5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgaWYgKF90aGlzMi5faG92ZXJTdGF0ZSAhPT0gSG92ZXJTdGF0ZS5TSE9XICYmIHRpcC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgdGlwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGlwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi5fY2xlYW5UaXBDbGFzcygpO1xuXG4gICAgICAgIF90aGlzMi5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpO1xuXG4gICAgICAgICQkJDEoX3RoaXMyLmVsZW1lbnQpLnRyaWdnZXIoX3RoaXMyLmNvbnN0cnVjdG9yLkV2ZW50LkhJRERFTik7XG5cbiAgICAgICAgaWYgKF90aGlzMi5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgX3RoaXMyLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQkJDEodGlwKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuXG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICQkJDEoJ2JvZHknKS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJCQkMS5ub29wKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkNMSUNLXSA9IGZhbHNlO1xuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkZPQ1VTXSA9IGZhbHNlO1xuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkhPVkVSXSA9IGZhbHNlO1xuXG4gICAgICBpZiAoVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiAkJCQxKHRoaXMudGlwKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgJCQkMSh0aXApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoVFJBTlNJVElPTl9EVVJBVElPTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG4gICAgfTtcblxuICAgIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07IC8vIFByb3RlY3RlZFxuXG5cbiAgICBfcHJvdG8uaXNXaXRoQ29udGVudCA9IGZ1bmN0aW9uIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uYWRkQXR0YWNobWVudENsYXNzID0gZnVuY3Rpb24gYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHtcbiAgICAgICQkJDEodGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKENMQVNTX1BSRUZJWCArIFwiLVwiICsgYXR0YWNobWVudCk7XG4gICAgfTtcblxuICAgIF9wcm90by5nZXRUaXBFbGVtZW50ID0gZnVuY3Rpb24gZ2V0VGlwRWxlbWVudCgpIHtcbiAgICAgIHRoaXMudGlwID0gdGhpcy50aXAgfHwgJCQkMSh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF07XG4gICAgICByZXR1cm4gdGhpcy50aXA7XG4gICAgfTtcblxuICAgIF9wcm90by5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHtcbiAgICAgIHZhciAkdGlwID0gJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSk7XG4gICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5UT09MVElQX0lOTkVSKSwgdGhpcy5nZXRUaXRsZSgpKTtcbiAgICAgICR0aXAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUgKyBcIiBcIiArIENsYXNzTmFtZS5TSE9XKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNldEVsZW1lbnRDb250ZW50ID0gZnVuY3Rpb24gc2V0RWxlbWVudENvbnRlbnQoJGVsZW1lbnQsIGNvbnRlbnQpIHtcbiAgICAgIHZhciBodG1sID0gdGhpcy5jb25maWcuaHRtbDtcblxuICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0JyAmJiAoY29udGVudC5ub2RlVHlwZSB8fCBjb250ZW50LmpxdWVyeSkpIHtcbiAgICAgICAgLy8gQ29udGVudCBpcyBhIERPTSBub2RlIG9yIGEgalF1ZXJ5XG4gICAgICAgIGlmIChodG1sKSB7XG4gICAgICAgICAgaWYgKCEkJCQxKGNvbnRlbnQpLnBhcmVudCgpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICAgJGVsZW1lbnQuZW1wdHkoKS5hcHBlbmQoY29udGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRlbGVtZW50LnRleHQoJCQkMShjb250ZW50KS50ZXh0KCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWxlbWVudFtodG1sID8gJ2h0bWwnIDogJ3RleHQnXShjb250ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldFRpdGxlID0gZnVuY3Rpb24gZ2V0VGl0bGUoKSB7XG4gICAgICB2YXIgdGl0bGUgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJyk7XG5cbiAgICAgIGlmICghdGl0bGUpIHtcbiAgICAgICAgdGl0bGUgPSB0eXBlb2YgdGhpcy5jb25maWcudGl0bGUgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy50aXRsZS5jYWxsKHRoaXMuZWxlbWVudCkgOiB0aGlzLmNvbmZpZy50aXRsZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRpdGxlO1xuICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgX3Byb3RvLl9nZXRBdHRhY2htZW50ID0gZnVuY3Rpb24gX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KSB7XG4gICAgICByZXR1cm4gQXR0YWNobWVudE1hcFtwbGFjZW1lbnQudG9VcHBlckNhc2UoKV07XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0TGlzdGVuZXJzID0gZnVuY3Rpb24gX3NldExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJpZ2dlcnMgPSB0aGlzLmNvbmZpZy50cmlnZ2VyLnNwbGl0KCcgJyk7XG4gICAgICB0cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgIGlmICh0cmlnZ2VyID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgJCQkMShfdGhpczMuZWxlbWVudCkub24oX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50LkNMSUNLLCBfdGhpczMuY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMudG9nZ2xlKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9PSBUcmlnZ2VyLk1BTlVBTCkge1xuICAgICAgICAgIHZhciBldmVudEluID0gdHJpZ2dlciA9PT0gVHJpZ2dlci5IT1ZFUiA/IF90aGlzMy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUVOVEVSIDogX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU47XG4gICAgICAgICAgdmFyIGV2ZW50T3V0ID0gdHJpZ2dlciA9PT0gVHJpZ2dlci5IT1ZFUiA/IF90aGlzMy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUxFQVZFIDogX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTT1VUO1xuICAgICAgICAgICQkJDEoX3RoaXMzLmVsZW1lbnQpLm9uKGV2ZW50SW4sIF90aGlzMy5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5fZW50ZXIoZXZlbnQpO1xuICAgICAgICAgIH0pLm9uKGV2ZW50T3V0LCBfdGhpczMuY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMuX2xlYXZlKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICQkJDEoX3RoaXMzLmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9uKCdoaWRlLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczMuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5jb25maWcuc2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBfZXh0ZW5kcyh7fSwgdGhpcy5jb25maWcsIHtcbiAgICAgICAgICB0cmlnZ2VyOiAnbWFudWFsJyxcbiAgICAgICAgICBzZWxlY3RvcjogJydcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9maXhUaXRsZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2ZpeFRpdGxlID0gZnVuY3Rpb24gX2ZpeFRpdGxlKCkge1xuICAgICAgdmFyIHRpdGxlVHlwZSA9IHR5cGVvZiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJyk7XG5cbiAgICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8IHRpdGxlVHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScsIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgJycpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsICcnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9lbnRlciA9IGZ1bmN0aW9uIF9lbnRlcihldmVudCwgY29udGV4dCkge1xuICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO1xuICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICAkJCQxKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c2luJyA/IFRyaWdnZXIuRk9DVVMgOiBUcmlnZ2VyLkhPVkVSXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgkJCQxKGNvbnRleHQuZ2V0VGlwRWxlbWVudCgpKS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykgfHwgY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5TSE9XKSB7XG4gICAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLlNIT1c7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPVztcblxuICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuc2hvdykge1xuICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcbiAgICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuc2hvdyk7XG4gICAgfTtcblxuICAgIF9wcm90by5fbGVhdmUgPSBmdW5jdGlvbiBfbGVhdmUoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJdID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XG4gICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5PVVQ7XG5cbiAgICAgIGlmICghY29udGV4dC5jb25maWcuZGVsYXkgfHwgIWNvbnRleHQuY29uZmlnLmRlbGF5LmhpZGUpIHtcbiAgICAgICAgY29udGV4dC5oaWRlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSk7XG4gICAgfTtcblxuICAgIF9wcm90by5faXNXaXRoQWN0aXZlVHJpZ2dlciA9IGZ1bmN0aW9uIF9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkge1xuICAgICAgZm9yICh2YXIgdHJpZ2dlciBpbiB0aGlzLl9hY3RpdmVUcmlnZ2VyKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVUcmlnZ2VyW3RyaWdnZXJdKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfZXh0ZW5kcyh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LCAkJCQxKHRoaXMuZWxlbWVudCkuZGF0YSgpLCBjb25maWcpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWxheSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uZmlnLmRlbGF5ID0ge1xuICAgICAgICAgIHNob3c6IGNvbmZpZy5kZWxheSxcbiAgICAgICAgICBoaWRlOiBjb25maWcuZGVsYXlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcudGl0bGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy50aXRsZSA9IGNvbmZpZy50aXRsZS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy5jb250ZW50ID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25maWcuY29udGVudCA9IGNvbmZpZy5jb250ZW50LnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldERlbGVnYXRlQ29uZmlnID0gZnVuY3Rpb24gX2dldERlbGVnYXRlQ29uZmlnKCkge1xuICAgICAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gICAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuY29uZmlnKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtrZXldICE9PSB0aGlzLmNvbmZpZ1trZXldKSB7XG4gICAgICAgICAgICBjb25maWdba2V5XSA9IHRoaXMuY29uZmlnW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpO1xuXG4gICAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoID4gMCkge1xuICAgICAgICAkdGlwLnJlbW92ZUNsYXNzKHRhYkNsYXNzLmpvaW4oJycpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UgPSBmdW5jdGlvbiBfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpIHtcbiAgICAgIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKTtcblxuICAgICAgdGhpcy5hZGRBdHRhY2htZW50Q2xhc3ModGhpcy5fZ2V0QXR0YWNobWVudChkYXRhLnBsYWNlbWVudCkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2ZpeFRyYW5zaXRpb24gPSBmdW5jdGlvbiBfZml4VHJhbnNpdGlvbigpIHtcbiAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICAgIHZhciBpbml0Q29uZmlnQW5pbWF0aW9uID0gdGhpcy5jb25maWcuYW5pbWF0aW9uO1xuXG4gICAgICBpZiAodGlwLmdldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQkJDEodGlwKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuRkFERSk7XG4gICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBmYWxzZTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBpbml0Q29uZmlnQW5pbWF0aW9uO1xuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBUb29sdGlwLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZztcblxuICAgICAgICBpZiAoIWRhdGEgJiYgL2Rpc3Bvc2V8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiREFUQV9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gREFUQV9LRVk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkV2ZW50XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEV2ZW50O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFVkVOVF9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRVZFTlRfS0VZO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFRvb2x0aXA7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJCQkMS5mbltOQU1FXSA9IFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZTtcbiAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFRvb2x0aXA7XG5cbiAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gVG9vbHRpcDtcbn0oJCwgUG9wcGVyKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjApOiBwb3BvdmVyLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG52YXIgUG9wb3ZlciA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgdmFyIE5BTUUgPSAncG9wb3Zlcic7XG4gIHZhciBWRVJTSU9OID0gJzQuMC4wJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLnBvcG92ZXInO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07XG4gIHZhciBDTEFTU19QUkVGSVggPSAnYnMtcG9wb3Zlcic7XG4gIHZhciBCU0NMU19QUkVGSVhfUkVHRVggPSBuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIgKyBDTEFTU19QUkVGSVggKyBcIlxcXFxTK1wiLCAnZycpO1xuICB2YXIgRGVmYXVsdCA9IF9leHRlbmRzKHt9LCBUb29sdGlwLkRlZmF1bHQsIHtcbiAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICBjb250ZW50OiAnJyxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgKyAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgKyAnPGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2PidcbiAgfSk7XG4gIHZhciBEZWZhdWx0VHlwZSA9IF9leHRlbmRzKHt9LCBUb29sdGlwLkRlZmF1bHRUeXBlLCB7XG4gICAgY29udGVudDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknXG4gIH0pO1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIFRJVExFOiAnLnBvcG92ZXItaGVhZGVyJyxcbiAgICBDT05URU5UOiAnLnBvcG92ZXItYm9keSdcbiAgfTtcbiAgdmFyIEV2ZW50ID0ge1xuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZLFxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSxcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZLFxuICAgIElOU0VSVEVEOiBcImluc2VydGVkXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSxcbiAgICBGT0NVU0lOOiBcImZvY3VzaW5cIiArIEVWRU5UX0tFWSxcbiAgICBGT0NVU09VVDogXCJmb2N1c291dFwiICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZVwiICsgRVZFTlRfS0VZXG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gIH07XG5cbiAgdmFyIFBvcG92ZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfVG9vbHRpcCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFBvcG92ZXIsIF9Ub29sdGlwKTtcblxuICAgIGZ1bmN0aW9uIFBvcG92ZXIoKSB7XG4gICAgICByZXR1cm4gX1Rvb2x0aXAuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQb3BvdmVyLnByb3RvdHlwZTtcblxuICAgIC8vIE92ZXJyaWRlc1xuICAgIF9wcm90by5pc1dpdGhDb250ZW50ID0gZnVuY3Rpb24gaXNXaXRoQ29udGVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5fZ2V0Q29udGVudCgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uYWRkQXR0YWNobWVudENsYXNzID0gZnVuY3Rpb24gYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHtcbiAgICAgICQkJDEodGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKENMQVNTX1BSRUZJWCArIFwiLVwiICsgYXR0YWNobWVudCk7XG4gICAgfTtcblxuICAgIF9wcm90by5nZXRUaXBFbGVtZW50ID0gZnVuY3Rpb24gZ2V0VGlwRWxlbWVudCgpIHtcbiAgICAgIHRoaXMudGlwID0gdGhpcy50aXAgfHwgJCQkMSh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF07XG4gICAgICByZXR1cm4gdGhpcy50aXA7XG4gICAgfTtcblxuICAgIF9wcm90by5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHtcbiAgICAgIHZhciAkdGlwID0gJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSk7IC8vIFdlIHVzZSBhcHBlbmQgZm9yIGh0bWwgb2JqZWN0cyB0byBtYWludGFpbiBqcyBldmVudHNcblxuICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU2VsZWN0b3IuVElUTEUpLCB0aGlzLmdldFRpdGxlKCkpO1xuXG4gICAgICB2YXIgY29udGVudCA9IHRoaXMuX2dldENvbnRlbnQoKTtcblxuICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LmNhbGwodGhpcy5lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU2VsZWN0b3IuQ09OVEVOVCksIGNvbnRlbnQpO1xuICAgICAgJHRpcC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuRkFERSArIFwiIFwiICsgQ2xhc3NOYW1lLlNIT1cpO1xuICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgX3Byb3RvLl9nZXRDb250ZW50ID0gZnVuY3Rpb24gX2dldENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1jb250ZW50JykgfHwgdGhpcy5jb25maWcuY29udGVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbGVhblRpcENsYXNzID0gZnVuY3Rpb24gX2NsZWFuVGlwQ2xhc3MoKSB7XG4gICAgICB2YXIgJHRpcCA9ICQkJDEodGhpcy5nZXRUaXBFbGVtZW50KCkpO1xuICAgICAgdmFyIHRhYkNsYXNzID0gJHRpcC5hdHRyKCdjbGFzcycpLm1hdGNoKEJTQ0xTX1BSRUZJWF9SRUdFWCk7XG5cbiAgICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xuICAgICAgfVxuICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbDtcblxuICAgICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBQb3BvdmVyKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFBvcG92ZXIsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgLy8gR2V0dGVyc1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiREFUQV9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gREFUQV9LRVk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkV2ZW50XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEV2ZW50O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFVkVOVF9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRVZFTlRfS0VZO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFBvcG92ZXI7XG4gIH0oVG9vbHRpcCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQkJDEuZm5bTkFNRV0gPSBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBQb3BvdmVyO1xuXG4gICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIFBvcG92ZXI7XG59KCQpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMCk6IHNjcm9sbHNweS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIFNjcm9sbFNweSA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgdmFyIE5BTUUgPSAnc2Nyb2xsc3B5JztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuc2Nyb2xsc3B5JztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07XG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIG9mZnNldDogMTAsXG4gICAgbWV0aG9kOiAnYXV0bycsXG4gICAgdGFyZ2V0OiAnJ1xuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgb2Zmc2V0OiAnbnVtYmVyJyxcbiAgICBtZXRob2Q6ICdzdHJpbmcnLFxuICAgIHRhcmdldDogJyhzdHJpbmd8ZWxlbWVudCknXG4gIH07XG4gIHZhciBFdmVudCA9IHtcbiAgICBBQ1RJVkFURTogXCJhY3RpdmF0ZVwiICsgRVZFTlRfS0VZLFxuICAgIFNDUk9MTDogXCJzY3JvbGxcIiArIEVWRU5UX0tFWSxcbiAgICBMT0FEX0RBVEFfQVBJOiBcImxvYWRcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIERST1BET1dOX0lURU06ICdkcm9wZG93bi1pdGVtJyxcbiAgICBEUk9QRE9XTl9NRU5VOiAnZHJvcGRvd24tbWVudScsXG4gICAgQUNUSVZFOiAnYWN0aXZlJ1xuICB9O1xuICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgREFUQV9TUFk6ICdbZGF0YS1zcHk9XCJzY3JvbGxcIl0nLFxuICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgIE5BVl9MSVNUX0dST1VQOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICAgIE5BVl9MSU5LUzogJy5uYXYtbGluaycsXG4gICAgTkFWX0lURU1TOiAnLm5hdi1pdGVtJyxcbiAgICBMSVNUX0lURU1TOiAnLmxpc3QtZ3JvdXAtaXRlbScsXG4gICAgRFJPUERPV046ICcuZHJvcGRvd24nLFxuICAgIERST1BET1dOX0lURU1TOiAnLmRyb3Bkb3duLWl0ZW0nLFxuICAgIERST1BET1dOX1RPR0dMRTogJy5kcm9wZG93bi10b2dnbGUnXG4gIH07XG4gIHZhciBPZmZzZXRNZXRob2QgPSB7XG4gICAgT0ZGU0VUOiAnb2Zmc2V0JyxcbiAgICBQT1NJVElPTjogJ3Bvc2l0aW9uJ1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICB9O1xuXG4gIHZhciBTY3JvbGxTcHkgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY3JvbGxTcHkoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBlbGVtZW50LnRhZ05hbWUgPT09ICdCT0RZJyA/IHdpbmRvdyA6IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX3NlbGVjdG9yID0gdGhpcy5fY29uZmlnLnRhcmdldCArIFwiIFwiICsgU2VsZWN0b3IuTkFWX0xJTktTICsgXCIsXCIgKyAodGhpcy5fY29uZmlnLnRhcmdldCArIFwiIFwiICsgU2VsZWN0b3IuTElTVF9JVEVNUyArIFwiLFwiKSArICh0aGlzLl9jb25maWcudGFyZ2V0ICsgXCIgXCIgKyBTZWxlY3Rvci5EUk9QRE9XTl9JVEVNUyk7XG4gICAgICB0aGlzLl9vZmZzZXRzID0gW107XG4gICAgICB0aGlzLl90YXJnZXRzID0gW107XG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gMDtcbiAgICAgICQkJDEodGhpcy5fc2Nyb2xsRWxlbWVudCkub24oRXZlbnQuU0NST0xMLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9wcm9jZXNzKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5yZWZyZXNoKCk7XG5cbiAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IFNjcm9sbFNweS5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8ucmVmcmVzaCA9IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGF1dG9NZXRob2QgPSB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB0aGlzLl9zY3JvbGxFbGVtZW50LndpbmRvdyA/IE9mZnNldE1ldGhvZC5PRkZTRVQgOiBPZmZzZXRNZXRob2QuUE9TSVRJT047XG4gICAgICB2YXIgb2Zmc2V0TWV0aG9kID0gdGhpcy5fY29uZmlnLm1ldGhvZCA9PT0gJ2F1dG8nID8gYXV0b01ldGhvZCA6IHRoaXMuX2NvbmZpZy5tZXRob2Q7XG4gICAgICB2YXIgb2Zmc2V0QmFzZSA9IG9mZnNldE1ldGhvZCA9PT0gT2Zmc2V0TWV0aG9kLlBPU0lUSU9OID8gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgOiAwO1xuICAgICAgdGhpcy5fb2Zmc2V0cyA9IFtdO1xuICAgICAgdGhpcy5fdGFyZ2V0cyA9IFtdO1xuICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCk7XG4gICAgICB2YXIgdGFyZ2V0cyA9ICQkJDEubWFrZUFycmF5KCQkJDEodGhpcy5fc2VsZWN0b3IpKTtcbiAgICAgIHRhcmdldHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciB0YXJnZXQ7XG4gICAgICAgIHZhciB0YXJnZXRTZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICBpZiAodGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgICAgICB0YXJnZXQgPSAkJCQxKHRhcmdldFNlbGVjdG9yKVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICB2YXIgdGFyZ2V0QkNSID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgaWYgKHRhcmdldEJDUi53aWR0aCB8fCB0YXJnZXRCQ1IuaGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyBUT0RPIChmYXQpOiByZW1vdmUgc2tldGNoIHJlbGlhbmNlIG9uIGpRdWVyeSBwb3NpdGlvbi9vZmZzZXRcbiAgICAgICAgICAgIHJldHVybiBbJCQkMSh0YXJnZXQpW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCB0YXJnZXRTZWxlY3Rvcl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgX3RoaXMyLl9vZmZzZXRzLnB1c2goaXRlbVswXSk7XG5cbiAgICAgICAgX3RoaXMyLl90YXJnZXRzLnB1c2goaXRlbVsxXSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgICQkJDEodGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKEVWRU5UX0tFWSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuX3NlbGVjdG9yID0gbnVsbDtcbiAgICAgIHRoaXMuX29mZnNldHMgPSBudWxsO1xuICAgICAgdGhpcy5fdGFyZ2V0cyA9IG51bGw7XG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gbnVsbDtcbiAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0LCBjb25maWcpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy50YXJnZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBpZCA9ICQkJDEoY29uZmlnLnRhcmdldCkuYXR0cignaWQnKTtcblxuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgaWQgPSBVdGlsLmdldFVJRChOQU1FKTtcbiAgICAgICAgICAkJCQxKGNvbmZpZy50YXJnZXQpLmF0dHIoJ2lkJywgaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnLnRhcmdldCA9IFwiI1wiICsgaWQ7XG4gICAgICB9XG5cbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsVG9wKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvdyA/IHRoaXMuX3Njcm9sbEVsZW1lbnQucGFnZVlPZmZzZXQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsSGVpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRPZmZzZXRIZWlnaHQgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0SGVpZ2h0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvdyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3Byb2Nlc3MgPSBmdW5jdGlvbiBfcHJvY2VzcygpIHtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLl9nZXRTY3JvbGxUb3AoKSArIHRoaXMuX2NvbmZpZy5vZmZzZXQ7XG5cbiAgICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcblxuICAgICAgdmFyIG1heFNjcm9sbCA9IHRoaXMuX2NvbmZpZy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLl9nZXRPZmZzZXRIZWlnaHQoKTtcblxuICAgICAgaWYgKHRoaXMuX3Njcm9sbEhlaWdodCAhPT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0c1t0aGlzLl90YXJnZXRzLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRhcmdldCkge1xuICAgICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkge1xuICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2NsZWFyKCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy5fb2Zmc2V0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgdmFyIGlzQWN0aXZlVGFyZ2V0ID0gdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzW2ldICYmIHNjcm9sbFRvcCA+PSB0aGlzLl9vZmZzZXRzW2ldICYmICh0eXBlb2YgdGhpcy5fb2Zmc2V0c1tpICsgMV0gPT09ICd1bmRlZmluZWQnIHx8IHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbaSArIDFdKTtcblxuICAgICAgICBpZiAoaXNBY3RpdmVUYXJnZXQpIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKHRhcmdldCkge1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgICB0aGlzLl9jbGVhcigpO1xuXG4gICAgICB2YXIgcXVlcmllcyA9IHRoaXMuX3NlbGVjdG9yLnNwbGl0KCcsJyk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJvdy1ib2R5LXN0eWxlXG5cblxuICAgICAgcXVlcmllcyA9IHF1ZXJpZXMubWFwKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IgKyBcIltkYXRhLXRhcmdldD1cXFwiXCIgKyB0YXJnZXQgKyBcIlxcXCJdLFwiICsgKHNlbGVjdG9yICsgXCJbaHJlZj1cXFwiXCIgKyB0YXJnZXQgKyBcIlxcXCJdXCIpO1xuICAgICAgfSk7XG4gICAgICB2YXIgJGxpbmsgPSAkJCQxKHF1ZXJpZXMuam9pbignLCcpKTtcblxuICAgICAgaWYgKCRsaW5rLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QRE9XTl9JVEVNKSkge1xuICAgICAgICAkbGluay5jbG9zZXN0KFNlbGVjdG9yLkRST1BET1dOKS5maW5kKFNlbGVjdG9yLkRST1BET1dOX1RPR0dMRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rIGFzIGFjdGl2ZVxuICAgICAgICAkbGluay5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTsgLy8gU2V0IHRyaWdnZXJlZCBsaW5rcyBwYXJlbnRzIGFzIGFjdGl2ZVxuICAgICAgICAvLyBXaXRoIGJvdGggPHVsPiBhbmQgPG5hdj4gbWFya3VwIGEgcGFyZW50IGlzIHRoZSBwcmV2aW91cyBzaWJsaW5nIG9mIGFueSBuYXYgYW5jZXN0b3JcblxuICAgICAgICAkbGluay5wYXJlbnRzKFNlbGVjdG9yLk5BVl9MSVNUX0dST1VQKS5wcmV2KFNlbGVjdG9yLk5BVl9MSU5LUyArIFwiLCBcIiArIFNlbGVjdG9yLkxJU1RfSVRFTVMpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpOyAvLyBIYW5kbGUgc3BlY2lhbCBjYXNlIHdoZW4gLm5hdi1saW5rIGlzIGluc2lkZSAubmF2LWl0ZW1cblxuICAgICAgICAkbGluay5wYXJlbnRzKFNlbGVjdG9yLk5BVl9MSVNUX0dST1VQKS5wcmV2KFNlbGVjdG9yLk5BVl9JVEVNUykuY2hpbGRyZW4oU2VsZWN0b3IuTkFWX0xJTktTKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgIH1cblxuICAgICAgJCQkMSh0aGlzLl9zY3JvbGxFbGVtZW50KS50cmlnZ2VyKEV2ZW50LkFDVElWQVRFLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRhcmdldFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xlYXIgPSBmdW5jdGlvbiBfY2xlYXIoKSB7XG4gICAgICAkJCQxKHRoaXMuX3NlbGVjdG9yKS5maWx0ZXIoU2VsZWN0b3IuQUNUSVZFKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZztcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhTY3JvbGxTcHksIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBTY3JvbGxTcHk7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkJCQxKHdpbmRvdykub24oRXZlbnQuTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxTcHlzID0gJCQkMS5tYWtlQXJyYXkoJCQkMShTZWxlY3Rvci5EQVRBX1NQWSkpO1xuXG4gICAgZm9yICh2YXIgaSA9IHNjcm9sbFNweXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICB2YXIgJHNweSA9ICQkJDEoc2Nyb2xsU3B5c1tpXSk7XG5cbiAgICAgIFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJHNweSwgJHNweS5kYXRhKCkpO1xuICAgIH1cbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkJCQxLmZuW05BTUVdID0gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBTY3JvbGxTcHk7XG5cbiAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBTY3JvbGxTcHk7XG59KCQpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjAuMCk6IHRhYi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxudmFyIFRhYiA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgdmFyIE5BTUUgPSAndGFiJztcbiAgdmFyIFZFUlNJT04gPSAnNC4wLjAnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMudGFiJztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07XG4gIHZhciBUUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwO1xuICB2YXIgRXZlbnQgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIERST1BET1dOX01FTlU6ICdkcm9wZG93bi1tZW51JyxcbiAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgIERJU0FCTEVEOiAnZGlzYWJsZWQnLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIERST1BET1dOOiAnLmRyb3Bkb3duJyxcbiAgICBOQVZfTElTVF9HUk9VUDogJy5uYXYsIC5saXN0LWdyb3VwJyxcbiAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcbiAgICBBQ1RJVkVfVUw6ICc+IGxpID4gLmFjdGl2ZScsXG4gICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLXRvZ2dsZT1cImxpc3RcIl0nLFxuICAgIERST1BET1dOX1RPR0dMRTogJy5kcm9wZG93bi10b2dnbGUnLFxuICAgIERST1BET1dOX0FDVElWRV9DSElMRDogJz4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZSdcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgfTtcblxuICB2YXIgVGFiID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFiKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gVGFiLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgJiYgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpIHx8ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0YXJnZXQ7XG4gICAgICB2YXIgcHJldmlvdXM7XG4gICAgICB2YXIgbGlzdEVsZW1lbnQgPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuTkFWX0xJU1RfR1JPVVApWzBdO1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICBpZiAobGlzdEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGl0ZW1TZWxlY3RvciA9IGxpc3RFbGVtZW50Lm5vZGVOYW1lID09PSAnVUwnID8gU2VsZWN0b3IuQUNUSVZFX1VMIDogU2VsZWN0b3IuQUNUSVZFO1xuICAgICAgICBwcmV2aW91cyA9ICQkJDEubWFrZUFycmF5KCQkJDEobGlzdEVsZW1lbnQpLmZpbmQoaXRlbVNlbGVjdG9yKSk7XG4gICAgICAgIHByZXZpb3VzID0gcHJldmlvdXNbcHJldmlvdXMubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LkhJREUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgfSk7XG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TSE9XLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgICB9KTtcblxuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgICQkJDEocHJldmlvdXMpLnRyaWdnZXIoaGlkZUV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHRhcmdldCA9ICQkJDEoc2VsZWN0b3IpWzBdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl9lbGVtZW50LCBsaXN0RWxlbWVudCk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICB2YXIgaGlkZGVuRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LkhJRERFTiwge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IF90aGlzLl9lbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2hvd25FdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0hPV04sIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgICB9KTtcbiAgICAgICAgJCQkMShwcmV2aW91cykudHJpZ2dlcihoaWRkZW5FdmVudCk7XG4gICAgICAgICQkJDEoX3RoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd25FdmVudCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCwgdGFyZ2V0LnBhcmVudE5vZGUsIGNvbXBsZXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgIF9wcm90by5fYWN0aXZhdGUgPSBmdW5jdGlvbiBfYWN0aXZhdGUoZWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBhY3RpdmVFbGVtZW50cztcblxuICAgICAgaWYgKGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ1VMJykge1xuICAgICAgICBhY3RpdmVFbGVtZW50cyA9ICQkJDEoY29udGFpbmVyKS5maW5kKFNlbGVjdG9yLkFDVElWRV9VTCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVFbGVtZW50cyA9ICQkJDEoY29udGFpbmVyKS5jaGlsZHJlbihTZWxlY3Rvci5BQ1RJVkUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWN0aXZlID0gYWN0aXZlRWxlbWVudHNbMF07XG4gICAgICB2YXIgaXNUcmFuc2l0aW9uaW5nID0gY2FsbGJhY2sgJiYgVXRpbC5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSAmJiBhY3RpdmUgJiYgJCQkMShhY3RpdmUpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChhY3RpdmUgJiYgaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICQkJDEoYWN0aXZlKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRSQU5TSVRJT05fRFVSQVRJT04pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl90cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgJCQkMShhY3RpdmUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XICsgXCIgXCIgKyBDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgdmFyIGRyb3Bkb3duQ2hpbGQgPSAkJCQxKGFjdGl2ZS5wYXJlbnROb2RlKS5maW5kKFNlbGVjdG9yLkRST1BET1dOX0FDVElWRV9DSElMRClbMF07XG5cbiAgICAgICAgaWYgKGRyb3Bkb3duQ2hpbGQpIHtcbiAgICAgICAgICAkJCQxKGRyb3Bkb3duQ2hpbGQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGl2ZS5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgICAgICBhY3RpdmUuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICQkJDEoZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG5cbiAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAndGFiJykge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBVdGlsLnJlZmxvdyhlbGVtZW50KTtcbiAgICAgICQkJDEoZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlICYmICQkJDEoZWxlbWVudC5wYXJlbnROb2RlKS5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUERPV05fTUVOVSkpIHtcbiAgICAgICAgdmFyIGRyb3Bkb3duRWxlbWVudCA9ICQkJDEoZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5EUk9QRE9XTilbMF07XG5cbiAgICAgICAgaWYgKGRyb3Bkb3duRWxlbWVudCkge1xuICAgICAgICAgICQkJDEoZHJvcGRvd25FbGVtZW50KS5maW5kKFNlbGVjdG9yLkRST1BET1dOX1RPR0dMRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkdGhpcyA9ICQkJDEodGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBUYWIodGhpcyk7XG4gICAgICAgICAgJHRoaXMuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFRhYiwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBUYWI7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBUYWIuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQkJDEodGhpcyksICdzaG93Jyk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJCQkMS5mbltOQU1FXSA9IFRhYi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gVGFiO1xuXG4gICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgIHJldHVybiBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gVGFiO1xufSgkKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4wLjAtYWxwaGEuNik6IGluZGV4LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG4oZnVuY3Rpb24gKCQkJDEpIHtcbiAgaWYgKHR5cGVvZiAkJCQxID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkuIGpRdWVyeSBtdXN0IGJlIGluY2x1ZGVkIGJlZm9yZSBCb290c3RyYXBcXCdzIEphdmFTY3JpcHQuJyk7XG4gIH1cblxuICB2YXIgdmVyc2lvbiA9ICQkJDEuZm4uanF1ZXJ5LnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKTtcbiAgdmFyIG1pbk1ham9yID0gMTtcbiAgdmFyIGx0TWFqb3IgPSAyO1xuICB2YXIgbWluTWlub3IgPSA5O1xuICB2YXIgbWluUGF0Y2ggPSAxO1xuICB2YXIgbWF4TWFqb3IgPSA0O1xuXG4gIGlmICh2ZXJzaW9uWzBdIDwgbHRNYWpvciAmJiB2ZXJzaW9uWzFdIDwgbWluTWlub3IgfHwgdmVyc2lvblswXSA9PT0gbWluTWFqb3IgJiYgdmVyc2lvblsxXSA9PT0gbWluTWlub3IgJiYgdmVyc2lvblsyXSA8IG1pblBhdGNoIHx8IHZlcnNpb25bMF0gPj0gbWF4TWFqb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgdjEuOS4xIGJ1dCBsZXNzIHRoYW4gdjQuMC4wJyk7XG4gIH1cbn0pKCQpO1xuXG5leHBvcnRzLlV0aWwgPSBVdGlsO1xuZXhwb3J0cy5BbGVydCA9IEFsZXJ0O1xuZXhwb3J0cy5CdXR0b24gPSBCdXR0b247XG5leHBvcnRzLkNhcm91c2VsID0gQ2Fyb3VzZWw7XG5leHBvcnRzLkNvbGxhcHNlID0gQ29sbGFwc2U7XG5leHBvcnRzLkRyb3Bkb3duID0gRHJvcGRvd247XG5leHBvcnRzLk1vZGFsID0gTW9kYWw7XG5leHBvcnRzLlBvcG92ZXIgPSBQb3BvdmVyO1xuZXhwb3J0cy5TY3JvbGxzcHkgPSBTY3JvbGxTcHk7XG5leHBvcnRzLlRhYiA9IFRhYjtcbmV4cG9ydHMuVG9vbHRpcCA9IFRvb2x0aXA7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib290c3RyYXAuanMubWFwXG4iLCIvKiohXG4gKiBAZmlsZU92ZXJ2aWV3IEtpY2thc3MgbGlicmFyeSB0byBjcmVhdGUgYW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuXG4gKiBAdmVyc2lvbiAxLjEyLjlcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbnZhciBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG52YXIgdGltZW91dER1cmF0aW9uID0gMDtcbmZvciAodmFyIGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkge1xuICAgIHRpbWVvdXREdXJhdGlvbiA9IDE7XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWljcm90YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB3aW5kb3cuUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSBmYWxzZTtcbiAgICAgIGZuKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRhc2tEZWJvdW5jZShmbikge1xuICB2YXIgc2NoZWR1bGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIGZuKCk7XG4gICAgICB9LCB0aW1lb3V0RHVyYXRpb24pO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHN1cHBvcnRzTWljcm9UYXNrcyA9IGlzQnJvd3NlciAmJiB3aW5kb3cuUHJvbWlzZTtcblxuLyoqXG4qIENyZWF0ZSBhIGRlYm91bmNlZCB2ZXJzaW9uIG9mIGEgbWV0aG9kLCB0aGF0J3MgYXN5bmNocm9ub3VzbHkgZGVmZXJyZWRcbiogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLlxuKlxuKiBAbWV0aG9kXG4qIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiogQGFyZ3VtZW50IHtGdW5jdGlvbn0gZm5cbiogQHJldHVybnMge0Z1bmN0aW9ufVxuKi9cbnZhciBkZWJvdW5jZSA9IHN1cHBvcnRzTWljcm9UYXNrcyA/IG1pY3JvdGFza0RlYm91bmNlIDogdGFza0RlYm91bmNlO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG86IGlzIGEgZnVuY3Rpb24/XG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XG4gIHZhciBnZXRUeXBlID0ge307XG4gIHJldHVybiBmdW5jdGlvblRvQ2hlY2sgJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogR2V0IENTUyBjb21wdXRlZCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIGNzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50Tm9kZSBvciB0aGUgaG9zdCBvZiB0aGUgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gc2Nyb2xsIHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXRcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICBjYXNlICdIVE1MJzpcbiAgICBjYXNlICdCT0RZJzpcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keTtcbiAgfVxuXG4gIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuXG4gIHZhciBfZ2V0U3R5bGVDb21wdXRlZFByb3AgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dZO1xuXG4gIGlmICgvKGF1dG98c2Nyb2xsKS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0IHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudCAmJiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbiAgdmFyIG5vZGVOYW1lID0gb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudC5ub2RlTmFtZTtcblxuICBpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gLm9mZnNldFBhcmVudCB3aWxsIHJldHVybiB0aGUgY2xvc2VzdCBURCBvciBUQUJMRSBpbiBjYXNlXG4gIC8vIG5vIG9mZnNldFBhcmVudCBpcyBwcmVzZW50LCBJIGhhdGUgdGhpcyBqb2IuLi5cbiAgaWYgKFsnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQ7XG59XG5cbmZ1bmN0aW9uIGlzT2Zmc2V0Q29udGFpbmVyKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbm9kZU5hbWUgPT09ICdIVE1MJyB8fCBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkgPT09IGVsZW1lbnQ7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlXG4gKi9cbmZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBvZmZzZXQgcGFyZW50IGNvbW1vbiB0byB0aGUgdHdvIHByb3ZpZGVkIG5vZGVzXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQxXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gY29tbW9uIG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gSGVyZSB3ZSBtYWtlIHN1cmUgdG8gZ2l2ZSBhcyBcInN0YXJ0XCIgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBmaXJzdCBpbiB0aGUgRE9NXG4gIHZhciBvcmRlciA9IGVsZW1lbnQxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQyKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HO1xuICB2YXIgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XG4gIHZhciBlbmQgPSBvcmRlciA/IGVsZW1lbnQyIDogZWxlbWVudDE7XG5cbiAgLy8gR2V0IGNvbW1vbiBhbmNlc3RvciBjb250YWluZXJcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsIDApO1xuICByYW5nZS5zZXRFbmQoZW5kLCAwKTtcbiAgdmFyIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudFxuXG4gIGlmIChlbGVtZW50MSAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgJiYgZWxlbWVudDIgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIHx8IHN0YXJ0LmNvbnRhaW5zKGVuZCkpIHtcbiAgICBpZiAoaXNPZmZzZXRDb250YWluZXIoY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7XG4gICAgICByZXR1cm4gY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChjb21tb25BbmNlc3RvckNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBvbmUgb2YgdGhlIG5vZGVzIGlzIGluc2lkZSBzaGFkb3dET00sIGZpbmQgd2hpY2ggb25lXG4gIHZhciBlbGVtZW50MXJvb3QgPSBnZXRSb290KGVsZW1lbnQxKTtcbiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDFyb290Lmhvc3QsIGVsZW1lbnQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQgaW4gdGhlIGdpdmVuIHNpZGUgKHRvcCBhbmQgbGVmdClcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbW91bnQgb2Ygc2Nyb2xsZWQgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50KSB7XG4gIHZhciBzaWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAndG9wJztcblxuICB2YXIgdXBwZXJTaWRlID0gc2lkZSA9PT0gJ3RvcCcgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JztcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBzY3JvbGxpbmdFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgaHRtbDtcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudFt1cHBlclNpZGVdO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTtcbn1cblxuLypcbiAqIFN1bSBvciBzdWJ0cmFjdCB0aGUgZWxlbWVudCBzY3JvbGwgdmFsdWVzIChsZWZ0IGFuZCB0b3ApIGZyb20gYSBnaXZlbiByZWN0IG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgLSBSZWN0IG9iamVjdCB5b3Ugd2FudCB0byBjaGFuZ2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCBmcm9tIHRoZSBmdW5jdGlvbiByZWFkcyB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY3QgLSBUaGUgbW9kaWZpZXIgcmVjdCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50KSB7XG4gIHZhciBzdWJ0cmFjdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gIHZhciBtb2RpZmllciA9IHN1YnRyYWN0ID8gLTEgOiAxO1xuICByZWN0LnRvcCArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZXR1cm4gcmVjdDtcbn1cblxuLypcbiAqIEhlbHBlciB0byBkZXRlY3QgYm9yZGVycyBvZiBhIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzIC0gYHhgIG9yIGB5YFxuICogQHJldHVybiB7bnVtYmVyfSBib3JkZXJzIC0gVGhlIGJvcmRlcnMgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXhpc1xuICovXG5cbmZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcywgYXhpcykge1xuICB2YXIgc2lkZUEgPSBheGlzID09PSAneCcgPyAnTGVmdCcgOiAnVG9wJztcbiAgdmFyIHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJztcblxuICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQSArICdXaWR0aCddLCAxMCkgKyBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVCICsgJ1dpZHRoJ10sIDEwKTtcbn1cblxuLyoqXG4gKiBUZWxscyBpZiB5b3UgYXJlIHJ1bm5pbmcgSW50ZXJuZXQgRXhwbG9yZXIgMTBcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFMTBcbiAqL1xudmFyIGlzSUUxMCA9IHVuZGVmaW5lZDtcblxudmFyIGlzSUUxMCQxID0gZnVuY3Rpb24gKCkge1xuICBpZiAoaXNJRTEwID09PSB1bmRlZmluZWQpIHtcbiAgICBpc0lFMTAgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdNU0lFIDEwJykgIT09IC0xO1xuICB9XG4gIHJldHVybiBpc0lFMTA7XG59O1xuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFMTAkMSgpID8gaHRtbFsnb2Zmc2V0JyArIGF4aXNdICsgY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdUb3AnIDogJ0xlZnQnKV0gKyBjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnKV0gOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2l6ZXMoKSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRTEwJDEoKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHtcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHRcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIGlmIChpc0lFMTAkMSgpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuICB9IGVsc2Uge1xuICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcblxuICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzXG4gIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKCkgOiB7fTtcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQucmlnaHQgLSByZXN1bHQubGVmdDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuYm90dG9tIC0gcmVzdWx0LnRvcDtcblxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIHZhciB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgICBob3JpelNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd4Jyk7XG4gICAgdmVydFNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd5Jyk7XG5cbiAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7XG4gICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICB9XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgdmFyIGlzSUUxMCA9IGlzSUUxMCQxKCk7XG4gIHZhciBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJztcbiAgdmFyIGNoaWxkcmVuUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChjaGlsZHJlbik7XG4gIHZhciBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pO1xuXG4gIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTtcbiAgdmFyIGJvcmRlclRvcFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyVG9wV2lkdGgsIDEwKTtcbiAgdmFyIGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCwgMTApO1xuXG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wLCAxMCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG5cbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChodG1sKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKTtcblxuICB2YXIgb2Zmc2V0ID0ge1xuICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLFxuICAgIGxlZnQ6IHNjcm9sbExlZnQgLSByZWxhdGl2ZU9mZnNldC5sZWZ0ICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luTGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkKGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5mdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTtcblxuICAvLyBIYW5kbGUgdmlld3BvcnQgY2FzZVxuICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd2aWV3cG9ydCcpIHtcbiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSGFuZGxlIG90aGVyIGNhc2VzIGJhc2VkIG9uIERPTSBlbGVtZW50IHVzZWQgYXMgYm91bmRhcmllc1xuICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDtcbiAgICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKHJlZmVyZW5jZSkpO1xuICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xuICAgIH1cblxuICAgIHZhciBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGJvdW5kYXJpZXNOb2RlLCBvZmZzZXRQYXJlbnQpO1xuXG4gICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgdmFyIF9nZXRXaW5kb3dTaXplcyA9IGdldFdpbmRvd1NpemVzKCksXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcbiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDtcblxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBib3VuZGFyaWVzLmxlZnQgKz0gcGFkZGluZztcbiAgYm91bmRhcmllcy50b3AgKz0gcGFkZGluZztcbiAgYm91bmRhcmllcy5yaWdodCAtPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBwYWRkaW5nO1xuXG4gIHJldHVybiBib3VuZGFyaWVzO1xufVxuXG5mdW5jdGlvbiBnZXRBcmVhKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gIHJldHVybiB3aWR0aCAqIGhlaWdodDtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IHVzZWQgdG8gdHJhbnNmb3JtIHRoZSBgYXV0b2AgcGxhY2VtZW50IHRvIHRoZSBwbGFjZW1lbnQgd2l0aCBtb3JlXG4gKiBhdmFpbGFibGUgc3BhY2UuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChwbGFjZW1lbnQsIHJlZlJlY3QsIHBvcHBlciwgcmVmZXJlbmNlLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgcGFkZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDtcblxuICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2F1dG8nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgdmFyIHJlY3RzID0ge1xuICAgIHRvcDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlZlJlY3QudG9wIC0gYm91bmRhcmllcy50b3BcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy5yaWdodCAtIHJlZlJlY3QucmlnaHQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tXG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICB3aWR0aDogcmVmUmVjdC5sZWZ0IC0gYm91bmRhcmllcy5sZWZ0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH1cbiAgfTtcblxuICB2YXIgc29ydGVkQXJlYXMgPSBPYmplY3Qua2V5cyhyZWN0cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAga2V5OiBrZXlcbiAgICB9LCByZWN0c1trZXldLCB7XG4gICAgICBhcmVhOiBnZXRBcmVhKHJlY3RzW2tleV0pXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5hcmVhIC0gYS5hcmVhO1xuICB9KTtcblxuICB2YXIgZmlsdGVyZWRBcmVhcyA9IHNvcnRlZEFyZWFzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gX3JlZjIuaGVpZ2h0O1xuICAgIHJldHVybiB3aWR0aCA+PSBwb3BwZXIuY2xpZW50V2lkdGggJiYgaGVpZ2h0ID49IHBvcHBlci5jbGllbnRIZWlnaHQ7XG4gIH0pO1xuXG4gIHZhciBjb21wdXRlZFBsYWNlbWVudCA9IGZpbHRlcmVkQXJlYXMubGVuZ3RoID4gMCA/IGZpbHRlcmVkQXJlYXNbMF0ua2V5IDogc29ydGVkQXJlYXNbMF0ua2V5O1xuXG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICByZXR1cm4gY29tcHV0ZWRQbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UpIHtcbiAgdmFyIGNvbW1vbk9mZnNldFBhcmVudCA9IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCByZWZlcmVuY2UpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgdmFyIHN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHZhciBoYXNoID0geyBsZWZ0OiAncmlnaHQnLCByaWdodDogJ2xlZnQnLCBib3R0b206ICd0b3AnLCB0b3A6ICdib3R0b20nIH07XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTtcblxuICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0XG4gIHZhciBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHRcbiAgfTtcblxuICAvLyBkZXBlbmRpbmcgYnkgdGhlIHBvcHBlciBwbGFjZW1lbnQgd2UgaGF2ZSB0byBjb21wdXRlIGl0cyBvZmZzZXRzIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW21haW5TaWRlXSArIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoc2Vjb25kYXJ5U2lkZSldO1xuICB9XG5cbiAgcmV0dXJuIHBvcHBlck9mZnNldHM7XG59XG5cbi8qKlxuICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmQoYXJyLCBjaGVjaykge1xuICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgIHJldHVybiBhcnIuZmluZChjaGVjayk7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYFxuICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG5cbi8qKlxuICogTG9vcCB0cm91Z2ggdGhlIGxpc3Qgb2YgbW9kaWZpZXJzIGFuZCBydW4gdGhlbSBpbiBvcmRlcixcbiAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IGVuZHMgLSBPcHRpb25hbCBtb2RpZmllciBuYW1lIHVzZWQgYXMgc3RvcHBlclxuICogQHJldHVybnMge2RhdGFPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHtcbiAgdmFyIG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkID8gbW9kaWZpZXJzIDogbW9kaWZpZXJzLnNsaWNlKDAsIGZpbmRJbmRleChtb2RpZmllcnMsICduYW1lJywgZW5kcykpO1xuXG4gIG1vZGlmaWVyc1RvUnVuLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKG1vZGlmaWVyWydmdW5jdGlvbiddKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgY29uc29sZS53YXJuKCdgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIScpO1xuICAgIH1cbiAgICB2YXIgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcbiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+XG4gKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyBpZiBwb3BwZXIgaXMgZGVzdHJveWVkLCBkb24ndCBwZXJmb3JtIGFueSBmdXJ0aGVyIHVwZGF0ZVxuICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhID0ge1xuICAgIGluc3RhbmNlOiB0aGlzLFxuICAgIHN0eWxlczoge30sXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGZsaXBwZWQ6IGZhbHNlLFxuICAgIG9mZnNldHM6IHt9XG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQodGhpcy5vcHRpb25zLnBsYWNlbWVudCwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICAvLyBzdG9yZSB0aGUgY29tcHV0ZWQgcGxhY2VtZW50IGluc2lkZSBgb3JpZ2luYWxQbGFjZW1lbnRgXG4gIGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0UG9wcGVyT2Zmc2V0cyh0aGlzLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpO1xuICBkYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgaXMgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyRW5hYmxlZChtb2RpZmllcnMsIG1vZGlmaWVyTmFtZSkge1xuICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgZW5hYmxlZCA9IF9yZWYuZW5hYmxlZDtcbiAgICByZXR1cm4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICB2YXIgcHJlZml4ZXMgPSBbZmFsc2UsICdtcycsICdXZWJraXQnLCAnTW96JywgJ08nXTtcbiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgdmFyIHRvQ2hlY2sgPSBwcmVmaXggPyAnJyArIHByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBEZXN0cm95IHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmxlZnQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnRvcCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXR5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge1dpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KGVsZW1lbnQpIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uXG4gKiB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4gSXQgYWxzbyB3b24ndCB0cmlnZ2VyIG9uVXBkYXRlIGNhbGxiYWNrIGFueW1vcmUsXG4gKiB1bmxlc3MgeW91IGNhbGwgYHVwZGF0ZWAgbWV0aG9kIG1hbnVhbGx5LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICh0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgICB0aGlzLnN0YXRlID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMuc3RhdGUpO1xuICB9XG59XG5cbi8qKlxuICogVGVsbHMgaWYgYSBnaXZlbiBpbnB1dCBpcyBhIG51bWJlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHsqfSBpbnB1dCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNOdW1lcmljKG4pIHtcbiAgcmV0dXJuIG4gIT09ICcnICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB1bml0ID0gJyc7XG4gICAgLy8gYWRkIHVuaXQgaWYgdGhlIHZhbHVlIGlzIG51bWVyaWMgYW5kIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gICAgaWYgKFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLmluZGV4T2YocHJvcCkgIT09IC0xICYmIGlzTnVtZXJpYyhzdHlsZXNbcHJvcF0pKSB7XG4gICAgICB1bml0ID0gJ3B4JztcbiAgICB9XG4gICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlc1twcm9wXSArIHVuaXQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgYXR0cmlidXRlcyB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBhdHRyaWJ1dGVzIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcF07XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocHJvcCwgYXR0cmlidXRlc1twcm9wXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5zdHlsZXMgLSBMaXN0IG9mIHN0eWxlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLmF0dHJpYnV0ZXMgLSBMaXN0IG9mIGF0dHJpYnV0ZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc2FtZSBkYXRhIG9iamVjdFxuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlKGRhdGEpIHtcbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuc3R5bGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gaW4gdGhpcyB3YXkgd2UgY2FuIG1ha2UgdGhlIDNyZCBwYXJ0eSBtb2RpZmllcnMgYWRkIGN1c3RvbSBzdHlsZXMgdG8gaXRcbiAgLy8gQmUgYXdhcmUsIG1vZGlmaWVycyBjb3VsZCBvdmVycmlkZSB0aGUgcHJvcGVydGllcyBkZWZpbmVkIGluIHRoZSBwcmV2aW91c1xuICAvLyBsaW5lcyBvZiB0aGlzIG1vZGlmaWVyIVxuICBzZXRTdHlsZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuc3R5bGVzKTtcblxuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5hdHRyaWJ1dGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gdGhleSB3aWxsIGJlIHNldCBhcyBIVE1MIGF0dHJpYnV0ZXMgb2YgdGhlIGVsZW1lbnRcbiAgc2V0QXR0cmlidXRlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5hdHRyaWJ1dGVzKTtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgZGVmaW5lZCBhbmQgYXJyb3dTdHlsZXMgaGFzIHNvbWUgcHJvcGVydGllc1xuICBpZiAoZGF0YS5hcnJvd0VsZW1lbnQgJiYgT2JqZWN0LmtleXMoZGF0YS5hcnJvd1N0eWxlcykubGVuZ3RoKSB7XG4gICAgc2V0U3R5bGVzKGRhdGEuYXJyb3dFbGVtZW50LCBkYXRhLmFycm93U3R5bGVzKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFNldCB0aGUgeC1wbGFjZW1lbnQgYXR0cmlidXRlIGJlZm9yZSBldmVyeXRoaW5nIGVsc2UgYmVjYXVzZSBpdCBjb3VsZCBiZSB1c2VkXG4gKiB0byBhZGQgbWFyZ2lucyB0byB0aGUgcG9wcGVyIG1hcmdpbnMgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZCB0byBnZXQgdGhlXG4gKiBjb3JyZWN0IHBvcHBlciBvZmZzZXRzLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5tb2RpZmllcnNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFBvcHBlci5qcyBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGVPbkxvYWQocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgc3RhdGUpIHtcbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIHZhciByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246ICdhYnNvbHV0ZScgfSk7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciB4ID0gb3B0aW9ucy54LFxuICAgICAgeSA9IG9wdGlvbnMueTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVnYWN5IHN1cHBvcnQgaW4gUG9wcGVyLmpzIHYyXG5cbiAgdmFyIGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZSc7XG4gIH0pLmdwdUFjY2VsZXJhdGlvbjtcbiAgaWYgKGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpO1xuICB9XG4gIHZhciBncHVBY2NlbGVyYXRpb24gPSBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCA/IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA6IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uO1xuXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgb2Zmc2V0UGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuXG4gIC8vIFN0eWxlc1xuICB2YXIgc3R5bGVzID0ge1xuICAgIHBvc2l0aW9uOiBwb3BwZXIucG9zaXRpb25cbiAgfTtcblxuICAvLyBmbG9vciBzaWRlcyB0byBhdm9pZCBibHVycnkgdGV4dFxuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICBsZWZ0OiBNYXRoLmZsb29yKHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IE1hdGguZmxvb3IocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiBNYXRoLmZsb29yKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBNYXRoLmZsb29yKHBvcHBlci5yaWdodClcbiAgfTtcblxuICB2YXIgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIHZhciBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG5cbiAgLy8gbm93LCBsZXQncyBtYWtlIGEgc3RlcCBiYWNrIGFuZCBsb29rIGF0IHRoaXMgY29kZSBjbG9zZWx5ICh3dGY/KVxuICAvLyBJZiB0aGUgY29udGVudCBvZiB0aGUgcG9wcGVyIGdyb3dzIG9uY2UgaXQncyBiZWVuIHBvc2l0aW9uZWQsIGl0XG4gIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50XG4gIC8vIG92ZXJmbG93aW5nIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUbyBhdm9pZCB0aGlzIHByb2JsZW0sIHdlIHByb3ZpZGUgdHdvIG9wdGlvbnMgKHggYW5kIHkpLCB3aGljaCBhbGxvd1xuICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLlxuICAvLyBJZiB3ZSBwb3NpdGlvbiBhIHBvcHBlciBvbiB0b3Agb2YgYSByZWZlcmVuY2UgZWxlbWVudCwgd2UgY2FuIHNldFxuICAvLyBgeGAgdG8gYHRvcGAgdG8gbWFrZSB0aGUgcG9wcGVyIGdyb3cgdG93YXJkcyBpdHMgdG9wIGluc3RlYWQgb2ZcbiAgLy8gaXRzIGJvdHRvbS5cbiAgdmFyIGxlZnQgPSB2b2lkIDAsXG4gICAgICB0b3AgPSB2b2lkIDA7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7XG4gIH0pO1xuXG4gIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyO1xuICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcbiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJztcbiAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XG5cbiAgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29ya1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXJcbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXG4gICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlXG4gICAgaWYgKCFkYXRhLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnO1xuICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVjdGlvblxuICAvL1xuXG4gIC8vIHRvcC9sZWZ0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSA8IHBvcHBlcltzaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLT0gcG9wcGVyW3NpZGVdIC0gKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSk7XG4gIH1cbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgPiBwb3BwZXJbb3BTaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz0gcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdO1xuICB9XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuXG4gIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXJcbiAgdmFyIGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICB2YXIgY3NzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIHBvcHBlck1hcmdpblNpZGUgPSBwYXJzZUZsb2F0KGNzc1snbWFyZ2luJyArIHNpZGVDYXBpdGFsaXplZF0sIDEwKTtcbiAgdmFyIHBvcHBlckJvcmRlclNpZGUgPSBwYXJzZUZsb2F0KGNzc1snYm9yZGVyJyArIHNpZGVDYXBpdGFsaXplZCArICdXaWR0aCddLCAxMCk7XG4gIHZhciBzaWRlVmFsdWUgPSBjZW50ZXIgLSBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC0gcG9wcGVyTWFyZ2luU2lkZSAtIHBvcHBlckJvcmRlclNpZGU7XG5cbiAgLy8gcHJldmVudCBhcnJvd0VsZW1lbnQgZnJvbSBiZWluZyBwbGFjZWQgbm90IGNvbnRpZ3VvdXNseSB0byBpdHMgcG9wcGVyXG4gIHNpZGVWYWx1ZSA9IE1hdGgubWF4KE1hdGgubWluKHBvcHBlcltsZW5dIC0gYXJyb3dFbGVtZW50U2l6ZSwgc2lkZVZhbHVlKSwgMCk7XG5cbiAgZGF0YS5hcnJvd0VsZW1lbnQgPSBhcnJvd0VsZW1lbnQ7XG4gIGRhdGEub2Zmc2V0cy5hcnJvdyA9IChfZGF0YSRvZmZzZXRzJGFycm93ID0ge30sIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIHNpZGUsIE1hdGgucm91bmQoc2lkZVZhbHVlKSksIGRlZmluZVByb3BlcnR5KF9kYXRhJG9mZnNldHMkYXJyb3csIGFsdFNpZGUsICcnKSwgX2RhdGEkb2Zmc2V0cyRhcnJvdyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgdmFyaWF0aW9uIG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudCB2YXJpYXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKSB7XG4gIGlmICh2YXJpYXRpb24gPT09ICdlbmQnKSB7XG4gICAgcmV0dXJuICdzdGFydCc7XG4gIH0gZWxzZSBpZiAodmFyaWF0aW9uID09PSAnc3RhcnQnKSB7XG4gICAgcmV0dXJuICdlbmQnO1xuICB9XG4gIHJldHVybiB2YXJpYXRpb247XG59XG5cbi8qKlxuICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz5cbiAqIFZhbGlkIHBsYWNlbWVudHMgYXJlOlxuICogLSBgYXV0b2BcbiAqIC0gYHRvcGBcbiAqIC0gYHJpZ2h0YFxuICogLSBgYm90dG9tYFxuICogLSBgbGVmdGBcbiAqXG4gKiBFYWNoIHBsYWNlbWVudCBjYW4gaGF2ZSBhIHZhcmlhdGlvbiBmcm9tIHRoaXMgbGlzdDpcbiAqIC0gYC1zdGFydGBcbiAqIC0gYC1lbmRgXG4gKlxuICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0XG4gKiB3cml0dGVuIGxhbmd1YWdlcy4gSG9yaXpvbnRhbGx5IChgdG9wYCBhbmQgYGJvdHRvbWApLCBgc3RhcnRgIGlzIGxlZnQgYW5kIGBlbmRgXG4gKiBpcyByaWdodC48YnIgLz5cbiAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uXG4gKlxuICogU29tZSB2YWxpZCBleGFtcGxlcyBhcmU6XG4gKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZClcbiAqIC0gYHJpZ2h0LXN0YXJ0YCAob24gcmlnaHQgb2YgcmVmZXJlbmNlLCB0b3AgYWxpZ25lZClcbiAqIC0gYGJvdHRvbWAgKG9uIGJvdHRvbSwgY2VudGVyZWQpXG4gKiAtIGBhdXRvLXJpZ2h0YCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnO1xuXG4gIHZhciBmbGlwT3JkZXIgPSBbXTtcblxuICBzd2l0Y2ggKG9wdGlvbnMuYmVoYXZpb3IpIHtcbiAgICBjYXNlIEJFSEFWSU9SUy5GTElQOlxuICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DT1VOVEVSQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjtcbiAgfVxuXG4gIGZsaXBPcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwLCBpbmRleCkge1xuICAgIGlmIChwbGFjZW1lbnQgIT09IHN0ZXAgfHwgZmxpcE9yZGVyLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICAgIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBwb3BwZXJPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcbiAgICB2YXIgcmVmT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgICAvLyB1c2luZyBmbG9vciBiZWNhdXNlIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyBtYXkgY29udGFpbiBkZWNpbWFscyB3ZSBhcmUgbm90IGdvaW5nIHRvIGNvbnNpZGVyIGhlcmVcbiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgIHZhciBvdmVybGFwc1JlZiA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IocmVmT2Zmc2V0cy5sZWZ0KSB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKHJlZk9mZnNldHMucmlnaHQpIHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IocmVmT2Zmc2V0cy50b3ApIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IocmVmT2Zmc2V0cy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0xlZnQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IoYm91bmRhcmllcy5sZWZ0KTtcbiAgICB2YXIgb3ZlcmZsb3dzUmlnaHQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKGJvdW5kYXJpZXMucmlnaHQpO1xuICAgIHZhciBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7XG4gICAgdmFyIG92ZXJmbG93c0JvdHRvbSA9IGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NCb3VuZGFyaWVzID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBvdmVyZmxvd3NUb3AgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBvdmVyZmxvd3NCb3R0b207XG5cbiAgICAvLyBmbGlwIHRoZSB2YXJpYXRpb24gaWYgcmVxdWlyZWRcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3AgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXG4gICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlO1xuXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xuICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgICAgdmFyaWF0aW9uID0gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xuXG4gICAgICAvLyB0aGlzIG9iamVjdCBjb250YWlucyBgcG9zaXRpb25gLCB3ZSB3YW50IHRvIHByZXNlcnZlIGl0IGFsb25nIHdpdGhcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHByb3BlcnR5IHdlIG1heSBhZGQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMucG9wcGVyLCBnZXRQb3BwZXJPZmZzZXRzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCkpO1xuXG4gICAgICBkYXRhID0gcnVuTW9kaWZpZXJzKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBkYXRhLCAnZmxpcCcpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pIC0gcG9wcGVyW21lYXN1cmVtZW50XTtcbiAgfVxuICBpZiAocG9wcGVyW29wU2lkZV0gPiBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsdWUgKyB1bml0IGludG8gYSBweCB2YWx1ZSBudW1iZXJcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nXG4gKiBAYXJndW1lbnQge1N0cmluZ30gbWVhc3VyZW1lbnQgLSBgaGVpZ2h0YCBvciBgd2lkdGhgXG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEByZXR1cm5zIHtOdW1iZXJ8U3RyaW5nfVxuICogVmFsdWUgaW4gcGl4ZWxzLCBvciBvcmlnaW5hbCBzdHJpbmcgaWYgbm8gdmFsdWVzIHdlcmUgZXh0cmFjdGVkXG4gKi9cbmZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgdmFyIHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKTtcbiAgdmFyIHZhbHVlID0gK3NwbGl0WzFdO1xuICB2YXIgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICB2YXIgZWxlbWVudCA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7XG4gICAgcmV0dXJuIHJlY3RbbWVhc3VyZW1lbnRdIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3ZoJyB8fCB1bml0ID09PSAndncnKSB7XG4gICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydFxuICAgIHZhciBzaXplID0gdm9pZCAwO1xuICAgIGlmICh1bml0ID09PSAndmgnKSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZVxuICAgIC8vIGlmIGlzIGFuIGltcGxpY2l0IHVuaXQsIGl0J3MgcHgsIGFuZCB3ZSByZXR1cm4ganVzdCB0aGUgdmFsdWVcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBgb2Zmc2V0YCBzdHJpbmcgdG8gZXh0cmFwb2xhdGUgYHhgIGFuZCBgeWAgbnVtZXJpYyBvZmZzZXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IG9mZnNldFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gYmFzZVBsYWNlbWVudFxuICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cywgYmFzZVBsYWNlbWVudCkge1xuICB2YXIgb2Zmc2V0cyA9IFswLCAwXTtcblxuICAvLyBVc2UgaGVpZ2h0IGlmIHBsYWNlbWVudCBpcyBsZWZ0IG9yIHJpZ2h0IGFuZCBpbmRleCBpcyAwIG90aGVyd2lzZSB1c2Ugd2lkdGhcbiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZVxuICAvLyB3aWxsIHVzZSB0aGUgb3RoZXIgb25lXG4gIHZhciB1c2VIZWlnaHQgPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHNcbiAgLy8gVGhlIHJlZ2V4IGFkZHJlc3NlcyB2YWx1ZXMgd2l0aCB0aGUgcGx1cyBvciBtaW51cyBzaWduIGluIGZyb250ICgrMTAsIC0yMCwgZXRjKVxuICB2YXIgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy50cmltKCk7XG4gIH0pO1xuXG4gIC8vIERldGVjdCBpZiB0aGUgb2Zmc2V0IHN0cmluZyBjb250YWlucyBhIHBhaXIgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIG9uZVxuICAvLyB0aGV5IGNvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYSBvciBzcGFjZVxuICB2YXIgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKGZpbmQoZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTE7XG4gIH0pKTtcblxuICBpZiAoZnJhZ21lbnRzW2RpdmlkZXJdICYmIGZyYWdtZW50c1tkaXZpZGVyXS5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgY29uc29sZS53YXJuKCdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJyk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICB2YXIgc3BsaXRSZWdleCA9IC9cXHMqLFxccyp8XFxzKy87XG4gIHZhciBvcHMgPSBkaXZpZGVyICE9PSAtMSA/IFtmcmFnbWVudHMuc2xpY2UoMCwgZGl2aWRlcikuY29uY2F0KFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMF1dKSwgW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVsxXV0uY29uY2F0KGZyYWdtZW50cy5zbGljZShkaXZpZGVyICsgMSkpXSA6IFtmcmFnbWVudHNdO1xuXG4gIC8vIENvbnZlcnQgdGhlIHZhbHVlcyB3aXRoIHVuaXRzIHRvIGFic29sdXRlIHBpeGVscyB0byBhbGxvdyBvdXIgY29tcHV0YXRpb25zXG4gIG9wcyA9IG9wcy5tYXAoZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXJcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSAoaW5kZXggPT09IDEgPyAhdXNlSGVpZ2h0IDogdXNlSGVpZ2h0KSA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gb3BcbiAgICAvLyBUaGlzIGFnZ3JlZ2F0ZXMgYW55IGArYCBvciBgLWAgc2lnbiB0aGF0IGFyZW4ndCBjb25zaWRlcmVkIG9wZXJhdG9yc1xuICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV1cbiAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZiAoYVthLmxlbmd0aCAtIDFdID09PSAnJyAmJiBbJysnLCAnLSddLmluZGV4T2YoYikgIT09IC0xKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgIH1cbiAgICB9LCBbXSlcbiAgICAvLyBIZXJlIHdlIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZXMgaW50byBudW1iZXIgdmFsdWVzIChpbiBweClcbiAgICAubWFwKGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHJldHVybiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBMb29wIHRyb3VnaCB0aGUgb2Zmc2V0cyBhcnJheXMgYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbnNcbiAgb3BzLmZvckVhY2goZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4Mikge1xuICAgICAgaWYgKGlzTnVtZXJpYyhmcmFnKSkge1xuICAgICAgICBvZmZzZXRzW2luZGV4XSArPSBmcmFnICogKG9wW2luZGV4MiAtIDFdID09PSAnLScgPyAtMSA6IDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQGFyZ3VtZW50IHtOdW1iZXJ8U3RyaW5nfSBvcHRpb25zLm9mZnNldD0wXG4gKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHtcbiAgdmFyIG9mZnNldCA9IF9yZWYub2Zmc2V0O1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQsXG4gICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIHZhciBvZmZzZXRzID0gdm9pZCAwO1xuICBpZiAoaXNOdW1lcmljKCtvZmZzZXQpKSB7XG4gICAgb2Zmc2V0cyA9IFsrb2Zmc2V0LCAwXTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRzID0gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYmFzZVBsYWNlbWVudCk7XG4gIH1cblxuICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTtcbiAgfVxuXG4gIGRhdGEucG9wcGVyID0gcG9wcGVyO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuXG4gIC8vIElmIG9mZnNldFBhcmVudCBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIHJlYWxseSB3YW50IHRvXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xuICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuXG4gIGlmIChkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSA9PT0gYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcbiAgb3B0aW9ucy5ib3VuZGFyaWVzID0gYm91bmRhcmllcztcblxuICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICB2YXIgY2hlY2sgPSB7XG4gICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlcltwbGFjZW1lbnRdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdIDwgYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgcGxhY2VtZW50LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZWNvbmRhcnk6IGZ1bmN0aW9uIHNlY29uZGFyeShwbGFjZW1lbnQpIHtcbiAgICAgIHZhciBtYWluU2lkZSA9IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA+IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5taW4ocG9wcGVyW21haW5TaWRlXSwgYm91bmRhcmllc1twbGFjZW1lbnRdIC0gKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IHBvcHBlci53aWR0aCA6IHBvcHBlci5oZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eSh7fSwgbWFpblNpZGUsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb3JkZXIuZm9yRWFjaChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgdmFyIHNpZGUgPSBbJ2xlZnQnLCAndG9wJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMSA/ICdwcmltYXJ5JyA6ICdzZWNvbmRhcnknO1xuICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpO1xuICB9KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gcG9wcGVyO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBzaGlmdChkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgLy8gaWYgc2hpZnQgc2hpZnR2YXJpYXRpb24gaXMgc3BlY2lmaWVkLCBydW4gdGhlIG1vZGlmaWVyXG4gIGlmIChzaGlmdHZhcmlhdGlvbikge1xuICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXI7XG5cbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuICAgIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICAgIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgICB2YXIgc2hpZnRPZmZzZXRzID0ge1xuICAgICAgc3RhcnQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0pLFxuICAgICAgZW5kOiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW21lYXN1cmVtZW50XSAtIHBvcHBlclttZWFzdXJlbWVudF0pXG4gICAgfTtcblxuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBzaGlmdE9mZnNldHNbc2hpZnR2YXJpYXRpb25dKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaGlkZShkYXRhKSB7XG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaGlkZScsICdwcmV2ZW50T3ZlcmZsb3cnKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIHJlZlJlY3QgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgYm91bmQgPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7XG4gIH0pLmJvdW5kYXJpZXM7XG5cbiAgaWYgKHJlZlJlY3QuYm90dG9tIDwgYm91bmQudG9wIHx8IHJlZlJlY3QubGVmdCA+IGJvdW5kLnJpZ2h0IHx8IHJlZlJlY3QudG9wID4gYm91bmQuYm90dG9tIHx8IHJlZlJlY3QucmlnaHQgPCBib3VuZC5sZWZ0KSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gdHJ1ZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSBmYWxzZTtcbiAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGlubmVyKGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzSG9yaXogPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7XG5cbiAgcG9wcGVyW2lzSG9yaXogPyAnbGVmdCcgOiAndG9wJ10gPSByZWZlcmVuY2VbYmFzZVBsYWNlbWVudF0gLSAoc3VidHJhY3RMZW5ndGggPyBwb3BwZXJbaXNIb3JpeiA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gOiAwKTtcblxuICBkYXRhLnBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogTW9kaWZpZXIgZnVuY3Rpb24sIGVhY2ggbW9kaWZpZXIgY2FuIGhhdmUgYSBmdW5jdGlvbiBvZiB0aGlzIHR5cGUgYXNzaWduZWRcbiAqIHRvIGl0cyBgZm5gIHByb3BlcnR5LjxiciAvPlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3RcbiAqIG1ha2Ugc3VyZSB0aGV5IGFyZSBwZXJmb3JtYW50IGVub3VnaCB0byBhdm9pZCBwZXJmb3JtYW5jZSBib3R0bGVuZWNrcy5cbiAqXG4gKiBAZnVuY3Rpb24gTW9kaWZpZXJGblxuICogQGFyZ3VtZW50IHtkYXRhT2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cblxuLyoqXG4gKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPlxuICogUG9wcGVyLmpzIHVzZXMgYSBzZXQgb2YgOSBtb2RpZmllcnMgdG8gcHJvdmlkZSBhbGwgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdGllc1xuICogbmVlZGVkIGJ5IHRoZSBsaWJyYXJ5LlxuICpcbiAqIFVzdWFsbHkgeW91IGRvbid0IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGBvcmRlcmAsIGBmbmAgYW5kIGBvbkxvYWRgIHByb3BzLlxuICogQWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGFyZSBjb25maWd1cmF0aW9ucyB0aGF0IGNvdWxkIGJlIHR3ZWFrZWQuXG4gKiBAbmFtZXNwYWNlIG1vZGlmaWVyc1xuICovXG52YXIgbW9kaWZpZXJzID0ge1xuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBzaGlmdCB0aGUgcG9wcGVyIG9uIHRoZSBzdGFydCBvciBlbmQgb2YgaXRzIHJlZmVyZW5jZVxuICAgKiBlbGVtZW50LjxiciAvPlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+XG4gICAqIEl0IGNhbiBiZSBvbmUgZWl0aGVyIGAtZW5kYCBvciBgLXN0YXJ0YC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHNoaWZ0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogc2hpZnRcbiAgfSxcblxuICAvKipcbiAgICogVGhlIGBvZmZzZXRgIG1vZGlmaWVyIGNhbiBzaGlmdCB5b3VyIHBvcHBlciBvbiBib3RoIGl0cyBheGlzLlxuICAgKlxuICAgKiBJdCBhY2NlcHRzIHRoZSBmb2xsb3dpbmcgdW5pdHM6XG4gICAqIC0gYHB4YCBvciB1bml0bGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgaGVpZ2h0LlxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlc1xuICAgKiBhcyBgU3RyaW5nYCBkaXZpZGVkIGJ5IGEgY29tbWEgb3Igb25lIChvciBtb3JlKSB3aGl0ZSBzcGFjZXMuPGJyIC8+XG4gICAqIFRoZSBsYXR0ZXIgaXMgYSBkZXByZWNhdGVkIG1ldGhvZCBiZWNhdXNlIGl0IGxlYWRzIHRvIGNvbmZ1c2lvbiBhbmQgd2lsbCBiZVxuICAgKiByZW1vdmVkIGluIHYyLjxiciAvPlxuICAgKiBBZGRpdGlvbmFsbHksIGl0IGFjY2VwdHMgYWRkaXRpb25zIGFuZCBzdWJ0cmFjdGlvbnMgYmV0d2VlbiBkaWZmZXJlbnQgdW5pdHMuXG4gICAqIE5vdGUgdGhhdCBtdWx0aXBsaWNhdGlvbnMgYW5kIGRpdmlzaW9ucyBhcmVuJ3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBWYWxpZCBleGFtcGxlcyBhcmU6XG4gICAqIGBgYFxuICAgKiAxMFxuICAgKiAnMTAlJ1xuICAgKiAnMTAsIDEwJ1xuICAgKiAnMTAlLCAxMCdcbiAgICogJzEwICsgMTAlJ1xuICAgKiAnMTAgLSA1dmggKyAzJSdcbiAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JSdcbiAgICogYGBgXG4gICAqID4gKipOQioqOiBJZiB5b3UgZGVzaXJlIHRvIGFwcGx5IG9mZnNldHMgdG8geW91ciBwb3BwZXJzIGluIGEgd2F5IHRoYXQgbWF5IG1ha2UgdGhlbSBvdmVybGFwXG4gICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuXG4gICAqID4gTW9yZSBvbiB0aGlzIFtyZWFkaW5nIHRoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBvZmZzZXQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBvZmZzZXQsXG4gICAgLyoqIEBwcm9wIHtOdW1iZXJ8U3RyaW5nfSBvZmZzZXQ9MFxuICAgICAqIFRoZSBvZmZzZXQgdmFsdWUgYXMgZGVzY3JpYmVkIGluIHRoZSBtb2RpZmllciBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIG9mZnNldDogMFxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHByZXZlbnQgdGhlIHBvcHBlciBmcm9tIGJlaW5nIHBvc2l0aW9uZWQgb3V0c2lkZSB0aGUgYm91bmRhcnkuXG4gICAqXG4gICAqIEFuIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIgdGhpcyBtYWtlcyBzdXJlIHRoZSBwb3BwZXIgaGFzIGFsd2F5cyBhIGxpdHRsZSBwYWRkaW5nXG4gICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3Njcm9sbFBhcmVudCdcbiAgICAgKiBCb3VuZGFyaWVzIHVzZWQgYnkgdGhlIG1vZGlmaWVyLCBjYW4gYmUgYHNjcm9sbFBhcmVudGAsIGB3aW5kb3dgLFxuICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50LlxuICAgICAqL1xuICAgIGJvdW5kYXJpZXNFbGVtZW50OiAnc2Nyb2xsUGFyZW50J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgcmVmZXJlbmNlIGFuZCBpdHMgcG9wcGVyIHN0YXkgbmVhciBlYWNob3RoZXJzXG4gICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXhwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXNcbiAgICogZW5hYmxlZCBhbmQgeW91IHdhbnQgdG8gYXNzdXJlIGl0IHRvIHBvaW50IHRvIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogSXQgY2FyZXMgb25seSBhYm91dCB0aGUgZmlyc3QgYXhpcywgeW91IGNhbiBzdGlsbCBoYXZlIHBvcHBlcnMgd2l0aCBtYXJnaW5cbiAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBrZWVwVG9nZXRoZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NDAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBrZWVwVG9nZXRoZXJcbiAgfSxcblxuICAvKipcbiAgICogVGhpcyBtb2RpZmllciBpcyB1c2VkIHRvIG1vdmUgdGhlIGBhcnJvd0VsZW1lbnRgIG9mIHRoZSBwb3BwZXIgdG8gbWFrZVxuICAgKiBzdXJlIGl0IGlzIHBvc2l0aW9uZWQgYmV0d2VlbiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgYW5kIGl0cyBwb3BwZXIgZWxlbWVudC5cbiAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueVxuICAgKiBwaXhlbHMgb2YgY29uanVjdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpLlxuICAgICAqL1xuICAgIGJlaGF2aW9yOiAnZmxpcCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogVGhlIHBvcHBlciB3aWxsIGZsaXAgaWYgaXQgaGl0cyB0aGUgZWRnZXMgb2YgdGhlIGBib3VuZGFyaWVzRWxlbWVudGBcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCdcbiAgICAgKiBUaGUgZWxlbWVudCB3aGljaCB3aWxsIGRlZmluZSB0aGUgYm91bmRhcmllcyBvZiB0aGUgcG9wcGVyIHBvc2l0aW9uLFxuICAgICAqIHRoZSBwb3BwZXIgd2lsbCBuZXZlciBiZSBwbGFjZWQgb3V0c2lkZSBvZiB0aGUgZGVmaW5lZCBib3VuZGFyaWVzXG4gICAgICogKGV4Y2VwdCBpZiBrZWVwVG9nZXRoZXIgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM2QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdSBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNkIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9ucyB1c2VkIGJ5IFBvcHBlci5qc1xuICogdGhpcyBvYmplY3QgZ2V0IHBhc3NlZCB0byBtb2RpZmllcnMgYW5kIHRvIHRoZSBgb25DcmVhdGVgIGFuZCBgb25VcGRhdGVgIGNhbGxiYWNrcy5cbiAqIEBuYW1lIGRhdGFPYmplY3RcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmluc3RhbmNlIFRoZSBQb3BwZXIuanMgaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLnBsYWNlbWVudCBQbGFjZW1lbnQgYXBwbGllZCB0byBwb3BwZXJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdFxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmZsaXBwZWQgVHJ1ZSBpZiBwb3BwZXIgaGFzIGJlZW4gZmxpcHBlZCBieSBmbGlwIG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuaGlkZSBUcnVlIGlmIHRoZSByZWZlcmVuY2UgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRhcmllcywgdXNlZnVsIHRvIGtub3cgd2hlbiB0byBoaWRlIHRoZSBwb3BwZXIuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciwgaXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LCBpdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50cy5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYXMgM3JkIGFyZ3VtZW50IGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhpcyBvYmplY3QsIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50XG4gICAqIEBwcm9wIHtQb3BwZXIucGxhY2VtZW50c30gcGxhY2VtZW50PSdib3R0b20nXG4gICAqL1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZW50cyAocmVzaXplLCBzY3JvbGwpIGFyZSBpbml0aWFsbHkgZW5hYmxlZFxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlXG4gICAqL1xuICBldmVudHNFbmFibGVkOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcG9wcGVyIHdoZW5cbiAgICogeW91IGNhbGwgdGhlIGBkZXN0cm95YCBtZXRob2QuXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcbiAgICovXG4gIHJlbW92ZU9uRGVzdHJveTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgY3JlYXRlZC48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25DcmVhdGV9XG4gICAqL1xuICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7fSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyB1cGRhdGVkLCB0aGlzIGNhbGxiYWNrIGlzIG5vdCBjYWxsZWRcbiAgICogb24gdGhlIGluaXRpYWxpemF0aW9uL2NyZWF0aW9uIG9mIHRoZSBwb3BwZXIsIGJ1dCBvbmx5IG9uIHN1YnNlcXVlbnRcbiAgICogdXBkYXRlcy48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25VcGRhdGV9XG4gICAqL1xuICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7fSxcblxuICAvKipcbiAgICogTGlzdCBvZiBtb2RpZmllcnMgdXNlZCB0byBtb2RpZnkgdGhlIG9mZnNldHMgYmVmb3JlIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci5cbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanNcbiAgICogQHByb3Age21vZGlmaWVyc31cbiAgICovXG4gIG1vZGlmaWVyczogbW9kaWZpZXJzXG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBvbkNyZWF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgb25VcGRhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8vIFV0aWxzXG4vLyBNZXRob2RzXG52YXIgUG9wcGVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKiBAY2xhc3MgUG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzLnVwZGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcbiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSQkMSgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZSBhbiB1cGRhdGUsIGl0IHdpbGwgcnVuIG9uIHRoZSBuZXh0IFVJIHVwZGF0ZSBhdmFpbGFibGVcbiAgICAgKiBAbWV0aG9kIHNjaGVkdWxlVXBkYXRlXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuXG4gICAgICogU3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDEuNywgdGhpcyBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgaWYgeW91XG4gICAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAgICpcbiAgICAgKiAqKkRFUFJFQ0FUSU9OKio6IFRoaXMgd2F5IHRvIGFjY2VzcyBQb3BwZXJVdGlscyBpcyBkZXByZWNhdGVkXG4gICAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndFxuICAgICAqIGd1YXJhbnRlZSB0aGVtIHRvIGZvbGxvdyBzZW12ZXIuIFVzZSB0aGVtIGF0IHlvdXIgb3duIHJpc2shXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgICAqIEBtZW1iZXIgVXRpbHNcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cbiAgfV0pO1xuICByZXR1cm4gUG9wcGVyO1xufSgpO1xuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuXG5Qb3BwZXIuVXRpbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLlBvcHBlclV0aWxzO1xuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmNsYXNzIFNlYXJjaEJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgZGF0YVNlYXJjaCA9IGUgPT4ge1xyXG4gICAgY29uc3QgeyBkYXRhLCB1cGRhdGUgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgY29uc3QgZmlsdGVyID0gZGF0YS5maWx0ZXIodXNlciA9PiB7XHJcbiAgICAgIHJldHVybiB1c2VyLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh2YWx1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB1cGRhdGUoe1xyXG4gICAgICBkYXRhOiBmaWx0ZXIsXHJcbiAgICAgIGFjdGl2ZTogMCxcclxuICAgICAgdGVybTogdmFsdWVcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgdGVybSB9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VhcmNoLW5hbWVcIj5cclxuICAgICAgICA8aW5wdXRcclxuICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICBhcmlhLWxhYmVsPVwiU2VhcmNoXCJcclxuICAgICAgICAgIHZhbHVlPXt0ZXJtfVxyXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWFyY2ggaW4gaGVyZS4uLlwiXHJcbiAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB0aGlzLmRhdGFTZWFyY2goZSl9XHJcbiAgICAgICAgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoQmFyO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoeyBkYXRhLCBhY3RpdmVVc2VyIH0pID0+IHtcclxuICBpZiAoIWRhdGEgfHwgIWRhdGFbYWN0aXZlVXNlcl0pIHJldHVybiA8aDM+Tm90aGluZyB3YXMgZm91bmQuLi48L2gzPjtcclxuXHJcbiAgY29uc3QgdXNlciA9IGRhdGFbYWN0aXZlVXNlcl07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInRodW1ibmFpbCBwb3NpdGlvbi1maXhlZCBtdC01XCI+XHJcbiAgICAgIDxpbWcgY2xhc3NOYW1lPVwiY2FyZC1pbWctdG9wXCIgc3JjPXtgaW1hZ2VzLyR7dXNlci5pbWFnZX0uc3ZnYH0gYWx0PXt1c2VyLmltYWdlfSAvPlxyXG5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aHVtYm5haWwtY2FwdGlvblwiPlxyXG4gICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ1c2VyLWluZm8gdGFibGUgdGFibGUtcmVzcG9uc2l2ZVwiPlxyXG4gICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgPHRkPk5hbWU6IDwvdGQ+XHJcbiAgICAgICAgICAgICAgPHRkPnt1c2VyLm5hbWV9PC90ZD5cclxuICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgIDx0ZD5BZ2U6PC90ZD5cclxuICAgICAgICAgICAgICA8dGQ+e3VzZXIuYWdlfTwvdGQ+XHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICA8dGQ+RmF2b3VyaXRlIGFuaW1hbDo8L3RkPlxyXG4gICAgICAgICAgICAgIDx0ZD57dXNlci5pbWFnZX08L3RkPlxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgPHRkPlBob25lOiA8L3RkPlxyXG4gICAgICAgICAgICAgIDx0ZD57dXNlci5waG9uZX08L3RkPlxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICA8L3RhYmxlPlxyXG5cclxuICAgICAgICA8ZGl2ID5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIlwiPjxiPlBocmF6ZTo8L2I+PC9zcGFuPlxyXG4gICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICA8YmxvY2txdW90ZSBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlciBtdC00XCI+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXF1b3RlLWxlZnQgbXItMiBhbGlnbi10b3BcIlxyXG4gICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAge3VzZXIucGhyYXNlfVxyXG4gICAgICAgICAgICA8aHIgLz5cclxuICAgICAgICAgIDwvYmxvY2txdW90ZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCAoeyB1c2VyLCB1cGRhdGUsIGluZGV4LCBkYXRhIH0pID0+IHtcclxuICBjb25zdCB7IGltYWdlLCBuYW1lLCBhZ2UsIHBob25lIH0gPSB1c2VyO1xyXG5cclxuICBjb25zdCBoYW5kbGVEZWxldGVVc2VyID0gZSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCBuYW1lID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICBjb25zdCB1c2VyID0gZGF0YS5maW5kKHUgPT4ge1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuICAgICAgcmV0dXJuIHUuTmFtZSA9PSBuYW1lO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBuZXdEYXRhID0gZGF0YTtcclxuICAgIG5ld0RhdGEuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIGRlbGV0ZVVzZXIoYCR7YmFzZVVybH0vYXBpL3VzZXJzLyR7aW5kZXggKyAxfWAsIHVzZXIpXHJcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3VsdCAhPSB1bmRlZmluZWQgfHwgcmVzdWx0ICE9IG51bGwpIHtcclxuICAgICAgICAgIHVwZGF0ZSh7XHJcbiAgICAgICAgICAgIGRhdGE6IG5ld0RhdGFcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoXCJFcnJvcjpcIiwgZXJyb3IpKVxyXG4gICAgICAudGhlbihyZXNwb25zZSA9PiBjb25zb2xlLmxvZyhcIlN1Y2Nlc3M6XCIsIHJlc3BvbnNlKSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDx0ciBvbkNsaWNrPXsoKSA9PiB1cGRhdGUoeyBhY3RpdmU6IGluZGV4IH0pfT5cclxuICAgICAgPHRkIGNsYXNzTmFtZT1cImltYWdlLXZhbHVlXCI+XHJcbiAgICAgICAgPGltZyBzcmM9e2BpbWFnZXMvJHtpbWFnZX0uc3ZnYH0gYWx0PXtpbWFnZX0gY2xhc3NOYW1lPVwidXNlci1pbWFnZVwiIC8+XHJcbiAgICAgIDwvdGQ+XHJcbiAgICAgIDx0ZCBjbGFzc05hbWU9XCJuYW1lLXZhbHVlXCI+XHJcbiAgICAgICAgPGg0PntuYW1lfTwvaDQ+XHJcbiAgICAgIDwvdGQ+XHJcbiAgICAgIDx0ZCBjbGFzc05hbWU9XCJhZ2UtdmFsdWVcIj57YWdlfTwvdGQ+XHJcbiAgICAgIDx0ZCBjbGFzc05hbWU9XCJwaG9uZS12YWx1ZVwiPjgge3Bob25lfTwvdGQ+XHJcbiAgICAgIDx0ZD5cclxuICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICB2YWx1ZT17bmFtZX1cclxuICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZ1wiXHJcbiAgICAgICAgICBvbkNsaWNrPXtlID0+IGhhbmRsZURlbGV0ZVVzZXIoZSl9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgRGVsZXRlXHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgIDwvdGQ+XHJcbiAgICA8L3RyPlxyXG4gICk7XHJcbn07XHJcblxyXG5cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgVXNlckRhdGEgZnJvbSBcIi4vdXNlckRhdGFcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGRhdGEsIHVwZGF0ZSB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBpZiAoIWRhdGEpIHJldHVybiA8ZGl2PkxvYWRpbmcuLi48L2Rpdj47XHJcblxyXG4gICAgY29uc3QgdXNlcnMgPSBkYXRhLm1hcCgodXNlciwgaW5kZXgpID0+IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8VXNlckRhdGFcclxuICAgICAgICAgIHVzZXI9e3VzZXJ9XHJcbiAgICAgICAgICBpbmRleD17aW5kZXh9XHJcbiAgICAgICAgICBkYXRhPXtkYXRhfVxyXG4gICAgICAgICAga2V5PXtgdXNlciAtICR7aW5kZXh9YH1cclxuICAgICAgICAgIHVwZGF0ZT17dXBkYXRlfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8dGFibGUgY2xhc3NOYW1lPVwidXNlci1saXN0IHRhYmxlIHRhYmxlLXN0cmlwZWQgbXItMlwiPlxyXG4gICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgPHRoPkltYWdlPC90aD5cclxuICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxyXG4gICAgICAgICAgICA8dGg+QWdlPC90aD5cclxuICAgICAgICAgICAgPHRoPlBob25lPC90aD5cclxuICAgICAgICAgICAgPHRoPjwvdGg+XHJcbiAgICAgICAgICA8L3RyPlxyXG4gICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgPHRib2R5Pnt1c2Vyc308L3Rib2R5PlxyXG4gICAgICA8L3RhYmxlPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuY29uc3QgVG9vbGJhciA9ICh7IHVwZGF0ZSwgZGF0YSwgaW5pdGlsRGF0YSwgaXNTb3J0ZWQgfSkgPT4ge1xyXG4gIGZ1bmN0aW9uIHNvcnQodHlwZSkge1xyXG4gICAgY29uc3QgaXNzb3J0ZWQgPSBpc1NvcnRlZFt0eXBlXTtcclxuXHJcbiAgICBsZXQgZGlyZWN0aW9uID0gaXNzb3J0ZWQgPyAxIDogLTE7XHJcblxyXG4gICAgbGV0IHNvcnRlZCA9IGRhdGEuc2xpY2UoKS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIGlmIChhW3R5cGVdID09PSBiW3R5cGVdKSByZXR1cm4gMDtcclxuICAgICAgcmV0dXJuIGFbdHlwZV0gPiBiW3R5cGVdID8gZGlyZWN0aW9uIDogZGlyZWN0aW9uICogLTE7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodHlwZSA9PT0gXCJuYW1lXCIpIHtcclxuICAgICAgY29uc3QgbmV3U29ydGVkID0gT2JqZWN0LmFzc2lnbihcclxuICAgICAgICB7fSxcclxuICAgICAgICB7IG5hbWU6ICFpc1NvcnRlZFtcIm5hbWVcIl0sIGFnZTogaXNTb3J0ZWRbXCJhZ2VcIl0gfVxyXG4gICAgICApO1xyXG4gICAgICB1cGRhdGUoe1xyXG4gICAgICAgIGFjdGl2ZVVzZXI6IDAsXHJcbiAgICAgICAgZGF0YTogc29ydGVkLFxyXG4gICAgICAgIGlzU29ydGVkOiBuZXdTb3J0ZWRcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09IFwiYWdlXCIpIHtcclxuICAgICAgY29uc3QgbmV3U29ydGVkID0gT2JqZWN0LmFzc2lnbihcclxuICAgICAgICB7fSxcclxuICAgICAgICB7IG5hbWU6IGlzU29ydGVkW1wibmFtZVwiXSwgYWdlOiAhaXNTb3J0ZWRbXCJhZ2VcIl0gfVxyXG4gICAgICApO1xyXG4gICAgICB1cGRhdGUoe1xyXG4gICAgICAgIGFjdGl2ZVVzZXI6IDAsXHJcbiAgICAgICAgZGF0YTogc29ydGVkLFxyXG4gICAgICAgIGlzU29ydGVkOiBuZXdTb3J0ZWRcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXItZmx1aWRcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgcGwtMyBtdC00IHNvcnRlZC1idXR0b25zXCI+XHJcbiAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0IHRleHQtdXBwZXJjYXNlIG1iLTIgc29ydC1idXR0b24tbmFtZVwiXHJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgIHNvcnQoXCJuYW1lXCIpO1xyXG4gICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8aVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9e1xyXG4gICAgICAgICAgICAgIGlzU29ydGVkLm5hbWUgPyBcImZhIGZhLXNvcnQtYWxwaGEtZGVzY1wiIDogXCJmYSBmYS1zb3J0LWFscGhhLWFzY1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICBTb3J0IE5hbWVzXHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0IG1yLTIgdGV4dC11cHBlcmNhc2Ugc29ydC1idXR0b24tYWdlXCJcclxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgc29ydChcImFnZVwiKTtcclxuICAgICAgICAgIH19XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGlcclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICAgICAgICBpc1NvcnRlZC5hZ2VcclxuICAgICAgICAgICAgICAgID8gXCJmYSBmYS1zb3J0LW51bWVyaWMtZGVzY1wiXHJcbiAgICAgICAgICAgICAgICA6IFwiZmEgZmEtc29ydC1udW1lcmljLWFzY1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICBTb3J0IEFnZXNcclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9vbGJhcjtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCI7XHJcblxyXG5pbXBvcnQgc2F2ZSBmcm9tIFwiLi4vYWN0aW9ucy9zYXZlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBZGRVc2VyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG5cclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIG5hbWU6IFwiXCIsXHJcbiAgICAgIGFnZTogMCxcclxuICAgICAgaW1hZ2U6IFwiXCIsXHJcbiAgICAgIHBob25lOiBcIlwiLFxyXG4gICAgICBwaHJhc2U6IFwiXCJcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5oYW5kbGVTdWJtaXQgPSB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbkhhbmRsZUNoYW5nZU5hbWUgPSB0aGlzLm9uSGFuZGxlQ2hhbmdlTmFtZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbkhhbmRsZUNoYW5nZUFnZSA9IHRoaXMub25IYW5kbGVDaGFuZ2VBZ2UuYmluZCh0aGlzKTtcclxuICAgIHRoaXMub25IYW5kbGVDaGFuZ2VJbWFnZSA9IHRoaXMub25IYW5kbGVDaGFuZ2VJbWFnZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbkhhbmRsZUNoYW5nZVBob25lID0gdGhpcy5vbkhhbmRsZUNoYW5nZVBob25lLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLm9uSGFuZGxlQ2hhbmdlUGhyYXNlID0gdGhpcy5vbkhhbmRsZUNoYW5nZVBocmFzZS5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAkKHRoaXMubW9kYWwpLm1vZGFsKFwic2hvd1wiKTtcclxuICAgICQodGhpcy5tb2RhbCkub24oXCJoaWRkZW4uYnMubW9kYWxcIiwgdGhpcy5wcm9wcy5vbkNsaWNrKTtcclxuICB9XHJcblxyXG4gIHNhdmVVc2VyKGJhc2VVcmwsIGZvcm1EYXRhKSB7XHJcbiAgICBjb25zdCB7IHVwZGF0ZSwgZGF0YSB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBpZiAoIWJhc2VVcmwgJiYgIWZvcm1EYXRhKSByZXR1cm47XHJcblxyXG4gICAgc2F2ZShiYXNlVXJsLCBmb3JtRGF0YSlcclxuICAgICAgLnRoZW4odXNlciA9PiB7XHJcbiAgICAgICAgdXBkYXRlKHtcclxuICAgICAgICAgIGRhdGE6IFsuLi5kYXRhLCB1c2VyXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihcIkVycm9yOlwiLCBlcnJvcikpXHJcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IGNvbnNvbGUubG9nKFwiU3VjY2VzczpcIiwgcmVzcG9uc2UpKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVN1Ym1pdChlKSB7XHJcbiAgICBjb25zdCB7IGJhc2VVcmwgfSA9IHRoaXMucHJvcHM7XHJcblxyXG4gICAgaWYgKCFiYXNlVXJsKSByZXR1cm47XHJcblxyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgZm9ybSA9IHtcclxuICAgICAgbmFtZTogdGhpcy5zdGF0ZS5uYW1lLFxyXG4gICAgICBhZ2U6IHRoaXMuc3RhdGUuYWdlLFxyXG4gICAgICBwaG9uZTogdGhpcy5zdGF0ZS5waG9uZSxcclxuICAgICAgcGhyYXNlOiB0aGlzLnN0YXRlLnBocmFzZSxcclxuICAgICAgaW1hZ2U6IHRoaXMuc3RhdGUuaW1hZ2VcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zYXZlVXNlcihgJHtiYXNlVXJsfS9hcGkvdXNlcnNgLCBmb3JtKTtcclxuICAgICQodGhpcy5tb2RhbCkubW9kYWwoXCJoaWRlXCIpO1xyXG4gIH1cclxuXHJcbiAgb25IYW5kbGVDaGFuZ2VOYW1lKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IG5hbWUgPSBlLnRhcmdldC52YWx1ZTtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBuYW1lXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG9uSGFuZGxlQ2hhbmdlQWdlKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGFnZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGFnZVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBvbkhhbmRsZUNoYW5nZUltYWdlKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGltYWdlID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgaW1hZ2VcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgb25IYW5kbGVDaGFuZ2VQaG9uZShlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCBwaG9uZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHBob25lXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG9uSGFuZGxlQ2hhbmdlUGhyYXNlKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IHBocmFzZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHBocmFzZVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2XHJcbiAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwgZmFkZSB1c2VyLWFkZC1mb3JtXCJcclxuICAgICAgICByZWY9e21vZGFsID0+ICh0aGlzLm1vZGFsID0gbW9kYWwpfVxyXG4gICAgICAgIGlkPVwiTW9kYWxcIlxyXG4gICAgICAgIHRhYkluZGV4PVwiLTFcIlxyXG4gICAgICAgIHJvbGU9XCJkaWFsb2dcIlxyXG4gICAgICAgIGFyaWEtbGFiZWxsZWRieT1cImV4YW1wbGVNb2RhbExhYmVsXCJcclxuICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxyXG4gICAgICA+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1kaWFsb2dcIiByb2xlPVwiZG9jdW1lbnRcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtY29udGVudFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJtb2RhbC10aXRsZSBmb3JtLXRpdGxlXCI+VXNlciBpbmZvcm1hdGlvbjwvaDQ+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjbG9zZSBtbC0wXCJcclxuICAgICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCJcclxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJDbG9zZVwiXHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtYm9keVwiPlxyXG4gICAgICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0gaWQ9XCJmb3JtTW9kYWxcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInJlY2lwaWVudC1uYW1lXCIgY2xhc3NOYW1lPVwiY29sLWZvcm0tbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICBOYW1lOlxyXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uSGFuZGxlQ2hhbmdlTmFtZX1cclxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwiTmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJyZWNpcGllbnQtbmFtZVwiXHJcbiAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInJlY2lwaWVudC1hZ2VcIiBjbGFzc05hbWU9XCJjb2wtZm9ybS1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIEFnZTpcclxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuYWdlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uSGFuZGxlQ2hhbmdlQWdlfVxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU9XCJBZ2VcIlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxyXG4gICAgICAgICAgICAgICAgICAgIGlkPVwicmVjaXBpZW50LWFnZVwiXHJcbiAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInJlY2lwaWVudC1hbmltYWxcIiBjbGFzc05hbWU9XCJjb2wtZm9ybS1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIEZhdm91cml0ZSBhbmltYWw6XHJcbiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmltYWdlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uSGFuZGxlQ2hhbmdlSW1hZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cIkltYWdlXCJcclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgICAgICAgICBpZD1cInJlY2lwaWVudC1hbmltYWxcIlxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJyZWNpcGllbnQtcGhvbmVcIiBjbGFzc05hbWU9XCJjb2wtZm9ybS1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIFBob25lOlxyXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5waG9uZX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkhhbmRsZUNoYW5nZVBob25lfVxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU9XCJQaG9uZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJyZWNpcGllbnQtcGhvbmVcIlxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJtZXNzYWdlLXBocmFzZVwiIGNsYXNzTmFtZT1cImNvbC1mb3JtLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgUGhyYXNlOlxyXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICA8dGV4dGFyZWFcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5waHJhc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25IYW5kbGVDaGFuZ2VQaHJhc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cIlBocmFzZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgICAgICAgICBpZD1cIm1lc3NhZ2UtcGhyYXNlXCJcclxuICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZm9ybT5cclxuXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1mb290ZXJcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tZGVmYXVsdFwiXHJcbiAgICAgICAgICAgICAgICAgIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCJcclxuICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5jbG9zZUFkZEZvcm19XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIENsb3NlXHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17dGhpcy5oYW5kbGVTdWJtaXR9PlxyXG4gICAgICAgICAgICAgICAgICBTdWJtaXRcclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNhdmUodXJsLCBkYXRhKSB7XHJcbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgICBjYWNoZTogJ2NhY2hlJyxcclxuICAgICAgICBtb2RlOiAnY29ycycsXHJcbiAgICAgICAgcmVkaXJlY3Q6ICdmb2xsb3cnLFxyXG4gICAgICAgIHJlZmVycmVyOiAnY2xpZW50J1xyXG4gICAgfSkudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgIC5jYXRjaChlcnJvciA9PiBuZXcgRXJyb3IoXCJTb21ldGhpbmcgaGFzIGdvbmUgd3JvbmcsIHRoZSBkYXRhIGhhcyBub3QgYmVpbmcgYWRkZWRcIikpO1xyXG59OyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBTZWFyY2hCYXIgZnJvbSBcIi4vc2VhcmNoQmFyXCI7XHJcbmltcG9ydCBBY3RpdmVVc2VyIGZyb20gXCIuL2FjdGl2ZVVzZXJcIjtcclxuaW1wb3J0IFVzZXJMaXN0IGZyb20gXCIuL3VzZXJMaXN0XCI7XHJcbmltcG9ydCBUb29sQmFyIGZyb20gXCIuL3Rvb2xCYXJcIjtcclxuaW1wb3J0IEFkZFVzZXIgZnJvbSBcIi4vYWRkVXNlclwiO1xyXG5cclxuaW1wb3J0IGxvYWQgZnJvbSBcIi4uL2FjdGlvbnMvbG9hZFwiO1xyXG5cclxuY29uc3QgYmFzZVVybCA9IG51bGw7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgZGF0YTogbnVsbCxcclxuICAgICAgYWN0aXZlVXNlcjogMCxcclxuICAgICAgdGVybTogXCJcIixcclxuICAgICAgaXNTb3J0ZWQ6IHsgbmFtZTogdHJ1ZSwgYWdlOiB0cnVlIH0sXHJcbiAgICAgIHNob3dBZGRVc2VyOiBmYWxzZVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNob3dBZGRGb3JtID0gdGhpcy5zaG93QWRkRm9ybS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5jbG9zZUFkZEZvcm0gPSB0aGlzLmNsb3NlQWRkRm9ybS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy51cGRhdGVEYXRhID0gdGhpcy51cGRhdGVEYXRhLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBsb2FkRGF0YSgpIHtcclxuICAgIGNvbnN0IHsgZGF0YSB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBsb2FkKGRhdGEpXHJcbiAgICAgIC50aGVuKHVzZXJzID0+IHtcclxuICAgICAgICB0aGlzLmluaXRpYWxEYXRhID0gSlNPTi5wYXJzZSh1c2Vycyk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBkYXRhOiB0aGlzLmluaXRpYWxEYXRhXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLmxvYWREYXRhKCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVEYXRhKHN0YXRlKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcclxuICB9XHJcblxyXG4gIHNob3dBZGRGb3JtKCkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHNob3dBZGRVc2VyOiAhdGhpcy5zdGF0ZS5zaG93QWRkVXNlclxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZUFkZEZvcm0oKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgc2hvd0FkZFVzZXI6ICF0aGlzLnN0YXRlLnNob3dBZGRVc2VyXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgYWN0aXZlVXNlciwgdGVybSwgZGF0YSwgaXNTb3J0ZWQsIHNob3dBZGRVc2VyIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhcHAgY29udGFpbmVyLWZsdWlkXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgbXQtNFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTJcIj5cclxuICAgICAgICAgICAgPFNlYXJjaEJhclxyXG4gICAgICAgICAgICAgIHRlcm09e3Rlcm19XHJcbiAgICAgICAgICAgICAgZGF0YT17dGhpcy5pbml0aWFsRGF0YX1cclxuICAgICAgICAgICAgICB1cGRhdGU9e3RoaXMudXBkYXRlRGF0YX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IG10LTIgbWItMlwiPlxyXG4gICAgICAgICAgPFRvb2xCYXJcclxuICAgICAgICAgICAgdXBkYXRlPXt0aGlzLnVwZGF0ZURhdGF9XHJcbiAgICAgICAgICAgIGRhdGE9e2RhdGF9XHJcbiAgICAgICAgICAgIGlzU29ydGVkPXtpc1NvcnRlZH1cclxuICAgICAgICAgICAgaW5pdGlhbERhdGE9e3RoaXMuaW5pdGlhbERhdGF9XHJcbiAgICAgICAgICAgIGFjdGl2ZVVzZXI9e2FjdGl2ZVVzZXJ9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1kZWZhdWx0IG1sLTMgdGV4dC11cHBlcmNhc2UgYWRkLW5ldy11c2VyIGdsb2JhbC1idXR0b25zXCJcclxuICAgICAgICAgICAgb25DbGljaz17dGhpcy5zaG93QWRkRm9ybX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgQWRkIG5ldyB1c2VyXHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyB1c2VyLWxpc3QtZGF0YVwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMTIgY29sLXNtLTggY29sLW1kLTkgY29sLWxnLTEwIHVzZXItbGlzdFwiPlxyXG4gICAgICAgICAgICA8VXNlckxpc3QgZGF0YT17ZGF0YX0gdXBkYXRlPXt0aGlzLnVwZGF0ZURhdGF9IC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLXNtLTQgY29sLW1kLTMgY29sLWxnLTIgYWN0aXZlLXVzZXJcIj5cclxuICAgICAgICAgICAgPEFjdGl2ZVVzZXIgYWN0aXZlVXNlcj17YWN0aXZlVXNlcn0gZGF0YT17ZGF0YX0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAge3Nob3dBZGRVc2VyID8gKFxyXG4gICAgICAgICAgICA8QWRkVXNlclxyXG4gICAgICAgICAgICAgIHVwZGF0ZT17dGhpcy51cGRhdGVEYXRhfVxyXG4gICAgICAgICAgICAgIHNob3dBZGRVc2VyPXtzaG93QWRkVXNlcn1cclxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmNsb3NlQWRkRm9ybX1cclxuICAgICAgICAgICAgICBkYXRhPXtkYXRhfVxyXG4gICAgICAgICAgICAgIGJhc2VVcmw9e2Jhc2VVcmx9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICApIDogbnVsbH1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCB1cmwgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgcmVxdWVzdC5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xyXG5cclxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlcXVlc3Quc3RhdHVzID49MjAwICYmIHJlcXVlc3Quc3RhdHVzIDwgNDAwXHJcbiAgICAgICAgICAgID8gcmVzb2x2ZShyZXF1ZXN0LnJlc3BvbnNlVGV4dClcclxuICAgICAgICAgICAgOiByZWplY3QobmV3IEVycm9yKClgUmVhdWVzdCBmYWlsZWQ6ICR7cmVxdWVzdC5zdGF0dXNUZXh0fWApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4ge1xyXG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdOZXR3b3JrIGVycm9yJykpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXF1ZXN0LnNlbmQoKTtcclxuICAgIH0pO1xyXG59OyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IEFwcCBmcm9tIFwiLi9jb21wb25lbnRzL2FwcFwiO1xyXG5cclxuaW1wb3J0IFwianF1ZXJ5XCI7XHJcbmltcG9ydCBcImJvb3RzdHJhcFwiO1xyXG5cclxuUmVhY3RET00ucmVuZGVyKDxBcHAgZGF0YT1cIi4uL2RhdGEuanNvblwiIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikpO1xyXG5cclxuaWYgKG1vZHVsZS5ob3QpIG1vZHVsZS5ob3QuYWNjZXB0KCk7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=